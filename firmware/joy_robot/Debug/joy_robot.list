
joy_robot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000188ec  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e80  08018ad0  08018ad0  00019ad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019950  08019950  0001b234  2**0
                  CONTENTS
  4 .ARM          00000008  08019950  08019950  0001a950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019958  08019958  0001b234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08019958  08019958  0001a958  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08019960  08019960  0001a960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000234  20000000  08019964  0001b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000b268  20000238  08019b98  0001b238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  2000b4a0  08019b98  0001b4a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001b234  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027db6  00000000  00000000  0001b264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000057fa  00000000  00000000  0004301a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002008  00000000  00000000  00048818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001890  00000000  00000000  0004a820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002f7a8  00000000  00000000  0004c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000282a6  00000000  00000000  0007b858  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00129dfe  00000000  00000000  000a3afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000076  00000000  00000000  001cd8fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000094e4  00000000  00000000  001cd974  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  001d6e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000238 	.word	0x20000238
 80001fc:	00000000 	.word	0x00000000
 8000200:	08018ab4 	.word	0x08018ab4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000023c 	.word	0x2000023c
 800021c:	08018ab4 	.word	0x08018ab4

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	@ 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__aeabi_ldivmod>:
 8000a8c:	b97b      	cbnz	r3, 8000aae <__aeabi_ldivmod+0x22>
 8000a8e:	b972      	cbnz	r2, 8000aae <__aeabi_ldivmod+0x22>
 8000a90:	2900      	cmp	r1, #0
 8000a92:	bfbe      	ittt	lt
 8000a94:	2000      	movlt	r0, #0
 8000a96:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000a9a:	e006      	blt.n	8000aaa <__aeabi_ldivmod+0x1e>
 8000a9c:	bf08      	it	eq
 8000a9e:	2800      	cmpeq	r0, #0
 8000aa0:	bf1c      	itt	ne
 8000aa2:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000aa6:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000aaa:	f000 b9b5 	b.w	8000e18 <__aeabi_idiv0>
 8000aae:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab6:	2900      	cmp	r1, #0
 8000ab8:	db09      	blt.n	8000ace <__aeabi_ldivmod+0x42>
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db1a      	blt.n	8000af4 <__aeabi_ldivmod+0x68>
 8000abe:	f000 f84d 	bl	8000b5c <__udivmoddi4>
 8000ac2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ac6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aca:	b004      	add	sp, #16
 8000acc:	4770      	bx	lr
 8000ace:	4240      	negs	r0, r0
 8000ad0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db1b      	blt.n	8000b10 <__aeabi_ldivmod+0x84>
 8000ad8:	f000 f840 	bl	8000b5c <__udivmoddi4>
 8000adc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae4:	b004      	add	sp, #16
 8000ae6:	4240      	negs	r0, r0
 8000ae8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000aec:	4252      	negs	r2, r2
 8000aee:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000af2:	4770      	bx	lr
 8000af4:	4252      	negs	r2, r2
 8000af6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000afa:	f000 f82f 	bl	8000b5c <__udivmoddi4>
 8000afe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b06:	b004      	add	sp, #16
 8000b08:	4240      	negs	r0, r0
 8000b0a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0e:	4770      	bx	lr
 8000b10:	4252      	negs	r2, r2
 8000b12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b16:	f000 f821 	bl	8000b5c <__udivmoddi4>
 8000b1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b22:	b004      	add	sp, #16
 8000b24:	4252      	negs	r2, r2
 8000b26:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_uldivmod>:
 8000b2c:	b953      	cbnz	r3, 8000b44 <__aeabi_uldivmod+0x18>
 8000b2e:	b94a      	cbnz	r2, 8000b44 <__aeabi_uldivmod+0x18>
 8000b30:	2900      	cmp	r1, #0
 8000b32:	bf08      	it	eq
 8000b34:	2800      	cmpeq	r0, #0
 8000b36:	bf1c      	itt	ne
 8000b38:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000b3c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000b40:	f000 b96a 	b.w	8000e18 <__aeabi_idiv0>
 8000b44:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b48:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b4c:	f000 f806 	bl	8000b5c <__udivmoddi4>
 8000b50:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b54:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b58:	b004      	add	sp, #16
 8000b5a:	4770      	bx	lr

08000b5c <__udivmoddi4>:
 8000b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b60:	9d08      	ldr	r5, [sp, #32]
 8000b62:	460c      	mov	r4, r1
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d14e      	bne.n	8000c06 <__udivmoddi4+0xaa>
 8000b68:	4694      	mov	ip, r2
 8000b6a:	458c      	cmp	ip, r1
 8000b6c:	4686      	mov	lr, r0
 8000b6e:	fab2 f282 	clz	r2, r2
 8000b72:	d962      	bls.n	8000c3a <__udivmoddi4+0xde>
 8000b74:	b14a      	cbz	r2, 8000b8a <__udivmoddi4+0x2e>
 8000b76:	f1c2 0320 	rsb	r3, r2, #32
 8000b7a:	4091      	lsls	r1, r2
 8000b7c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b80:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b84:	4319      	orrs	r1, r3
 8000b86:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b8a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b8e:	fa1f f68c 	uxth.w	r6, ip
 8000b92:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b96:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b9a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b9e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ba2:	fb04 f106 	mul.w	r1, r4, r6
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	d90a      	bls.n	8000bc0 <__udivmoddi4+0x64>
 8000baa:	eb1c 0303 	adds.w	r3, ip, r3
 8000bae:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000bb2:	f080 8112 	bcs.w	8000dda <__udivmoddi4+0x27e>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 810f 	bls.w	8000dda <__udivmoddi4+0x27e>
 8000bbc:	3c02      	subs	r4, #2
 8000bbe:	4463      	add	r3, ip
 8000bc0:	1a59      	subs	r1, r3, r1
 8000bc2:	fa1f f38e 	uxth.w	r3, lr
 8000bc6:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bca:	fb07 1110 	mls	r1, r7, r0, r1
 8000bce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bd2:	fb00 f606 	mul.w	r6, r0, r6
 8000bd6:	429e      	cmp	r6, r3
 8000bd8:	d90a      	bls.n	8000bf0 <__udivmoddi4+0x94>
 8000bda:	eb1c 0303 	adds.w	r3, ip, r3
 8000bde:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000be2:	f080 80fc 	bcs.w	8000dde <__udivmoddi4+0x282>
 8000be6:	429e      	cmp	r6, r3
 8000be8:	f240 80f9 	bls.w	8000dde <__udivmoddi4+0x282>
 8000bec:	4463      	add	r3, ip
 8000bee:	3802      	subs	r0, #2
 8000bf0:	1b9b      	subs	r3, r3, r6
 8000bf2:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000bf6:	2100      	movs	r1, #0
 8000bf8:	b11d      	cbz	r5, 8000c02 <__udivmoddi4+0xa6>
 8000bfa:	40d3      	lsrs	r3, r2
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	e9c5 3200 	strd	r3, r2, [r5]
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d905      	bls.n	8000c16 <__udivmoddi4+0xba>
 8000c0a:	b10d      	cbz	r5, 8000c10 <__udivmoddi4+0xb4>
 8000c0c:	e9c5 0100 	strd	r0, r1, [r5]
 8000c10:	2100      	movs	r1, #0
 8000c12:	4608      	mov	r0, r1
 8000c14:	e7f5      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c16:	fab3 f183 	clz	r1, r3
 8000c1a:	2900      	cmp	r1, #0
 8000c1c:	d146      	bne.n	8000cac <__udivmoddi4+0x150>
 8000c1e:	42a3      	cmp	r3, r4
 8000c20:	d302      	bcc.n	8000c28 <__udivmoddi4+0xcc>
 8000c22:	4290      	cmp	r0, r2
 8000c24:	f0c0 80f0 	bcc.w	8000e08 <__udivmoddi4+0x2ac>
 8000c28:	1a86      	subs	r6, r0, r2
 8000c2a:	eb64 0303 	sbc.w	r3, r4, r3
 8000c2e:	2001      	movs	r0, #1
 8000c30:	2d00      	cmp	r5, #0
 8000c32:	d0e6      	beq.n	8000c02 <__udivmoddi4+0xa6>
 8000c34:	e9c5 6300 	strd	r6, r3, [r5]
 8000c38:	e7e3      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000c3a:	2a00      	cmp	r2, #0
 8000c3c:	f040 8090 	bne.w	8000d60 <__udivmoddi4+0x204>
 8000c40:	eba1 040c 	sub.w	r4, r1, ip
 8000c44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c48:	fa1f f78c 	uxth.w	r7, ip
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000c52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000c56:	fb08 4416 	mls	r4, r8, r6, r4
 8000c5a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c5e:	fb07 f006 	mul.w	r0, r7, r6
 8000c62:	4298      	cmp	r0, r3
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x11c>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x11a>
 8000c70:	4298      	cmp	r0, r3
 8000c72:	f200 80cd 	bhi.w	8000e10 <__udivmoddi4+0x2b4>
 8000c76:	4626      	mov	r6, r4
 8000c78:	1a1c      	subs	r4, r3, r0
 8000c7a:	fa1f f38e 	uxth.w	r3, lr
 8000c7e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c82:	fb08 4410 	mls	r4, r8, r0, r4
 8000c86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c8a:	fb00 f707 	mul.w	r7, r0, r7
 8000c8e:	429f      	cmp	r7, r3
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x148>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c9a:	d202      	bcs.n	8000ca2 <__udivmoddi4+0x146>
 8000c9c:	429f      	cmp	r7, r3
 8000c9e:	f200 80b0 	bhi.w	8000e02 <__udivmoddi4+0x2a6>
 8000ca2:	4620      	mov	r0, r4
 8000ca4:	1bdb      	subs	r3, r3, r7
 8000ca6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000caa:	e7a5      	b.n	8000bf8 <__udivmoddi4+0x9c>
 8000cac:	f1c1 0620 	rsb	r6, r1, #32
 8000cb0:	408b      	lsls	r3, r1
 8000cb2:	fa22 f706 	lsr.w	r7, r2, r6
 8000cb6:	431f      	orrs	r7, r3
 8000cb8:	fa20 fc06 	lsr.w	ip, r0, r6
 8000cbc:	fa04 f301 	lsl.w	r3, r4, r1
 8000cc0:	ea43 030c 	orr.w	r3, r3, ip
 8000cc4:	40f4      	lsrs	r4, r6
 8000cc6:	fa00 f801 	lsl.w	r8, r0, r1
 8000cca:	0c38      	lsrs	r0, r7, #16
 8000ccc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000cd0:	fbb4 fef0 	udiv	lr, r4, r0
 8000cd4:	fa1f fc87 	uxth.w	ip, r7
 8000cd8:	fb00 441e 	mls	r4, r0, lr, r4
 8000cdc:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ce0:	fb0e f90c 	mul.w	r9, lr, ip
 8000ce4:	45a1      	cmp	r9, r4
 8000ce6:	fa02 f201 	lsl.w	r2, r2, r1
 8000cea:	d90a      	bls.n	8000d02 <__udivmoddi4+0x1a6>
 8000cec:	193c      	adds	r4, r7, r4
 8000cee:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000cf2:	f080 8084 	bcs.w	8000dfe <__udivmoddi4+0x2a2>
 8000cf6:	45a1      	cmp	r9, r4
 8000cf8:	f240 8081 	bls.w	8000dfe <__udivmoddi4+0x2a2>
 8000cfc:	f1ae 0e02 	sub.w	lr, lr, #2
 8000d00:	443c      	add	r4, r7
 8000d02:	eba4 0409 	sub.w	r4, r4, r9
 8000d06:	fa1f f983 	uxth.w	r9, r3
 8000d0a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000d0e:	fb00 4413 	mls	r4, r0, r3, r4
 8000d12:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000d16:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d1a:	45a4      	cmp	ip, r4
 8000d1c:	d907      	bls.n	8000d2e <__udivmoddi4+0x1d2>
 8000d1e:	193c      	adds	r4, r7, r4
 8000d20:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000d24:	d267      	bcs.n	8000df6 <__udivmoddi4+0x29a>
 8000d26:	45a4      	cmp	ip, r4
 8000d28:	d965      	bls.n	8000df6 <__udivmoddi4+0x29a>
 8000d2a:	3b02      	subs	r3, #2
 8000d2c:	443c      	add	r4, r7
 8000d2e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000d32:	fba0 9302 	umull	r9, r3, r0, r2
 8000d36:	eba4 040c 	sub.w	r4, r4, ip
 8000d3a:	429c      	cmp	r4, r3
 8000d3c:	46ce      	mov	lr, r9
 8000d3e:	469c      	mov	ip, r3
 8000d40:	d351      	bcc.n	8000de6 <__udivmoddi4+0x28a>
 8000d42:	d04e      	beq.n	8000de2 <__udivmoddi4+0x286>
 8000d44:	b155      	cbz	r5, 8000d5c <__udivmoddi4+0x200>
 8000d46:	ebb8 030e 	subs.w	r3, r8, lr
 8000d4a:	eb64 040c 	sbc.w	r4, r4, ip
 8000d4e:	fa04 f606 	lsl.w	r6, r4, r6
 8000d52:	40cb      	lsrs	r3, r1
 8000d54:	431e      	orrs	r6, r3
 8000d56:	40cc      	lsrs	r4, r1
 8000d58:	e9c5 6400 	strd	r6, r4, [r5]
 8000d5c:	2100      	movs	r1, #0
 8000d5e:	e750      	b.n	8000c02 <__udivmoddi4+0xa6>
 8000d60:	f1c2 0320 	rsb	r3, r2, #32
 8000d64:	fa20 f103 	lsr.w	r1, r0, r3
 8000d68:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6c:	fa24 f303 	lsr.w	r3, r4, r3
 8000d70:	4094      	lsls	r4, r2
 8000d72:	430c      	orrs	r4, r1
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d7c:	fa1f f78c 	uxth.w	r7, ip
 8000d80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d84:	fb08 3110 	mls	r1, r8, r0, r3
 8000d88:	0c23      	lsrs	r3, r4, #16
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f107 	mul.w	r1, r0, r7
 8000d92:	4299      	cmp	r1, r3
 8000d94:	d908      	bls.n	8000da8 <__udivmoddi4+0x24c>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d9e:	d22c      	bcs.n	8000dfa <__udivmoddi4+0x29e>
 8000da0:	4299      	cmp	r1, r3
 8000da2:	d92a      	bls.n	8000dfa <__udivmoddi4+0x29e>
 8000da4:	3802      	subs	r0, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f1f8 	udiv	r1, r3, r8
 8000db0:	fb08 3311 	mls	r3, r8, r1, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb01 f307 	mul.w	r3, r1, r7
 8000dbc:	42a3      	cmp	r3, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x276>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000dc8:	d213      	bcs.n	8000df2 <__udivmoddi4+0x296>
 8000dca:	42a3      	cmp	r3, r4
 8000dcc:	d911      	bls.n	8000df2 <__udivmoddi4+0x296>
 8000dce:	3902      	subs	r1, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	1ae4      	subs	r4, r4, r3
 8000dd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000dd8:	e739      	b.n	8000c4e <__udivmoddi4+0xf2>
 8000dda:	4604      	mov	r4, r0
 8000ddc:	e6f0      	b.n	8000bc0 <__udivmoddi4+0x64>
 8000dde:	4608      	mov	r0, r1
 8000de0:	e706      	b.n	8000bf0 <__udivmoddi4+0x94>
 8000de2:	45c8      	cmp	r8, r9
 8000de4:	d2ae      	bcs.n	8000d44 <__udivmoddi4+0x1e8>
 8000de6:	ebb9 0e02 	subs.w	lr, r9, r2
 8000dea:	eb63 0c07 	sbc.w	ip, r3, r7
 8000dee:	3801      	subs	r0, #1
 8000df0:	e7a8      	b.n	8000d44 <__udivmoddi4+0x1e8>
 8000df2:	4631      	mov	r1, r6
 8000df4:	e7ed      	b.n	8000dd2 <__udivmoddi4+0x276>
 8000df6:	4603      	mov	r3, r0
 8000df8:	e799      	b.n	8000d2e <__udivmoddi4+0x1d2>
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	e7d4      	b.n	8000da8 <__udivmoddi4+0x24c>
 8000dfe:	46d6      	mov	lr, sl
 8000e00:	e77f      	b.n	8000d02 <__udivmoddi4+0x1a6>
 8000e02:	4463      	add	r3, ip
 8000e04:	3802      	subs	r0, #2
 8000e06:	e74d      	b.n	8000ca4 <__udivmoddi4+0x148>
 8000e08:	4606      	mov	r6, r0
 8000e0a:	4623      	mov	r3, r4
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	e70f      	b.n	8000c30 <__udivmoddi4+0xd4>
 8000e10:	3e02      	subs	r6, #2
 8000e12:	4463      	add	r3, ip
 8000e14:	e730      	b.n	8000c78 <__udivmoddi4+0x11c>
 8000e16:	bf00      	nop

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b088      	sub	sp, #32
 8000e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e22:	463b      	mov	r3, r7
 8000e24:	2220      	movs	r2, #32
 8000e26:	2100      	movs	r1, #0
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f016 fea5 	bl	8017b78 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000e2e:	4b32      	ldr	r3, [pc, #200]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e30:	4a32      	ldr	r2, [pc, #200]	@ (8000efc <MX_ADC2_Init+0xe0>)
 8000e32:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000e34:	4b30      	ldr	r3, [pc, #192]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8000e3a:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000e3c:	4b2e      	ldr	r3, [pc, #184]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e42:	4b2d      	ldr	r3, [pc, #180]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000e48:	4b2b      	ldr	r3, [pc, #172]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000e4e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e54:	4b28      	ldr	r3, [pc, #160]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e56:	2204      	movs	r2, #4
 8000e58:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000e5a:	4b27      	ldr	r3, [pc, #156]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000e60:	4b25      	ldr	r3, [pc, #148]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000e66:	4b24      	ldr	r3, [pc, #144]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e68:	2202      	movs	r2, #2
 8000e6a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000e6c:	4b22      	ldr	r3, [pc, #136]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e74:	4b20      	ldr	r3, [pc, #128]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000e80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000e88:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000e8e:	4b1a      	ldr	r3, [pc, #104]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000e96:	4818      	ldr	r0, [pc, #96]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000e98:	f001 fee4 	bl	8002c64 <HAL_ADC_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000ea2:	f000 ffbb 	bl	8001e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <MX_ADC2_Init+0xe4>)
 8000ea8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000eaa:	2306      	movs	r3, #6
 8000eac:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eb2:	237f      	movs	r3, #127	@ 0x7f
 8000eb4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000eb6:	2304      	movs	r3, #4
 8000eb8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000ebe:	463b      	mov	r3, r7
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480d      	ldr	r0, [pc, #52]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000ec4:	f002 f97c 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8000ece:	f000 ffa5 	bl	8001e1c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	@ (8000f04 <MX_ADC2_Init+0xe8>)
 8000ed4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000ed6:	230c      	movs	r3, #12
 8000ed8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000eda:	463b      	mov	r3, r7
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_ADC2_Init+0xdc>)
 8000ee0:	f002 f96e 	bl	80031c0 <HAL_ADC_ConfigChannel>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000eea:	f000 ff97 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000eee:	bf00      	nop
 8000ef0:	3720      	adds	r7, #32
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000254 	.word	0x20000254
 8000efc:	50000100 	.word	0x50000100
 8000f00:	0c900008 	.word	0x0c900008
 8000f04:	10c00010 	.word	0x10c00010

08000f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b09e      	sub	sp, #120	@ 0x78
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f10:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
 8000f18:	605a      	str	r2, [r3, #4]
 8000f1a:	609a      	str	r2, [r3, #8]
 8000f1c:	60da      	str	r2, [r3, #12]
 8000f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f20:	f107 0310 	add.w	r3, r7, #16
 8000f24:	2254      	movs	r2, #84	@ 0x54
 8000f26:	2100      	movs	r1, #0
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f016 fe25 	bl	8017b78 <memset>
  if(adcHandle->Instance==ADC2)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a33      	ldr	r2, [pc, #204]	@ (8001000 <HAL_ADC_MspInit+0xf8>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d15f      	bne.n	8000ff8 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000f3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000f42:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f004 fbdf 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d001      	beq.n	8000f58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000f54:	f000 ff62 	bl	8001e1c <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f58:	4b2a      	ldr	r3, [pc, #168]	@ (8001004 <HAL_ADC_MspInit+0xfc>)
 8000f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5c:	4a29      	ldr	r2, [pc, #164]	@ (8001004 <HAL_ADC_MspInit+0xfc>)
 8000f5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f64:	4b27      	ldr	r3, [pc, #156]	@ (8001004 <HAL_ADC_MspInit+0xfc>)
 8000f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f6c:	60fb      	str	r3, [r7, #12]
 8000f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f70:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <HAL_ADC_MspInit+0xfc>)
 8000f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f74:	4a23      	ldr	r2, [pc, #140]	@ (8001004 <HAL_ADC_MspInit+0xfc>)
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f7c:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <HAL_ADC_MspInit+0xfc>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	68bb      	ldr	r3, [r7, #8]
    /**ADC2 GPIO Configuration
    PA6     ------> ADC2_IN3
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f88:	23c0      	movs	r3, #192	@ 0xc0
 8000f8a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f90:	2300      	movs	r3, #0
 8000f92:	66fb      	str	r3, [r7, #108]	@ 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f94:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000f98:	4619      	mov	r1, r3
 8000f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f9e:	f003 fb85 	bl	80046ac <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel3;
 8000fa2:	4b19      	ldr	r3, [pc, #100]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fa4:	4a19      	ldr	r2, [pc, #100]	@ (800100c <HAL_ADC_MspInit+0x104>)
 8000fa6:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000fa8:	4b17      	ldr	r3, [pc, #92]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000faa:	2224      	movs	r2, #36	@ 0x24
 8000fac:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000fae:	4b16      	ldr	r3, [pc, #88]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000fba:	4b13      	ldr	r3, [pc, #76]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fbc:	2280      	movs	r2, #128	@ 0x80
 8000fbe:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000fc0:	4b11      	ldr	r3, [pc, #68]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000fc6:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000fce:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fd2:	2220      	movs	r2, #32
 8000fd4:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000fdc:	480a      	ldr	r0, [pc, #40]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000fde:	f003 f827 	bl	8004030 <HAL_DMA_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000fe8:	f000 ff18 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	4a06      	ldr	r2, [pc, #24]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000ff0:	655a      	str	r2, [r3, #84]	@ 0x54
 8000ff2:	4a05      	ldr	r2, [pc, #20]	@ (8001008 <HAL_ADC_MspInit+0x100>)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000ff8:	bf00      	nop
 8000ffa:	3778      	adds	r7, #120	@ 0x78
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	50000100 	.word	0x50000100
 8001004:	40021000 	.word	0x40021000
 8001008:	200002c0 	.word	0x200002c0
 800100c:	40020030 	.word	0x40020030

08001010 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001014:	4a04      	ldr	r2, [pc, #16]	@ (8001028 <MX_FREERTOS_Init+0x18>)
 8001016:	2100      	movs	r1, #0
 8001018:	4804      	ldr	r0, [pc, #16]	@ (800102c <MX_FREERTOS_Init+0x1c>)
 800101a:	f006 ffb7 	bl	8007f8c <osThreadNew>
 800101e:	4603      	mov	r3, r0
 8001020:	4a03      	ldr	r2, [pc, #12]	@ (8001030 <MX_FREERTOS_Init+0x20>)
 8001022:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001024:	bf00      	nop
 8001026:	bd80      	pop	{r7, pc}
 8001028:	08018c20 	.word	0x08018c20
 800102c:	08001b31 	.word	0x08001b31
 8001030:	20000320 	.word	0x20000320

08001034 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08a      	sub	sp, #40	@ 0x28
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800103c:	2300      	movs	r3, #0
 800103e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001040:	f008 f878 	bl	8009134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001044:	4b5a      	ldr	r3, [pc, #360]	@ (80011b0 <pvPortMallocMicroROS+0x17c>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d101      	bne.n	8001050 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 800104c:	f000 f986 	bl	800135c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001050:	4b58      	ldr	r3, [pc, #352]	@ (80011b4 <pvPortMallocMicroROS+0x180>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4013      	ands	r3, r2
 8001058:	2b00      	cmp	r3, #0
 800105a:	f040 8090 	bne.w	800117e <pvPortMallocMicroROS+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d01e      	beq.n	80010a2 <pvPortMallocMicroROS+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8001064:	2208      	movs	r2, #8
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	2b00      	cmp	r3, #0
 8001074:	d015      	beq.n	80010a2 <pvPortMallocMicroROS+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	f023 0307 	bic.w	r3, r3, #7
 800107c:	3308      	adds	r3, #8
 800107e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	f003 0307 	and.w	r3, r3, #7
 8001086:	2b00      	cmp	r3, #0
 8001088:	d00b      	beq.n	80010a2 <pvPortMallocMicroROS+0x6e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800108a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800108e:	f383 8811 	msr	BASEPRI, r3
 8001092:	f3bf 8f6f 	isb	sy
 8001096:	f3bf 8f4f 	dsb	sy
 800109a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800109c:	bf00      	nop
 800109e:	bf00      	nop
 80010a0:	e7fd      	b.n	800109e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d06a      	beq.n	800117e <pvPortMallocMicroROS+0x14a>
 80010a8:	4b43      	ldr	r3, [pc, #268]	@ (80011b8 <pvPortMallocMicroROS+0x184>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	687a      	ldr	r2, [r7, #4]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d865      	bhi.n	800117e <pvPortMallocMicroROS+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80010b2:	4b42      	ldr	r3, [pc, #264]	@ (80011bc <pvPortMallocMicroROS+0x188>)
 80010b4:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80010b6:	4b41      	ldr	r3, [pc, #260]	@ (80011bc <pvPortMallocMicroROS+0x188>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010bc:	e004      	b.n	80010c8 <pvPortMallocMicroROS+0x94>
				{
					pxPreviousBlock = pxBlock;
 80010be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c0:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80010c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80010c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	687a      	ldr	r2, [r7, #4]
 80010ce:	429a      	cmp	r2, r3
 80010d0:	d903      	bls.n	80010da <pvPortMallocMicroROS+0xa6>
 80010d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d1f1      	bne.n	80010be <pvPortMallocMicroROS+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80010da:	4b35      	ldr	r3, [pc, #212]	@ (80011b0 <pvPortMallocMicroROS+0x17c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d04c      	beq.n	800117e <pvPortMallocMicroROS+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80010e4:	6a3b      	ldr	r3, [r7, #32]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2208      	movs	r2, #8
 80010ea:	4413      	add	r3, r2
 80010ec:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	6a3b      	ldr	r3, [r7, #32]
 80010f4:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80010f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f8:	685a      	ldr	r2, [r3, #4]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	1ad2      	subs	r2, r2, r3
 80010fe:	2308      	movs	r3, #8
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	429a      	cmp	r2, r3
 8001104:	d920      	bls.n	8001148 <pvPortMallocMicroROS+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001106:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	4413      	add	r3, r2
 800110c:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	f003 0307 	and.w	r3, r3, #7
 8001114:	2b00      	cmp	r3, #0
 8001116:	d00b      	beq.n	8001130 <pvPortMallocMicroROS+0xfc>
	__asm volatile
 8001118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800111c:	f383 8811 	msr	BASEPRI, r3
 8001120:	f3bf 8f6f 	isb	sy
 8001124:	f3bf 8f4f 	dsb	sy
 8001128:	613b      	str	r3, [r7, #16]
}
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	e7fd      	b.n	800112c <pvPortMallocMicroROS+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8001130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	1ad2      	subs	r2, r2, r3
 8001138:	69bb      	ldr	r3, [r7, #24]
 800113a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800113c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800113e:	687a      	ldr	r2, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8001142:	69b8      	ldr	r0, [r7, #24]
 8001144:	f000 f96c 	bl	8001420 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001148:	4b1b      	ldr	r3, [pc, #108]	@ (80011b8 <pvPortMallocMicroROS+0x184>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800114e:	685b      	ldr	r3, [r3, #4]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	4a19      	ldr	r2, [pc, #100]	@ (80011b8 <pvPortMallocMicroROS+0x184>)
 8001154:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8001156:	4b18      	ldr	r3, [pc, #96]	@ (80011b8 <pvPortMallocMicroROS+0x184>)
 8001158:	681a      	ldr	r2, [r3, #0]
 800115a:	4b19      	ldr	r3, [pc, #100]	@ (80011c0 <pvPortMallocMicroROS+0x18c>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	429a      	cmp	r2, r3
 8001160:	d203      	bcs.n	800116a <pvPortMallocMicroROS+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8001162:	4b15      	ldr	r3, [pc, #84]	@ (80011b8 <pvPortMallocMicroROS+0x184>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a16      	ldr	r2, [pc, #88]	@ (80011c0 <pvPortMallocMicroROS+0x18c>)
 8001168:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800116a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800116c:	685a      	ldr	r2, [r3, #4]
 800116e:	4b11      	ldr	r3, [pc, #68]	@ (80011b4 <pvPortMallocMicroROS+0x180>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	431a      	orrs	r2, r3
 8001174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001176:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800117e:	f007 ffe7 	bl	8009150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	f003 0307 	and.w	r3, r3, #7
 8001188:	2b00      	cmp	r3, #0
 800118a:	d00b      	beq.n	80011a4 <pvPortMallocMicroROS+0x170>
	__asm volatile
 800118c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001190:	f383 8811 	msr	BASEPRI, r3
 8001194:	f3bf 8f6f 	isb	sy
 8001198:	f3bf 8f4f 	dsb	sy
 800119c:	60fb      	str	r3, [r7, #12]
}
 800119e:	bf00      	nop
 80011a0:	bf00      	nop
 80011a2:	e7fd      	b.n	80011a0 <pvPortMallocMicroROS+0x16c>
	return pvReturn;
 80011a4:	69fb      	ldr	r3, [r7, #28]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20003e68 	.word	0x20003e68
 80011b4:	20003e74 	.word	0x20003e74
 80011b8:	20003e6c 	.word	0x20003e6c
 80011bc:	20003e60 	.word	0x20003e60
 80011c0:	20003e70 	.word	0x20003e70

080011c4 <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b086      	sub	sp, #24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d04a      	beq.n	800126c <vPortFreeMicroROS+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80011d6:	2308      	movs	r3, #8
 80011d8:	425b      	negs	r3, r3
 80011da:	697a      	ldr	r2, [r7, #20]
 80011dc:	4413      	add	r3, r2
 80011de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	685a      	ldr	r2, [r3, #4]
 80011e8:	4b22      	ldr	r3, [pc, #136]	@ (8001274 <vPortFreeMicroROS+0xb0>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4013      	ands	r3, r2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10b      	bne.n	800120a <vPortFreeMicroROS+0x46>
	__asm volatile
 80011f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80011f6:	f383 8811 	msr	BASEPRI, r3
 80011fa:	f3bf 8f6f 	isb	sy
 80011fe:	f3bf 8f4f 	dsb	sy
 8001202:	60fb      	str	r3, [r7, #12]
}
 8001204:	bf00      	nop
 8001206:	bf00      	nop
 8001208:	e7fd      	b.n	8001206 <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800120a:	693b      	ldr	r3, [r7, #16]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d00b      	beq.n	800122a <vPortFreeMicroROS+0x66>
	__asm volatile
 8001212:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001216:	f383 8811 	msr	BASEPRI, r3
 800121a:	f3bf 8f6f 	isb	sy
 800121e:	f3bf 8f4f 	dsb	sy
 8001222:	60bb      	str	r3, [r7, #8]
}
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	e7fd      	b.n	8001226 <vPortFreeMicroROS+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800122a:	693b      	ldr	r3, [r7, #16]
 800122c:	685a      	ldr	r2, [r3, #4]
 800122e:	4b11      	ldr	r3, [pc, #68]	@ (8001274 <vPortFreeMicroROS+0xb0>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d019      	beq.n	800126c <vPortFreeMicroROS+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d115      	bne.n	800126c <vPortFreeMicroROS+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	685a      	ldr	r2, [r3, #4]
 8001244:	4b0b      	ldr	r3, [pc, #44]	@ (8001274 <vPortFreeMicroROS+0xb0>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001250:	f007 ff70 	bl	8009134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	4b07      	ldr	r3, [pc, #28]	@ (8001278 <vPortFreeMicroROS+0xb4>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4413      	add	r3, r2
 800125e:	4a06      	ldr	r2, [pc, #24]	@ (8001278 <vPortFreeMicroROS+0xb4>)
 8001260:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001262:	6938      	ldr	r0, [r7, #16]
 8001264:	f000 f8dc 	bl	8001420 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001268:	f007 ff72 	bl	8009150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800126c:	bf00      	nop
 800126e:	3718      	adds	r7, #24
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20003e74 	.word	0x20003e74
 8001278:	20003e6c 	.word	0x20003e6c

0800127c <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 8001288:	2308      	movs	r3, #8
 800128a:	425b      	negs	r3, r3
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4413      	add	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 8001296:	693b      	ldr	r3, [r7, #16]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <getBlockSize+0x38>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	43db      	mvns	r3, r3
 80012a0:	4013      	ands	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]

	return count;
 80012a4:	68fb      	ldr	r3, [r7, #12]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	20003e74 	.word	0x20003e74

080012b8 <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 80012c2:	f007 ff37 	bl	8009134 <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 80012c6:	6838      	ldr	r0, [r7, #0]
 80012c8:	f7ff feb4 	bl	8001034 <pvPortMallocMicroROS>
 80012cc:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d017      	beq.n	8001304 <pvPortReallocMicroROS+0x4c>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d014      	beq.n	8001304 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f7ff ffce 	bl	800127c <getBlockSize>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2208      	movs	r2, #8
 80012e4:	1a9b      	subs	r3, r3, r2
 80012e6:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d201      	bcs.n	80012f4 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 80012f4:	68fa      	ldr	r2, [r7, #12]
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	68b8      	ldr	r0, [r7, #8]
 80012fa:	f016 fd06 	bl	8017d0a <memcpy>

		vPortFreeMicroROS(pv);
 80012fe:	6878      	ldr	r0, [r7, #4]
 8001300:	f7ff ff60 	bl	80011c4 <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001304:	f007 ff24 	bl	8009150 <xTaskResumeAll>

	return newmem;
 8001308:	68bb      	ldr	r3, [r7, #8]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	6078      	str	r0, [r7, #4]
 800131a:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 800131c:	f007 ff0a 	bl	8009134 <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	687a      	ldr	r2, [r7, #4]
 8001324:	fb02 f303 	mul.w	r3, r2, r3
 8001328:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 800132a:	6978      	ldr	r0, [r7, #20]
 800132c:	f7ff fe82 	bl	8001034 <pvPortMallocMicroROS>
 8001330:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001336:	e004      	b.n	8001342 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	1c5a      	adds	r2, r3, #1
 800133c:	613a      	str	r2, [r7, #16]
 800133e:	2200      	movs	r2, #0
 8001340:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	1e5a      	subs	r2, r3, #1
 8001346:	617a      	str	r2, [r7, #20]
 8001348:	2b00      	cmp	r3, #0
 800134a:	d1f5      	bne.n	8001338 <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 800134c:	f007 ff00 	bl	8009150 <xTaskResumeAll>
  	return mem;
 8001350:	68fb      	ldr	r3, [r7, #12]
}
 8001352:	4618      	mov	r0, r3
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
	...

0800135c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800135c:	b480      	push	{r7}
 800135e:	b085      	sub	sp, #20
 8001360:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001362:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001366:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001368:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <prvHeapInit+0xac>)
 800136a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00c      	beq.n	8001390 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3307      	adds	r3, #7
 800137a:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	f023 0307 	bic.w	r3, r3, #7
 8001382:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001384:	68ba      	ldr	r2, [r7, #8]
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	4a1f      	ldr	r2, [pc, #124]	@ (8001408 <prvHeapInit+0xac>)
 800138c:	4413      	add	r3, r2
 800138e:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001394:	4a1d      	ldr	r2, [pc, #116]	@ (800140c <prvHeapInit+0xb0>)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <prvHeapInit+0xb0>)
 800139c:	2200      	movs	r2, #0
 800139e:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	4413      	add	r3, r2
 80013a6:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80013a8:	2208      	movs	r2, #8
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	1a9b      	subs	r3, r3, r2
 80013ae:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	f023 0307 	bic.w	r3, r3, #7
 80013b6:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	4a15      	ldr	r2, [pc, #84]	@ (8001410 <prvHeapInit+0xb4>)
 80013bc:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80013be:	4b14      	ldr	r3, [pc, #80]	@ (8001410 <prvHeapInit+0xb4>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	2200      	movs	r2, #0
 80013c4:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80013c6:	4b12      	ldr	r3, [pc, #72]	@ (8001410 <prvHeapInit+0xb4>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	68fa      	ldr	r2, [r7, #12]
 80013d6:	1ad2      	subs	r2, r2, r3
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80013dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001410 <prvHeapInit+0xb4>)
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	685b      	ldr	r3, [r3, #4]
 80013e8:	4a0a      	ldr	r2, [pc, #40]	@ (8001414 <prvHeapInit+0xb8>)
 80013ea:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	4a09      	ldr	r2, [pc, #36]	@ (8001418 <prvHeapInit+0xbc>)
 80013f2:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80013f4:	4b09      	ldr	r3, [pc, #36]	@ (800141c <prvHeapInit+0xc0>)
 80013f6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80013fa:	601a      	str	r2, [r3, #0]
}
 80013fc:	bf00      	nop
 80013fe:	3714      	adds	r7, #20
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	20003260 	.word	0x20003260
 800140c:	20003e60 	.word	0x20003e60
 8001410:	20003e68 	.word	0x20003e68
 8001414:	20003e70 	.word	0x20003e70
 8001418:	20003e6c 	.word	0x20003e6c
 800141c:	20003e74 	.word	0x20003e74

08001420 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001420:	b480      	push	{r7}
 8001422:	b085      	sub	sp, #20
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001428:	4b28      	ldr	r3, [pc, #160]	@ (80014cc <prvInsertBlockIntoFreeList+0xac>)
 800142a:	60fb      	str	r3, [r7, #12]
 800142c:	e002      	b.n	8001434 <prvInsertBlockIntoFreeList+0x14>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	429a      	cmp	r2, r3
 800143c:	d8f7      	bhi.n	800142e <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	68ba      	ldr	r2, [r7, #8]
 8001448:	4413      	add	r3, r2
 800144a:	687a      	ldr	r2, [r7, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d108      	bne.n	8001462 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	441a      	add	r2, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	68ba      	ldr	r2, [r7, #8]
 800146c:	441a      	add	r2, r3
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d118      	bne.n	80014a8 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <prvInsertBlockIntoFreeList+0xb0>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	429a      	cmp	r2, r3
 8001480:	d00d      	beq.n	800149e <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	441a      	add	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	e008      	b.n	80014b0 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800149e:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <prvInsertBlockIntoFreeList+0xb0>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	601a      	str	r2, [r3, #0]
 80014a6:	e003      	b.n	80014b0 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80014b0:	68fa      	ldr	r2, [r7, #12]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d002      	beq.n	80014be <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80014be:	bf00      	nop
 80014c0:	3714      	adds	r7, #20
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	20003e60 	.word	0x20003e60
 80014d0:	20003e68 	.word	0x20003e68

080014d4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80014da:	4b1a      	ldr	r3, [pc, #104]	@ (8001544 <MX_DMA_Init+0x70>)
 80014dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014de:	4a19      	ldr	r2, [pc, #100]	@ (8001544 <MX_DMA_Init+0x70>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	6493      	str	r3, [r2, #72]	@ 0x48
 80014e6:	4b17      	ldr	r3, [pc, #92]	@ (8001544 <MX_DMA_Init+0x70>)
 80014e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014ea:	f003 0304 	and.w	r3, r3, #4
 80014ee:	607b      	str	r3, [r7, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80014f2:	4b14      	ldr	r3, [pc, #80]	@ (8001544 <MX_DMA_Init+0x70>)
 80014f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80014f6:	4a13      	ldr	r2, [pc, #76]	@ (8001544 <MX_DMA_Init+0x70>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6493      	str	r3, [r2, #72]	@ 0x48
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <MX_DMA_Init+0x70>)
 8001500:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001502:	f003 0301 	and.w	r3, r3, #1
 8001506:	603b      	str	r3, [r7, #0]
 8001508:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2105      	movs	r1, #5
 800150e:	200b      	movs	r0, #11
 8001510:	f002 fd66 	bl	8003fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001514:	200b      	movs	r0, #11
 8001516:	f002 fd7d 	bl	8004014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 5, 0);
 800151a:	2200      	movs	r2, #0
 800151c:	2105      	movs	r1, #5
 800151e:	200c      	movs	r0, #12
 8001520:	f002 fd5e 	bl	8003fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001524:	200c      	movs	r0, #12
 8001526:	f002 fd75 	bl	8004014 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800152a:	2200      	movs	r2, #0
 800152c:	2105      	movs	r1, #5
 800152e:	200d      	movs	r0, #13
 8001530:	f002 fd56 	bl	8003fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001534:	200d      	movs	r0, #13
 8001536:	f002 fd6d 	bl	8004014 <HAL_NVIC_EnableIRQ>

}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000

08001548 <cubemx_transport_open>:
#define UART_DMA_BUFFER_SIZE 2048

static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001548:	b580      	push	{r7, lr}
 800154a:	b084      	sub	sp, #16
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001556:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001558:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800155c:	4904      	ldr	r1, [pc, #16]	@ (8001570 <cubemx_transport_open+0x28>)
 800155e:	68f8      	ldr	r0, [r7, #12]
 8001560:	f004 ff72 	bl	8006448 <HAL_UART_Receive_DMA>
    return true;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	3710      	adds	r7, #16
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20003e78 	.word	0x20003e78

08001574 <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 8001582:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001584:	68f8      	ldr	r0, [r7, #12]
 8001586:	f004 ffab 	bl	80064e0 <HAL_UART_DMAStop>
    return true;
 800158a:	2301      	movs	r3, #1
}
 800158c:	4618      	mov	r0, r3
 800158e:	3710      	adds	r7, #16
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}

08001594 <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001594:	b580      	push	{r7, lr}
 8001596:	b086      	sub	sp, #24
 8001598:	af00      	add	r7, sp, #0
 800159a:	60f8      	str	r0, [r7, #12]
 800159c:	60b9      	str	r1, [r7, #8]
 800159e:	607a      	str	r2, [r7, #4]
 80015a0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 80015a8:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015b0:	2b20      	cmp	r3, #32
 80015b2:	d11b      	bne.n	80015ec <cubemx_transport_write+0x58>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	461a      	mov	r2, r3
 80015ba:	68b9      	ldr	r1, [r7, #8]
 80015bc:	6978      	ldr	r0, [r7, #20]
 80015be:	f004 fec3 	bl	8006348 <HAL_UART_Transmit_DMA>
 80015c2:	4603      	mov	r3, r0
 80015c4:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015c6:	e002      	b.n	80015ce <cubemx_transport_write+0x3a>
            osDelay(1);
 80015c8:	2001      	movs	r0, #1
 80015ca:	f006 fd71 	bl	80080b0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 80015ce:	7cfb      	ldrb	r3, [r7, #19]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d104      	bne.n	80015de <cubemx_transport_write+0x4a>
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80015da:	2b20      	cmp	r3, #32
 80015dc:	d1f4      	bne.n	80015c8 <cubemx_transport_write+0x34>
        }

        return (ret == HAL_OK) ? len : 0;
 80015de:	7cfb      	ldrb	r3, [r7, #19]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d101      	bne.n	80015e8 <cubemx_transport_write+0x54>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	e002      	b.n	80015ee <cubemx_transport_write+0x5a>
 80015e8:	2300      	movs	r3, #0
 80015ea:	e000      	b.n	80015ee <cubemx_transport_write+0x5a>
    }else{
        return 0;
 80015ec:	2300      	movs	r3, #0
    }
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3718      	adds	r7, #24
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
	...

080015f8 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b088      	sub	sp, #32
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	60f8      	str	r0, [r7, #12]
 8001600:	60b9      	str	r1, [r7, #8]
 8001602:	607a      	str	r2, [r7, #4]
 8001604:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f8d3 328c 	ldr.w	r3, [r3, #652]	@ 0x28c
 800160c:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 800160e:	2300      	movs	r3, #0
 8001610:	61fb      	str	r3, [r7, #28]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001612:	b672      	cpsid	i
}
 8001614:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f5c3 6300 	rsb	r3, r3, #2048	@ 0x800
 8001624:	4a1b      	ldr	r2, [pc, #108]	@ (8001694 <cubemx_transport_read+0x9c>)
 8001626:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001628:	b662      	cpsie	i
}
 800162a:	bf00      	nop
        __enable_irq();
        ms_used++;
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	3301      	adds	r3, #1
 8001630:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001632:	2001      	movs	r0, #1
 8001634:	f006 fd3c 	bl	80080b0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <cubemx_transport_read+0xa0>)
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	4b15      	ldr	r3, [pc, #84]	@ (8001694 <cubemx_transport_read+0x9c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d103      	bne.n	800164c <cubemx_transport_read+0x54>
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	429a      	cmp	r2, r3
 800164a:	dbe2      	blt.n	8001612 <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 800164c:	2300      	movs	r3, #0
 800164e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001650:	e011      	b.n	8001676 <cubemx_transport_read+0x7e>
        buf[wrote] = dma_buffer[dma_head];
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <cubemx_transport_read+0xa0>)
 8001654:	681a      	ldr	r2, [r3, #0]
 8001656:	68b9      	ldr	r1, [r7, #8]
 8001658:	69bb      	ldr	r3, [r7, #24]
 800165a:	440b      	add	r3, r1
 800165c:	490f      	ldr	r1, [pc, #60]	@ (800169c <cubemx_transport_read+0xa4>)
 800165e:	5c8a      	ldrb	r2, [r1, r2]
 8001660:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 8001662:	4b0d      	ldr	r3, [pc, #52]	@ (8001698 <cubemx_transport_read+0xa0>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	3301      	adds	r3, #1
 8001668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800166c:	4a0a      	ldr	r2, [pc, #40]	@ (8001698 <cubemx_transport_read+0xa0>)
 800166e:	6013      	str	r3, [r2, #0]
        wrote++;
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	3301      	adds	r3, #1
 8001674:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8001676:	4b08      	ldr	r3, [pc, #32]	@ (8001698 <cubemx_transport_read+0xa0>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4b06      	ldr	r3, [pc, #24]	@ (8001694 <cubemx_transport_read+0x9c>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	429a      	cmp	r2, r3
 8001680:	d003      	beq.n	800168a <cubemx_transport_read+0x92>
 8001682:	69ba      	ldr	r2, [r7, #24]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	429a      	cmp	r2, r3
 8001688:	d3e3      	bcc.n	8001652 <cubemx_transport_read+0x5a>
    }
    
    return wrote;
 800168a:	69bb      	ldr	r3, [r7, #24]
}
 800168c:	4618      	mov	r0, r3
 800168e:	3720      	adds	r7, #32
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	2000467c 	.word	0x2000467c
 8001698:	20004678 	.word	0x20004678
 800169c:	20003e78 	.word	0x20003e78

080016a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08a      	sub	sp, #40	@ 0x28
 80016a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	4b37      	ldr	r3, [pc, #220]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ba:	4a36      	ldr	r2, [pc, #216]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016bc:	f043 0304 	orr.w	r3, r3, #4
 80016c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016c2:	4b34      	ldr	r3, [pc, #208]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016c6:	f003 0304 	and.w	r3, r3, #4
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80016ce:	4b31      	ldr	r3, [pc, #196]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a30      	ldr	r2, [pc, #192]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016d4:	f043 0320 	orr.w	r3, r3, #32
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b2e      	ldr	r3, [pc, #184]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0320 	and.w	r3, r3, #32
 80016e2:	60fb      	str	r3, [r7, #12]
 80016e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b2b      	ldr	r3, [pc, #172]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	4a2a      	ldr	r2, [pc, #168]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f2:	4b28      	ldr	r3, [pc, #160]	@ (8001794 <MX_GPIO_Init+0xf4>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b25      	ldr	r3, [pc, #148]	@ (8001794 <MX_GPIO_Init+0xf4>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	4a24      	ldr	r2, [pc, #144]	@ (8001794 <MX_GPIO_Init+0xf4>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170a:	4b22      	ldr	r3, [pc, #136]	@ (8001794 <MX_GPIO_Init+0xf4>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	607b      	str	r3, [r7, #4]
 8001714:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800171a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800171c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001720:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 0314 	add.w	r3, r7, #20
 800172a:	4619      	mov	r1, r3
 800172c:	481a      	ldr	r0, [pc, #104]	@ (8001798 <MX_GPIO_Init+0xf8>)
 800172e:	f002 ffbd 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001732:	2303      	movs	r3, #3
 8001734:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800173e:	f107 0314 	add.w	r3, r7, #20
 8001742:	4619      	mov	r1, r3
 8001744:	4814      	ldr	r0, [pc, #80]	@ (8001798 <MX_GPIO_Init+0xf8>)
 8001746:	f002 ffb1 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800174a:	2303      	movs	r3, #3
 800174c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800174e:	2300      	movs	r3, #0
 8001750:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001760:	f002 ffa4 	bl	80046ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001764:	2301      	movs	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	2300      	movs	r3, #0
 800176e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	4809      	ldr	r0, [pc, #36]	@ (800179c <MX_GPIO_Init+0xfc>)
 8001778:	f002 ff98 	bl	80046ac <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800177c:	2200      	movs	r2, #0
 800177e:	2105      	movs	r1, #5
 8001780:	2028      	movs	r0, #40	@ 0x28
 8001782:	f002 fc2d 	bl	8003fe0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001786:	2028      	movs	r0, #40	@ 0x28
 8001788:	f002 fc44 	bl	8004014 <HAL_NVIC_EnableIRQ>

}
 800178c:	bf00      	nop
 800178e:	3728      	adds	r7, #40	@ 0x28
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	40021000 	.word	0x40021000
 8001798:	48000800 	.word	0x48000800
 800179c:	48000400 	.word	0x48000400

080017a0 <MX_IWDG_Init>:

IWDG_HandleTypeDef hiwdg;

/* IWDG init function */
void MX_IWDG_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80017a4:	4b0b      	ldr	r3, [pc, #44]	@ (80017d4 <MX_IWDG_Init+0x34>)
 80017a6:	4a0c      	ldr	r2, [pc, #48]	@ (80017d8 <MX_IWDG_Init+0x38>)
 80017a8:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_4;
 80017aa:	4b0a      	ldr	r3, [pc, #40]	@ (80017d4 <MX_IWDG_Init+0x34>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80017b0:	4b08      	ldr	r3, [pc, #32]	@ (80017d4 <MX_IWDG_Init+0x34>)
 80017b2:	f640 72ff 	movw	r2, #4095	@ 0xfff
 80017b6:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 80017b8:	4b06      	ldr	r3, [pc, #24]	@ (80017d4 <MX_IWDG_Init+0x34>)
 80017ba:	f640 12c3 	movw	r2, #2499	@ 0x9c3
 80017be:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80017c0:	4804      	ldr	r0, [pc, #16]	@ (80017d4 <MX_IWDG_Init+0x34>)
 80017c2:	f003 f930 	bl	8004a26 <HAL_IWDG_Init>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d001      	beq.n	80017d0 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 80017cc:	f000 fb26 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80017d0:	bf00      	nop
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	20004680 	.word	0x20004680
 80017d8:	40003000 	.word	0x40003000
 80017dc:	00000000 	.word	0x00000000

080017e0 <timer_callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void timer_callback(rcl_timer_t * timer, int64_t last_call_time)
{
 80017e0:	b590      	push	{r4, r7, lr}
 80017e2:	b08f      	sub	sp, #60	@ 0x3c
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	e9c7 2300 	strd	r2, r3, [r7]
	if (timer != NULL)
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	f000 8173 	beq.w	8001ada <timer_callback+0x2fa>
	{
        int a_pressed = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1) == GPIO_PIN_RESET);
 80017f4:	2102      	movs	r1, #2
 80017f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80017fa:	f003 f8d9 	bl	80049b0 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	bf0c      	ite	eq
 8001804:	2301      	moveq	r3, #1
 8001806:	2300      	movne	r3, #0
 8001808:	b2db      	uxtb	r3, r3
 800180a:	633b      	str	r3, [r7, #48]	@ 0x30
        int b_pressed = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);
 800180c:	2101      	movs	r1, #1
 800180e:	4870      	ldr	r0, [pc, #448]	@ (80019d0 <timer_callback+0x1f0>)
 8001810:	f003 f8ce 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	bf0c      	ite	eq
 800181a:	2301      	moveq	r3, #1
 800181c:	2300      	movne	r3, #0
 800181e:	b2db      	uxtb	r3, r3
 8001820:	62fb      	str	r3, [r7, #44]	@ 0x2c
        int c_pressed = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == GPIO_PIN_RESET);
 8001822:	2102      	movs	r1, #2
 8001824:	486b      	ldr	r0, [pc, #428]	@ (80019d4 <timer_callback+0x1f4>)
 8001826:	f003 f8c3 	bl	80049b0 <HAL_GPIO_ReadPin>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	bf0c      	ite	eq
 8001830:	2301      	moveq	r3, #1
 8001832:	2300      	movne	r3, #0
 8001834:	b2db      	uxtb	r3, r3
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
        int d_pressed = (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_0) == GPIO_PIN_RESET);
 8001838:	2101      	movs	r1, #1
 800183a:	4866      	ldr	r0, [pc, #408]	@ (80019d4 <timer_callback+0x1f4>)
 800183c:	f003 f8b8 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	bf0c      	ite	eq
 8001846:	2301      	moveq	r3, #1
 8001848:	2300      	movne	r3, #0
 800184a:	b2db      	uxtb	r3, r3
 800184c:	627b      	str	r3, [r7, #36]	@ 0x24

        // Toggle logic - only one button can be active at a time
        if (a_pressed && !toggle_a) {
 800184e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001850:	2b00      	cmp	r3, #0
 8001852:	d016      	beq.n	8001882 <timer_callback+0xa2>
 8001854:	4b60      	ldr	r3, [pc, #384]	@ (80019d8 <timer_callback+0x1f8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d112      	bne.n	8001882 <timer_callback+0xa2>
            toggle_a = 1; toggle_b = toggle_c = toggle_d = toggle_d8 = 0;
 800185c:	4b5e      	ldr	r3, [pc, #376]	@ (80019d8 <timer_callback+0x1f8>)
 800185e:	2201      	movs	r2, #1
 8001860:	601a      	str	r2, [r3, #0]
 8001862:	4b5e      	ldr	r3, [pc, #376]	@ (80019dc <timer_callback+0x1fc>)
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	4b5c      	ldr	r3, [pc, #368]	@ (80019dc <timer_callback+0x1fc>)
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a5c      	ldr	r2, [pc, #368]	@ (80019e0 <timer_callback+0x200>)
 800186e:	6013      	str	r3, [r2, #0]
 8001870:	4b5b      	ldr	r3, [pc, #364]	@ (80019e0 <timer_callback+0x200>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a5b      	ldr	r2, [pc, #364]	@ (80019e4 <timer_callback+0x204>)
 8001876:	6013      	str	r3, [r2, #0]
 8001878:	4b5a      	ldr	r3, [pc, #360]	@ (80019e4 <timer_callback+0x204>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4a5a      	ldr	r2, [pc, #360]	@ (80019e8 <timer_callback+0x208>)
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e04c      	b.n	800191c <timer_callback+0x13c>
        } else if (b_pressed && !toggle_b) {
 8001882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001884:	2b00      	cmp	r3, #0
 8001886:	d016      	beq.n	80018b6 <timer_callback+0xd6>
 8001888:	4b57      	ldr	r3, [pc, #348]	@ (80019e8 <timer_callback+0x208>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d112      	bne.n	80018b6 <timer_callback+0xd6>
            toggle_b = 1; toggle_a = toggle_c = toggle_d = toggle_d8 = 0;
 8001890:	4b55      	ldr	r3, [pc, #340]	@ (80019e8 <timer_callback+0x208>)
 8001892:	2201      	movs	r2, #1
 8001894:	601a      	str	r2, [r3, #0]
 8001896:	4b51      	ldr	r3, [pc, #324]	@ (80019dc <timer_callback+0x1fc>)
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	4b4f      	ldr	r3, [pc, #316]	@ (80019dc <timer_callback+0x1fc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a4f      	ldr	r2, [pc, #316]	@ (80019e0 <timer_callback+0x200>)
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b4e      	ldr	r3, [pc, #312]	@ (80019e0 <timer_callback+0x200>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a4e      	ldr	r2, [pc, #312]	@ (80019e4 <timer_callback+0x204>)
 80018aa:	6013      	str	r3, [r2, #0]
 80018ac:	4b4d      	ldr	r3, [pc, #308]	@ (80019e4 <timer_callback+0x204>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a49      	ldr	r2, [pc, #292]	@ (80019d8 <timer_callback+0x1f8>)
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	e032      	b.n	800191c <timer_callback+0x13c>
        } else if (c_pressed && !toggle_c) {
 80018b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d016      	beq.n	80018ea <timer_callback+0x10a>
 80018bc:	4b49      	ldr	r3, [pc, #292]	@ (80019e4 <timer_callback+0x204>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d112      	bne.n	80018ea <timer_callback+0x10a>
            toggle_c = 1; toggle_a = toggle_b = toggle_d = toggle_d8 = 0;
 80018c4:	4b47      	ldr	r3, [pc, #284]	@ (80019e4 <timer_callback+0x204>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	4b44      	ldr	r3, [pc, #272]	@ (80019dc <timer_callback+0x1fc>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	4b42      	ldr	r3, [pc, #264]	@ (80019dc <timer_callback+0x1fc>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a42      	ldr	r2, [pc, #264]	@ (80019e0 <timer_callback+0x200>)
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b41      	ldr	r3, [pc, #260]	@ (80019e0 <timer_callback+0x200>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a42      	ldr	r2, [pc, #264]	@ (80019e8 <timer_callback+0x208>)
 80018de:	6013      	str	r3, [r2, #0]
 80018e0:	4b41      	ldr	r3, [pc, #260]	@ (80019e8 <timer_callback+0x208>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a3c      	ldr	r2, [pc, #240]	@ (80019d8 <timer_callback+0x1f8>)
 80018e6:	6013      	str	r3, [r2, #0]
 80018e8:	e018      	b.n	800191c <timer_callback+0x13c>
        } else if (d_pressed && !toggle_d) {
 80018ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d015      	beq.n	800191c <timer_callback+0x13c>
 80018f0:	4b3b      	ldr	r3, [pc, #236]	@ (80019e0 <timer_callback+0x200>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <timer_callback+0x13c>
            toggle_d = 1; toggle_a = toggle_b = toggle_c = toggle_d8 = 0;
 80018f8:	4b39      	ldr	r3, [pc, #228]	@ (80019e0 <timer_callback+0x200>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	4b37      	ldr	r3, [pc, #220]	@ (80019dc <timer_callback+0x1fc>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	4b35      	ldr	r3, [pc, #212]	@ (80019dc <timer_callback+0x1fc>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a36      	ldr	r2, [pc, #216]	@ (80019e4 <timer_callback+0x204>)
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	4b35      	ldr	r3, [pc, #212]	@ (80019e4 <timer_callback+0x204>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a35      	ldr	r2, [pc, #212]	@ (80019e8 <timer_callback+0x208>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	4b34      	ldr	r3, [pc, #208]	@ (80019e8 <timer_callback+0x208>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a2f      	ldr	r2, [pc, #188]	@ (80019d8 <timer_callback+0x1f8>)
 800191a:	6013      	str	r3, [r2, #0]
        }

        // Set the velocity based on the active toggle
        geometry_msgs__msg__Twist* robots[4] = {&robot1_cmd_vel, &robot2_cmd_vel, &robot3_cmd_vel, &robot4_cmd_vel};
 800191c:	4b33      	ldr	r3, [pc, #204]	@ (80019ec <timer_callback+0x20c>)
 800191e:	f107 0414 	add.w	r4, r7, #20
 8001922:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001924:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        for (int i = 0; i < 4; ++i) {
 8001928:	2300      	movs	r3, #0
 800192a:	637b      	str	r3, [r7, #52]	@ 0x34
 800192c:	e01a      	b.n	8001964 <timer_callback+0x184>
            robots[i]->linear.x = 0;
 800192e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	3338      	adds	r3, #56	@ 0x38
 8001934:	443b      	add	r3, r7
 8001936:	f853 1c24 	ldr.w	r1, [r3, #-36]
 800193a:	f04f 0200 	mov.w	r2, #0
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	e9c1 2300 	strd	r2, r3, [r1]
            robots[i]->angular.z = 0;
 8001946:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001948:	009b      	lsls	r3, r3, #2
 800194a:	3338      	adds	r3, #56	@ 0x38
 800194c:	443b      	add	r3, r7
 800194e:	f853 1c24 	ldr.w	r1, [r3, #-36]
 8001952:	f04f 0200 	mov.w	r2, #0
 8001956:	f04f 0300 	mov.w	r3, #0
 800195a:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        for (int i = 0; i < 4; ++i) {
 800195e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001960:	3301      	adds	r3, #1
 8001962:	637b      	str	r3, [r7, #52]	@ 0x34
 8001964:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001966:	2b03      	cmp	r3, #3
 8001968:	dde1      	ble.n	800192e <timer_callback+0x14e>
        }

        if (toggle_a) {
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <timer_callback+0x1f8>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d00c      	beq.n	800198c <timer_callback+0x1ac>
            robot1_cmd_vel.linear.x = cmd.y;
 8001972:	4b1f      	ldr	r3, [pc, #124]	@ (80019f0 <timer_callback+0x210>)
 8001974:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001978:	491e      	ldr	r1, [pc, #120]	@ (80019f4 <timer_callback+0x214>)
 800197a:	e9c1 2300 	strd	r2, r3, [r1]
            robot1_cmd_vel.angular.z = cmd.x;
 800197e:	4b1c      	ldr	r3, [pc, #112]	@ (80019f0 <timer_callback+0x210>)
 8001980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001984:	491b      	ldr	r1, [pc, #108]	@ (80019f4 <timer_callback+0x214>)
 8001986:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 800198a:	e049      	b.n	8001a20 <timer_callback+0x240>
        } else if (toggle_b) {
 800198c:	4b16      	ldr	r3, [pc, #88]	@ (80019e8 <timer_callback+0x208>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d00c      	beq.n	80019ae <timer_callback+0x1ce>
            robot2_cmd_vel.linear.x = cmd.y;
 8001994:	4b16      	ldr	r3, [pc, #88]	@ (80019f0 <timer_callback+0x210>)
 8001996:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800199a:	4917      	ldr	r1, [pc, #92]	@ (80019f8 <timer_callback+0x218>)
 800199c:	e9c1 2300 	strd	r2, r3, [r1]
            robot2_cmd_vel.angular.z = cmd.x;
 80019a0:	4b13      	ldr	r3, [pc, #76]	@ (80019f0 <timer_callback+0x210>)
 80019a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019a6:	4914      	ldr	r1, [pc, #80]	@ (80019f8 <timer_callback+0x218>)
 80019a8:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80019ac:	e038      	b.n	8001a20 <timer_callback+0x240>
        } else if (toggle_c) {
 80019ae:	4b0d      	ldr	r3, [pc, #52]	@ (80019e4 <timer_callback+0x204>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d024      	beq.n	8001a00 <timer_callback+0x220>
            robot3_cmd_vel.linear.x = cmd.y;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	@ (80019f0 <timer_callback+0x210>)
 80019b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80019bc:	490f      	ldr	r1, [pc, #60]	@ (80019fc <timer_callback+0x21c>)
 80019be:	e9c1 2300 	strd	r2, r3, [r1]
            robot3_cmd_vel.angular.z = cmd.x;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	@ (80019f0 <timer_callback+0x210>)
 80019c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019c8:	490c      	ldr	r1, [pc, #48]	@ (80019fc <timer_callback+0x21c>)
 80019ca:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
 80019ce:	e027      	b.n	8001a20 <timer_callback+0x240>
 80019d0:	48000400 	.word	0x48000400
 80019d4:	48000800 	.word	0x48000800
 80019d8:	20004ac0 	.word	0x20004ac0
 80019dc:	20004ad0 	.word	0x20004ad0
 80019e0:	20004acc 	.word	0x20004acc
 80019e4:	20004ac8 	.word	0x20004ac8
 80019e8:	20004ac4 	.word	0x20004ac4
 80019ec:	08018adc 	.word	0x08018adc
 80019f0:	20004788 	.word	0x20004788
 80019f4:	200047a0 	.word	0x200047a0
 80019f8:	200047d0 	.word	0x200047d0
 80019fc:	20004800 	.word	0x20004800
        } else if (toggle_d) {
 8001a00:	4b3d      	ldr	r3, [pc, #244]	@ (8001af8 <timer_callback+0x318>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00b      	beq.n	8001a20 <timer_callback+0x240>
            robot4_cmd_vel.linear.x = cmd.y;
 8001a08:	4b3c      	ldr	r3, [pc, #240]	@ (8001afc <timer_callback+0x31c>)
 8001a0a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001a0e:	493c      	ldr	r1, [pc, #240]	@ (8001b00 <timer_callback+0x320>)
 8001a10:	e9c1 2300 	strd	r2, r3, [r1]
            robot4_cmd_vel.angular.z = cmd.x;
 8001a14:	4b39      	ldr	r3, [pc, #228]	@ (8001afc <timer_callback+0x31c>)
 8001a16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a1a:	4939      	ldr	r1, [pc, #228]	@ (8001b00 <timer_callback+0x320>)
 8001a1c:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
        }
		if (d8 == 1)
		{

		}
		cmd.x = (x / 1870.0) - 1.0;
 8001a20:	4b38      	ldr	r3, [pc, #224]	@ (8001b04 <timer_callback+0x324>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7fe fdb5 	bl	8000594 <__aeabi_i2d>
 8001a2a:	a32f      	add	r3, pc, #188	@ (adr r3, 8001ae8 <timer_callback+0x308>)
 8001a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a30:	f7fe ff44 	bl	80008bc <__aeabi_ddiv>
 8001a34:	4602      	mov	r2, r0
 8001a36:	460b      	mov	r3, r1
 8001a38:	4610      	mov	r0, r2
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 0200 	mov.w	r2, #0
 8001a40:	4b31      	ldr	r3, [pc, #196]	@ (8001b08 <timer_callback+0x328>)
 8001a42:	f7fe fc59 	bl	80002f8 <__aeabi_dsub>
 8001a46:	4602      	mov	r2, r0
 8001a48:	460b      	mov	r3, r1
 8001a4a:	492c      	ldr	r1, [pc, #176]	@ (8001afc <timer_callback+0x31c>)
 8001a4c:	e9c1 2300 	strd	r2, r3, [r1]
		cmd.y = (y / 1890.0) - 1.0;
 8001a50:	4b2e      	ldr	r3, [pc, #184]	@ (8001b0c <timer_callback+0x32c>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd9d 	bl	8000594 <__aeabi_i2d>
 8001a5a:	a325      	add	r3, pc, #148	@ (adr r3, 8001af0 <timer_callback+0x310>)
 8001a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a60:	f7fe ff2c 	bl	80008bc <__aeabi_ddiv>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4610      	mov	r0, r2
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	f04f 0200 	mov.w	r2, #0
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <timer_callback+0x328>)
 8001a72:	f7fe fc41 	bl	80002f8 <__aeabi_dsub>
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	4920      	ldr	r1, [pc, #128]	@ (8001afc <timer_callback+0x31c>)
 8001a7c:	e9c1 2302 	strd	r2, r3, [r1, #8]
		rc = rcl_publish(&robot1_publisher, &robot1_cmd_vel, NULL);
 8001a80:	2200      	movs	r2, #0
 8001a82:	4923      	ldr	r1, [pc, #140]	@ (8001b10 <timer_callback+0x330>)
 8001a84:	4823      	ldr	r0, [pc, #140]	@ (8001b14 <timer_callback+0x334>)
 8001a86:	f00a fccb 	bl	800c420 <rcl_publish>
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	4a22      	ldr	r2, [pc, #136]	@ (8001b18 <timer_callback+0x338>)
 8001a8e:	6013      	str	r3, [r2, #0]
		rc = rcl_publish(&robot2_publisher, &robot1_cmd_vel, NULL);
 8001a90:	2200      	movs	r2, #0
 8001a92:	491f      	ldr	r1, [pc, #124]	@ (8001b10 <timer_callback+0x330>)
 8001a94:	4821      	ldr	r0, [pc, #132]	@ (8001b1c <timer_callback+0x33c>)
 8001a96:	f00a fcc3 	bl	800c420 <rcl_publish>
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	4a1e      	ldr	r2, [pc, #120]	@ (8001b18 <timer_callback+0x338>)
 8001a9e:	6013      	str	r3, [r2, #0]
		rc = rcl_publish(&robot3_publisher, &robot1_cmd_vel, NULL);
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	491b      	ldr	r1, [pc, #108]	@ (8001b10 <timer_callback+0x330>)
 8001aa4:	481e      	ldr	r0, [pc, #120]	@ (8001b20 <timer_callback+0x340>)
 8001aa6:	f00a fcbb 	bl	800c420 <rcl_publish>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	4a1a      	ldr	r2, [pc, #104]	@ (8001b18 <timer_callback+0x338>)
 8001aae:	6013      	str	r3, [r2, #0]
		rc = rcl_publish(&robot4_publisher, &robot1_cmd_vel, NULL);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	4917      	ldr	r1, [pc, #92]	@ (8001b10 <timer_callback+0x330>)
 8001ab4:	481b      	ldr	r0, [pc, #108]	@ (8001b24 <timer_callback+0x344>)
 8001ab6:	f00a fcb3 	bl	800c420 <rcl_publish>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4a16      	ldr	r2, [pc, #88]	@ (8001b18 <timer_callback+0x338>)
 8001abe:	6013      	str	r3, [r2, #0]
		HAL_IWDG_Refresh(&hiwdg);
 8001ac0:	4819      	ldr	r0, [pc, #100]	@ (8001b28 <timer_callback+0x348>)
 8001ac2:	f002 ffff 	bl	8004ac4 <HAL_IWDG_Refresh>
		x = ADC_RawRead[0];
 8001ac6:	4b19      	ldr	r3, [pc, #100]	@ (8001b2c <timer_callback+0x34c>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	461a      	mov	r2, r3
 8001acc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <timer_callback+0x324>)
 8001ace:	601a      	str	r2, [r3, #0]
		y = ADC_RawRead[1];
 8001ad0:	4b16      	ldr	r3, [pc, #88]	@ (8001b2c <timer_callback+0x34c>)
 8001ad2:	885b      	ldrh	r3, [r3, #2]
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8001b0c <timer_callback+0x32c>)
 8001ad8:	601a      	str	r2, [r3, #0]
	}
}
 8001ada:	bf00      	nop
 8001adc:	373c      	adds	r7, #60	@ 0x3c
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd90      	pop	{r4, r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	f3af 8000 	nop.w
 8001ae8:	00000000 	.word	0x00000000
 8001aec:	409d3800 	.word	0x409d3800
 8001af0:	00000000 	.word	0x00000000
 8001af4:	409d8800 	.word	0x409d8800
 8001af8:	20004acc 	.word	0x20004acc
 8001afc:	20004788 	.word	0x20004788
 8001b00:	20004830 	.word	0x20004830
 8001b04:	20004ab8 	.word	0x20004ab8
 8001b08:	3ff00000 	.word	0x3ff00000
 8001b0c:	20004abc 	.word	0x20004abc
 8001b10:	200047a0 	.word	0x200047a0
 8001b14:	20004778 	.word	0x20004778
 8001b18:	200046e4 	.word	0x200046e4
 8001b1c:	2000477c 	.word	0x2000477c
 8001b20:	20004780 	.word	0x20004780
 8001b24:	20004784 	.word	0x20004784
 8001b28:	20004680 	.word	0x20004680
 8001b2c:	20004860 	.word	0x20004860

08001b30 <StartDefaultTask>:
        printf("Mode failed: %s\n", resp->message.data);
    }
}

void StartDefaultTask(void *argument)
{
 8001b30:	b5b0      	push	{r4, r5, r7, lr}
 8001b32:	b0b2      	sub	sp, #200	@ 0xc8
 8001b34:	af02      	add	r7, sp, #8
 8001b36:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
  /* USER CODE BEGIN 5 */

  // micro-ROS configuration

	rmw_uros_set_custom_transport(
 8001b3a:	4b57      	ldr	r3, [pc, #348]	@ (8001c98 <StartDefaultTask+0x168>)
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	4b57      	ldr	r3, [pc, #348]	@ (8001c9c <StartDefaultTask+0x16c>)
 8001b40:	9300      	str	r3, [sp, #0]
 8001b42:	4b57      	ldr	r3, [pc, #348]	@ (8001ca0 <StartDefaultTask+0x170>)
 8001b44:	4a57      	ldr	r2, [pc, #348]	@ (8001ca4 <StartDefaultTask+0x174>)
 8001b46:	4958      	ldr	r1, [pc, #352]	@ (8001ca8 <StartDefaultTask+0x178>)
 8001b48:	2001      	movs	r0, #1
 8001b4a:	f00b fc81 	bl	800d450 <rmw_uros_set_custom_transport>
			cubemx_transport_open,
			cubemx_transport_close,
			cubemx_transport_write,
			cubemx_transport_read);

	rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8001b4e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b52:	4618      	mov	r0, r3
 8001b54:	f00b fb98 	bl	800d288 <rcutils_get_zero_initialized_allocator>
	freeRTOS_allocator.allocate = microros_allocate;
 8001b58:	4b54      	ldr	r3, [pc, #336]	@ (8001cac <StartDefaultTask+0x17c>)
 8001b5a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
	freeRTOS_allocator.deallocate = microros_deallocate;
 8001b5e:	4b54      	ldr	r3, [pc, #336]	@ (8001cb0 <StartDefaultTask+0x180>)
 8001b60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
	freeRTOS_allocator.reallocate = microros_reallocate;
 8001b64:	4b53      	ldr	r3, [pc, #332]	@ (8001cb4 <StartDefaultTask+0x184>)
 8001b66:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
	freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8001b6a:	4b53      	ldr	r3, [pc, #332]	@ (8001cb8 <StartDefaultTask+0x188>)
 8001b6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8

	if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8001b70:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001b74:	4618      	mov	r0, r3
 8001b76:	f00b fb95 	bl	800d2a4 <rcutils_set_default_allocator>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	f083 0301 	eor.w	r3, r3, #1
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d003      	beq.n	8001b8e <StartDefaultTask+0x5e>
		printf("Error on default allocators (line %d)\n", __LINE__);
 8001b86:	21e2      	movs	r1, #226	@ 0xe2
 8001b88:	484c      	ldr	r0, [pc, #304]	@ (8001cbc <StartDefaultTask+0x18c>)
 8001b8a:	f015 ff09 	bl	80179a0 <iprintf>
	}

	// micro-ROS app

	allocator = rcl_get_default_allocator();
 8001b8e:	4c4c      	ldr	r4, [pc, #304]	@ (8001cc0 <StartDefaultTask+0x190>)
 8001b90:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8001b94:	4618      	mov	r0, r3
 8001b96:	f00b fba3 	bl	800d2e0 <rcutils_get_default_allocator>
 8001b9a:	4625      	mov	r5, r4
 8001b9c:	f107 0488 	add.w	r4, r7, #136	@ 0x88
 8001ba0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ba2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ba4:	6823      	ldr	r3, [r4, #0]
 8001ba6:	602b      	str	r3, [r5, #0]

	//create init_options
	init_options = rcl_get_zero_initialized_init_options();
 8001ba8:	f00a fa6a 	bl	800c080 <rcl_get_zero_initialized_init_options>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4a45      	ldr	r2, [pc, #276]	@ (8001cc4 <StartDefaultTask+0x194>)
 8001bb0:	6013      	str	r3, [r2, #0]
	rc = rcl_init_options_init(&init_options, allocator);
 8001bb2:	4b43      	ldr	r3, [pc, #268]	@ (8001cc0 <StartDefaultTask+0x190>)
 8001bb4:	466c      	mov	r4, sp
 8001bb6:	f103 020c 	add.w	r2, r3, #12
 8001bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001bbe:	e884 0003 	stmia.w	r4, {r0, r1}
 8001bc2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001bc4:	483f      	ldr	r0, [pc, #252]	@ (8001cc4 <StartDefaultTask+0x194>)
 8001bc6:	f00a fa5d 	bl	800c084 <rcl_init_options_init>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a3e      	ldr	r2, [pc, #248]	@ (8001cc8 <StartDefaultTask+0x198>)
 8001bce:	6013      	str	r3, [r2, #0]
	rc = rcl_init_options_set_domain_id(&init_options, 28);
 8001bd0:	211c      	movs	r1, #28
 8001bd2:	483c      	ldr	r0, [pc, #240]	@ (8001cc4 <StartDefaultTask+0x194>)
 8001bd4:	f00a fb52 	bl	800c27c <rcl_init_options_set_domain_id>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	4a3b      	ldr	r2, [pc, #236]	@ (8001cc8 <StartDefaultTask+0x198>)
 8001bdc:	6013      	str	r3, [r2, #0]

	rclc_support_init_with_options(&support, 0, NULL, &init_options, &allocator);
 8001bde:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <StartDefaultTask+0x190>)
 8001be0:	9300      	str	r3, [sp, #0]
 8001be2:	4b38      	ldr	r3, [pc, #224]	@ (8001cc4 <StartDefaultTask+0x194>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	2100      	movs	r1, #0
 8001be8:	4838      	ldr	r0, [pc, #224]	@ (8001ccc <StartDefaultTask+0x19c>)
 8001bea:	f00b fa71 	bl	800d0d0 <rclc_support_init_with_options>

	// create node
	rclc_node_init_default(&node, "joy", "", &support);
 8001bee:	4b37      	ldr	r3, [pc, #220]	@ (8001ccc <StartDefaultTask+0x19c>)
 8001bf0:	4a37      	ldr	r2, [pc, #220]	@ (8001cd0 <StartDefaultTask+0x1a0>)
 8001bf2:	4938      	ldr	r1, [pc, #224]	@ (8001cd4 <StartDefaultTask+0x1a4>)
 8001bf4:	4838      	ldr	r0, [pc, #224]	@ (8001cd8 <StartDefaultTask+0x1a8>)
 8001bf6:	f00b fa9f 	bl	800d138 <rclc_node_init_default>

	// create timer
	rclc_timer_init_default(
 8001bfa:	4b38      	ldr	r3, [pc, #224]	@ (8001cdc <StartDefaultTask+0x1ac>)
 8001bfc:	9300      	str	r3, [sp, #0]
 8001bfe:	4a38      	ldr	r2, [pc, #224]	@ (8001ce0 <StartDefaultTask+0x1b0>)
 8001c00:	f04f 0300 	mov.w	r3, #0
 8001c04:	4931      	ldr	r1, [pc, #196]	@ (8001ccc <StartDefaultTask+0x19c>)
 8001c06:	4837      	ldr	r0, [pc, #220]	@ (8001ce4 <StartDefaultTask+0x1b4>)
 8001c08:	f00b fb06 	bl	800d218 <rclc_timer_init_default>

	// create massage


	//	 create publisher
	rclc_publisher_init_default(
 8001c0c:	f008 ff1c 	bl	800aa48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001c10:	4602      	mov	r2, r0
 8001c12:	4b35      	ldr	r3, [pc, #212]	@ (8001ce8 <StartDefaultTask+0x1b8>)
 8001c14:	4930      	ldr	r1, [pc, #192]	@ (8001cd8 <StartDefaultTask+0x1a8>)
 8001c16:	4835      	ldr	r0, [pc, #212]	@ (8001cec <StartDefaultTask+0x1bc>)
 8001c18:	f00b faca 	bl	800d1b0 <rclc_publisher_init_default>
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist) ,
			"/robot1/cmd_vel"
	);
	// publisher replace service problem
	rclc_publisher_init_default(
 8001c1c:	f008 ff14 	bl	800aa48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001c20:	4602      	mov	r2, r0
 8001c22:	4b33      	ldr	r3, [pc, #204]	@ (8001cf0 <StartDefaultTask+0x1c0>)
 8001c24:	492c      	ldr	r1, [pc, #176]	@ (8001cd8 <StartDefaultTask+0x1a8>)
 8001c26:	4833      	ldr	r0, [pc, #204]	@ (8001cf4 <StartDefaultTask+0x1c4>)
 8001c28:	f00b fac2 	bl	800d1b0 <rclc_publisher_init_default>
			&robot2_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist) ,
			"/robot2/cmd_vel"
	);
	rclc_publisher_init_default(
 8001c2c:	f008 ff0c 	bl	800aa48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001c30:	4602      	mov	r2, r0
 8001c32:	4b31      	ldr	r3, [pc, #196]	@ (8001cf8 <StartDefaultTask+0x1c8>)
 8001c34:	4928      	ldr	r1, [pc, #160]	@ (8001cd8 <StartDefaultTask+0x1a8>)
 8001c36:	4831      	ldr	r0, [pc, #196]	@ (8001cfc <StartDefaultTask+0x1cc>)
 8001c38:	f00b faba 	bl	800d1b0 <rclc_publisher_init_default>
			&robot3_publisher,
			&node,
			ROSIDL_GET_MSG_TYPE_SUPPORT(geometry_msgs, msg, Twist) ,
			"/robot3/cmd_vel"
	);
	rclc_publisher_init_default(
 8001c3c:	f008 ff04 	bl	800aa48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b2f      	ldr	r3, [pc, #188]	@ (8001d00 <StartDefaultTask+0x1d0>)
 8001c44:	4924      	ldr	r1, [pc, #144]	@ (8001cd8 <StartDefaultTask+0x1a8>)
 8001c46:	482f      	ldr	r0, [pc, #188]	@ (8001d04 <StartDefaultTask+0x1d4>)
 8001c48:	f00b fab2 	bl	800d1b0 <rclc_publisher_init_default>
//		ROSIDL_GET_SRV_TYPE_SUPPORT(std_srvs, srv, SetBool),
//		"/mode"
//	);

	// create executor
	executor = rclc_executor_get_zero_initialized_executor();
 8001c4c:	4c2e      	ldr	r4, [pc, #184]	@ (8001d08 <StartDefaultTask+0x1d8>)
 8001c4e:	463b      	mov	r3, r7
 8001c50:	4618      	mov	r0, r3
 8001c52:	f00a ff73 	bl	800cb3c <rclc_executor_get_zero_initialized_executor>
 8001c56:	4620      	mov	r0, r4
 8001c58:	463b      	mov	r3, r7
 8001c5a:	2288      	movs	r2, #136	@ 0x88
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f016 f854 	bl	8017d0a <memcpy>
	rclc_executor_init(&executor, &support.context, 4, &allocator);
 8001c62:	4b17      	ldr	r3, [pc, #92]	@ (8001cc0 <StartDefaultTask+0x190>)
 8001c64:	2204      	movs	r2, #4
 8001c66:	4919      	ldr	r1, [pc, #100]	@ (8001ccc <StartDefaultTask+0x19c>)
 8001c68:	4827      	ldr	r0, [pc, #156]	@ (8001d08 <StartDefaultTask+0x1d8>)
 8001c6a:	f00a ff71 	bl	800cb50 <rclc_executor_init>
	rclc_executor_add_timer(&executor, &timer);
 8001c6e:	491d      	ldr	r1, [pc, #116]	@ (8001ce4 <StartDefaultTask+0x1b4>)
 8001c70:	4825      	ldr	r0, [pc, #148]	@ (8001d08 <StartDefaultTask+0x1d8>)
 8001c72:	f00a ffdd 	bl	800cc30 <rclc_executor_add_timer>
//	rclc_executor_add_client(&executor, &mode_client, &mode_resp, mode_client_callback);
//	rclc_executor_spin(&executor);

	for(;;)
	{
		osDelay(10);
 8001c76:	200a      	movs	r0, #10
 8001c78:	f006 fa1a 	bl	80080b0 <osDelay>
	    rclc_executor_spin_some(&executor, RCL_MS_TO_NS(100));
 8001c7c:	a304      	add	r3, pc, #16	@ (adr r3, 8001c90 <StartDefaultTask+0x160>)
 8001c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c82:	4821      	ldr	r0, [pc, #132]	@ (8001d08 <StartDefaultTask+0x1d8>)
 8001c84:	f00b f9ea 	bl	800d05c <rclc_executor_spin_some>
		osDelay(10);
 8001c88:	bf00      	nop
 8001c8a:	e7f4      	b.n	8001c76 <StartDefaultTask+0x146>
 8001c8c:	f3af 8000 	nop.w
 8001c90:	05f5e100 	.word	0x05f5e100
 8001c94:	00000000 	.word	0x00000000
 8001c98:	080015f9 	.word	0x080015f9
 8001c9c:	08001595 	.word	0x08001595
 8001ca0:	08001575 	.word	0x08001575
 8001ca4:	08001549 	.word	0x08001549
 8001ca8:	20004b44 	.word	0x20004b44
 8001cac:	08001e29 	.word	0x08001e29
 8001cb0:	08001e6d 	.word	0x08001e6d
 8001cb4:	08001ea5 	.word	0x08001ea5
 8001cb8:	08001f11 	.word	0x08001f11
 8001cbc:	08018b78 	.word	0x08018b78
 8001cc0:	200046c4 	.word	0x200046c4
 8001cc4:	200046e0 	.word	0x200046e0
 8001cc8:	200046e4 	.word	0x200046e4
 8001ccc:	20004690 	.word	0x20004690
 8001cd0:	08018ba0 	.word	0x08018ba0
 8001cd4:	08018ba4 	.word	0x08018ba4
 8001cd8:	200046d8 	.word	0x200046d8
 8001cdc:	080017e1 	.word	0x080017e1
 8001ce0:	00989680 	.word	0x00989680
 8001ce4:	200046e8 	.word	0x200046e8
 8001ce8:	08018ba8 	.word	0x08018ba8
 8001cec:	20004778 	.word	0x20004778
 8001cf0:	08018bb8 	.word	0x08018bb8
 8001cf4:	2000477c 	.word	0x2000477c
 8001cf8:	08018bc8 	.word	0x08018bc8
 8001cfc:	20004780 	.word	0x20004780
 8001d00:	08018bd8 	.word	0x08018bd8
 8001d04:	20004784 	.word	0x20004784
 8001d08:	200046f0 	.word	0x200046f0

08001d0c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d10:	f000 fd2d 	bl	800276e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d14:	f000 f822 	bl	8001d5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d18:	f7ff fcc2 	bl	80016a0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001d1c:	f7ff fbda 	bl	80014d4 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8001d20:	f000 fbf4 	bl	800250c <MX_LPUART1_UART_Init>
  MX_RNG_Init();
 8001d24:	f000 f9e4 	bl	80020f0 <MX_RNG_Init>
  MX_IWDG_Init();
 8001d28:	f7ff fd3a 	bl	80017a0 <MX_IWDG_Init>
  MX_ADC2_Init();
 8001d2c:	f7ff f876 	bl	8000e1c <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8001d30:	217f      	movs	r1, #127	@ 0x7f
 8001d32:	4808      	ldr	r0, [pc, #32]	@ (8001d54 <main+0x48>)
 8001d34:	f002 f83a 	bl	8003dac <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc2, ADC_RawRead, 300);
 8001d38:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001d3c:	4906      	ldr	r1, [pc, #24]	@ (8001d58 <main+0x4c>)
 8001d3e:	4805      	ldr	r0, [pc, #20]	@ (8001d54 <main+0x48>)
 8001d40:	f001 f94c 	bl	8002fdc <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001d44:	f006 f8d8 	bl	8007ef8 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001d48:	f7ff f962 	bl	8001010 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001d4c:	f006 f8f8 	bl	8007f40 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d50:	bf00      	nop
 8001d52:	e7fd      	b.n	8001d50 <main+0x44>
 8001d54:	20000254 	.word	0x20000254
 8001d58:	20004860 	.word	0x20004860

08001d5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b094      	sub	sp, #80	@ 0x50
 8001d60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d62:	f107 0318 	add.w	r3, r7, #24
 8001d66:	2238      	movs	r2, #56	@ 0x38
 8001d68:	2100      	movs	r1, #0
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f015 ff04 	bl	8017b78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d70:	1d3b      	adds	r3, r7, #4
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
 8001d7c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d7e:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001d82:	f002 feaf 	bl	8004ae4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001d86:	230a      	movs	r3, #10
 8001d88:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001d8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001d8e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001d90:	2340      	movs	r3, #64	@ 0x40
 8001d92:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001d94:	2301      	movs	r3, #1
 8001d96:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d98:	2302      	movs	r3, #2
 8001d9a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8001da0:	2301      	movs	r3, #1
 8001da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 12;
 8001da4:	230c      	movs	r3, #12
 8001da6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001da8:	2302      	movs	r3, #2
 8001daa:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001dac:	2304      	movs	r3, #4
 8001dae:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001db0:	2302      	movs	r3, #2
 8001db2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001db4:	f107 0318 	add.w	r3, r7, #24
 8001db8:	4618      	mov	r0, r3
 8001dba:	f002 ff47 	bl	8004c4c <HAL_RCC_OscConfig>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d001      	beq.n	8001dc8 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8001dc4:	f000 f82a 	bl	8001e1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001dc8:	230f      	movs	r3, #15
 8001dca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001ddc:	1d3b      	adds	r3, r7, #4
 8001dde:	2103      	movs	r1, #3
 8001de0:	4618      	mov	r0, r3
 8001de2:	f003 fa45 	bl	8005270 <HAL_RCC_ClockConfig>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001dec:	f000 f816 	bl	8001e1c <Error_Handler>
  }
}
 8001df0:	bf00      	nop
 8001df2:	3750      	adds	r7, #80	@ 0x50
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b082      	sub	sp, #8
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4a04      	ldr	r2, [pc, #16]	@ (8001e18 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d101      	bne.n	8001e0e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e0a:	f000 fcc9 	bl	80027a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40012c00 	.word	0x40012c00

08001e1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001e20:	b672      	cpsid	i
}
 8001e22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e24:	bf00      	nop
 8001e26:	e7fd      	b.n	8001e24 <Error_Handler+0x8>

08001e28 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001e32:	4b0c      	ldr	r3, [pc, #48]	@ (8001e64 <microros_allocate+0x3c>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	461a      	mov	r2, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <microros_allocate+0x3c>)
 8001e40:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001e42:	4b09      	ldr	r3, [pc, #36]	@ (8001e68 <microros_allocate+0x40>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	461a      	mov	r2, r3
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4413      	add	r3, r2
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	4b06      	ldr	r3, [pc, #24]	@ (8001e68 <microros_allocate+0x40>)
 8001e50:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7ff f8ee 	bl	8001034 <pvPortMallocMicroROS>
 8001e58:	4603      	mov	r3, r0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20004ad4 	.word	0x20004ad4
 8001e68:	20004ad8 	.word	0x20004ad8

08001e6c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b082      	sub	sp, #8
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d00c      	beq.n	8001e96 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff f9fd 	bl	800127c <getBlockSize>
 8001e82:	4603      	mov	r3, r0
 8001e84:	4a06      	ldr	r2, [pc, #24]	@ (8001ea0 <microros_deallocate+0x34>)
 8001e86:	6812      	ldr	r2, [r2, #0]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	4b04      	ldr	r3, [pc, #16]	@ (8001ea0 <microros_deallocate+0x34>)
 8001e8e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff f997 	bl	80011c4 <vPortFreeMicroROS>
  }
}
 8001e96:	bf00      	nop
 8001e98:	3708      	adds	r7, #8
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	20004ad8 	.word	0x20004ad8

08001ea4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b084      	sub	sp, #16
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	60f8      	str	r0, [r7, #12]
 8001eac:	60b9      	str	r1, [r7, #8]
 8001eae:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001eb0:	4b15      	ldr	r3, [pc, #84]	@ (8001f08 <microros_reallocate+0x64>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	68bb      	ldr	r3, [r7, #8]
 8001eb8:	4413      	add	r3, r2
 8001eba:	461a      	mov	r2, r3
 8001ebc:	4b12      	ldr	r3, [pc, #72]	@ (8001f08 <microros_reallocate+0x64>)
 8001ebe:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001ec0:	4b12      	ldr	r3, [pc, #72]	@ (8001f0c <microros_reallocate+0x68>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	4413      	add	r3, r2
 8001eca:	461a      	mov	r2, r3
 8001ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8001f0c <microros_reallocate+0x68>)
 8001ece:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d104      	bne.n	8001ee0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f7ff f8ac 	bl	8001034 <pvPortMallocMicroROS>
 8001edc:	4603      	mov	r3, r0
 8001ede:	e00e      	b.n	8001efe <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001ee0:	68f8      	ldr	r0, [r7, #12]
 8001ee2:	f7ff f9cb 	bl	800127c <getBlockSize>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4a08      	ldr	r2, [pc, #32]	@ (8001f0c <microros_reallocate+0x68>)
 8001eea:	6812      	ldr	r2, [r2, #0]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	461a      	mov	r2, r3
 8001ef0:	4b06      	ldr	r3, [pc, #24]	@ (8001f0c <microros_reallocate+0x68>)
 8001ef2:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001ef4:	68b9      	ldr	r1, [r7, #8]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f7ff f9de 	bl	80012b8 <pvPortReallocMicroROS>
 8001efc:	4603      	mov	r3, r0
  }
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3710      	adds	r7, #16
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	20004ad4 	.word	0x20004ad4
 8001f0c:	20004ad8 	.word	0x20004ad8

08001f10 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	60f8      	str	r0, [r7, #12]
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	68ba      	ldr	r2, [r7, #8]
 8001f20:	fb02 f303 	mul.w	r3, r2, r3
 8001f24:	4a0c      	ldr	r2, [pc, #48]	@ (8001f58 <microros_zero_allocate+0x48>)
 8001f26:	6812      	ldr	r2, [r2, #0]
 8001f28:	4413      	add	r3, r2
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	4b0a      	ldr	r3, [pc, #40]	@ (8001f58 <microros_zero_allocate+0x48>)
 8001f2e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	fb02 f303 	mul.w	r3, r2, r3
 8001f38:	4a08      	ldr	r2, [pc, #32]	@ (8001f5c <microros_zero_allocate+0x4c>)
 8001f3a:	6812      	ldr	r2, [r2, #0]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	461a      	mov	r2, r3
 8001f40:	4b06      	ldr	r3, [pc, #24]	@ (8001f5c <microros_zero_allocate+0x4c>)
 8001f42:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001f44:	68b9      	ldr	r1, [r7, #8]
 8001f46:	68f8      	ldr	r0, [r7, #12]
 8001f48:	f7ff f9e3 	bl	8001312 <pvPortCallocMicroROS>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	20004ad4 	.word	0x20004ad4
 8001f5c:	20004ad8 	.word	0x20004ad8

08001f60 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001f60:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f64:	b086      	sub	sp, #24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001f6e:	2300      	movs	r3, #0
 8001f70:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001f72:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f76:	a320      	add	r3, pc, #128	@ (adr r3, 8001ff8 <UTILS_NanosecondsToTimespec+0x98>)
 8001f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f7c:	f7fe fd86 	bl	8000a8c <__aeabi_ldivmod>
 8001f80:	4602      	mov	r2, r0
 8001f82:	460b      	mov	r3, r1
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001f8a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001f8e:	a31a      	add	r3, pc, #104	@ (adr r3, 8001ff8 <UTILS_NanosecondsToTimespec+0x98>)
 8001f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f94:	f7fe fd7a 	bl	8000a8c <__aeabi_ldivmod>
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	da20      	bge.n	8001fe6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	4a11      	ldr	r2, [pc, #68]	@ (8001ff0 <UTILS_NanosecondsToTimespec+0x90>)
 8001faa:	fb82 1203 	smull	r1, r2, r2, r3
 8001fae:	1712      	asrs	r2, r2, #28
 8001fb0:	17db      	asrs	r3, r3, #31
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	3301      	adds	r3, #1
 8001fb6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	6979      	ldr	r1, [r7, #20]
 8001fc0:	17c8      	asrs	r0, r1, #31
 8001fc2:	460c      	mov	r4, r1
 8001fc4:	4605      	mov	r5, r0
 8001fc6:	ebb2 0804 	subs.w	r8, r2, r4
 8001fca:	eb63 0905 	sbc.w	r9, r3, r5
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	4906      	ldr	r1, [pc, #24]	@ (8001ff4 <UTILS_NanosecondsToTimespec+0x94>)
 8001fdc:	fb01 f303 	mul.w	r3, r1, r3
 8001fe0:	441a      	add	r2, r3
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
    }
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ff0:	44b82fa1 	.word	0x44b82fa1
 8001ff4:	3b9aca00 	.word	0x3b9aca00
 8001ff8:	3b9aca00 	.word	0x3b9aca00
 8001ffc:	00000000 	.word	0x00000000

08002000 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8002000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002004:	b08e      	sub	sp, #56	@ 0x38
 8002006:	af00      	add	r7, sp, #0
 8002008:	6278      	str	r0, [r7, #36]	@ 0x24
 800200a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 800200c:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8002010:	2300      	movs	r3, #0
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8002016:	f04f 0200 	mov.w	r2, #0
 800201a:	f04f 0300 	mov.w	r3, #0
 800201e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8002022:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002026:	4618      	mov	r0, r3
 8002028:	f007 fb0e 	bl	8009648 <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 800202c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800202e:	17da      	asrs	r2, r3, #31
 8002030:	61bb      	str	r3, [r7, #24]
 8002032:	61fa      	str	r2, [r7, #28]
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	f04f 0300 	mov.w	r3, #0
 800203c:	69b9      	ldr	r1, [r7, #24]
 800203e:	000b      	movs	r3, r1
 8002040:	2200      	movs	r2, #0
 8002042:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8002046:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002048:	2200      	movs	r2, #0
 800204a:	461c      	mov	r4, r3
 800204c:	4615      	mov	r5, r2
 800204e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002052:	1911      	adds	r1, r2, r4
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	416b      	adcs	r3, r5
 8002058:	60fb      	str	r3, [r7, #12]
 800205a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 800205e:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8002062:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	@ 0x30
 8002066:	4602      	mov	r2, r0
 8002068:	460b      	mov	r3, r1
 800206a:	f04f 0400 	mov.w	r4, #0
 800206e:	f04f 0500 	mov.w	r5, #0
 8002072:	015d      	lsls	r5, r3, #5
 8002074:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8002078:	0154      	lsls	r4, r2, #5
 800207a:	4622      	mov	r2, r4
 800207c:	462b      	mov	r3, r5
 800207e:	ebb2 0800 	subs.w	r8, r2, r0
 8002082:	eb63 0901 	sbc.w	r9, r3, r1
 8002086:	f04f 0200 	mov.w	r2, #0
 800208a:	f04f 0300 	mov.w	r3, #0
 800208e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8002092:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8002096:	ea4f 2248 	mov.w	r2, r8, lsl #9
 800209a:	4690      	mov	r8, r2
 800209c:	4699      	mov	r9, r3
 800209e:	eb18 0a00 	adds.w	sl, r8, r0
 80020a2:	eb49 0b01 	adc.w	fp, r9, r1
 80020a6:	f04f 0200 	mov.w	r2, #0
 80020aa:	f04f 0300 	mov.w	r3, #0
 80020ae:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020b2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020b6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020ba:	ebb2 040a 	subs.w	r4, r2, sl
 80020be:	603c      	str	r4, [r7, #0]
 80020c0:	eb63 030b 	sbc.w	r3, r3, fp
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ca:	4623      	mov	r3, r4
 80020cc:	181b      	adds	r3, r3, r0
 80020ce:	613b      	str	r3, [r7, #16]
 80020d0:	462b      	mov	r3, r5
 80020d2:	eb41 0303 	adc.w	r3, r1, r3
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	6a3a      	ldr	r2, [r7, #32]
 80020da:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80020de:	f7ff ff3f 	bl	8001f60 <UTILS_NanosecondsToTimespec>

    return 0;
 80020e2:	2300      	movs	r3, #0
 80020e4:	4618      	mov	r0, r3
 80020e6:	3738      	adds	r7, #56	@ 0x38
 80020e8:	46bd      	mov	sp, r7
 80020ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080020f0 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 80020f4:	4b07      	ldr	r3, [pc, #28]	@ (8002114 <MX_RNG_Init+0x24>)
 80020f6:	4a08      	ldr	r2, [pc, #32]	@ (8002118 <MX_RNG_Init+0x28>)
 80020f8:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 80020fa:	4b06      	ldr	r3, [pc, #24]	@ (8002114 <MX_RNG_Init+0x24>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8002100:	4804      	ldr	r0, [pc, #16]	@ (8002114 <MX_RNG_Init+0x24>)
 8002102:	f003 fd51 	bl	8005ba8 <HAL_RNG_Init>
 8002106:	4603      	mov	r3, r0
 8002108:	2b00      	cmp	r3, #0
 800210a:	d001      	beq.n	8002110 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 800210c:	f7ff fe86 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8002110:	bf00      	nop
 8002112:	bd80      	pop	{r7, pc}
 8002114:	20004adc 	.word	0x20004adc
 8002118:	50060800 	.word	0x50060800

0800211c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b098      	sub	sp, #96	@ 0x60
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002124:	f107 030c 	add.w	r3, r7, #12
 8002128:	2254      	movs	r2, #84	@ 0x54
 800212a:	2100      	movs	r1, #0
 800212c:	4618      	mov	r0, r3
 800212e:	f015 fd23 	bl	8017b78 <memset>
  if(rngHandle->Instance==RNG)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a11      	ldr	r2, [pc, #68]	@ (800217c <HAL_RNG_MspInit+0x60>)
 8002138:	4293      	cmp	r3, r2
 800213a:	d11b      	bne.n	8002174 <HAL_RNG_MspInit+0x58>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800213c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8002140:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLL;
 8002142:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8002146:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002148:	f107 030c 	add.w	r3, r7, #12
 800214c:	4618      	mov	r0, r3
 800214e:	f003 fadd 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 8002152:	4603      	mov	r3, r0
 8002154:	2b00      	cmp	r3, #0
 8002156:	d001      	beq.n	800215c <HAL_RNG_MspInit+0x40>
    {
      Error_Handler();
 8002158:	f7ff fe60 	bl	8001e1c <Error_Handler>
    }

    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800215c:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <HAL_RNG_MspInit+0x64>)
 800215e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002160:	4a07      	ldr	r2, [pc, #28]	@ (8002180 <HAL_RNG_MspInit+0x64>)
 8002162:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002166:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002168:	4b05      	ldr	r3, [pc, #20]	@ (8002180 <HAL_RNG_MspInit+0x64>)
 800216a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800216c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002170:	60bb      	str	r3, [r7, #8]
 8002172:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8002174:	bf00      	nop
 8002176:	3760      	adds	r7, #96	@ 0x60
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	50060800 	.word	0x50060800
 8002180:	40021000 	.word	0x40021000

08002184 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800218a:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_MspInit+0x50>)
 800218c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800218e:	4a11      	ldr	r2, [pc, #68]	@ (80021d4 <HAL_MspInit+0x50>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6613      	str	r3, [r2, #96]	@ 0x60
 8002196:	4b0f      	ldr	r3, [pc, #60]	@ (80021d4 <HAL_MspInit+0x50>)
 8002198:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	607b      	str	r3, [r7, #4]
 80021a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021a2:	4b0c      	ldr	r3, [pc, #48]	@ (80021d4 <HAL_MspInit+0x50>)
 80021a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021a6:	4a0b      	ldr	r2, [pc, #44]	@ (80021d4 <HAL_MspInit+0x50>)
 80021a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ae:	4b09      	ldr	r3, [pc, #36]	@ (80021d4 <HAL_MspInit+0x50>)
 80021b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b6:	603b      	str	r3, [r7, #0]
 80021b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80021ba:	2200      	movs	r2, #0
 80021bc:	210f      	movs	r1, #15
 80021be:	f06f 0001 	mvn.w	r0, #1
 80021c2:	f001 ff0d 	bl	8003fe0 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80021c6:	f002 fd31 	bl	8004c2c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000

080021d8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	@ 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021e8:	4b2c      	ldr	r3, [pc, #176]	@ (800229c <HAL_InitTick+0xc4>)
 80021ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021ec:	4a2b      	ldr	r2, [pc, #172]	@ (800229c <HAL_InitTick+0xc4>)
 80021ee:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80021f2:	6613      	str	r3, [r2, #96]	@ 0x60
 80021f4:	4b29      	ldr	r3, [pc, #164]	@ (800229c <HAL_InitTick+0xc4>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002200:	f107 020c 	add.w	r2, r7, #12
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fa06 	bl	800561c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002210:	f003 f9ee 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 8002214:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002216:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002218:	4a21      	ldr	r2, [pc, #132]	@ (80022a0 <HAL_InitTick+0xc8>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	0c9b      	lsrs	r3, r3, #18
 8002220:	3b01      	subs	r3, #1
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002224:	4b1f      	ldr	r3, [pc, #124]	@ (80022a4 <HAL_InitTick+0xcc>)
 8002226:	4a20      	ldr	r2, [pc, #128]	@ (80022a8 <HAL_InitTick+0xd0>)
 8002228:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800222a:	4b1e      	ldr	r3, [pc, #120]	@ (80022a4 <HAL_InitTick+0xcc>)
 800222c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002230:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002232:	4a1c      	ldr	r2, [pc, #112]	@ (80022a4 <HAL_InitTick+0xcc>)
 8002234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002236:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002238:	4b1a      	ldr	r3, [pc, #104]	@ (80022a4 <HAL_InitTick+0xcc>)
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800223e:	4b19      	ldr	r3, [pc, #100]	@ (80022a4 <HAL_InitTick+0xcc>)
 8002240:	2200      	movs	r2, #0
 8002242:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8002244:	4817      	ldr	r0, [pc, #92]	@ (80022a4 <HAL_InitTick+0xcc>)
 8002246:	f003 fce4 	bl	8005c12 <HAL_TIM_Base_Init>
 800224a:	4603      	mov	r3, r0
 800224c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002250:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002254:	2b00      	cmp	r3, #0
 8002256:	d11b      	bne.n	8002290 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002258:	4812      	ldr	r0, [pc, #72]	@ (80022a4 <HAL_InitTick+0xcc>)
 800225a:	f003 fd3b 	bl	8005cd4 <HAL_TIM_Base_Start_IT>
 800225e:	4603      	mov	r3, r0
 8002260:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002264:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002268:	2b00      	cmp	r3, #0
 800226a:	d111      	bne.n	8002290 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800226c:	2019      	movs	r0, #25
 800226e:	f001 fed1 	bl	8004014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d808      	bhi.n	800228a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	2019      	movs	r0, #25
 800227e:	f001 feaf 	bl	8003fe0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002282:	4a0a      	ldr	r2, [pc, #40]	@ (80022ac <HAL_InitTick+0xd4>)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	e002      	b.n	8002290 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002290:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002294:	4618      	mov	r0, r3
 8002296:	3730      	adds	r7, #48	@ 0x30
 8002298:	46bd      	mov	sp, r7
 800229a:	bd80      	pop	{r7, pc}
 800229c:	40021000 	.word	0x40021000
 80022a0:	431bde83 	.word	0x431bde83
 80022a4:	20004af0 	.word	0x20004af0
 80022a8:	40012c00 	.word	0x40012c00
 80022ac:	20000008 	.word	0x20000008

080022b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022b4:	bf00      	nop
 80022b6:	e7fd      	b.n	80022b4 <NMI_Handler+0x4>

080022b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022bc:	bf00      	nop
 80022be:	e7fd      	b.n	80022bc <HardFault_Handler+0x4>

080022c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022c0:	b480      	push	{r7}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022c4:	bf00      	nop
 80022c6:	e7fd      	b.n	80022c4 <MemManage_Handler+0x4>

080022c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <BusFault_Handler+0x4>

080022d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022d0:	b480      	push	{r7}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022d4:	bf00      	nop
 80022d6:	e7fd      	b.n	80022d4 <UsageFault_Handler+0x4>

080022d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
	...

080022e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_rx);
 80022ec:	4802      	ldr	r0, [pc, #8]	@ (80022f8 <DMA1_Channel1_IRQHandler+0x10>)
 80022ee:	f002 f882 	bl	80043f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	20004bd8 	.word	0x20004bd8

080022fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_lpuart1_tx);
 8002300:	4802      	ldr	r0, [pc, #8]	@ (800230c <DMA1_Channel2_IRQHandler+0x10>)
 8002302:	f002 f878 	bl	80043f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	20004c38 	.word	0x20004c38

08002310 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002314:	4802      	ldr	r0, [pc, #8]	@ (8002320 <DMA1_Channel3_IRQHandler+0x10>)
 8002316:	f002 f86e 	bl	80043f6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800231a:	bf00      	nop
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	200002c0 	.word	0x200002c0

08002324 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002328:	4802      	ldr	r0, [pc, #8]	@ (8002334 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800232a:	f003 fd4b 	bl	8005dc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	bd80      	pop	{r7, pc}
 8002332:	bf00      	nop
 8002334:	20004af0 	.word	0x20004af0

08002338 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800233c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002340:	f002 fb4e 	bl	80049e0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002344:	bf00      	nop
 8002346:	bd80      	pop	{r7, pc}

08002348 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 800234c:	4802      	ldr	r0, [pc, #8]	@ (8002358 <LPUART1_IRQHandler+0x10>)
 800234e:	f004 f95d 	bl	800660c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	20004b44 	.word	0x20004b44

0800235c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return 1;
 8002360:	2301      	movs	r3, #1
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <_kill>:

int _kill(int pid, int sig)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002376:	f015 fc93 	bl	8017ca0 <__errno>
 800237a:	4603      	mov	r3, r0
 800237c:	2216      	movs	r2, #22
 800237e:	601a      	str	r2, [r3, #0]
  return -1;
 8002380:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002384:	4618      	mov	r0, r3
 8002386:	3708      	adds	r7, #8
 8002388:	46bd      	mov	sp, r7
 800238a:	bd80      	pop	{r7, pc}

0800238c <_exit>:

void _exit (int status)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002394:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002398:	6878      	ldr	r0, [r7, #4]
 800239a:	f7ff ffe7 	bl	800236c <_kill>
  while (1) {}    /* Make sure we hang here */
 800239e:	bf00      	nop
 80023a0:	e7fd      	b.n	800239e <_exit+0x12>

080023a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b086      	sub	sp, #24
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	60f8      	str	r0, [r7, #12]
 80023aa:	60b9      	str	r1, [r7, #8]
 80023ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	e00a      	b.n	80023ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80023b4:	f3af 8000 	nop.w
 80023b8:	4601      	mov	r1, r0
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	1c5a      	adds	r2, r3, #1
 80023be:	60ba      	str	r2, [r7, #8]
 80023c0:	b2ca      	uxtb	r2, r1
 80023c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	617b      	str	r3, [r7, #20]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	dbf0      	blt.n	80023b4 <_read+0x12>
  }

  return len;
 80023d2:	687b      	ldr	r3, [r7, #4]
}
 80023d4:	4618      	mov	r0, r3
 80023d6:	3718      	adds	r7, #24
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}

080023dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	60f8      	str	r0, [r7, #12]
 80023e4:	60b9      	str	r1, [r7, #8]
 80023e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e8:	2300      	movs	r3, #0
 80023ea:	617b      	str	r3, [r7, #20]
 80023ec:	e009      	b.n	8002402 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	60ba      	str	r2, [r7, #8]
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023fc:	697b      	ldr	r3, [r7, #20]
 80023fe:	3301      	adds	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	697a      	ldr	r2, [r7, #20]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	429a      	cmp	r2, r3
 8002408:	dbf1      	blt.n	80023ee <_write+0x12>
  }
  return len;
 800240a:	687b      	ldr	r3, [r7, #4]
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}

08002414 <_close>:

int _close(int file)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800241c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800243c:	605a      	str	r2, [r3, #4]
  return 0;
 800243e:	2300      	movs	r3, #0
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <_isatty>:

int _isatty(int file)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002454:	2301      	movs	r3, #1
}
 8002456:	4618      	mov	r0, r3
 8002458:	370c      	adds	r7, #12
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr

08002462 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002462:	b480      	push	{r7}
 8002464:	b085      	sub	sp, #20
 8002466:	af00      	add	r7, sp, #0
 8002468:	60f8      	str	r0, [r7, #12]
 800246a:	60b9      	str	r1, [r7, #8]
 800246c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr

0800247c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002484:	4a14      	ldr	r2, [pc, #80]	@ (80024d8 <_sbrk+0x5c>)
 8002486:	4b15      	ldr	r3, [pc, #84]	@ (80024dc <_sbrk+0x60>)
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002490:	4b13      	ldr	r3, [pc, #76]	@ (80024e0 <_sbrk+0x64>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d102      	bne.n	800249e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <_sbrk+0x64>)
 800249a:	4a12      	ldr	r2, [pc, #72]	@ (80024e4 <_sbrk+0x68>)
 800249c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800249e:	4b10      	ldr	r3, [pc, #64]	@ (80024e0 <_sbrk+0x64>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	4413      	add	r3, r2
 80024a6:	693a      	ldr	r2, [r7, #16]
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d207      	bcs.n	80024bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80024ac:	f015 fbf8 	bl	8017ca0 <__errno>
 80024b0:	4603      	mov	r3, r0
 80024b2:	220c      	movs	r2, #12
 80024b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80024ba:	e009      	b.n	80024d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024bc:	4b08      	ldr	r3, [pc, #32]	@ (80024e0 <_sbrk+0x64>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024c2:	4b07      	ldr	r3, [pc, #28]	@ (80024e0 <_sbrk+0x64>)
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4413      	add	r3, r2
 80024ca:	4a05      	ldr	r2, [pc, #20]	@ (80024e0 <_sbrk+0x64>)
 80024cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ce:	68fb      	ldr	r3, [r7, #12]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3718      	adds	r7, #24
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	20020000 	.word	0x20020000
 80024dc:	00000400 	.word	0x00000400
 80024e0:	20004b40 	.word	0x20004b40
 80024e4:	2000b4a0 	.word	0x2000b4a0

080024e8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <SystemInit+0x20>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024f2:	4a05      	ldr	r2, [pc, #20]	@ (8002508 <SystemInit+0x20>)
 80024f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000ed00 	.word	0xe000ed00

0800250c <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_lpuart1_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8002510:	4b21      	ldr	r3, [pc, #132]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002512:	4a22      	ldr	r2, [pc, #136]	@ (800259c <MX_LPUART1_UART_Init+0x90>)
 8002514:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002516:	4b20      	ldr	r3, [pc, #128]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002518:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800251c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800251e:	4b1e      	ldr	r3, [pc, #120]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002520:	2200      	movs	r2, #0
 8002522:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002524:	4b1c      	ldr	r3, [pc, #112]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002526:	2200      	movs	r2, #0
 8002528:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800252a:	4b1b      	ldr	r3, [pc, #108]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 800252c:	2200      	movs	r2, #0
 800252e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8002530:	4b19      	ldr	r3, [pc, #100]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002532:	220c      	movs	r2, #12
 8002534:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002536:	4b18      	ldr	r3, [pc, #96]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002538:	2200      	movs	r2, #0
 800253a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800253c:	4b16      	ldr	r3, [pc, #88]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 800253e:	2200      	movs	r2, #0
 8002540:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002542:	4b15      	ldr	r3, [pc, #84]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002544:	2200      	movs	r2, #0
 8002546:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002548:	4b13      	ldr	r3, [pc, #76]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 800254a:	2200      	movs	r2, #0
 800254c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800254e:	4812      	ldr	r0, [pc, #72]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002550:	f003 feaa 	bl	80062a8 <HAL_UART_Init>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d001      	beq.n	800255e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800255a:	f7ff fc5f 	bl	8001e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800255e:	2100      	movs	r1, #0
 8002560:	480d      	ldr	r0, [pc, #52]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002562:	f005 fbba 	bl	8007cda <HAL_UARTEx_SetTxFifoThreshold>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d001      	beq.n	8002570 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800256c:	f7ff fc56 	bl	8001e1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002570:	2100      	movs	r1, #0
 8002572:	4809      	ldr	r0, [pc, #36]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002574:	f005 fbef 	bl	8007d56 <HAL_UARTEx_SetRxFifoThreshold>
 8002578:	4603      	mov	r3, r0
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800257e:	f7ff fc4d 	bl	8001e1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_LPUART1_UART_Init+0x8c>)
 8002584:	f005 fb70 	bl	8007c68 <HAL_UARTEx_DisableFifoMode>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800258e:	f7ff fc45 	bl	8001e1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20004b44 	.word	0x20004b44
 800259c:	40008000 	.word	0x40008000

080025a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b09e      	sub	sp, #120	@ 0x78
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b8:	f107 0310 	add.w	r3, r7, #16
 80025bc:	2254      	movs	r2, #84	@ 0x54
 80025be:	2100      	movs	r1, #0
 80025c0:	4618      	mov	r0, r3
 80025c2:	f015 fad9 	bl	8017b78 <memset>
  if(uartHandle->Instance==LPUART1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a4e      	ldr	r2, [pc, #312]	@ (8002704 <HAL_UART_MspInit+0x164>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	f040 8094 	bne.w	80026fa <HAL_UART_MspInit+0x15a>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80025d2:	2320      	movs	r3, #32
 80025d4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80025da:	f107 0310 	add.w	r3, r7, #16
 80025de:	4618      	mov	r0, r3
 80025e0:	f003 f894 	bl	800570c <HAL_RCCEx_PeriphCLKConfig>
 80025e4:	4603      	mov	r3, r0
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80025ea:	f7ff fc17 	bl	8001e1c <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80025ee:	4b46      	ldr	r3, [pc, #280]	@ (8002708 <HAL_UART_MspInit+0x168>)
 80025f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f2:	4a45      	ldr	r2, [pc, #276]	@ (8002708 <HAL_UART_MspInit+0x168>)
 80025f4:	f043 0301 	orr.w	r3, r3, #1
 80025f8:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80025fa:	4b43      	ldr	r3, [pc, #268]	@ (8002708 <HAL_UART_MspInit+0x168>)
 80025fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002606:	4b40      	ldr	r3, [pc, #256]	@ (8002708 <HAL_UART_MspInit+0x168>)
 8002608:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800260a:	4a3f      	ldr	r2, [pc, #252]	@ (8002708 <HAL_UART_MspInit+0x168>)
 800260c:	f043 0301 	orr.w	r3, r3, #1
 8002610:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002612:	4b3d      	ldr	r3, [pc, #244]	@ (8002708 <HAL_UART_MspInit+0x168>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002616:	f003 0301 	and.w	r3, r3, #1
 800261a:	60bb      	str	r3, [r7, #8]
 800261c:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800261e:	230c      	movs	r3, #12
 8002620:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002622:	2302      	movs	r3, #2
 8002624:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262a:	2300      	movs	r3, #0
 800262c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800262e:	230c      	movs	r3, #12
 8002630:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002632:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800263c:	f002 f836 	bl	80046ac <HAL_GPIO_Init>

    /* LPUART1 DMA Init */
    /* LPUART1_RX Init */
    hdma_lpuart1_rx.Instance = DMA1_Channel1;
 8002640:	4b32      	ldr	r3, [pc, #200]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002642:	4a33      	ldr	r2, [pc, #204]	@ (8002710 <HAL_UART_MspInit+0x170>)
 8002644:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_rx.Init.Request = DMA_REQUEST_LPUART1_RX;
 8002646:	4b31      	ldr	r3, [pc, #196]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002648:	2222      	movs	r2, #34	@ 0x22
 800264a:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800264c:	4b2f      	ldr	r3, [pc, #188]	@ (800270c <HAL_UART_MspInit+0x16c>)
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002652:	4b2e      	ldr	r3, [pc, #184]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002654:	2200      	movs	r2, #0
 8002656:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002658:	4b2c      	ldr	r3, [pc, #176]	@ (800270c <HAL_UART_MspInit+0x16c>)
 800265a:	2280      	movs	r2, #128	@ 0x80
 800265c:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800265e:	4b2b      	ldr	r3, [pc, #172]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002664:	4b29      	ldr	r3, [pc, #164]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002666:	2200      	movs	r2, #0
 8002668:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_rx.Init.Mode = DMA_CIRCULAR;
 800266a:	4b28      	ldr	r3, [pc, #160]	@ (800270c <HAL_UART_MspInit+0x16c>)
 800266c:	2220      	movs	r2, #32
 800266e:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8002670:	4b26      	ldr	r3, [pc, #152]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002672:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 8002676:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_rx) != HAL_OK)
 8002678:	4824      	ldr	r0, [pc, #144]	@ (800270c <HAL_UART_MspInit+0x16c>)
 800267a:	f001 fcd9 	bl	8004030 <HAL_DMA_Init>
 800267e:	4603      	mov	r3, r0
 8002680:	2b00      	cmp	r3, #0
 8002682:	d001      	beq.n	8002688 <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 8002684:	f7ff fbca 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_lpuart1_rx);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	4a20      	ldr	r2, [pc, #128]	@ (800270c <HAL_UART_MspInit+0x16c>)
 800268c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002690:	4a1e      	ldr	r2, [pc, #120]	@ (800270c <HAL_UART_MspInit+0x16c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1_TX Init */
    hdma_lpuart1_tx.Instance = DMA1_Channel2;
 8002696:	4b1f      	ldr	r3, [pc, #124]	@ (8002714 <HAL_UART_MspInit+0x174>)
 8002698:	4a1f      	ldr	r2, [pc, #124]	@ (8002718 <HAL_UART_MspInit+0x178>)
 800269a:	601a      	str	r2, [r3, #0]
    hdma_lpuart1_tx.Init.Request = DMA_REQUEST_LPUART1_TX;
 800269c:	4b1d      	ldr	r3, [pc, #116]	@ (8002714 <HAL_UART_MspInit+0x174>)
 800269e:	2223      	movs	r2, #35	@ 0x23
 80026a0:	605a      	str	r2, [r3, #4]
    hdma_lpuart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026a2:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026a4:	2210      	movs	r2, #16
 80026a6:	609a      	str	r2, [r3, #8]
    hdma_lpuart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	60da      	str	r2, [r3, #12]
    hdma_lpuart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80026ae:	4b19      	ldr	r3, [pc, #100]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026b0:	2280      	movs	r2, #128	@ 0x80
 80026b2:	611a      	str	r2, [r3, #16]
    hdma_lpuart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026b4:	4b17      	ldr	r3, [pc, #92]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	615a      	str	r2, [r3, #20]
    hdma_lpuart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026ba:	4b16      	ldr	r3, [pc, #88]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026bc:	2200      	movs	r2, #0
 80026be:	619a      	str	r2, [r3, #24]
    hdma_lpuart1_tx.Init.Mode = DMA_NORMAL;
 80026c0:	4b14      	ldr	r3, [pc, #80]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026c2:	2200      	movs	r2, #0
 80026c4:	61da      	str	r2, [r3, #28]
    hdma_lpuart1_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80026c6:	4b13      	ldr	r3, [pc, #76]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026c8:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80026cc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_lpuart1_tx) != HAL_OK)
 80026ce:	4811      	ldr	r0, [pc, #68]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026d0:	f001 fcae 	bl	8004030 <HAL_DMA_Init>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_UART_MspInit+0x13e>
    {
      Error_Handler();
 80026da:	f7ff fb9f 	bl	8001e1c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_lpuart1_tx);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a0c      	ldr	r2, [pc, #48]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026e2:	67da      	str	r2, [r3, #124]	@ 0x7c
 80026e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002714 <HAL_UART_MspInit+0x174>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	2105      	movs	r1, #5
 80026ee:	205b      	movs	r0, #91	@ 0x5b
 80026f0:	f001 fc76 	bl	8003fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80026f4:	205b      	movs	r0, #91	@ 0x5b
 80026f6:	f001 fc8d 	bl	8004014 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 80026fa:	bf00      	nop
 80026fc:	3778      	adds	r7, #120	@ 0x78
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	40008000 	.word	0x40008000
 8002708:	40021000 	.word	0x40021000
 800270c:	20004bd8 	.word	0x20004bd8
 8002710:	40020008 	.word	0x40020008
 8002714:	20004c38 	.word	0x20004c38
 8002718:	4002001c 	.word	0x4002001c

0800271c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800271c:	480d      	ldr	r0, [pc, #52]	@ (8002754 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800271e:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002720:	f7ff fee2 	bl	80024e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002724:	480c      	ldr	r0, [pc, #48]	@ (8002758 <LoopForever+0x6>)
  ldr r1, =_edata
 8002726:	490d      	ldr	r1, [pc, #52]	@ (800275c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002728:	4a0d      	ldr	r2, [pc, #52]	@ (8002760 <LoopForever+0xe>)
  movs r3, #0
 800272a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800272c:	e002      	b.n	8002734 <LoopCopyDataInit>

0800272e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800272e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002730:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002732:	3304      	adds	r3, #4

08002734 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002734:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002736:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002738:	d3f9      	bcc.n	800272e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800273a:	4a0a      	ldr	r2, [pc, #40]	@ (8002764 <LoopForever+0x12>)
  ldr r4, =_ebss
 800273c:	4c0a      	ldr	r4, [pc, #40]	@ (8002768 <LoopForever+0x16>)
  movs r3, #0
 800273e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002740:	e001      	b.n	8002746 <LoopFillZerobss>

08002742 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002742:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002744:	3204      	adds	r2, #4

08002746 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002746:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002748:	d3fb      	bcc.n	8002742 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800274a:	f015 faaf 	bl	8017cac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800274e:	f7ff fadd 	bl	8001d0c <main>

08002752 <LoopForever>:

LoopForever:
    b LoopForever
 8002752:	e7fe      	b.n	8002752 <LoopForever>
  ldr   r0, =_estack
 8002754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800275c:	20000234 	.word	0x20000234
  ldr r2, =_sidata
 8002760:	08019964 	.word	0x08019964
  ldr r2, =_sbss
 8002764:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002768:	2000b4a0 	.word	0x2000b4a0

0800276c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800276c:	e7fe      	b.n	800276c <ADC1_2_IRQHandler>

0800276e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800276e:	b580      	push	{r7, lr}
 8002770:	b082      	sub	sp, #8
 8002772:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002774:	2300      	movs	r3, #0
 8002776:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002778:	2003      	movs	r0, #3
 800277a:	f001 fc26 	bl	8003fca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800277e:	200f      	movs	r0, #15
 8002780:	f7ff fd2a 	bl	80021d8 <HAL_InitTick>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d002      	beq.n	8002790 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	71fb      	strb	r3, [r7, #7]
 800278e:	e001      	b.n	8002794 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002790:	f7ff fcf8 	bl	8002184 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002794:	79fb      	ldrb	r3, [r7, #7]

}
 8002796:	4618      	mov	r0, r3
 8002798:	3708      	adds	r7, #8
 800279a:	46bd      	mov	sp, r7
 800279c:	bd80      	pop	{r7, pc}
	...

080027a0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027a0:	b480      	push	{r7}
 80027a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027a4:	4b05      	ldr	r3, [pc, #20]	@ (80027bc <HAL_IncTick+0x1c>)
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <HAL_IncTick+0x20>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4413      	add	r3, r2
 80027ae:	4a03      	ldr	r2, [pc, #12]	@ (80027bc <HAL_IncTick+0x1c>)
 80027b0:	6013      	str	r3, [r2, #0]
}
 80027b2:	bf00      	nop
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	20004c98 	.word	0x20004c98
 80027c0:	2000000c 	.word	0x2000000c

080027c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return uwTick;
 80027c8:	4b03      	ldr	r3, [pc, #12]	@ (80027d8 <HAL_GetTick+0x14>)
 80027ca:	681b      	ldr	r3, [r3, #0]
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	20004c98 	.word	0x20004c98

080027dc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	609a      	str	r2, [r3, #8]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	689b      	ldr	r3, [r3, #8]
 8002810:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	431a      	orrs	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	609a      	str	r2, [r3, #8]
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002844:	b480      	push	{r7}
 8002846:	b087      	sub	sp, #28
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	3360      	adds	r3, #96	@ 0x60
 8002856:	461a      	mov	r2, r3
 8002858:	68bb      	ldr	r3, [r7, #8]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b08      	ldr	r3, [pc, #32]	@ (8002888 <LL_ADC_SetOffset+0x44>)
 8002866:	4013      	ands	r3, r2
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	430a      	orrs	r2, r1
 8002872:	4313      	orrs	r3, r2
 8002874:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800287c:	bf00      	nop
 800287e:	371c      	adds	r7, #28
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	03fff000 	.word	0x03fff000

0800288c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800288c:	b480      	push	{r7}
 800288e:	b085      	sub	sp, #20
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	3360      	adds	r3, #96	@ 0x60
 800289a:	461a      	mov	r2, r3
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	009b      	lsls	r3, r3, #2
 80028a0:	4413      	add	r3, r2
 80028a2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3714      	adds	r7, #20
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b087      	sub	sp, #28
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	3360      	adds	r3, #96	@ 0x60
 80028c8:	461a      	mov	r2, r3
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	4413      	add	r3, r2
 80028d0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	431a      	orrs	r2, r3
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80028e2:	bf00      	nop
 80028e4:	371c      	adds	r7, #28
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80028ee:	b480      	push	{r7}
 80028f0:	b087      	sub	sp, #28
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	3360      	adds	r3, #96	@ 0x60
 80028fe:	461a      	mov	r2, r3
 8002900:	68bb      	ldr	r3, [r7, #8]
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	431a      	orrs	r2, r3
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002924:	b480      	push	{r7}
 8002926:	b087      	sub	sp, #28
 8002928:	af00      	add	r7, sp, #0
 800292a:	60f8      	str	r0, [r7, #12]
 800292c:	60b9      	str	r1, [r7, #8]
 800292e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	3360      	adds	r3, #96	@ 0x60
 8002934:	461a      	mov	r2, r3
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800295a:	b480      	push	{r7}
 800295c:	b083      	sub	sp, #12
 800295e:	af00      	add	r7, sp, #0
 8002960:	6078      	str	r0, [r7, #4]
 8002962:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	695b      	ldr	r3, [r3, #20]
 8002968:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	431a      	orrs	r2, r3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	615a      	str	r2, [r3, #20]
}
 8002974:	bf00      	nop
 8002976:	370c      	adds	r7, #12
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002980:	b480      	push	{r7}
 8002982:	b083      	sub	sp, #12
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002990:	2b00      	cmp	r3, #0
 8002992:	d101      	bne.n	8002998 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002994:	2301      	movs	r3, #1
 8002996:	e000      	b.n	800299a <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b087      	sub	sp, #28
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	60f8      	str	r0, [r7, #12]
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	3330      	adds	r3, #48	@ 0x30
 80029b6:	461a      	mov	r2, r3
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	f003 030c 	and.w	r3, r3, #12
 80029c2:	4413      	add	r3, r2
 80029c4:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f003 031f 	and.w	r3, r3, #31
 80029d0:	211f      	movs	r1, #31
 80029d2:	fa01 f303 	lsl.w	r3, r1, r3
 80029d6:	43db      	mvns	r3, r3
 80029d8:	401a      	ands	r2, r3
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	0e9b      	lsrs	r3, r3, #26
 80029de:	f003 011f 	and.w	r1, r3, #31
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	f003 031f 	and.w	r3, r3, #31
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029fe:	b480      	push	{r7}
 8002a00:	b087      	sub	sp, #28
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	60f8      	str	r0, [r7, #12]
 8002a06:	60b9      	str	r1, [r7, #8]
 8002a08:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	3314      	adds	r3, #20
 8002a0e:	461a      	mov	r2, r3
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	0e5b      	lsrs	r3, r3, #25
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	f003 0304 	and.w	r3, r3, #4
 8002a1a:	4413      	add	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8002a1e:	697b      	ldr	r3, [r7, #20]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	0d1b      	lsrs	r3, r3, #20
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	2107      	movs	r1, #7
 8002a2c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	401a      	ands	r2, r3
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	0d1b      	lsrs	r3, r3, #20
 8002a38:	f003 031f 	and.w	r3, r3, #31
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a42:	431a      	orrs	r2, r3
 8002a44:	697b      	ldr	r3, [r7, #20]
 8002a46:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002a48:	bf00      	nop
 8002a4a:	371c      	adds	r7, #28
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	60f8      	str	r0, [r7, #12]
 8002a5c:	60b9      	str	r1, [r7, #8]
 8002a5e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	401a      	ands	r2, r3
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f003 0318 	and.w	r3, r3, #24
 8002a76:	4908      	ldr	r1, [pc, #32]	@ (8002a98 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a78:	40d9      	lsrs	r1, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	400b      	ands	r3, r1
 8002a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a8a:	bf00      	nop
 8002a8c:	3714      	adds	r7, #20
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	0007ffff 	.word	0x0007ffff

08002a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b083      	sub	sp, #12
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	689b      	ldr	r3, [r3, #8]
 8002aa8:	f003 031f 	and.w	r3, r3, #31
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	6093      	str	r3, [r2, #8]
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002aec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002af0:	d101      	bne.n	8002af6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002af6:	2300      	movs	r3, #0
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	370c      	adds	r7, #12
 8002afc:	46bd      	mov	sp, r7
 8002afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b02:	4770      	bx	lr

08002b04 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	689b      	ldr	r3, [r3, #8]
 8002b10:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002b14:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b18:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002b20:	bf00      	nop
 8002b22:	370c      	adds	r7, #12
 8002b24:	46bd      	mov	sp, r7
 8002b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2a:	4770      	bx	lr

08002b2c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b68:	f043 0201 	orr.w	r2, r3, #1
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b8c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b90:	f043 0202 	orr.w	r2, r3, #2
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <LL_ADC_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_ADC_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	f003 0302 	and.w	r3, r3, #2
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d101      	bne.n	8002be2 <LL_ADC_IsDisableOngoing+0x18>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <LL_ADC_IsDisableOngoing+0x1a>
 8002be2:	2300      	movs	r3, #0
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c00:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c04:	f043 0204 	orr.w	r2, r3, #4
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002c0c:	bf00      	nop
 8002c0e:	370c      	adds	r7, #12
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 0304 	and.w	r3, r3, #4
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d101      	bne.n	8002c30 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e000      	b.n	8002c32 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	b083      	sub	sp, #12
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	f003 0308 	and.w	r3, r3, #8
 8002c4e:	2b08      	cmp	r3, #8
 8002c50:	d101      	bne.n	8002c56 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c56:	2300      	movs	r3, #0
}
 8002c58:	4618      	mov	r0, r3
 8002c5a:	370c      	adds	r7, #12
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c62:	4770      	bx	lr

08002c64 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b089      	sub	sp, #36	@ 0x24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c70:	2300      	movs	r3, #0
 8002c72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e1a9      	b.n	8002fd2 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d109      	bne.n	8002ca0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7fe f93b 	bl	8000f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	f7ff ff19 	bl	8002adc <LL_ADC_IsDeepPowerDownEnabled>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d004      	beq.n	8002cba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff feff 	bl	8002ab8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff ff34 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d115      	bne.n	8002cf6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7ff ff18 	bl	8002b04 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cd4:	4b9c      	ldr	r3, [pc, #624]	@ (8002f48 <HAL_ADC_Init+0x2e4>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	4a9c      	ldr	r2, [pc, #624]	@ (8002f4c <HAL_ADC_Init+0x2e8>)
 8002cdc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ce0:	099b      	lsrs	r3, r3, #6
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002ce8:	e002      	b.n	8002cf0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	3b01      	subs	r3, #1
 8002cee:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f9      	bne.n	8002cea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f7ff ff16 	bl	8002b2c <LL_ADC_IsInternalRegulatorEnabled>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d10d      	bne.n	8002d22 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0a:	f043 0210 	orr.w	r2, r3, #16
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d16:	f043 0201 	orr.w	r2, r3, #1
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4618      	mov	r0, r3
 8002d28:	f7ff ff76 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8002d2c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d32:	f003 0310 	and.w	r3, r3, #16
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	f040 8142 	bne.w	8002fc0 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d3c:	697b      	ldr	r3, [r7, #20]
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f040 813e 	bne.w	8002fc0 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d48:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d4c:	f043 0202 	orr.w	r2, r3, #2
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f7ff ff23 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d141      	bne.n	8002de8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d6c:	d004      	beq.n	8002d78 <HAL_ADC_Init+0x114>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a77      	ldr	r2, [pc, #476]	@ (8002f50 <HAL_ADC_Init+0x2ec>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d10f      	bne.n	8002d98 <HAL_ADC_Init+0x134>
 8002d78:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d7c:	f7ff ff12 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d80:	4604      	mov	r4, r0
 8002d82:	4873      	ldr	r0, [pc, #460]	@ (8002f50 <HAL_ADC_Init+0x2ec>)
 8002d84:	f7ff ff0e 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	4323      	orrs	r3, r4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	bf0c      	ite	eq
 8002d90:	2301      	moveq	r3, #1
 8002d92:	2300      	movne	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e012      	b.n	8002dbe <HAL_ADC_Init+0x15a>
 8002d98:	486e      	ldr	r0, [pc, #440]	@ (8002f54 <HAL_ADC_Init+0x2f0>)
 8002d9a:	f7ff ff03 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002d9e:	4604      	mov	r4, r0
 8002da0:	486d      	ldr	r0, [pc, #436]	@ (8002f58 <HAL_ADC_Init+0x2f4>)
 8002da2:	f7ff feff 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002da6:	4603      	mov	r3, r0
 8002da8:	431c      	orrs	r4, r3
 8002daa:	486c      	ldr	r0, [pc, #432]	@ (8002f5c <HAL_ADC_Init+0x2f8>)
 8002dac:	f7ff fefa 	bl	8002ba4 <LL_ADC_IsEnabled>
 8002db0:	4603      	mov	r3, r0
 8002db2:	4323      	orrs	r3, r4
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	bf0c      	ite	eq
 8002db8:	2301      	moveq	r3, #1
 8002dba:	2300      	movne	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d012      	beq.n	8002de8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002dca:	d004      	beq.n	8002dd6 <HAL_ADC_Init+0x172>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a5f      	ldr	r2, [pc, #380]	@ (8002f50 <HAL_ADC_Init+0x2ec>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_ADC_Init+0x176>
 8002dd6:	4a62      	ldr	r2, [pc, #392]	@ (8002f60 <HAL_ADC_Init+0x2fc>)
 8002dd8:	e000      	b.n	8002ddc <HAL_ADC_Init+0x178>
 8002dda:	4a62      	ldr	r2, [pc, #392]	@ (8002f64 <HAL_ADC_Init+0x300>)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7ff fcfa 	bl	80027dc <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	7f5b      	ldrb	r3, [r3, #29]
 8002dec:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002df2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002df8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002dfe:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e06:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d106      	bne.n	8002e24 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e1a:	3b01      	subs	r3, #1
 8002e1c:	045b      	lsls	r3, r3, #17
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d009      	beq.n	8002e40 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e30:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e38:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e3a:	69ba      	ldr	r2, [r7, #24]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	68da      	ldr	r2, [r3, #12]
 8002e46:	4b48      	ldr	r3, [pc, #288]	@ (8002f68 <HAL_ADC_Init+0x304>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	69b9      	ldr	r1, [r7, #24]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691b      	ldr	r3, [r3, #16]
 8002e5a:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7ff fee5 	bl	8002c3e <LL_ADC_INJ_IsConversionOngoing>
 8002e74:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d17f      	bne.n	8002f7c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d17c      	bne.n	8002f7c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e86:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002e8e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e9e:	f023 0302 	bic.w	r3, r3, #2
 8002ea2:	687a      	ldr	r2, [r7, #4]
 8002ea4:	6812      	ldr	r2, [r2, #0]
 8002ea6:	69b9      	ldr	r1, [r7, #24]
 8002ea8:	430b      	orrs	r3, r1
 8002eaa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	691b      	ldr	r3, [r3, #16]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d017      	beq.n	8002ee4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002ec2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ecc:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ed0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ed4:	687a      	ldr	r2, [r7, #4]
 8002ed6:	6911      	ldr	r1, [r2, #16]
 8002ed8:	687a      	ldr	r2, [r7, #4]
 8002eda:	6812      	ldr	r2, [r2, #0]
 8002edc:	430b      	orrs	r3, r1
 8002ede:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002ee2:	e013      	b.n	8002f0c <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	691a      	ldr	r2, [r3, #16]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002ef2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002efc:	687a      	ldr	r2, [r7, #4]
 8002efe:	6812      	ldr	r2, [r2, #0]
 8002f00:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f04:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f08:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d12a      	bne.n	8002f6c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f20:	f023 0304 	bic.w	r3, r3, #4
 8002f24:	687a      	ldr	r2, [r7, #4]
 8002f26:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f28:	687a      	ldr	r2, [r7, #4]
 8002f2a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f2c:	4311      	orrs	r1, r2
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f32:	4311      	orrs	r1, r2
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f38:	430a      	orrs	r2, r1
 8002f3a:	431a      	orrs	r2, r3
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f042 0201 	orr.w	r2, r2, #1
 8002f44:	611a      	str	r2, [r3, #16]
 8002f46:	e019      	b.n	8002f7c <HAL_ADC_Init+0x318>
 8002f48:	20000004 	.word	0x20000004
 8002f4c:	053e2d63 	.word	0x053e2d63
 8002f50:	50000100 	.word	0x50000100
 8002f54:	50000400 	.word	0x50000400
 8002f58:	50000500 	.word	0x50000500
 8002f5c:	50000600 	.word	0x50000600
 8002f60:	50000300 	.word	0x50000300
 8002f64:	50000700 	.word	0x50000700
 8002f68:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	691a      	ldr	r2, [r3, #16]
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f022 0201 	bic.w	r2, r2, #1
 8002f7a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	695b      	ldr	r3, [r3, #20]
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d10c      	bne.n	8002f9e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	f023 010f 	bic.w	r1, r3, #15
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a1b      	ldr	r3, [r3, #32]
 8002f92:	1e5a      	subs	r2, r3, #1
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f9c:	e007      	b.n	8002fae <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 020f 	bic.w	r2, r2, #15
 8002fac:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fb2:	f023 0303 	bic.w	r3, r3, #3
 8002fb6:	f043 0201 	orr.w	r2, r3, #1
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fbe:	e007      	b.n	8002fd0 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fc4:	f043 0210 	orr.w	r2, r3, #16
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3724      	adds	r7, #36	@ 0x24
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd90      	pop	{r4, r7, pc}
 8002fda:	bf00      	nop

08002fdc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	60f8      	str	r0, [r7, #12]
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ff0:	d004      	beq.n	8002ffc <HAL_ADC_Start_DMA+0x20>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a5a      	ldr	r2, [pc, #360]	@ (8003160 <HAL_ADC_Start_DMA+0x184>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d101      	bne.n	8003000 <HAL_ADC_Start_DMA+0x24>
 8002ffc:	4b59      	ldr	r3, [pc, #356]	@ (8003164 <HAL_ADC_Start_DMA+0x188>)
 8002ffe:	e000      	b.n	8003002 <HAL_ADC_Start_DMA+0x26>
 8003000:	4b59      	ldr	r3, [pc, #356]	@ (8003168 <HAL_ADC_Start_DMA+0x18c>)
 8003002:	4618      	mov	r0, r3
 8003004:	f7ff fd4a 	bl	8002a9c <LL_ADC_GetMultimode>
 8003008:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4618      	mov	r0, r3
 8003010:	f7ff fe02 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 8003014:	4603      	mov	r3, r0
 8003016:	2b00      	cmp	r3, #0
 8003018:	f040 809b 	bne.w	8003152 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003022:	2b01      	cmp	r3, #1
 8003024:	d101      	bne.n	800302a <HAL_ADC_Start_DMA+0x4e>
 8003026:	2302      	movs	r3, #2
 8003028:	e096      	b.n	8003158 <HAL_ADC_Start_DMA+0x17c>
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2201      	movs	r2, #1
 800302e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4a4d      	ldr	r2, [pc, #308]	@ (800316c <HAL_ADC_Start_DMA+0x190>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d008      	beq.n	800304e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d005      	beq.n	800304e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b05      	cmp	r3, #5
 8003046:	d002      	beq.n	800304e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	2b09      	cmp	r3, #9
 800304c:	d17a      	bne.n	8003144 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800304e:	68f8      	ldr	r0, [r7, #12]
 8003050:	f000 fcf6 	bl	8003a40 <ADC_Enable>
 8003054:	4603      	mov	r3, r0
 8003056:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003058:	7dfb      	ldrb	r3, [r7, #23]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d16d      	bne.n	800313a <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003062:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003066:	f023 0301 	bic.w	r3, r3, #1
 800306a:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a3a      	ldr	r2, [pc, #232]	@ (8003160 <HAL_ADC_Start_DMA+0x184>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d009      	beq.n	8003090 <HAL_ADC_Start_DMA+0xb4>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a3b      	ldr	r2, [pc, #236]	@ (8003170 <HAL_ADC_Start_DMA+0x194>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d002      	beq.n	800308c <HAL_ADC_Start_DMA+0xb0>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	e003      	b.n	8003094 <HAL_ADC_Start_DMA+0xb8>
 800308c:	4b39      	ldr	r3, [pc, #228]	@ (8003174 <HAL_ADC_Start_DMA+0x198>)
 800308e:	e001      	b.n	8003094 <HAL_ADC_Start_DMA+0xb8>
 8003090:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	6812      	ldr	r2, [r2, #0]
 8003098:	4293      	cmp	r3, r2
 800309a:	d002      	beq.n	80030a2 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d105      	bne.n	80030ae <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d006      	beq.n	80030c8 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030be:	f023 0206 	bic.w	r2, r3, #6
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	661a      	str	r2, [r3, #96]	@ 0x60
 80030c6:	e002      	b.n	80030ce <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	2200      	movs	r2, #0
 80030cc:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030d2:	4a29      	ldr	r2, [pc, #164]	@ (8003178 <HAL_ADC_Start_DMA+0x19c>)
 80030d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030da:	4a28      	ldr	r2, [pc, #160]	@ (800317c <HAL_ADC_Start_DMA+0x1a0>)
 80030dc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030e2:	4a27      	ldr	r2, [pc, #156]	@ (8003180 <HAL_ADC_Start_DMA+0x1a4>)
 80030e4:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	221c      	movs	r2, #28
 80030ec:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685a      	ldr	r2, [r3, #4]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0210 	orr.w	r2, r2, #16
 8003104:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	68da      	ldr	r2, [r3, #12]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f042 0201 	orr.w	r2, r2, #1
 8003114:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	3340      	adds	r3, #64	@ 0x40
 8003120:	4619      	mov	r1, r3
 8003122:	68ba      	ldr	r2, [r7, #8]
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	f001 f82b 	bl	8004180 <HAL_DMA_Start_IT>
 800312a:	4603      	mov	r3, r0
 800312c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f7ff fd5c 	bl	8002bf0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003138:	e00d      	b.n	8003156 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 8003142:	e008      	b.n	8003156 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2200      	movs	r2, #0
 800314c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003150:	e001      	b.n	8003156 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003152:	2302      	movs	r3, #2
 8003154:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003156:	7dfb      	ldrb	r3, [r7, #23]
}
 8003158:	4618      	mov	r0, r3
 800315a:	3718      	adds	r7, #24
 800315c:	46bd      	mov	sp, r7
 800315e:	bd80      	pop	{r7, pc}
 8003160:	50000100 	.word	0x50000100
 8003164:	50000300 	.word	0x50000300
 8003168:	50000700 	.word	0x50000700
 800316c:	50000600 	.word	0x50000600
 8003170:	50000500 	.word	0x50000500
 8003174:	50000400 	.word	0x50000400
 8003178:	08003c2b 	.word	0x08003c2b
 800317c:	08003d03 	.word	0x08003d03
 8003180:	08003d1f 	.word	0x08003d1f

08003184 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800318c:	bf00      	nop
 800318e:	370c      	adds	r7, #12
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr

08003198 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b083      	sub	sp, #12
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80031a0:	bf00      	nop
 80031a2:	370c      	adds	r7, #12
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr

080031ac <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80031ac:	b480      	push	{r7}
 80031ae:	b083      	sub	sp, #12
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b0b6      	sub	sp, #216	@ 0xd8
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	6078      	str	r0, [r7, #4]
 80031c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d102      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x24>
 80031de:	2302      	movs	r3, #2
 80031e0:	f000 bc13 	b.w	8003a0a <HAL_ADC_ConfigChannel+0x84a>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7ff fd11 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	f040 83f3 	bne.w	80039e4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6818      	ldr	r0, [r3, #0]
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	461a      	mov	r2, r3
 800320c:	f7ff fbcb 	bl	80029a6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff fcff 	bl	8002c18 <LL_ADC_REG_IsConversionOngoing>
 800321a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fd0b 	bl	8002c3e <LL_ADC_INJ_IsConversionOngoing>
 8003228:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800322c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 81d9 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003236:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800323a:	2b00      	cmp	r3, #0
 800323c:	f040 81d4 	bne.w	80035e8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	689b      	ldr	r3, [r3, #8]
 8003244:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003248:	d10f      	bne.n	800326a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	4619      	mov	r1, r3
 8003256:	f7ff fbd2 	bl	80029fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fb79 	bl	800295a <LL_ADC_SetSamplingTimeCommonConfig>
 8003268:	e00e      	b.n	8003288 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	6818      	ldr	r0, [r3, #0]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	6819      	ldr	r1, [r3, #0]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	689b      	ldr	r3, [r3, #8]
 8003276:	461a      	mov	r2, r3
 8003278:	f7ff fbc1 	bl	80029fe <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2100      	movs	r1, #0
 8003282:	4618      	mov	r0, r3
 8003284:	f7ff fb69 	bl	800295a <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	695a      	ldr	r2, [r3, #20]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	68db      	ldr	r3, [r3, #12]
 8003292:	08db      	lsrs	r3, r3, #3
 8003294:	f003 0303 	and.w	r3, r3, #3
 8003298:	005b      	lsls	r3, r3, #1
 800329a:	fa02 f303 	lsl.w	r3, r2, r3
 800329e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d022      	beq.n	80032f0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80032ba:	f7ff fac3 	bl	8002844 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6818      	ldr	r0, [r3, #0]
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	6919      	ldr	r1, [r3, #16]
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	461a      	mov	r2, r3
 80032cc:	f7ff fb0f 	bl	80028ee <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6818      	ldr	r0, [r3, #0]
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80032d8:	683b      	ldr	r3, [r7, #0]
 80032da:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_ADC_ConfigChannel+0x126>
 80032e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80032e4:	e000      	b.n	80032e8 <HAL_ADC_ConfigChannel+0x128>
 80032e6:	2300      	movs	r3, #0
 80032e8:	461a      	mov	r2, r3
 80032ea:	f7ff fb1b 	bl	8002924 <LL_ADC_SetOffsetSaturation>
 80032ee:	e17b      	b.n	80035e8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f7ff fac8 	bl	800288c <LL_ADC_GetOffsetChannel>
 80032fc:	4603      	mov	r3, r0
 80032fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003302:	2b00      	cmp	r3, #0
 8003304:	d10a      	bne.n	800331c <HAL_ADC_ConfigChannel+0x15c>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fabd 	bl	800288c <LL_ADC_GetOffsetChannel>
 8003312:	4603      	mov	r3, r0
 8003314:	0e9b      	lsrs	r3, r3, #26
 8003316:	f003 021f 	and.w	r2, r3, #31
 800331a:	e01e      	b.n	800335a <HAL_ADC_ConfigChannel+0x19a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	2100      	movs	r1, #0
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fab2 	bl	800288c <LL_ADC_GetOffsetChannel>
 8003328:	4603      	mov	r3, r0
 800332a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800332e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003332:	fa93 f3a3 	rbit	r3, r3
 8003336:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800333a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800333e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003342:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d101      	bne.n	800334e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800334a:	2320      	movs	r3, #32
 800334c:	e004      	b.n	8003358 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800334e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003362:	2b00      	cmp	r3, #0
 8003364:	d105      	bne.n	8003372 <HAL_ADC_ConfigChannel+0x1b2>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	0e9b      	lsrs	r3, r3, #26
 800336c:	f003 031f 	and.w	r3, r3, #31
 8003370:	e018      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1e4>
 8003372:	683b      	ldr	r3, [r7, #0]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800337e:	fa93 f3a3 	rbit	r3, r3
 8003382:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003386:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800338a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 800338e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003396:	2320      	movs	r3, #32
 8003398:	e004      	b.n	80033a4 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800339a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800339e:	fab3 f383 	clz	r3, r3
 80033a2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d106      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2200      	movs	r2, #0
 80033ae:	2100      	movs	r1, #0
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7ff fa81 	bl	80028b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2101      	movs	r1, #1
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff fa65 	bl	800288c <LL_ADC_GetOffsetChannel>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d10a      	bne.n	80033e2 <HAL_ADC_ConfigChannel+0x222>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fa5a 	bl	800288c <LL_ADC_GetOffsetChannel>
 80033d8:	4603      	mov	r3, r0
 80033da:	0e9b      	lsrs	r3, r3, #26
 80033dc:	f003 021f 	and.w	r2, r3, #31
 80033e0:	e01e      	b.n	8003420 <HAL_ADC_ConfigChannel+0x260>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2101      	movs	r1, #1
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff fa4f 	bl	800288c <LL_ADC_GetOffsetChannel>
 80033ee:	4603      	mov	r3, r0
 80033f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003400:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003404:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800340c:	2b00      	cmp	r3, #0
 800340e:	d101      	bne.n	8003414 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003410:	2320      	movs	r3, #32
 8003412:	e004      	b.n	800341e <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003414:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003418:	fab3 f383 	clz	r3, r3
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003428:	2b00      	cmp	r3, #0
 800342a:	d105      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x278>
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	0e9b      	lsrs	r3, r3, #26
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	e018      	b.n	800346a <HAL_ADC_ConfigChannel+0x2aa>
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 800344c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003450:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003454:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003458:	2b00      	cmp	r3, #0
 800345a:	d101      	bne.n	8003460 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800345c:	2320      	movs	r3, #32
 800345e:	e004      	b.n	800346a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003460:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800346a:	429a      	cmp	r2, r3
 800346c:	d106      	bne.n	800347c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	2200      	movs	r2, #0
 8003474:	2101      	movs	r1, #1
 8003476:	4618      	mov	r0, r3
 8003478:	f7ff fa1e 	bl	80028b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2102      	movs	r1, #2
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fa02 	bl	800288c <LL_ADC_GetOffsetChannel>
 8003488:	4603      	mov	r3, r0
 800348a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800348e:	2b00      	cmp	r3, #0
 8003490:	d10a      	bne.n	80034a8 <HAL_ADC_ConfigChannel+0x2e8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	2102      	movs	r1, #2
 8003498:	4618      	mov	r0, r3
 800349a:	f7ff f9f7 	bl	800288c <LL_ADC_GetOffsetChannel>
 800349e:	4603      	mov	r3, r0
 80034a0:	0e9b      	lsrs	r3, r3, #26
 80034a2:	f003 021f 	and.w	r2, r3, #31
 80034a6:	e01e      	b.n	80034e6 <HAL_ADC_ConfigChannel+0x326>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	2102      	movs	r1, #2
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff f9ec 	bl	800288c <LL_ADC_GetOffsetChannel>
 80034b4:	4603      	mov	r3, r0
 80034b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80034be:	fa93 f3a3 	rbit	r3, r3
 80034c2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80034c6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80034ca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80034ce:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 80034d6:	2320      	movs	r3, #32
 80034d8:	e004      	b.n	80034e4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 80034da:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80034de:	fab3 f383 	clz	r3, r3
 80034e2:	b2db      	uxtb	r3, r3
 80034e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d105      	bne.n	80034fe <HAL_ADC_ConfigChannel+0x33e>
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	0e9b      	lsrs	r3, r3, #26
 80034f8:	f003 031f 	and.w	r3, r3, #31
 80034fc:	e016      	b.n	800352c <HAL_ADC_ConfigChannel+0x36c>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003506:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800350a:	fa93 f3a3 	rbit	r3, r3
 800350e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003510:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003512:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003516:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800351a:	2b00      	cmp	r3, #0
 800351c:	d101      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800351e:	2320      	movs	r3, #32
 8003520:	e004      	b.n	800352c <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003522:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003526:	fab3 f383 	clz	r3, r3
 800352a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800352c:	429a      	cmp	r2, r3
 800352e:	d106      	bne.n	800353e <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2200      	movs	r2, #0
 8003536:	2102      	movs	r1, #2
 8003538:	4618      	mov	r0, r3
 800353a:	f7ff f9bd 	bl	80028b8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	2103      	movs	r1, #3
 8003544:	4618      	mov	r0, r3
 8003546:	f7ff f9a1 	bl	800288c <LL_ADC_GetOffsetChannel>
 800354a:	4603      	mov	r3, r0
 800354c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003550:	2b00      	cmp	r3, #0
 8003552:	d10a      	bne.n	800356a <HAL_ADC_ConfigChannel+0x3aa>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	2103      	movs	r1, #3
 800355a:	4618      	mov	r0, r3
 800355c:	f7ff f996 	bl	800288c <LL_ADC_GetOffsetChannel>
 8003560:	4603      	mov	r3, r0
 8003562:	0e9b      	lsrs	r3, r3, #26
 8003564:	f003 021f 	and.w	r2, r3, #31
 8003568:	e017      	b.n	800359a <HAL_ADC_ConfigChannel+0x3da>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	2103      	movs	r1, #3
 8003570:	4618      	mov	r0, r3
 8003572:	f7ff f98b 	bl	800288c <LL_ADC_GetOffsetChannel>
 8003576:	4603      	mov	r3, r0
 8003578:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003582:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003584:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003588:	2b00      	cmp	r3, #0
 800358a:	d101      	bne.n	8003590 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800358c:	2320      	movs	r3, #32
 800358e:	e003      	b.n	8003598 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003590:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003592:	fab3 f383 	clz	r3, r3
 8003596:	b2db      	uxtb	r3, r3
 8003598:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d105      	bne.n	80035b2 <HAL_ADC_ConfigChannel+0x3f2>
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	0e9b      	lsrs	r3, r3, #26
 80035ac:	f003 031f 	and.w	r3, r3, #31
 80035b0:	e011      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x416>
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80035ba:	fa93 f3a3 	rbit	r3, r3
 80035be:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80035c0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80035c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80035c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d101      	bne.n	80035ce <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 80035ca:	2320      	movs	r3, #32
 80035cc:	e003      	b.n	80035d6 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 80035ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d106      	bne.n	80035e8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2200      	movs	r2, #0
 80035e0:	2103      	movs	r1, #3
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7ff f968 	bl	80028b8 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7ff fad9 	bl	8002ba4 <LL_ADC_IsEnabled>
 80035f2:	4603      	mov	r3, r0
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	f040 813d 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6818      	ldr	r0, [r3, #0]
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	6819      	ldr	r1, [r3, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	461a      	mov	r2, r3
 8003608:	f7ff fa24 	bl	8002a54 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	68db      	ldr	r3, [r3, #12]
 8003610:	4aa2      	ldr	r2, [pc, #648]	@ (800389c <HAL_ADC_ConfigChannel+0x6dc>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f040 812e 	bne.w	8003874 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d10b      	bne.n	8003640 <HAL_ADC_ConfigChannel+0x480>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2b09      	cmp	r3, #9
 8003636:	bf94      	ite	ls
 8003638:	2301      	movls	r3, #1
 800363a:	2300      	movhi	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e019      	b.n	8003674 <HAL_ADC_ConfigChannel+0x4b4>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003646:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 800364e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003650:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003652:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003654:	2b00      	cmp	r3, #0
 8003656:	d101      	bne.n	800365c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003658:	2320      	movs	r3, #32
 800365a:	e003      	b.n	8003664 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800365c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
 8003664:	3301      	adds	r3, #1
 8003666:	f003 031f 	and.w	r3, r3, #31
 800366a:	2b09      	cmp	r3, #9
 800366c:	bf94      	ite	ls
 800366e:	2301      	movls	r3, #1
 8003670:	2300      	movhi	r3, #0
 8003672:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003674:	2b00      	cmp	r3, #0
 8003676:	d079      	beq.n	800376c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003680:	2b00      	cmp	r3, #0
 8003682:	d107      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x4d4>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	0e9b      	lsrs	r3, r3, #26
 800368a:	3301      	adds	r3, #1
 800368c:	069b      	lsls	r3, r3, #26
 800368e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003692:	e015      	b.n	80036c0 <HAL_ADC_ConfigChannel+0x500>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800369c:	fa93 f3a3 	rbit	r3, r3
 80036a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80036a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036a4:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80036a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d101      	bne.n	80036b0 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80036ac:	2320      	movs	r3, #32
 80036ae:	e003      	b.n	80036b8 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80036b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80036b2:	fab3 f383 	clz	r3, r3
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	3301      	adds	r3, #1
 80036ba:	069b      	lsls	r3, r3, #26
 80036bc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d109      	bne.n	80036e0 <HAL_ADC_ConfigChannel+0x520>
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	0e9b      	lsrs	r3, r3, #26
 80036d2:	3301      	adds	r3, #1
 80036d4:	f003 031f 	and.w	r3, r3, #31
 80036d8:	2101      	movs	r1, #1
 80036da:	fa01 f303 	lsl.w	r3, r1, r3
 80036de:	e017      	b.n	8003710 <HAL_ADC_ConfigChannel+0x550>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036e8:	fa93 f3a3 	rbit	r3, r3
 80036ec:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80036ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036f0:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80036f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e003      	b.n	8003704 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80036fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036fe:	fab3 f383 	clz	r3, r3
 8003702:	b2db      	uxtb	r3, r3
 8003704:	3301      	adds	r3, #1
 8003706:	f003 031f 	and.w	r3, r3, #31
 800370a:	2101      	movs	r1, #1
 800370c:	fa01 f303 	lsl.w	r3, r1, r3
 8003710:	ea42 0103 	orr.w	r1, r2, r3
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10a      	bne.n	8003736 <HAL_ADC_ConfigChannel+0x576>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	0e9b      	lsrs	r3, r3, #26
 8003726:	3301      	adds	r3, #1
 8003728:	f003 021f 	and.w	r2, r3, #31
 800372c:	4613      	mov	r3, r2
 800372e:	005b      	lsls	r3, r3, #1
 8003730:	4413      	add	r3, r2
 8003732:	051b      	lsls	r3, r3, #20
 8003734:	e018      	b.n	8003768 <HAL_ADC_ConfigChannel+0x5a8>
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800373c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800373e:	fa93 f3a3 	rbit	r3, r3
 8003742:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003744:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003746:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003748:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800374a:	2b00      	cmp	r3, #0
 800374c:	d101      	bne.n	8003752 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800374e:	2320      	movs	r3, #32
 8003750:	e003      	b.n	800375a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8003752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003754:	fab3 f383 	clz	r3, r3
 8003758:	b2db      	uxtb	r3, r3
 800375a:	3301      	adds	r3, #1
 800375c:	f003 021f 	and.w	r2, r3, #31
 8003760:	4613      	mov	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	4413      	add	r3, r2
 8003766:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003768:	430b      	orrs	r3, r1
 800376a:	e07e      	b.n	800386a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003774:	2b00      	cmp	r3, #0
 8003776:	d107      	bne.n	8003788 <HAL_ADC_ConfigChannel+0x5c8>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	0e9b      	lsrs	r3, r3, #26
 800377e:	3301      	adds	r3, #1
 8003780:	069b      	lsls	r3, r3, #26
 8003782:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003786:	e015      	b.n	80037b4 <HAL_ADC_ConfigChannel+0x5f4>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	fa93 f3a3 	rbit	r3, r3
 8003794:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003798:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800379a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80037a0:	2320      	movs	r3, #32
 80037a2:	e003      	b.n	80037ac <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80037a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a6:	fab3 f383 	clz	r3, r3
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	3301      	adds	r3, #1
 80037ae:	069b      	lsls	r3, r3, #26
 80037b0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d109      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x614>
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	0e9b      	lsrs	r3, r3, #26
 80037c6:	3301      	adds	r3, #1
 80037c8:	f003 031f 	and.w	r3, r3, #31
 80037cc:	2101      	movs	r1, #1
 80037ce:	fa01 f303 	lsl.w	r3, r1, r3
 80037d2:	e017      	b.n	8003804 <HAL_ADC_ConfigChannel+0x644>
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037da:	6a3b      	ldr	r3, [r7, #32]
 80037dc:	fa93 f3a3 	rbit	r3, r3
 80037e0:	61fb      	str	r3, [r7, #28]
  return result;
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80037e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80037ec:	2320      	movs	r3, #32
 80037ee:	e003      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	fab3 f383 	clz	r3, r3
 80037f6:	b2db      	uxtb	r3, r3
 80037f8:	3301      	adds	r3, #1
 80037fa:	f003 031f 	and.w	r3, r3, #31
 80037fe:	2101      	movs	r1, #1
 8003800:	fa01 f303 	lsl.w	r3, r1, r3
 8003804:	ea42 0103 	orr.w	r1, r2, r3
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003810:	2b00      	cmp	r3, #0
 8003812:	d10d      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x670>
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	0e9b      	lsrs	r3, r3, #26
 800381a:	3301      	adds	r3, #1
 800381c:	f003 021f 	and.w	r2, r3, #31
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	3b1e      	subs	r3, #30
 8003828:	051b      	lsls	r3, r3, #20
 800382a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800382e:	e01b      	b.n	8003868 <HAL_ADC_ConfigChannel+0x6a8>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	fa93 f3a3 	rbit	r3, r3
 800383c:	613b      	str	r3, [r7, #16]
  return result;
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003848:	2320      	movs	r3, #32
 800384a:	e003      	b.n	8003854 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800384c:	69bb      	ldr	r3, [r7, #24]
 800384e:	fab3 f383 	clz	r3, r3
 8003852:	b2db      	uxtb	r3, r3
 8003854:	3301      	adds	r3, #1
 8003856:	f003 021f 	and.w	r2, r3, #31
 800385a:	4613      	mov	r3, r2
 800385c:	005b      	lsls	r3, r3, #1
 800385e:	4413      	add	r3, r2
 8003860:	3b1e      	subs	r3, #30
 8003862:	051b      	lsls	r3, r3, #20
 8003864:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003868:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800386e:	4619      	mov	r1, r3
 8003870:	f7ff f8c5 	bl	80029fe <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	4b09      	ldr	r3, [pc, #36]	@ (80038a0 <HAL_ADC_ConfigChannel+0x6e0>)
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80be 	beq.w	80039fe <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800388a:	d004      	beq.n	8003896 <HAL_ADC_ConfigChannel+0x6d6>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a04      	ldr	r2, [pc, #16]	@ (80038a4 <HAL_ADC_ConfigChannel+0x6e4>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d10a      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x6ec>
 8003896:	4b04      	ldr	r3, [pc, #16]	@ (80038a8 <HAL_ADC_ConfigChannel+0x6e8>)
 8003898:	e009      	b.n	80038ae <HAL_ADC_ConfigChannel+0x6ee>
 800389a:	bf00      	nop
 800389c:	407f0000 	.word	0x407f0000
 80038a0:	80080000 	.word	0x80080000
 80038a4:	50000100 	.word	0x50000100
 80038a8:	50000300 	.word	0x50000300
 80038ac:	4b59      	ldr	r3, [pc, #356]	@ (8003a14 <HAL_ADC_ConfigChannel+0x854>)
 80038ae:	4618      	mov	r0, r3
 80038b0:	f7fe ffba 	bl	8002828 <LL_ADC_GetCommonPathInternalCh>
 80038b4:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a56      	ldr	r2, [pc, #344]	@ (8003a18 <HAL_ADC_ConfigChannel+0x858>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d004      	beq.n	80038cc <HAL_ADC_ConfigChannel+0x70c>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a55      	ldr	r2, [pc, #340]	@ (8003a1c <HAL_ADC_ConfigChannel+0x85c>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d13a      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80038cc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80038d0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d134      	bne.n	8003942 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038e0:	d005      	beq.n	80038ee <HAL_ADC_ConfigChannel+0x72e>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	4a4e      	ldr	r2, [pc, #312]	@ (8003a20 <HAL_ADC_ConfigChannel+0x860>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	f040 8085 	bne.w	80039f8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038f6:	d004      	beq.n	8003902 <HAL_ADC_ConfigChannel+0x742>
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a49      	ldr	r2, [pc, #292]	@ (8003a24 <HAL_ADC_ConfigChannel+0x864>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_ADC_ConfigChannel+0x746>
 8003902:	4a49      	ldr	r2, [pc, #292]	@ (8003a28 <HAL_ADC_ConfigChannel+0x868>)
 8003904:	e000      	b.n	8003908 <HAL_ADC_ConfigChannel+0x748>
 8003906:	4a43      	ldr	r2, [pc, #268]	@ (8003a14 <HAL_ADC_ConfigChannel+0x854>)
 8003908:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800390c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003910:	4619      	mov	r1, r3
 8003912:	4610      	mov	r0, r2
 8003914:	f7fe ff75 	bl	8002802 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003918:	4b44      	ldr	r3, [pc, #272]	@ (8003a2c <HAL_ADC_ConfigChannel+0x86c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	4a44      	ldr	r2, [pc, #272]	@ (8003a30 <HAL_ADC_ConfigChannel+0x870>)
 8003920:	fba2 2303 	umull	r2, r3, r2, r3
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	1c5a      	adds	r2, r3, #1
 8003928:	4613      	mov	r3, r2
 800392a:	005b      	lsls	r3, r3, #1
 800392c:	4413      	add	r3, r2
 800392e:	009b      	lsls	r3, r3, #2
 8003930:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003932:	e002      	b.n	800393a <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f9      	bne.n	8003934 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003940:	e05a      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	4a3b      	ldr	r2, [pc, #236]	@ (8003a34 <HAL_ADC_ConfigChannel+0x874>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d125      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800394c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003950:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003954:	2b00      	cmp	r3, #0
 8003956:	d11f      	bne.n	8003998 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a31      	ldr	r2, [pc, #196]	@ (8003a24 <HAL_ADC_ConfigChannel+0x864>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d104      	bne.n	800396c <HAL_ADC_ConfigChannel+0x7ac>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a34      	ldr	r2, [pc, #208]	@ (8003a38 <HAL_ADC_ConfigChannel+0x878>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d047      	beq.n	80039fc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003974:	d004      	beq.n	8003980 <HAL_ADC_ConfigChannel+0x7c0>
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	4a2a      	ldr	r2, [pc, #168]	@ (8003a24 <HAL_ADC_ConfigChannel+0x864>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x7c4>
 8003980:	4a29      	ldr	r2, [pc, #164]	@ (8003a28 <HAL_ADC_ConfigChannel+0x868>)
 8003982:	e000      	b.n	8003986 <HAL_ADC_ConfigChannel+0x7c6>
 8003984:	4a23      	ldr	r2, [pc, #140]	@ (8003a14 <HAL_ADC_ConfigChannel+0x854>)
 8003986:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800398a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800398e:	4619      	mov	r1, r3
 8003990:	4610      	mov	r0, r2
 8003992:	f7fe ff36 	bl	8002802 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003996:	e031      	b.n	80039fc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003998:	683b      	ldr	r3, [r7, #0]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a27      	ldr	r2, [pc, #156]	@ (8003a3c <HAL_ADC_ConfigChannel+0x87c>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d12d      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80039a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d127      	bne.n	80039fe <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a24 <HAL_ADC_ConfigChannel+0x864>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80039c0:	d004      	beq.n	80039cc <HAL_ADC_ConfigChannel+0x80c>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a17      	ldr	r2, [pc, #92]	@ (8003a24 <HAL_ADC_ConfigChannel+0x864>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d101      	bne.n	80039d0 <HAL_ADC_ConfigChannel+0x810>
 80039cc:	4a16      	ldr	r2, [pc, #88]	@ (8003a28 <HAL_ADC_ConfigChannel+0x868>)
 80039ce:	e000      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x812>
 80039d0:	4a10      	ldr	r2, [pc, #64]	@ (8003a14 <HAL_ADC_ConfigChannel+0x854>)
 80039d2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80039d6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80039da:	4619      	mov	r1, r3
 80039dc:	4610      	mov	r0, r2
 80039de:	f7fe ff10 	bl	8002802 <LL_ADC_SetCommonPathInternalCh>
 80039e2:	e00c      	b.n	80039fe <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e8:	f043 0220 	orr.w	r2, r3, #32
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 80039f6:	e002      	b.n	80039fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80039f8:	bf00      	nop
 80039fa:	e000      	b.n	80039fe <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80039fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003a06:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	37d8      	adds	r7, #216	@ 0xd8
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	50000700 	.word	0x50000700
 8003a18:	c3210000 	.word	0xc3210000
 8003a1c:	90c00010 	.word	0x90c00010
 8003a20:	50000600 	.word	0x50000600
 8003a24:	50000100 	.word	0x50000100
 8003a28:	50000300 	.word	0x50000300
 8003a2c:	20000004 	.word	0x20000004
 8003a30:	053e2d63 	.word	0x053e2d63
 8003a34:	c7520000 	.word	0xc7520000
 8003a38:	50000500 	.word	0x50000500
 8003a3c:	cb840000 	.word	0xcb840000

08003a40 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b084      	sub	sp, #16
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4618      	mov	r0, r3
 8003a52:	f7ff f8a7 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003a56:	4603      	mov	r3, r0
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d176      	bne.n	8003b4a <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689a      	ldr	r2, [r3, #8]
 8003a62:	4b3c      	ldr	r3, [pc, #240]	@ (8003b54 <ADC_Enable+0x114>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00d      	beq.n	8003a86 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a6e:	f043 0210 	orr.w	r2, r3, #16
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a7a:	f043 0201 	orr.w	r2, r3, #1
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e062      	b.n	8003b4c <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff f862 	bl	8002b54 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003a98:	d004      	beq.n	8003aa4 <ADC_Enable+0x64>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8003b58 <ADC_Enable+0x118>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d101      	bne.n	8003aa8 <ADC_Enable+0x68>
 8003aa4:	4b2d      	ldr	r3, [pc, #180]	@ (8003b5c <ADC_Enable+0x11c>)
 8003aa6:	e000      	b.n	8003aaa <ADC_Enable+0x6a>
 8003aa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003b60 <ADC_Enable+0x120>)
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe febc 	bl	8002828 <LL_ADC_GetCommonPathInternalCh>
 8003ab0:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003ab2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d013      	beq.n	8003ae2 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003aba:	4b2a      	ldr	r3, [pc, #168]	@ (8003b64 <ADC_Enable+0x124>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	099b      	lsrs	r3, r3, #6
 8003ac0:	4a29      	ldr	r2, [pc, #164]	@ (8003b68 <ADC_Enable+0x128>)
 8003ac2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac6:	099b      	lsrs	r3, r3, #6
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	4613      	mov	r3, r2
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	4413      	add	r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003ad4:	e002      	b.n	8003adc <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d1f9      	bne.n	8003ad6 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003ae2:	f7fe fe6f 	bl	80027c4 <HAL_GetTick>
 8003ae6:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ae8:	e028      	b.n	8003b3c <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff f858 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d104      	bne.n	8003b04 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f7ff f828 	bl	8002b54 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003b04:	f7fe fe5e 	bl	80027c4 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	2b02      	cmp	r3, #2
 8003b10:	d914      	bls.n	8003b3c <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d00d      	beq.n	8003b3c <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b24:	f043 0210 	orr.w	r2, r3, #16
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b30:	f043 0201 	orr.w	r2, r3, #1
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	e007      	b.n	8003b4c <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d1cf      	bne.n	8003aea <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3710      	adds	r7, #16
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	8000003f 	.word	0x8000003f
 8003b58:	50000100 	.word	0x50000100
 8003b5c:	50000300 	.word	0x50000300
 8003b60:	50000700 	.word	0x50000700
 8003b64:	20000004 	.word	0x20000004
 8003b68:	053e2d63 	.word	0x053e2d63

08003b6c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7ff f826 	bl	8002bca <LL_ADC_IsDisableOngoing>
 8003b7e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f80d 	bl	8002ba4 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d047      	beq.n	8003c20 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d144      	bne.n	8003c20 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	f003 030d 	and.w	r3, r3, #13
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10c      	bne.n	8003bbe <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f7fe ffe7 	bl	8002b7c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2203      	movs	r2, #3
 8003bb4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003bb6:	f7fe fe05 	bl	80027c4 <HAL_GetTick>
 8003bba:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003bbc:	e029      	b.n	8003c12 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bc2:	f043 0210 	orr.w	r2, r3, #16
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003bce:	f043 0201 	orr.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e023      	b.n	8003c22 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003bda:	f7fe fdf3 	bl	80027c4 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d914      	bls.n	8003c12 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	f003 0301 	and.w	r3, r3, #1
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00d      	beq.n	8003c12 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003bfa:	f043 0210 	orr.w	r2, r3, #16
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c06:	f043 0201 	orr.w	r2, r3, #1
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e007      	b.n	8003c22 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f003 0301 	and.w	r3, r3, #1
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d1dc      	bne.n	8003bda <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c20:	2300      	movs	r3, #0
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3710      	adds	r7, #16
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}

08003c2a <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003c2a:	b580      	push	{r7, lr}
 8003c2c:	b084      	sub	sp, #16
 8003c2e:	af00      	add	r7, sp, #0
 8003c30:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c3c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d14b      	bne.n	8003cdc <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c48:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d021      	beq.n	8003ca2 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f7fe fe8c 	bl	8002980 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d032      	beq.n	8003cd4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d12b      	bne.n	8003cd4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c80:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c8c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d11f      	bne.n	8003cd4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003c98:	f043 0201 	orr.w	r2, r3, #1
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003ca0:	e018      	b.n	8003cd4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d111      	bne.n	8003cd4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cb4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003cc0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d105      	bne.n	8003cd4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ccc:	f043 0201 	orr.w	r2, r3, #1
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f7ff fa55 	bl	8003184 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003cda:	e00e      	b.n	8003cfa <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ce0:	f003 0310 	and.w	r3, r3, #16
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d003      	beq.n	8003cf0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ce8:	68f8      	ldr	r0, [r7, #12]
 8003cea:	f7ff fa5f 	bl	80031ac <HAL_ADC_ErrorCallback>
}
 8003cee:	e004      	b.n	8003cfa <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cf4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cf6:	6878      	ldr	r0, [r7, #4]
 8003cf8:	4798      	blx	r3
}
 8003cfa:	bf00      	nop
 8003cfc:	3710      	adds	r7, #16
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}

08003d02 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003d02:	b580      	push	{r7, lr}
 8003d04:	b084      	sub	sp, #16
 8003d06:	af00      	add	r7, sp, #0
 8003d08:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f7ff fa41 	bl	8003198 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d16:	bf00      	nop
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003d30:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d3c:	f043 0204 	orr.w	r2, r3, #4
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff fa31 	bl	80031ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d4a:	bf00      	nop
 8003d4c:	3710      	adds	r7, #16
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bd80      	pop	{r7, pc}

08003d52 <LL_ADC_StartCalibration>:
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8003d64:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003d68:	683a      	ldr	r2, [r7, #0]
 8003d6a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	609a      	str	r2, [r3, #8]
}
 8003d78:	bf00      	nop
 8003d7a:	370c      	adds	r7, #12
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr

08003d84 <LL_ADC_IsCalibrationOnGoing>:
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d98:	d101      	bne.n	8003d9e <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e000      	b.n	8003da0 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003d9e:	2300      	movs	r3, #0
}
 8003da0:	4618      	mov	r0, r3
 8003da2:	370c      	adds	r7, #12
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003db6:	2300      	movs	r3, #0
 8003db8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d101      	bne.n	8003dc8 <HAL_ADCEx_Calibration_Start+0x1c>
 8003dc4:	2302      	movs	r3, #2
 8003dc6:	e04d      	b.n	8003e64 <HAL_ADCEx_Calibration_Start+0xb8>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff fecb 	bl	8003b6c <ADC_Disable>
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d136      	bne.n	8003e4e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003de4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003de8:	f023 0302 	bic.w	r3, r3, #2
 8003dec:	f043 0202 	orr.w	r2, r3, #2
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6839      	ldr	r1, [r7, #0]
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff ffa9 	bl	8003d52 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e00:	e014      	b.n	8003e2c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	3301      	adds	r3, #1
 8003e06:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	4a18      	ldr	r2, [pc, #96]	@ (8003e6c <HAL_ADCEx_Calibration_Start+0xc0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d90d      	bls.n	8003e2c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e14:	f023 0312 	bic.w	r3, r3, #18
 8003e18:	f043 0210 	orr.w	r2, r3, #16
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2200      	movs	r2, #0
 8003e24:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	e01b      	b.n	8003e64 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7ff ffa7 	bl	8003d84 <LL_ADC_IsCalibrationOnGoing>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d1e2      	bne.n	8003e02 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e40:	f023 0303 	bic.w	r3, r3, #3
 8003e44:	f043 0201 	orr.w	r2, r3, #1
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003e4c:	e005      	b.n	8003e5a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e52:	f043 0210 	orr.w	r2, r3, #16
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3710      	adds	r7, #16
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	0004de01 	.word	0x0004de01

08003e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e70:	b480      	push	{r7}
 8003e72:	b085      	sub	sp, #20
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	f003 0307 	and.w	r3, r3, #7
 8003e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003e80:	4b0c      	ldr	r3, [pc, #48]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e98:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003e9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ea2:	4a04      	ldr	r2, [pc, #16]	@ (8003eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	60d3      	str	r3, [r2, #12]
}
 8003ea8:	bf00      	nop
 8003eaa:	3714      	adds	r7, #20
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	e000ed00 	.word	0xe000ed00

08003eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003ebc:	4b04      	ldr	r3, [pc, #16]	@ (8003ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8003ebe:	68db      	ldr	r3, [r3, #12]
 8003ec0:	0a1b      	lsrs	r3, r3, #8
 8003ec2:	f003 0307 	and.w	r3, r3, #7
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	4603      	mov	r3, r0
 8003edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	db0b      	blt.n	8003efe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ee6:	79fb      	ldrb	r3, [r7, #7]
 8003ee8:	f003 021f 	and.w	r2, r3, #31
 8003eec:	4907      	ldr	r1, [pc, #28]	@ (8003f0c <__NVIC_EnableIRQ+0x38>)
 8003eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef2:	095b      	lsrs	r3, r3, #5
 8003ef4:	2001      	movs	r0, #1
 8003ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8003efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f08:	4770      	bx	lr
 8003f0a:	bf00      	nop
 8003f0c:	e000e100 	.word	0xe000e100

08003f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	4603      	mov	r3, r0
 8003f18:	6039      	str	r1, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	db0a      	blt.n	8003f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	b2da      	uxtb	r2, r3
 8003f28:	490c      	ldr	r1, [pc, #48]	@ (8003f5c <__NVIC_SetPriority+0x4c>)
 8003f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f2e:	0112      	lsls	r2, r2, #4
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	440b      	add	r3, r1
 8003f34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003f38:	e00a      	b.n	8003f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	b2da      	uxtb	r2, r3
 8003f3e:	4908      	ldr	r1, [pc, #32]	@ (8003f60 <__NVIC_SetPriority+0x50>)
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	f003 030f 	and.w	r3, r3, #15
 8003f46:	3b04      	subs	r3, #4
 8003f48:	0112      	lsls	r2, r2, #4
 8003f4a:	b2d2      	uxtb	r2, r2
 8003f4c:	440b      	add	r3, r1
 8003f4e:	761a      	strb	r2, [r3, #24]
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	e000e100 	.word	0xe000e100
 8003f60:	e000ed00 	.word	0xe000ed00

08003f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b089      	sub	sp, #36	@ 0x24
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f003 0307 	and.w	r3, r3, #7
 8003f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	f1c3 0307 	rsb	r3, r3, #7
 8003f7e:	2b04      	cmp	r3, #4
 8003f80:	bf28      	it	cs
 8003f82:	2304      	movcs	r3, #4
 8003f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003f86:	69fb      	ldr	r3, [r7, #28]
 8003f88:	3304      	adds	r3, #4
 8003f8a:	2b06      	cmp	r3, #6
 8003f8c:	d902      	bls.n	8003f94 <NVIC_EncodePriority+0x30>
 8003f8e:	69fb      	ldr	r3, [r7, #28]
 8003f90:	3b03      	subs	r3, #3
 8003f92:	e000      	b.n	8003f96 <NVIC_EncodePriority+0x32>
 8003f94:	2300      	movs	r3, #0
 8003f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003fa2:	43da      	mvns	r2, r3
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	401a      	ands	r2, r3
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003fac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	43d9      	mvns	r1, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003fbc:	4313      	orrs	r3, r2
         );
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3724      	adds	r7, #36	@ 0x24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	b082      	sub	sp, #8
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f7ff ff4c 	bl	8003e70 <__NVIC_SetPriorityGrouping>
}
 8003fd8:	bf00      	nop
 8003fda:	3708      	adds	r7, #8
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	4603      	mov	r3, r0
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
 8003fec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003fee:	f7ff ff63 	bl	8003eb8 <__NVIC_GetPriorityGrouping>
 8003ff2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ff4:	687a      	ldr	r2, [r7, #4]
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	6978      	ldr	r0, [r7, #20]
 8003ffa:	f7ff ffb3 	bl	8003f64 <NVIC_EncodePriority>
 8003ffe:	4602      	mov	r2, r0
 8004000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004004:	4611      	mov	r1, r2
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ff82 	bl	8003f10 <__NVIC_SetPriority>
}
 800400c:	bf00      	nop
 800400e:	3718      	adds	r7, #24
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b082      	sub	sp, #8
 8004018:	af00      	add	r7, sp, #0
 800401a:	4603      	mov	r3, r0
 800401c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800401e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004022:	4618      	mov	r0, r3
 8004024:	f7ff ff56 	bl	8003ed4 <__NVIC_EnableIRQ>
}
 8004028:	bf00      	nop
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d101      	bne.n	8004042 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	e08d      	b.n	800415e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	461a      	mov	r2, r3
 8004048:	4b47      	ldr	r3, [pc, #284]	@ (8004168 <HAL_DMA_Init+0x138>)
 800404a:	429a      	cmp	r2, r3
 800404c:	d80f      	bhi.n	800406e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	461a      	mov	r2, r3
 8004054:	4b45      	ldr	r3, [pc, #276]	@ (800416c <HAL_DMA_Init+0x13c>)
 8004056:	4413      	add	r3, r2
 8004058:	4a45      	ldr	r2, [pc, #276]	@ (8004170 <HAL_DMA_Init+0x140>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	091b      	lsrs	r3, r3, #4
 8004060:	009a      	lsls	r2, r3, #2
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a42      	ldr	r2, [pc, #264]	@ (8004174 <HAL_DMA_Init+0x144>)
 800406a:	641a      	str	r2, [r3, #64]	@ 0x40
 800406c:	e00e      	b.n	800408c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	461a      	mov	r2, r3
 8004074:	4b40      	ldr	r3, [pc, #256]	@ (8004178 <HAL_DMA_Init+0x148>)
 8004076:	4413      	add	r3, r2
 8004078:	4a3d      	ldr	r2, [pc, #244]	@ (8004170 <HAL_DMA_Init+0x140>)
 800407a:	fba2 2303 	umull	r2, r3, r2, r3
 800407e:	091b      	lsrs	r3, r3, #4
 8004080:	009a      	lsls	r2, r3, #2
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a3c      	ldr	r2, [pc, #240]	@ (800417c <HAL_DMA_Init+0x14c>)
 800408a:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2202      	movs	r2, #2
 8004090:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80040a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80040a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80040b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80040bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	699b      	ldr	r3, [r3, #24]
 80040c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80040c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6a1b      	ldr	r3, [r3, #32]
 80040ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f000 fa82 	bl	80045e8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80040ec:	d102      	bne.n	80040f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2200      	movs	r2, #0
 80040f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040fc:	b2d2      	uxtb	r2, r2
 80040fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004108:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d010      	beq.n	8004134 <HAL_DMA_Init+0x104>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2b04      	cmp	r3, #4
 8004118:	d80c      	bhi.n	8004134 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 faa2 	bl	8004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004124:	2200      	movs	r2, #0
 8004126:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	e008      	b.n	8004146 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2200      	movs	r2, #0
 800414a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800415c:	2300      	movs	r3, #0
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	40020407 	.word	0x40020407
 800416c:	bffdfff8 	.word	0xbffdfff8
 8004170:	cccccccd 	.word	0xcccccccd
 8004174:	40020000 	.word	0x40020000
 8004178:	bffdfbf8 	.word	0xbffdfbf8
 800417c:	40020400 	.word	0x40020400

08004180 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b086      	sub	sp, #24
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]
 800418c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800418e:	2300      	movs	r3, #0
 8004190:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004198:	2b01      	cmp	r3, #1
 800419a:	d101      	bne.n	80041a0 <HAL_DMA_Start_IT+0x20>
 800419c:	2302      	movs	r3, #2
 800419e:	e066      	b.n	800426e <HAL_DMA_Start_IT+0xee>
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d155      	bne.n	8004260 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2202      	movs	r2, #2
 80041b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2200      	movs	r2, #0
 80041c0:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	681a      	ldr	r2, [r3, #0]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f022 0201 	bic.w	r2, r2, #1
 80041d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	68b9      	ldr	r1, [r7, #8]
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f000 f9c7 	bl	800456c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d008      	beq.n	80041f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 020e 	orr.w	r2, r2, #14
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	e00f      	b.n	8004218 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681a      	ldr	r2, [r3, #0]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f022 0204 	bic.w	r2, r2, #4
 8004206:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681a      	ldr	r2, [r3, #0]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f042 020a 	orr.w	r2, r2, #10
 8004216:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004230:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004234:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800423a:	2b00      	cmp	r3, #0
 800423c:	d007      	beq.n	800424e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004248:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800424c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f042 0201 	orr.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
 800425e:	e005      	b.n	800426c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2200      	movs	r2, #0
 8004264:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004268:	2302      	movs	r3, #2
 800426a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800426c:	7dfb      	ldrb	r3, [r7, #23]
}
 800426e:	4618      	mov	r0, r3
 8004270:	3718      	adds	r7, #24
 8004272:	46bd      	mov	sp, r7
 8004274:	bd80      	pop	{r7, pc}

08004276 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004276:	b480      	push	{r7}
 8004278:	b085      	sub	sp, #20
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800427e:	2300      	movs	r3, #0
 8004280:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b02      	cmp	r3, #2
 800428c:	d005      	beq.n	800429a <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2204      	movs	r2, #4
 8004292:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	73fb      	strb	r3, [r7, #15]
 8004298:	e037      	b.n	800430a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681a      	ldr	r2, [r3, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f022 020e 	bic.w	r2, r2, #14
 80042a8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80042b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042b8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f022 0201 	bic.w	r2, r2, #1
 80042c8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ce:	f003 021f 	and.w	r2, r3, #31
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d6:	2101      	movs	r1, #1
 80042d8:	fa01 f202 	lsl.w	r2, r1, r2
 80042dc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e2:	687a      	ldr	r2, [r7, #4]
 80042e4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80042e6:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d00c      	beq.n	800430a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042fa:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80042fe:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004308:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 800431a:	7bfb      	ldrb	r3, [r7, #15]
}
 800431c:	4618      	mov	r0, r3
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004330:	2300      	movs	r3, #0
 8004332:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800433a:	b2db      	uxtb	r3, r3
 800433c:	2b02      	cmp	r3, #2
 800433e:	d00d      	beq.n	800435c <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	2204      	movs	r2, #4
 8004344:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2201      	movs	r2, #1
 800434a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	73fb      	strb	r3, [r7, #15]
 800435a:	e047      	b.n	80043ec <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 020e 	bic.w	r2, r2, #14
 800436a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f022 0201 	bic.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004386:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800438a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004390:	f003 021f 	and.w	r2, r3, #31
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004398:	2101      	movs	r1, #1
 800439a:	fa01 f202 	lsl.w	r2, r1, r2
 800439e:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a4:	687a      	ldr	r2, [r7, #4]
 80043a6:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80043a8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00c      	beq.n	80043cc <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043bc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80043c0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80043ca:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2201      	movs	r2, #1
 80043d0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d003      	beq.n	80043ec <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043e8:	6878      	ldr	r0, [r7, #4]
 80043ea:	4798      	blx	r3
    }
  }
  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80043f6:	b580      	push	{r7, lr}
 80043f8:	b084      	sub	sp, #16
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004412:	f003 031f 	and.w	r3, r3, #31
 8004416:	2204      	movs	r2, #4
 8004418:	409a      	lsls	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	4013      	ands	r3, r2
 800441e:	2b00      	cmp	r3, #0
 8004420:	d026      	beq.n	8004470 <HAL_DMA_IRQHandler+0x7a>
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	f003 0304 	and.w	r3, r3, #4
 8004428:	2b00      	cmp	r3, #0
 800442a:	d021      	beq.n	8004470 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	d107      	bne.n	800444a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f022 0204 	bic.w	r2, r2, #4
 8004448:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444e:	f003 021f 	and.w	r2, r3, #31
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	2104      	movs	r1, #4
 8004458:	fa01 f202 	lsl.w	r2, r1, r2
 800445c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004462:	2b00      	cmp	r3, #0
 8004464:	d071      	beq.n	800454a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800446a:	6878      	ldr	r0, [r7, #4]
 800446c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800446e:	e06c      	b.n	800454a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004474:	f003 031f 	and.w	r3, r3, #31
 8004478:	2202      	movs	r2, #2
 800447a:	409a      	lsls	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	4013      	ands	r3, r2
 8004480:	2b00      	cmp	r3, #0
 8004482:	d02e      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 0302 	and.w	r3, r3, #2
 800448a:	2b00      	cmp	r3, #0
 800448c:	d029      	beq.n	80044e2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f003 0320 	and.w	r3, r3, #32
 8004498:	2b00      	cmp	r3, #0
 800449a:	d10b      	bne.n	80044b4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f022 020a 	bic.w	r2, r2, #10
 80044aa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044b8:	f003 021f 	and.w	r2, r3, #31
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c0:	2102      	movs	r1, #2
 80044c2:	fa01 f202 	lsl.w	r2, r1, r2
 80044c6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d038      	beq.n	800454a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80044e0:	e033      	b.n	800454a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044e6:	f003 031f 	and.w	r3, r3, #31
 80044ea:	2208      	movs	r2, #8
 80044ec:	409a      	lsls	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4013      	ands	r3, r2
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d02a      	beq.n	800454c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f003 0308 	and.w	r3, r3, #8
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d025      	beq.n	800454c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f022 020e 	bic.w	r2, r2, #14
 800450e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004514:	f003 021f 	and.w	r2, r3, #31
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f202 	lsl.w	r2, r1, r2
 8004522:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2201      	movs	r2, #1
 8004528:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2201      	movs	r2, #1
 800452e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800453e:	2b00      	cmp	r3, #0
 8004540:	d004      	beq.n	800454c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800454a:	bf00      	nop
 800454c:	bf00      	nop
}
 800454e:	3710      	adds	r7, #16
 8004550:	46bd      	mov	sp, r7
 8004552:	bd80      	pop	{r7, pc}

08004554 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004554:	b480      	push	{r7}
 8004556:	b083      	sub	sp, #12
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8004560:	4618      	mov	r0, r3
 8004562:	370c      	adds	r7, #12
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr

0800456c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800457e:	68fa      	ldr	r2, [r7, #12]
 8004580:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004582:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004588:	2b00      	cmp	r3, #0
 800458a:	d004      	beq.n	8004596 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004594:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459a:	f003 021f 	and.w	r2, r3, #31
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	2101      	movs	r1, #1
 80045a4:	fa01 f202 	lsl.w	r2, r1, r2
 80045a8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	689b      	ldr	r3, [r3, #8]
 80045b6:	2b10      	cmp	r3, #16
 80045b8:	d108      	bne.n	80045cc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	68ba      	ldr	r2, [r7, #8]
 80045c8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80045ca:	e007      	b.n	80045dc <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	68ba      	ldr	r2, [r7, #8]
 80045d2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	60da      	str	r2, [r3, #12]
}
 80045dc:	bf00      	nop
 80045de:	3714      	adds	r7, #20
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr

080045e8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	461a      	mov	r2, r3
 80045f6:	4b16      	ldr	r3, [pc, #88]	@ (8004650 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80045f8:	429a      	cmp	r2, r3
 80045fa:	d802      	bhi.n	8004602 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80045fc:	4b15      	ldr	r3, [pc, #84]	@ (8004654 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80045fe:	617b      	str	r3, [r7, #20]
 8004600:	e001      	b.n	8004606 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004602:	4b15      	ldr	r3, [pc, #84]	@ (8004658 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004604:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	b2db      	uxtb	r3, r3
 8004610:	3b08      	subs	r3, #8
 8004612:	4a12      	ldr	r2, [pc, #72]	@ (800465c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004614:	fba2 2303 	umull	r2, r3, r2, r3
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004620:	089b      	lsrs	r3, r3, #2
 8004622:	009a      	lsls	r2, r3, #2
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	4413      	add	r3, r2
 8004628:	461a      	mov	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	4a0b      	ldr	r2, [pc, #44]	@ (8004660 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004632:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2201      	movs	r2, #1
 800463c:	409a      	lsls	r2, r3
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004642:	bf00      	nop
 8004644:	371c      	adds	r7, #28
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40020407 	.word	0x40020407
 8004654:	40020800 	.word	0x40020800
 8004658:	40020820 	.word	0x40020820
 800465c:	cccccccd 	.word	0xcccccccd
 8004660:	40020880 	.word	0x40020880

08004664 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	b2db      	uxtb	r3, r3
 8004672:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4b0b      	ldr	r3, [pc, #44]	@ (80046a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004678:	4413      	add	r3, r2
 800467a:	009b      	lsls	r3, r3, #2
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a08      	ldr	r2, [pc, #32]	@ (80046a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004686:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	3b01      	subs	r3, #1
 800468c:	f003 031f 	and.w	r3, r3, #31
 8004690:	2201      	movs	r2, #1
 8004692:	409a      	lsls	r2, r3
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8004698:	bf00      	nop
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr
 80046a4:	1000823f 	.word	0x1000823f
 80046a8:	40020940 	.word	0x40020940

080046ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80046ba:	e15a      	b.n	8004972 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	2101      	movs	r1, #1
 80046c2:	697b      	ldr	r3, [r7, #20]
 80046c4:	fa01 f303 	lsl.w	r3, r1, r3
 80046c8:	4013      	ands	r3, r2
 80046ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f000 814c 	beq.w	800496c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685b      	ldr	r3, [r3, #4]
 80046d8:	f003 0303 	and.w	r3, r3, #3
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d005      	beq.n	80046ec <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80046e8:	2b02      	cmp	r3, #2
 80046ea:	d130      	bne.n	800474e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4013      	ands	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	005b      	lsls	r3, r3, #1
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	693a      	ldr	r2, [r7, #16]
 8004712:	4313      	orrs	r3, r2
 8004714:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	693a      	ldr	r2, [r7, #16]
 800471a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004722:	2201      	movs	r2, #1
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	fa02 f303 	lsl.w	r3, r2, r3
 800472a:	43db      	mvns	r3, r3
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	4013      	ands	r3, r2
 8004730:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	091b      	lsrs	r3, r3, #4
 8004738:	f003 0201 	and.w	r2, r3, #1
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	693a      	ldr	r2, [r7, #16]
 8004744:	4313      	orrs	r3, r2
 8004746:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	693a      	ldr	r2, [r7, #16]
 800474c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800474e:	683b      	ldr	r3, [r7, #0]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	f003 0303 	and.w	r3, r3, #3
 8004756:	2b03      	cmp	r3, #3
 8004758:	d017      	beq.n	800478a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004760:	697b      	ldr	r3, [r7, #20]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	2203      	movs	r2, #3
 8004766:	fa02 f303 	lsl.w	r3, r2, r3
 800476a:	43db      	mvns	r3, r3
 800476c:	693a      	ldr	r2, [r7, #16]
 800476e:	4013      	ands	r3, r2
 8004770:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	689a      	ldr	r2, [r3, #8]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	005b      	lsls	r3, r3, #1
 800477a:	fa02 f303 	lsl.w	r3, r2, r3
 800477e:	693a      	ldr	r2, [r7, #16]
 8004780:	4313      	orrs	r3, r2
 8004782:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	f003 0303 	and.w	r3, r3, #3
 8004792:	2b02      	cmp	r3, #2
 8004794:	d123      	bne.n	80047de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	08da      	lsrs	r2, r3, #3
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	3208      	adds	r2, #8
 800479e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	f003 0307 	and.w	r3, r3, #7
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	220f      	movs	r2, #15
 80047ae:	fa02 f303 	lsl.w	r3, r2, r3
 80047b2:	43db      	mvns	r3, r3
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	4013      	ands	r3, r2
 80047b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f003 0307 	and.w	r3, r3, #7
 80047c4:	009b      	lsls	r3, r3, #2
 80047c6:	fa02 f303 	lsl.w	r3, r2, r3
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	4313      	orrs	r3, r2
 80047ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	08da      	lsrs	r2, r3, #3
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3208      	adds	r2, #8
 80047d8:	6939      	ldr	r1, [r7, #16]
 80047da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	005b      	lsls	r3, r3, #1
 80047e8:	2203      	movs	r2, #3
 80047ea:	fa02 f303 	lsl.w	r3, r2, r3
 80047ee:	43db      	mvns	r3, r3
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	4013      	ands	r3, r2
 80047f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f003 0203 	and.w	r2, r3, #3
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	005b      	lsls	r3, r3, #1
 8004802:	fa02 f303 	lsl.w	r3, r2, r3
 8004806:	693a      	ldr	r2, [r7, #16]
 8004808:	4313      	orrs	r3, r2
 800480a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	693a      	ldr	r2, [r7, #16]
 8004810:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800481a:	2b00      	cmp	r3, #0
 800481c:	f000 80a6 	beq.w	800496c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004820:	4b5b      	ldr	r3, [pc, #364]	@ (8004990 <HAL_GPIO_Init+0x2e4>)
 8004822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004824:	4a5a      	ldr	r2, [pc, #360]	@ (8004990 <HAL_GPIO_Init+0x2e4>)
 8004826:	f043 0301 	orr.w	r3, r3, #1
 800482a:	6613      	str	r3, [r2, #96]	@ 0x60
 800482c:	4b58      	ldr	r3, [pc, #352]	@ (8004990 <HAL_GPIO_Init+0x2e4>)
 800482e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004830:	f003 0301 	and.w	r3, r3, #1
 8004834:	60bb      	str	r3, [r7, #8]
 8004836:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004838:	4a56      	ldr	r2, [pc, #344]	@ (8004994 <HAL_GPIO_Init+0x2e8>)
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	089b      	lsrs	r3, r3, #2
 800483e:	3302      	adds	r3, #2
 8004840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004844:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	f003 0303 	and.w	r3, r3, #3
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	220f      	movs	r2, #15
 8004850:	fa02 f303 	lsl.w	r3, r2, r3
 8004854:	43db      	mvns	r3, r3
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4013      	ands	r3, r2
 800485a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004862:	d01f      	beq.n	80048a4 <HAL_GPIO_Init+0x1f8>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	4a4c      	ldr	r2, [pc, #304]	@ (8004998 <HAL_GPIO_Init+0x2ec>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d019      	beq.n	80048a0 <HAL_GPIO_Init+0x1f4>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	4a4b      	ldr	r2, [pc, #300]	@ (800499c <HAL_GPIO_Init+0x2f0>)
 8004870:	4293      	cmp	r3, r2
 8004872:	d013      	beq.n	800489c <HAL_GPIO_Init+0x1f0>
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	4a4a      	ldr	r2, [pc, #296]	@ (80049a0 <HAL_GPIO_Init+0x2f4>)
 8004878:	4293      	cmp	r3, r2
 800487a:	d00d      	beq.n	8004898 <HAL_GPIO_Init+0x1ec>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	4a49      	ldr	r2, [pc, #292]	@ (80049a4 <HAL_GPIO_Init+0x2f8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d007      	beq.n	8004894 <HAL_GPIO_Init+0x1e8>
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a48      	ldr	r2, [pc, #288]	@ (80049a8 <HAL_GPIO_Init+0x2fc>)
 8004888:	4293      	cmp	r3, r2
 800488a:	d101      	bne.n	8004890 <HAL_GPIO_Init+0x1e4>
 800488c:	2305      	movs	r3, #5
 800488e:	e00a      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004890:	2306      	movs	r3, #6
 8004892:	e008      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004894:	2304      	movs	r3, #4
 8004896:	e006      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 8004898:	2303      	movs	r3, #3
 800489a:	e004      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 800489c:	2302      	movs	r3, #2
 800489e:	e002      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 80048a0:	2301      	movs	r3, #1
 80048a2:	e000      	b.n	80048a6 <HAL_GPIO_Init+0x1fa>
 80048a4:	2300      	movs	r3, #0
 80048a6:	697a      	ldr	r2, [r7, #20]
 80048a8:	f002 0203 	and.w	r2, r2, #3
 80048ac:	0092      	lsls	r2, r2, #2
 80048ae:	4093      	lsls	r3, r2
 80048b0:	693a      	ldr	r2, [r7, #16]
 80048b2:	4313      	orrs	r3, r2
 80048b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048b6:	4937      	ldr	r1, [pc, #220]	@ (8004994 <HAL_GPIO_Init+0x2e8>)
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	089b      	lsrs	r3, r3, #2
 80048bc:	3302      	adds	r3, #2
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80048c4:	4b39      	ldr	r3, [pc, #228]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	43db      	mvns	r3, r3
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4013      	ands	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d003      	beq.n	80048e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80048e8:	4a30      	ldr	r2, [pc, #192]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80048ee:	4b2f      	ldr	r3, [pc, #188]	@ (80049ac <HAL_GPIO_Init+0x300>)
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	43db      	mvns	r3, r3
 80048f8:	693a      	ldr	r2, [r7, #16]
 80048fa:	4013      	ands	r3, r2
 80048fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d003      	beq.n	8004912 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	4313      	orrs	r3, r2
 8004910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004912:	4a26      	ldr	r2, [pc, #152]	@ (80049ac <HAL_GPIO_Init+0x300>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004918:	4b24      	ldr	r3, [pc, #144]	@ (80049ac <HAL_GPIO_Init+0x300>)
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	43db      	mvns	r3, r3
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	4013      	ands	r3, r2
 8004926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	4313      	orrs	r3, r2
 800493a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800493c:	4a1b      	ldr	r2, [pc, #108]	@ (80049ac <HAL_GPIO_Init+0x300>)
 800493e:	693b      	ldr	r3, [r7, #16]
 8004940:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004942:	4b1a      	ldr	r3, [pc, #104]	@ (80049ac <HAL_GPIO_Init+0x300>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	43db      	mvns	r3, r3
 800494c:	693a      	ldr	r2, [r7, #16]
 800494e:	4013      	ands	r3, r2
 8004950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800495a:	2b00      	cmp	r3, #0
 800495c:	d003      	beq.n	8004966 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800495e:	693a      	ldr	r2, [r7, #16]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	4313      	orrs	r3, r2
 8004964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004966:	4a11      	ldr	r2, [pc, #68]	@ (80049ac <HAL_GPIO_Init+0x300>)
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3301      	adds	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	fa22 f303 	lsr.w	r3, r2, r3
 800497c:	2b00      	cmp	r3, #0
 800497e:	f47f ae9d 	bne.w	80046bc <HAL_GPIO_Init+0x10>
  }
}
 8004982:	bf00      	nop
 8004984:	bf00      	nop
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498e:	4770      	bx	lr
 8004990:	40021000 	.word	0x40021000
 8004994:	40010000 	.word	0x40010000
 8004998:	48000400 	.word	0x48000400
 800499c:	48000800 	.word	0x48000800
 80049a0:	48000c00 	.word	0x48000c00
 80049a4:	48001000 	.word	0x48001000
 80049a8:	48001400 	.word	0x48001400
 80049ac:	40010400 	.word	0x40010400

080049b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e001      	b.n	80049d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b082      	sub	sp, #8
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	4603      	mov	r3, r0
 80049e8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80049ea:	4b08      	ldr	r3, [pc, #32]	@ (8004a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049ec:	695a      	ldr	r2, [r3, #20]
 80049ee:	88fb      	ldrh	r3, [r7, #6]
 80049f0:	4013      	ands	r3, r2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d006      	beq.n	8004a04 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049f6:	4a05      	ldr	r2, [pc, #20]	@ (8004a0c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049f8:	88fb      	ldrh	r3, [r7, #6]
 80049fa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049fc:	88fb      	ldrh	r3, [r7, #6]
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f806 	bl	8004a10 <HAL_GPIO_EXTI_Callback>
  }
}
 8004a04:	bf00      	nop
 8004a06:	3708      	adds	r7, #8
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	bd80      	pop	{r7, pc}
 8004a0c:	40010400 	.word	0x40010400

08004a10 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b083      	sub	sp, #12
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	4603      	mov	r3, r0
 8004a18:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004a1a:	bf00      	nop
 8004a1c:	370c      	adds	r7, #12
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr

08004a26 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8004a26:	b580      	push	{r7, lr}
 8004a28:	b084      	sub	sp, #16
 8004a2a:	af00      	add	r7, sp, #0
 8004a2c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e041      	b.n	8004abc <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8004a40:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f245 5255 	movw	r2, #21845	@ 0x5555
 8004a4a:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	6852      	ldr	r2, [r2, #4]
 8004a54:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	687a      	ldr	r2, [r7, #4]
 8004a5c:	6892      	ldr	r2, [r2, #8]
 8004a5e:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8004a60:	f7fd feb0 	bl	80027c4 <HAL_GetTick>
 8004a64:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a66:	e00f      	b.n	8004a88 <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8004a68:	f7fd feac 	bl	80027c4 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b31      	cmp	r3, #49	@ 0x31
 8004a74:	d908      	bls.n	8004a88 <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f003 0307 	and.w	r3, r3, #7
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d001      	beq.n	8004a88 <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e019      	b.n	8004abc <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1e8      	bne.n	8004a68 <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	691a      	ldr	r2, [r3, #16]
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d005      	beq.n	8004ab0 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	687a      	ldr	r2, [r7, #4]
 8004aaa:	68d2      	ldr	r2, [r2, #12]
 8004aac:	611a      	str	r2, [r3, #16]
 8004aae:	e004      	b.n	8004aba <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004ab8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3710      	adds	r7, #16
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b083      	sub	sp, #12
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004ad4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b085      	sub	sp, #20
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d141      	bne.n	8004b76 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004af2:	4b4b      	ldr	r3, [pc, #300]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afe:	d131      	bne.n	8004b64 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b00:	4b47      	ldr	r3, [pc, #284]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b06:	4a46      	ldr	r2, [pc, #280]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b0c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b10:	4b43      	ldr	r3, [pc, #268]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b18:	4a41      	ldr	r2, [pc, #260]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b1e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b20:	4b40      	ldr	r3, [pc, #256]	@ (8004c24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2232      	movs	r2, #50	@ 0x32
 8004b26:	fb02 f303 	mul.w	r3, r2, r3
 8004b2a:	4a3f      	ldr	r2, [pc, #252]	@ (8004c28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b2c:	fba2 2303 	umull	r2, r3, r2, r3
 8004b30:	0c9b      	lsrs	r3, r3, #18
 8004b32:	3301      	adds	r3, #1
 8004b34:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b36:	e002      	b.n	8004b3e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	3b01      	subs	r3, #1
 8004b3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b3e:	4b38      	ldr	r3, [pc, #224]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b4a:	d102      	bne.n	8004b52 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1f2      	bne.n	8004b38 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b52:	4b33      	ldr	r3, [pc, #204]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b54:	695b      	ldr	r3, [r3, #20]
 8004b56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5e:	d158      	bne.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e057      	b.n	8004c14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b64:	4b2e      	ldr	r3, [pc, #184]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b66:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b6a:	4a2d      	ldr	r2, [pc, #180]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b6c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b70:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b74:	e04d      	b.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b7c:	d141      	bne.n	8004c02 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7e:	4b28      	ldr	r3, [pc, #160]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b8a:	d131      	bne.n	8004bf0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b8c:	4b24      	ldr	r3, [pc, #144]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b92:	4a23      	ldr	r2, [pc, #140]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b98:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b9c:	4b20      	ldr	r3, [pc, #128]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ba4:	4a1e      	ldr	r2, [pc, #120]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004baa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004bac:	4b1d      	ldr	r3, [pc, #116]	@ (8004c24 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2232      	movs	r2, #50	@ 0x32
 8004bb2:	fb02 f303 	mul.w	r3, r2, r3
 8004bb6:	4a1c      	ldr	r2, [pc, #112]	@ (8004c28 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbc:	0c9b      	lsrs	r3, r3, #18
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc2:	e002      	b.n	8004bca <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3b01      	subs	r3, #1
 8004bc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bca:	4b15      	ldr	r3, [pc, #84]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bcc:	695b      	ldr	r3, [r3, #20]
 8004bce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bd2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd6:	d102      	bne.n	8004bde <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f2      	bne.n	8004bc4 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bde:	4b10      	ldr	r3, [pc, #64]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be0:	695b      	ldr	r3, [r3, #20]
 8004be2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bea:	d112      	bne.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e011      	b.n	8004c14 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bfc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004c00:	e007      	b.n	8004c12 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c02:	4b07      	ldr	r3, [pc, #28]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c0a:	4a05      	ldr	r2, [pc, #20]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c10:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c12:	2300      	movs	r3, #0
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3714      	adds	r7, #20
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1e:	4770      	bx	lr
 8004c20:	40007000 	.word	0x40007000
 8004c24:	20000004 	.word	0x20000004
 8004c28:	431bde83 	.word	0x431bde83

08004c2c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004c30:	4b05      	ldr	r3, [pc, #20]	@ (8004c48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c32:	689b      	ldr	r3, [r3, #8]
 8004c34:	4a04      	ldr	r2, [pc, #16]	@ (8004c48 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004c36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c3a:	6093      	str	r3, [r2, #8]
}
 8004c3c:	bf00      	nop
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40007000 	.word	0x40007000

08004c4c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b088      	sub	sp, #32
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d101      	bne.n	8004c5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e2fe      	b.n	800525c <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0301 	and.w	r3, r3, #1
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d075      	beq.n	8004d56 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c6a:	4b97      	ldr	r3, [pc, #604]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004c6c:	689b      	ldr	r3, [r3, #8]
 8004c6e:	f003 030c 	and.w	r3, r3, #12
 8004c72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c74:	4b94      	ldr	r3, [pc, #592]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0303 	and.w	r3, r3, #3
 8004c7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b0c      	cmp	r3, #12
 8004c82:	d102      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3e>
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	2b03      	cmp	r3, #3
 8004c88:	d002      	beq.n	8004c90 <HAL_RCC_OscConfig+0x44>
 8004c8a:	69bb      	ldr	r3, [r7, #24]
 8004c8c:	2b08      	cmp	r3, #8
 8004c8e:	d10b      	bne.n	8004ca8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	4b8d      	ldr	r3, [pc, #564]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d05b      	beq.n	8004d54 <HAL_RCC_OscConfig+0x108>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d157      	bne.n	8004d54 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e2d9      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004cb0:	d106      	bne.n	8004cc0 <HAL_RCC_OscConfig+0x74>
 8004cb2:	4b85      	ldr	r3, [pc, #532]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a84      	ldr	r2, [pc, #528]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004cbc:	6013      	str	r3, [r2, #0]
 8004cbe:	e01d      	b.n	8004cfc <HAL_RCC_OscConfig+0xb0>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004cc8:	d10c      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x98>
 8004cca:	4b7f      	ldr	r3, [pc, #508]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a7e      	ldr	r2, [pc, #504]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004cd4:	6013      	str	r3, [r2, #0]
 8004cd6:	4b7c      	ldr	r3, [pc, #496]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	4a7b      	ldr	r2, [pc, #492]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cdc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ce0:	6013      	str	r3, [r2, #0]
 8004ce2:	e00b      	b.n	8004cfc <HAL_RCC_OscConfig+0xb0>
 8004ce4:	4b78      	ldr	r3, [pc, #480]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	4a77      	ldr	r2, [pc, #476]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004cee:	6013      	str	r3, [r2, #0]
 8004cf0:	4b75      	ldr	r3, [pc, #468]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	4a74      	ldr	r2, [pc, #464]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004cf6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004cfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d013      	beq.n	8004d2c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d04:	f7fd fd5e 	bl	80027c4 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d0c:	f7fd fd5a 	bl	80027c4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b64      	cmp	r3, #100	@ 0x64
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e29e      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d0f0      	beq.n	8004d0c <HAL_RCC_OscConfig+0xc0>
 8004d2a:	e014      	b.n	8004d56 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d2c:	f7fd fd4a 	bl	80027c4 <HAL_GetTick>
 8004d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d32:	e008      	b.n	8004d46 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d34:	f7fd fd46 	bl	80027c4 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	2b64      	cmp	r3, #100	@ 0x64
 8004d40:	d901      	bls.n	8004d46 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004d42:	2303      	movs	r3, #3
 8004d44:	e28a      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004d46:	4b60      	ldr	r3, [pc, #384]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d1f0      	bne.n	8004d34 <HAL_RCC_OscConfig+0xe8>
 8004d52:	e000      	b.n	8004d56 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f003 0302 	and.w	r3, r3, #2
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d075      	beq.n	8004e4e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004d62:	4b59      	ldr	r3, [pc, #356]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	f003 030c 	and.w	r3, r3, #12
 8004d6a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004d6c:	4b56      	ldr	r3, [pc, #344]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	68db      	ldr	r3, [r3, #12]
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004d76:	69bb      	ldr	r3, [r7, #24]
 8004d78:	2b0c      	cmp	r3, #12
 8004d7a:	d102      	bne.n	8004d82 <HAL_RCC_OscConfig+0x136>
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d002      	beq.n	8004d88 <HAL_RCC_OscConfig+0x13c>
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	2b04      	cmp	r3, #4
 8004d86:	d11f      	bne.n	8004dc8 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004d88:	4b4f      	ldr	r3, [pc, #316]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d005      	beq.n	8004da0 <HAL_RCC_OscConfig+0x154>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	68db      	ldr	r3, [r3, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d101      	bne.n	8004da0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e25d      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004da0:	4b49      	ldr	r3, [pc, #292]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	4946      	ldr	r1, [pc, #280]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004db4:	4b45      	ldr	r3, [pc, #276]	@ (8004ecc <HAL_RCC_OscConfig+0x280>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fd fa0d 	bl	80021d8 <HAL_InitTick>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d043      	beq.n	8004e4c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e249      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	68db      	ldr	r3, [r3, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d023      	beq.n	8004e18 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004dd0:	4b3d      	ldr	r3, [pc, #244]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4a3c      	ldr	r2, [pc, #240]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004dd6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ddc:	f7fd fcf2 	bl	80027c4 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004de4:	f7fd fcee 	bl	80027c4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e232      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004df6:	4b34      	ldr	r3, [pc, #208]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d0f0      	beq.n	8004de4 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e02:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	691b      	ldr	r3, [r3, #16]
 8004e0e:	061b      	lsls	r3, r3, #24
 8004e10:	492d      	ldr	r1, [pc, #180]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e12:	4313      	orrs	r3, r2
 8004e14:	604b      	str	r3, [r1, #4]
 8004e16:	e01a      	b.n	8004e4e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e18:	4b2b      	ldr	r3, [pc, #172]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a2a      	ldr	r2, [pc, #168]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e1e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004e22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e24:	f7fd fcce 	bl	80027c4 <HAL_GetTick>
 8004e28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e2a:	e008      	b.n	8004e3e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e2c:	f7fd fcca 	bl	80027c4 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	2b02      	cmp	r3, #2
 8004e38:	d901      	bls.n	8004e3e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004e3a:	2303      	movs	r3, #3
 8004e3c:	e20e      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004e3e:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d1f0      	bne.n	8004e2c <HAL_RCC_OscConfig+0x1e0>
 8004e4a:	e000      	b.n	8004e4e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e4c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f003 0308 	and.w	r3, r3, #8
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d041      	beq.n	8004ede <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	695b      	ldr	r3, [r3, #20]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d01c      	beq.n	8004e9c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004e62:	4b19      	ldr	r3, [pc, #100]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e64:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e68:	4a17      	ldr	r2, [pc, #92]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e72:	f7fd fca7 	bl	80027c4 <HAL_GetTick>
 8004e76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e78:	e008      	b.n	8004e8c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004e7a:	f7fd fca3 	bl	80027c4 <HAL_GetTick>
 8004e7e:	4602      	mov	r2, r0
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	1ad3      	subs	r3, r2, r3
 8004e84:	2b02      	cmp	r3, #2
 8004e86:	d901      	bls.n	8004e8c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004e88:	2303      	movs	r3, #3
 8004e8a:	e1e7      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004e8c:	4b0e      	ldr	r3, [pc, #56]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004e92:	f003 0302 	and.w	r3, r3, #2
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d0ef      	beq.n	8004e7a <HAL_RCC_OscConfig+0x22e>
 8004e9a:	e020      	b.n	8004ede <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004e9e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ea2:	4a09      	ldr	r2, [pc, #36]	@ (8004ec8 <HAL_RCC_OscConfig+0x27c>)
 8004ea4:	f023 0301 	bic.w	r3, r3, #1
 8004ea8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fd fc8a 	bl	80027c4 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004eb2:	e00d      	b.n	8004ed0 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004eb4:	f7fd fc86 	bl	80027c4 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d906      	bls.n	8004ed0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e1ca      	b.n	800525c <HAL_RCC_OscConfig+0x610>
 8004ec6:	bf00      	nop
 8004ec8:	40021000 	.word	0x40021000
 8004ecc:	20000008 	.word	0x20000008
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004ed0:	4b8c      	ldr	r3, [pc, #560]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004ed2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1ea      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0304 	and.w	r3, r3, #4
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80a6 	beq.w	8005038 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004eec:	2300      	movs	r3, #0
 8004eee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004ef0:	4b84      	ldr	r3, [pc, #528]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004ef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d101      	bne.n	8004f00 <HAL_RCC_OscConfig+0x2b4>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e000      	b.n	8004f02 <HAL_RCC_OscConfig+0x2b6>
 8004f00:	2300      	movs	r3, #0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d00d      	beq.n	8004f22 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f06:	4b7f      	ldr	r3, [pc, #508]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f10:	6593      	str	r3, [r2, #88]	@ 0x58
 8004f12:	4b7c      	ldr	r3, [pc, #496]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f1e:	2301      	movs	r3, #1
 8004f20:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f22:	4b79      	ldr	r3, [pc, #484]	@ (8005108 <HAL_RCC_OscConfig+0x4bc>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d118      	bne.n	8004f60 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f2e:	4b76      	ldr	r3, [pc, #472]	@ (8005108 <HAL_RCC_OscConfig+0x4bc>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a75      	ldr	r2, [pc, #468]	@ (8005108 <HAL_RCC_OscConfig+0x4bc>)
 8004f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004f3a:	f7fd fc43 	bl	80027c4 <HAL_GetTick>
 8004f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f40:	e008      	b.n	8004f54 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f42:	f7fd fc3f 	bl	80027c4 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	693b      	ldr	r3, [r7, #16]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	2b02      	cmp	r3, #2
 8004f4e:	d901      	bls.n	8004f54 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004f50:	2303      	movs	r3, #3
 8004f52:	e183      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f54:	4b6c      	ldr	r3, [pc, #432]	@ (8005108 <HAL_RCC_OscConfig+0x4bc>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d0f0      	beq.n	8004f42 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689b      	ldr	r3, [r3, #8]
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d108      	bne.n	8004f7a <HAL_RCC_OscConfig+0x32e>
 8004f68:	4b66      	ldr	r3, [pc, #408]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f6e:	4a65      	ldr	r2, [pc, #404]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f70:	f043 0301 	orr.w	r3, r3, #1
 8004f74:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f78:	e024      	b.n	8004fc4 <HAL_RCC_OscConfig+0x378>
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	2b05      	cmp	r3, #5
 8004f80:	d110      	bne.n	8004fa4 <HAL_RCC_OscConfig+0x358>
 8004f82:	4b60      	ldr	r3, [pc, #384]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f88:	4a5e      	ldr	r2, [pc, #376]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f8a:	f043 0304 	orr.w	r3, r3, #4
 8004f8e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004f92:	4b5c      	ldr	r3, [pc, #368]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004f98:	4a5a      	ldr	r2, [pc, #360]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fa2:	e00f      	b.n	8004fc4 <HAL_RCC_OscConfig+0x378>
 8004fa4:	4b57      	ldr	r3, [pc, #348]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004faa:	4a56      	ldr	r2, [pc, #344]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004fb4:	4b53      	ldr	r3, [pc, #332]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004fba:	4a52      	ldr	r2, [pc, #328]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004fbc:	f023 0304 	bic.w	r3, r3, #4
 8004fc0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	689b      	ldr	r3, [r3, #8]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d016      	beq.n	8004ffa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fcc:	f7fd fbfa 	bl	80027c4 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fd2:	e00a      	b.n	8004fea <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004fd4:	f7fd fbf6 	bl	80027c4 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fe2:	4293      	cmp	r3, r2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e138      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fea:	4b46      	ldr	r3, [pc, #280]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d0ed      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x388>
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ffa:	f7fd fbe3 	bl	80027c4 <HAL_GetTick>
 8004ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005000:	e00a      	b.n	8005018 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005002:	f7fd fbdf 	bl	80027c4 <HAL_GetTick>
 8005006:	4602      	mov	r2, r0
 8005008:	693b      	ldr	r3, [r7, #16]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005010:	4293      	cmp	r3, r2
 8005012:	d901      	bls.n	8005018 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005014:	2303      	movs	r3, #3
 8005016:	e121      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005018:	4b3a      	ldr	r3, [pc, #232]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 800501a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1ed      	bne.n	8005002 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005026:	7ffb      	ldrb	r3, [r7, #31]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d105      	bne.n	8005038 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800502c:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 800502e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005030:	4a34      	ldr	r2, [pc, #208]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005036:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0320 	and.w	r3, r3, #32
 8005040:	2b00      	cmp	r3, #0
 8005042:	d03c      	beq.n	80050be <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d01c      	beq.n	8005086 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800504c:	4b2d      	ldr	r3, [pc, #180]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 800504e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005052:	4a2c      	ldr	r2, [pc, #176]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8005054:	f043 0301 	orr.w	r3, r3, #1
 8005058:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800505c:	f7fd fbb2 	bl	80027c4 <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005064:	f7fd fbae 	bl	80027c4 <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005072:	2303      	movs	r3, #3
 8005074:	e0f2      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005076:	4b23      	ldr	r3, [pc, #140]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8005078:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	2b00      	cmp	r3, #0
 8005082:	d0ef      	beq.n	8005064 <HAL_RCC_OscConfig+0x418>
 8005084:	e01b      	b.n	80050be <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005086:	4b1f      	ldr	r3, [pc, #124]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 8005088:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800508c:	4a1d      	ldr	r2, [pc, #116]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 800508e:	f023 0301 	bic.w	r3, r3, #1
 8005092:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005096:	f7fd fb95 	bl	80027c4 <HAL_GetTick>
 800509a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800509c:	e008      	b.n	80050b0 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800509e:	f7fd fb91 	bl	80027c4 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	2b02      	cmp	r3, #2
 80050aa:	d901      	bls.n	80050b0 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80050ac:	2303      	movs	r3, #3
 80050ae:	e0d5      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80050b0:	4b14      	ldr	r3, [pc, #80]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 80050b2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80050b6:	f003 0302 	and.w	r3, r3, #2
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d1ef      	bne.n	800509e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	69db      	ldr	r3, [r3, #28]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	f000 80c9 	beq.w	800525a <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050c8:	4b0e      	ldr	r3, [pc, #56]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f003 030c 	and.w	r3, r3, #12
 80050d0:	2b0c      	cmp	r3, #12
 80050d2:	f000 8083 	beq.w	80051dc <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	69db      	ldr	r3, [r3, #28]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d15e      	bne.n	800519c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050de:	4b09      	ldr	r3, [pc, #36]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a08      	ldr	r2, [pc, #32]	@ (8005104 <HAL_RCC_OscConfig+0x4b8>)
 80050e4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050ea:	f7fd fb6b 	bl	80027c4 <HAL_GetTick>
 80050ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050f0:	e00c      	b.n	800510c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050f2:	f7fd fb67 	bl	80027c4 <HAL_GetTick>
 80050f6:	4602      	mov	r2, r0
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	1ad3      	subs	r3, r2, r3
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d905      	bls.n	800510c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e0ab      	b.n	800525c <HAL_RCC_OscConfig+0x610>
 8005104:	40021000 	.word	0x40021000
 8005108:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800510c:	4b55      	ldr	r3, [pc, #340]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d1ec      	bne.n	80050f2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005118:	4b52      	ldr	r3, [pc, #328]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800511a:	68da      	ldr	r2, [r3, #12]
 800511c:	4b52      	ldr	r3, [pc, #328]	@ (8005268 <HAL_RCC_OscConfig+0x61c>)
 800511e:	4013      	ands	r3, r2
 8005120:	687a      	ldr	r2, [r7, #4]
 8005122:	6a11      	ldr	r1, [r2, #32]
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005128:	3a01      	subs	r2, #1
 800512a:	0112      	lsls	r2, r2, #4
 800512c:	4311      	orrs	r1, r2
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005132:	0212      	lsls	r2, r2, #8
 8005134:	4311      	orrs	r1, r2
 8005136:	687a      	ldr	r2, [r7, #4]
 8005138:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800513a:	0852      	lsrs	r2, r2, #1
 800513c:	3a01      	subs	r2, #1
 800513e:	0552      	lsls	r2, r2, #21
 8005140:	4311      	orrs	r1, r2
 8005142:	687a      	ldr	r2, [r7, #4]
 8005144:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005146:	0852      	lsrs	r2, r2, #1
 8005148:	3a01      	subs	r2, #1
 800514a:	0652      	lsls	r2, r2, #25
 800514c:	4311      	orrs	r1, r2
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005152:	06d2      	lsls	r2, r2, #27
 8005154:	430a      	orrs	r2, r1
 8005156:	4943      	ldr	r1, [pc, #268]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005158:	4313      	orrs	r3, r2
 800515a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800515c:	4b41      	ldr	r3, [pc, #260]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4a40      	ldr	r2, [pc, #256]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005162:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005166:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005168:	4b3e      	ldr	r3, [pc, #248]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	4a3d      	ldr	r2, [pc, #244]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800516e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005172:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005174:	f7fd fb26 	bl	80027c4 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800517a:	e008      	b.n	800518e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800517c:	f7fd fb22 	bl	80027c4 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b02      	cmp	r3, #2
 8005188:	d901      	bls.n	800518e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e066      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800518e:	4b35      	ldr	r3, [pc, #212]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d0f0      	beq.n	800517c <HAL_RCC_OscConfig+0x530>
 800519a:	e05e      	b.n	800525a <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800519c:	4b31      	ldr	r3, [pc, #196]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a30      	ldr	r2, [pc, #192]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80051a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051a8:	f7fd fb0c 	bl	80027c4 <HAL_GetTick>
 80051ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051ae:	e008      	b.n	80051c2 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051b0:	f7fd fb08 	bl	80027c4 <HAL_GetTick>
 80051b4:	4602      	mov	r2, r0
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	1ad3      	subs	r3, r2, r3
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d901      	bls.n	80051c2 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80051be:	2303      	movs	r3, #3
 80051c0:	e04c      	b.n	800525c <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80051c2:	4b28      	ldr	r3, [pc, #160]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d1f0      	bne.n	80051b0 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80051ce:	4b25      	ldr	r3, [pc, #148]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051d0:	68da      	ldr	r2, [r3, #12]
 80051d2:	4924      	ldr	r1, [pc, #144]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051d4:	4b25      	ldr	r3, [pc, #148]	@ (800526c <HAL_RCC_OscConfig+0x620>)
 80051d6:	4013      	ands	r3, r2
 80051d8:	60cb      	str	r3, [r1, #12]
 80051da:	e03e      	b.n	800525a <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	69db      	ldr	r3, [r3, #28]
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e039      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80051e8:	4b1e      	ldr	r3, [pc, #120]	@ (8005264 <HAL_RCC_OscConfig+0x618>)
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	f003 0203 	and.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a1b      	ldr	r3, [r3, #32]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d12c      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	3b01      	subs	r3, #1
 8005208:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800520a:	429a      	cmp	r2, r3
 800520c:	d123      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005218:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800521a:	429a      	cmp	r2, r3
 800521c:	d11b      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800521e:	697b      	ldr	r3, [r7, #20]
 8005220:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005228:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800522a:	429a      	cmp	r2, r3
 800522c:	d113      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005238:	085b      	lsrs	r3, r3, #1
 800523a:	3b01      	subs	r3, #1
 800523c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800523e:	429a      	cmp	r2, r3
 8005240:	d109      	bne.n	8005256 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800524c:	085b      	lsrs	r3, r3, #1
 800524e:	3b01      	subs	r3, #1
 8005250:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005252:	429a      	cmp	r2, r3
 8005254:	d001      	beq.n	800525a <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8005256:	2301      	movs	r3, #1
 8005258:	e000      	b.n	800525c <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3720      	adds	r7, #32
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}
 8005264:	40021000 	.word	0x40021000
 8005268:	019f800c 	.word	0x019f800c
 800526c:	feeefffc 	.word	0xfeeefffc

08005270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b086      	sub	sp, #24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d101      	bne.n	8005288 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005284:	2301      	movs	r3, #1
 8005286:	e11e      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005288:	4b91      	ldr	r3, [pc, #580]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f003 030f 	and.w	r3, r3, #15
 8005290:	683a      	ldr	r2, [r7, #0]
 8005292:	429a      	cmp	r2, r3
 8005294:	d910      	bls.n	80052b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005296:	4b8e      	ldr	r3, [pc, #568]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f023 020f 	bic.w	r2, r3, #15
 800529e:	498c      	ldr	r1, [pc, #560]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	4313      	orrs	r3, r2
 80052a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052a6:	4b8a      	ldr	r3, [pc, #552]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 030f 	and.w	r3, r3, #15
 80052ae:	683a      	ldr	r2, [r7, #0]
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d001      	beq.n	80052b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e106      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f003 0301 	and.w	r3, r3, #1
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d073      	beq.n	80053ac <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	2b03      	cmp	r3, #3
 80052ca:	d129      	bne.n	8005320 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80052cc:	4b81      	ldr	r3, [pc, #516]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d101      	bne.n	80052dc <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 80052d8:	2301      	movs	r3, #1
 80052da:	e0f4      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80052dc:	f000 f9d0 	bl	8005680 <RCC_GetSysClockFreqFromPLLSource>
 80052e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80052e2:	693b      	ldr	r3, [r7, #16]
 80052e4:	4a7c      	ldr	r2, [pc, #496]	@ (80054d8 <HAL_RCC_ClockConfig+0x268>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d93f      	bls.n	800536a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052ea:	4b7a      	ldr	r3, [pc, #488]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d033      	beq.n	800536a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005306:	2b00      	cmp	r3, #0
 8005308:	d12f      	bne.n	800536a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800530a:	4b72      	ldr	r3, [pc, #456]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800530c:	689b      	ldr	r3, [r3, #8]
 800530e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005312:	4a70      	ldr	r2, [pc, #448]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005314:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005318:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800531a:	2380      	movs	r3, #128	@ 0x80
 800531c:	617b      	str	r3, [r7, #20]
 800531e:	e024      	b.n	800536a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	2b02      	cmp	r3, #2
 8005326:	d107      	bne.n	8005338 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005328:	4b6a      	ldr	r3, [pc, #424]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d109      	bne.n	8005348 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005334:	2301      	movs	r3, #1
 8005336:	e0c6      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005338:	4b66      	ldr	r3, [pc, #408]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e0be      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005348:	f000 f8ce 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800534c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	4a61      	ldr	r2, [pc, #388]	@ (80054d8 <HAL_RCC_ClockConfig+0x268>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d909      	bls.n	800536a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005356:	4b5f      	ldr	r3, [pc, #380]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800535e:	4a5d      	ldr	r2, [pc, #372]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005360:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005364:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005366:	2380      	movs	r3, #128	@ 0x80
 8005368:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800536a:	4b5a      	ldr	r3, [pc, #360]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800536c:	689b      	ldr	r3, [r3, #8]
 800536e:	f023 0203 	bic.w	r2, r3, #3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	4957      	ldr	r1, [pc, #348]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005378:	4313      	orrs	r3, r2
 800537a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800537c:	f7fd fa22 	bl	80027c4 <HAL_GetTick>
 8005380:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005382:	e00a      	b.n	800539a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005384:	f7fd fa1e 	bl	80027c4 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e095      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539a:	4b4e      	ldr	r3, [pc, #312]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	f003 020c 	and.w	r2, r3, #12
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	685b      	ldr	r3, [r3, #4]
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d1eb      	bne.n	8005384 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0302 	and.w	r3, r3, #2
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d023      	beq.n	8005400 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f003 0304 	and.w	r3, r3, #4
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d005      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053c4:	4b43      	ldr	r3, [pc, #268]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80053c6:	689b      	ldr	r3, [r3, #8]
 80053c8:	4a42      	ldr	r2, [pc, #264]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80053ca:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053ce:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0308 	and.w	r3, r3, #8
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d007      	beq.n	80053ec <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80053dc:	4b3d      	ldr	r3, [pc, #244]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80053e4:	4a3b      	ldr	r2, [pc, #236]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80053e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80053ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053ec:	4b39      	ldr	r3, [pc, #228]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	4936      	ldr	r1, [pc, #216]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	608b      	str	r3, [r1, #8]
 80053fe:	e008      	b.n	8005412 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	2b80      	cmp	r3, #128	@ 0x80
 8005404:	d105      	bne.n	8005412 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005406:	4b33      	ldr	r3, [pc, #204]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	4a32      	ldr	r2, [pc, #200]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800540c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005410:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005412:	4b2f      	ldr	r3, [pc, #188]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 030f 	and.w	r3, r3, #15
 800541a:	683a      	ldr	r2, [r7, #0]
 800541c:	429a      	cmp	r2, r3
 800541e:	d21d      	bcs.n	800545c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005420:	4b2b      	ldr	r3, [pc, #172]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f023 020f 	bic.w	r2, r3, #15
 8005428:	4929      	ldr	r1, [pc, #164]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	4313      	orrs	r3, r2
 800542e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005430:	f7fd f9c8 	bl	80027c4 <HAL_GetTick>
 8005434:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005436:	e00a      	b.n	800544e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005438:	f7fd f9c4 	bl	80027c4 <HAL_GetTick>
 800543c:	4602      	mov	r2, r0
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005446:	4293      	cmp	r3, r2
 8005448:	d901      	bls.n	800544e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800544a:	2303      	movs	r3, #3
 800544c:	e03b      	b.n	80054c6 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800544e:	4b20      	ldr	r3, [pc, #128]	@ (80054d0 <HAL_RCC_ClockConfig+0x260>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 030f 	and.w	r3, r3, #15
 8005456:	683a      	ldr	r2, [r7, #0]
 8005458:	429a      	cmp	r2, r3
 800545a:	d1ed      	bne.n	8005438 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 0304 	and.w	r3, r3, #4
 8005464:	2b00      	cmp	r3, #0
 8005466:	d008      	beq.n	800547a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005468:	4b1a      	ldr	r3, [pc, #104]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	68db      	ldr	r3, [r3, #12]
 8005474:	4917      	ldr	r1, [pc, #92]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005476:	4313      	orrs	r3, r2
 8005478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b00      	cmp	r3, #0
 8005484:	d009      	beq.n	800549a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005486:	4b13      	ldr	r3, [pc, #76]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	691b      	ldr	r3, [r3, #16]
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	490f      	ldr	r1, [pc, #60]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 8005496:	4313      	orrs	r3, r2
 8005498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800549a:	f000 f825 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800549e:	4602      	mov	r2, r0
 80054a0:	4b0c      	ldr	r3, [pc, #48]	@ (80054d4 <HAL_RCC_ClockConfig+0x264>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	091b      	lsrs	r3, r3, #4
 80054a6:	f003 030f 	and.w	r3, r3, #15
 80054aa:	490c      	ldr	r1, [pc, #48]	@ (80054dc <HAL_RCC_ClockConfig+0x26c>)
 80054ac:	5ccb      	ldrb	r3, [r1, r3]
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	fa22 f303 	lsr.w	r3, r2, r3
 80054b6:	4a0a      	ldr	r2, [pc, #40]	@ (80054e0 <HAL_RCC_ClockConfig+0x270>)
 80054b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80054ba:	4b0a      	ldr	r3, [pc, #40]	@ (80054e4 <HAL_RCC_ClockConfig+0x274>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	4618      	mov	r0, r3
 80054c0:	f7fc fe8a 	bl	80021d8 <HAL_InitTick>
 80054c4:	4603      	mov	r3, r0
}
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40022000 	.word	0x40022000
 80054d4:	40021000 	.word	0x40021000
 80054d8:	04c4b400 	.word	0x04c4b400
 80054dc:	08018c44 	.word	0x08018c44
 80054e0:	20000004 	.word	0x20000004
 80054e4:	20000008 	.word	0x20000008

080054e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b087      	sub	sp, #28
 80054ec:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80054ee:	4b2c      	ldr	r3, [pc, #176]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	f003 030c 	and.w	r3, r3, #12
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d102      	bne.n	8005500 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80054fa:	4b2a      	ldr	r3, [pc, #168]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 80054fc:	613b      	str	r3, [r7, #16]
 80054fe:	e047      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005500:	4b27      	ldr	r3, [pc, #156]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005502:	689b      	ldr	r3, [r3, #8]
 8005504:	f003 030c 	and.w	r3, r3, #12
 8005508:	2b08      	cmp	r3, #8
 800550a:	d102      	bne.n	8005512 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800550c:	4b26      	ldr	r3, [pc, #152]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800550e:	613b      	str	r3, [r7, #16]
 8005510:	e03e      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005512:	4b23      	ldr	r3, [pc, #140]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
 800551a:	2b0c      	cmp	r3, #12
 800551c:	d136      	bne.n	800558c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800551e:	4b20      	ldr	r3, [pc, #128]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f003 0303 	and.w	r3, r3, #3
 8005526:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005528:	4b1d      	ldr	r3, [pc, #116]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 800552a:	68db      	ldr	r3, [r3, #12]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	3301      	adds	r3, #1
 8005534:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d10c      	bne.n	8005556 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800553c:	4a1a      	ldr	r2, [pc, #104]	@ (80055a8 <HAL_RCC_GetSysClockFreq+0xc0>)
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	fbb2 f3f3 	udiv	r3, r2, r3
 8005544:	4a16      	ldr	r2, [pc, #88]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005546:	68d2      	ldr	r2, [r2, #12]
 8005548:	0a12      	lsrs	r2, r2, #8
 800554a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800554e:	fb02 f303 	mul.w	r3, r2, r3
 8005552:	617b      	str	r3, [r7, #20]
      break;
 8005554:	e00c      	b.n	8005570 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005556:	4a13      	ldr	r2, [pc, #76]	@ (80055a4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	fbb2 f3f3 	udiv	r3, r2, r3
 800555e:	4a10      	ldr	r2, [pc, #64]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005560:	68d2      	ldr	r2, [r2, #12]
 8005562:	0a12      	lsrs	r2, r2, #8
 8005564:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005568:	fb02 f303 	mul.w	r3, r2, r3
 800556c:	617b      	str	r3, [r7, #20]
      break;
 800556e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005570:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	0e5b      	lsrs	r3, r3, #25
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	3301      	adds	r3, #1
 800557c:	005b      	lsls	r3, r3, #1
 800557e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005580:	697a      	ldr	r2, [r7, #20]
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	fbb2 f3f3 	udiv	r3, r2, r3
 8005588:	613b      	str	r3, [r7, #16]
 800558a:	e001      	b.n	8005590 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005590:	693b      	ldr	r3, [r7, #16]
}
 8005592:	4618      	mov	r0, r3
 8005594:	371c      	adds	r7, #28
 8005596:	46bd      	mov	sp, r7
 8005598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559c:	4770      	bx	lr
 800559e:	bf00      	nop
 80055a0:	40021000 	.word	0x40021000
 80055a4:	00f42400 	.word	0x00f42400
 80055a8:	016e3600 	.word	0x016e3600

080055ac <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055ac:	b480      	push	{r7}
 80055ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055b0:	4b03      	ldr	r3, [pc, #12]	@ (80055c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055b2:	681b      	ldr	r3, [r3, #0]
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr
 80055be:	bf00      	nop
 80055c0:	20000004 	.word	0x20000004

080055c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80055c8:	f7ff fff0 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055cc:	4602      	mov	r2, r0
 80055ce:	4b06      	ldr	r3, [pc, #24]	@ (80055e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f003 0307 	and.w	r3, r3, #7
 80055d8:	4904      	ldr	r1, [pc, #16]	@ (80055ec <HAL_RCC_GetPCLK1Freq+0x28>)
 80055da:	5ccb      	ldrb	r3, [r1, r3]
 80055dc:	f003 031f 	and.w	r3, r3, #31
 80055e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	bd80      	pop	{r7, pc}
 80055e8:	40021000 	.word	0x40021000
 80055ec:	08018c54 	.word	0x08018c54

080055f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80055f4:	f7ff ffda 	bl	80055ac <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b06      	ldr	r3, [pc, #24]	@ (8005614 <HAL_RCC_GetPCLK2Freq+0x24>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0adb      	lsrs	r3, r3, #11
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4904      	ldr	r1, [pc, #16]	@ (8005618 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	f003 031f 	and.w	r3, r3, #31
 800560c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005610:	4618      	mov	r0, r3
 8005612:	bd80      	pop	{r7, pc}
 8005614:	40021000 	.word	0x40021000
 8005618:	08018c54 	.word	0x08018c54

0800561c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	220f      	movs	r2, #15
 800562a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800562c:	4b12      	ldr	r3, [pc, #72]	@ (8005678 <HAL_RCC_GetClockConfig+0x5c>)
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	f003 0203 	and.w	r2, r3, #3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005638:	4b0f      	ldr	r3, [pc, #60]	@ (8005678 <HAL_RCC_GetClockConfig+0x5c>)
 800563a:	689b      	ldr	r3, [r3, #8]
 800563c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005644:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <HAL_RCC_GetClockConfig+0x5c>)
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005650:	4b09      	ldr	r3, [pc, #36]	@ (8005678 <HAL_RCC_GetClockConfig+0x5c>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	08db      	lsrs	r3, r3, #3
 8005656:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800565e:	4b07      	ldr	r3, [pc, #28]	@ (800567c <HAL_RCC_GetClockConfig+0x60>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 020f 	and.w	r2, r3, #15
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	601a      	str	r2, [r3, #0]
}
 800566a:	bf00      	nop
 800566c:	370c      	adds	r7, #12
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40021000 	.word	0x40021000
 800567c:	40022000 	.word	0x40022000

08005680 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005680:	b480      	push	{r7}
 8005682:	b087      	sub	sp, #28
 8005684:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005686:	4b1e      	ldr	r3, [pc, #120]	@ (8005700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0303 	and.w	r3, r3, #3
 800568e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005690:	4b1b      	ldr	r3, [pc, #108]	@ (8005700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	091b      	lsrs	r3, r3, #4
 8005696:	f003 030f 	and.w	r3, r3, #15
 800569a:	3301      	adds	r3, #1
 800569c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800569e:	693b      	ldr	r3, [r7, #16]
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d10c      	bne.n	80056be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056a4:	4a17      	ldr	r2, [pc, #92]	@ (8005704 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ac:	4a14      	ldr	r2, [pc, #80]	@ (8005700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056ae:	68d2      	ldr	r2, [r2, #12]
 80056b0:	0a12      	lsrs	r2, r2, #8
 80056b2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056b6:	fb02 f303 	mul.w	r3, r2, r3
 80056ba:	617b      	str	r3, [r7, #20]
    break;
 80056bc:	e00c      	b.n	80056d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80056be:	4a12      	ldr	r2, [pc, #72]	@ (8005708 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80056c6:	4a0e      	ldr	r2, [pc, #56]	@ (8005700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056c8:	68d2      	ldr	r2, [r2, #12]
 80056ca:	0a12      	lsrs	r2, r2, #8
 80056cc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80056d0:	fb02 f303 	mul.w	r3, r2, r3
 80056d4:	617b      	str	r3, [r7, #20]
    break;
 80056d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80056d8:	4b09      	ldr	r3, [pc, #36]	@ (8005700 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80056da:	68db      	ldr	r3, [r3, #12]
 80056dc:	0e5b      	lsrs	r3, r3, #25
 80056de:	f003 0303 	and.w	r3, r3, #3
 80056e2:	3301      	adds	r3, #1
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80056e8:	697a      	ldr	r2, [r7, #20]
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80056f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80056f2:	687b      	ldr	r3, [r7, #4]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	40021000 	.word	0x40021000
 8005704:	016e3600 	.word	0x016e3600
 8005708:	00f42400 	.word	0x00f42400

0800570c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800570c:	b580      	push	{r7, lr}
 800570e:	b086      	sub	sp, #24
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005714:	2300      	movs	r3, #0
 8005716:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005718:	2300      	movs	r3, #0
 800571a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005724:	2b00      	cmp	r3, #0
 8005726:	f000 8098 	beq.w	800585a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800572a:	2300      	movs	r3, #0
 800572c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800572e:	4b43      	ldr	r3, [pc, #268]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005730:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005732:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10d      	bne.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800573a:	4b40      	ldr	r3, [pc, #256]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800573c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800573e:	4a3f      	ldr	r2, [pc, #252]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005744:	6593      	str	r3, [r2, #88]	@ 0x58
 8005746:	4b3d      	ldr	r3, [pc, #244]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005748:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800574a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800574e:	60bb      	str	r3, [r7, #8]
 8005750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005752:	2301      	movs	r3, #1
 8005754:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005756:	4b3a      	ldr	r3, [pc, #232]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a39      	ldr	r2, [pc, #228]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800575c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005760:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005762:	f7fd f82f 	bl	80027c4 <HAL_GetTick>
 8005766:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005768:	e009      	b.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800576a:	f7fd f82b 	bl	80027c4 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d902      	bls.n	800577e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	74fb      	strb	r3, [r7, #19]
        break;
 800577c:	e005      	b.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800577e:	4b30      	ldr	r3, [pc, #192]	@ (8005840 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d0ef      	beq.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800578a:	7cfb      	ldrb	r3, [r7, #19]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d159      	bne.n	8005844 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005790:	4b2a      	ldr	r3, [pc, #168]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005796:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800579a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01e      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80057a6:	697a      	ldr	r2, [r7, #20]
 80057a8:	429a      	cmp	r2, r3
 80057aa:	d019      	beq.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80057ac:	4b23      	ldr	r3, [pc, #140]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80057b8:	4b20      	ldr	r3, [pc, #128]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057be:	4a1f      	ldr	r2, [pc, #124]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80057c4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057c8:	4b1c      	ldr	r3, [pc, #112]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057ce:	4a1b      	ldr	r2, [pc, #108]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057d8:	4a18      	ldr	r2, [pc, #96]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d016      	beq.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ea:	f7fc ffeb 	bl	80027c4 <HAL_GetTick>
 80057ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057f0:	e00b      	b.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057f2:	f7fc ffe7 	bl	80027c4 <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005800:	4293      	cmp	r3, r2
 8005802:	d902      	bls.n	800580a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	74fb      	strb	r3, [r7, #19]
            break;
 8005808:	e006      	b.n	8005818 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800580a:	4b0c      	ldr	r3, [pc, #48]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800580c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005810:	f003 0302 	and.w	r3, r3, #2
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0ec      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005818:	7cfb      	ldrb	r3, [r7, #19]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d10b      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800581e:	4b07      	ldr	r3, [pc, #28]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005820:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005824:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800582c:	4903      	ldr	r1, [pc, #12]	@ (800583c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800582e:	4313      	orrs	r3, r2
 8005830:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005834:	e008      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005836:	7cfb      	ldrb	r3, [r7, #19]
 8005838:	74bb      	strb	r3, [r7, #18]
 800583a:	e005      	b.n	8005848 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800583c:	40021000 	.word	0x40021000
 8005840:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005844:	7cfb      	ldrb	r3, [r7, #19]
 8005846:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005848:	7c7b      	ldrb	r3, [r7, #17]
 800584a:	2b01      	cmp	r3, #1
 800584c:	d105      	bne.n	800585a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800584e:	4ba7      	ldr	r3, [pc, #668]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005852:	4aa6      	ldr	r2, [pc, #664]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005854:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005858:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f003 0301 	and.w	r3, r3, #1
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005866:	4ba1      	ldr	r3, [pc, #644]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005868:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800586c:	f023 0203 	bic.w	r2, r3, #3
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	499d      	ldr	r1, [pc, #628]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005876:	4313      	orrs	r3, r2
 8005878:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005888:	4b98      	ldr	r3, [pc, #608]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800588a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800588e:	f023 020c 	bic.w	r2, r3, #12
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	4995      	ldr	r1, [pc, #596]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005898:	4313      	orrs	r3, r2
 800589a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 0304 	and.w	r3, r3, #4
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80058aa:	4b90      	ldr	r3, [pc, #576]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058b0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	68db      	ldr	r3, [r3, #12]
 80058b8:	498c      	ldr	r1, [pc, #560]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ba:	4313      	orrs	r3, r2
 80058bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f003 0308 	and.w	r3, r3, #8
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058cc:	4b87      	ldr	r3, [pc, #540]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058d2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	691b      	ldr	r3, [r3, #16]
 80058da:	4984      	ldr	r1, [pc, #528]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0310 	and.w	r3, r3, #16
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ee:	4b7f      	ldr	r3, [pc, #508]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058f4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	695b      	ldr	r3, [r3, #20]
 80058fc:	497b      	ldr	r1, [pc, #492]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0320 	and.w	r3, r3, #32
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005910:	4b76      	ldr	r3, [pc, #472]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005916:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	699b      	ldr	r3, [r3, #24]
 800591e:	4973      	ldr	r1, [pc, #460]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005932:	4b6e      	ldr	r3, [pc, #440]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005938:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	69db      	ldr	r3, [r3, #28]
 8005940:	496a      	ldr	r1, [pc, #424]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005954:	4b65      	ldr	r3, [pc, #404]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800595a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	4962      	ldr	r1, [pc, #392]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005976:	4b5d      	ldr	r3, [pc, #372]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800597c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005984:	4959      	ldr	r1, [pc, #356]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005998:	4b54      	ldr	r3, [pc, #336]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800599e:	f023 0203 	bic.w	r2, r3, #3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059a6:	4951      	ldr	r1, [pc, #324]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80059ba:	4b4c      	ldr	r3, [pc, #304]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059c0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059c8:	4948      	ldr	r1, [pc, #288]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d015      	beq.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80059dc:	4b43      	ldr	r3, [pc, #268]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059e2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059ea:	4940      	ldr	r1, [pc, #256]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059fa:	d105      	bne.n	8005a08 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059fc:	4b3b      	ldr	r3, [pc, #236]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059fe:	68db      	ldr	r3, [r3, #12]
 8005a00:	4a3a      	ldr	r2, [pc, #232]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a02:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a06:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d015      	beq.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a14:	4b35      	ldr	r3, [pc, #212]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a1a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a22:	4932      	ldr	r1, [pc, #200]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a24:	4313      	orrs	r3, r2
 8005a26:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005a2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005a32:	d105      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a34:	4b2d      	ldr	r3, [pc, #180]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	4a2c      	ldr	r2, [pc, #176]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a3a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a3e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d015      	beq.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005a4c:	4b27      	ldr	r3, [pc, #156]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a52:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a5a:	4924      	ldr	r1, [pc, #144]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a66:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005a6a:	d105      	bne.n	8005a78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	4a1e      	ldr	r2, [pc, #120]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a72:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a76:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d015      	beq.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005a84:	4b19      	ldr	r3, [pc, #100]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a92:	4916      	ldr	r1, [pc, #88]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a94:	4313      	orrs	r3, r2
 8005a96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005aa2:	d105      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005aa4:	4b11      	ldr	r3, [pc, #68]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	4a10      	ldr	r2, [pc, #64]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005aae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d019      	beq.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005abc:	4b0b      	ldr	r3, [pc, #44]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ac2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aca:	4908      	ldr	r1, [pc, #32]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005acc:	4313      	orrs	r3, r2
 8005ace:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ad6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005ada:	d109      	bne.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005adc:	4b03      	ldr	r3, [pc, #12]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ade:	68db      	ldr	r3, [r3, #12]
 8005ae0:	4a02      	ldr	r2, [pc, #8]	@ (8005aec <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ae6:	60d3      	str	r3, [r2, #12]
 8005ae8:	e002      	b.n	8005af0 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005aea:	bf00      	nop
 8005aec:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d015      	beq.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005afc:	4b29      	ldr	r3, [pc, #164]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b02:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b0a:	4926      	ldr	r1, [pc, #152]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005b16:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005b1a:	d105      	bne.n	8005b28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b1c:	4b21      	ldr	r3, [pc, #132]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b1e:	68db      	ldr	r3, [r3, #12]
 8005b20:	4a20      	ldr	r2, [pc, #128]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b22:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b26:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d015      	beq.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005b34:	4b1b      	ldr	r3, [pc, #108]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3a:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b42:	4918      	ldr	r1, [pc, #96]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b44:	4313      	orrs	r3, r2
 8005b46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b52:	d105      	bne.n	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005b54:	4b13      	ldr	r3, [pc, #76]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	4a12      	ldr	r2, [pc, #72]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b5a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005b5e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d015      	beq.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b6e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b72:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b7a:	490a      	ldr	r1, [pc, #40]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005b86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005b8a:	d105      	bne.n	8005b98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b8c:	4b05      	ldr	r3, [pc, #20]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	4a04      	ldr	r2, [pc, #16]	@ (8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b92:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b96:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005b98:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3718      	adds	r7, #24
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	bf00      	nop
 8005ba4:	40021000 	.word	0x40021000

08005ba8 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d101      	bne.n	8005bba <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e027      	b.n	8005c0a <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	7a5b      	ldrb	r3, [r3, #9]
 8005bbe:	b2db      	uxtb	r3, r3
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d105      	bne.n	8005bd0 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f7fc faa6 	bl	800211c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	2202      	movs	r2, #2
 8005bd4:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f023 0108 	bic.w	r1, r3, #8
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	430a      	orrs	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f042 0204 	orr.w	r2, r2, #4
 8005bfa:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b082      	sub	sp, #8
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d101      	bne.n	8005c24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c20:	2301      	movs	r3, #1
 8005c22:	e049      	b.n	8005cb8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d106      	bne.n	8005c3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f000 f841 	bl	8005cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2202      	movs	r2, #2
 8005c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681a      	ldr	r2, [r3, #0]
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	3304      	adds	r3, #4
 8005c4e:	4619      	mov	r1, r3
 8005c50:	4610      	mov	r0, r2
 8005c52:	f000 fa2f 	bl	80060b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2201      	movs	r2, #1
 8005c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2201      	movs	r2, #1
 8005c6a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2201      	movs	r2, #1
 8005c72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2201      	movs	r2, #1
 8005c82:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2201      	movs	r2, #1
 8005c9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2201      	movs	r2, #1
 8005caa:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2201      	movs	r2, #1
 8005cb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005cb6:	2300      	movs	r3, #0
}
 8005cb8:	4618      	mov	r0, r3
 8005cba:	3708      	adds	r7, #8
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}

08005cc0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005cc8:	bf00      	nop
 8005cca:	370c      	adds	r7, #12
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd2:	4770      	bx	lr

08005cd4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b085      	sub	sp, #20
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d001      	beq.n	8005cec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	e054      	b.n	8005d96 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f042 0201 	orr.w	r2, r2, #1
 8005d02:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a26      	ldr	r2, [pc, #152]	@ (8005da4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d0a:	4293      	cmp	r3, r2
 8005d0c:	d022      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d16:	d01d      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a22      	ldr	r2, [pc, #136]	@ (8005da8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d1e:	4293      	cmp	r3, r2
 8005d20:	d018      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a21      	ldr	r2, [pc, #132]	@ (8005dac <HAL_TIM_Base_Start_IT+0xd8>)
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d013      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a1f      	ldr	r2, [pc, #124]	@ (8005db0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d00e      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1e      	ldr	r2, [pc, #120]	@ (8005db4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d009      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a1c      	ldr	r2, [pc, #112]	@ (8005db8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d004      	beq.n	8005d54 <HAL_TIM_Base_Start_IT+0x80>
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a1b      	ldr	r2, [pc, #108]	@ (8005dbc <HAL_TIM_Base_Start_IT+0xe8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d115      	bne.n	8005d80 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	689a      	ldr	r2, [r3, #8]
 8005d5a:	4b19      	ldr	r3, [pc, #100]	@ (8005dc0 <HAL_TIM_Base_Start_IT+0xec>)
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2b06      	cmp	r3, #6
 8005d64:	d015      	beq.n	8005d92 <HAL_TIM_Base_Start_IT+0xbe>
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d6c:	d011      	beq.n	8005d92 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	681a      	ldr	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f042 0201 	orr.w	r2, r2, #1
 8005d7c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d7e:	e008      	b.n	8005d92 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f042 0201 	orr.w	r2, r2, #1
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e000      	b.n	8005d94 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d92:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d94:	2300      	movs	r3, #0
}
 8005d96:	4618      	mov	r0, r3
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40012c00 	.word	0x40012c00
 8005da8:	40000400 	.word	0x40000400
 8005dac:	40000800 	.word	0x40000800
 8005db0:	40000c00 	.word	0x40000c00
 8005db4:	40013400 	.word	0x40013400
 8005db8:	40014000 	.word	0x40014000
 8005dbc:	40015000 	.word	0x40015000
 8005dc0:	00010007 	.word	0x00010007

08005dc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68db      	ldr	r3, [r3, #12]
 8005dd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	691b      	ldr	r3, [r3, #16]
 8005dda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	f003 0302 	and.w	r3, r3, #2
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d020      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d01b      	beq.n	8005e28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f06f 0202 	mvn.w	r2, #2
 8005df8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	699b      	ldr	r3, [r3, #24]
 8005e06:	f003 0303 	and.w	r3, r3, #3
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d003      	beq.n	8005e16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 f931 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005e14:	e005      	b.n	8005e22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f000 f923 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f934 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d020      	beq.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f003 0304 	and.w	r3, r3, #4
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01b      	beq.n	8005e74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	f06f 0204 	mvn.w	r2, #4
 8005e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d003      	beq.n	8005e62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 f90b 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005e60:	e005      	b.n	8005e6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f000 f8fd 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e68:	6878      	ldr	r0, [r7, #4]
 8005e6a:	f000 f90e 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d020      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	f003 0308 	and.w	r3, r3, #8
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d01b      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0208 	mvn.w	r2, #8
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2204      	movs	r2, #4
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	69db      	ldr	r3, [r3, #28]
 8005e9e:	f003 0303 	and.w	r3, r3, #3
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 f8e5 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8d7 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 f8e8 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	f003 0310 	and.w	r3, r3, #16
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d020      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	f003 0310 	and.w	r3, r3, #16
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d01b      	beq.n	8005f0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f06f 0210 	mvn.w	r2, #16
 8005edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2208      	movs	r2, #8
 8005ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	69db      	ldr	r3, [r3, #28]
 8005eea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d003      	beq.n	8005efa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 f8bf 	bl	8006076 <HAL_TIM_IC_CaptureCallback>
 8005ef8:	e005      	b.n	8005f06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 f8b1 	bl	8006062 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 f8c2 	bl	800608a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 0301 	and.w	r3, r3, #1
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00c      	beq.n	8005f30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f003 0301 	and.w	r3, r3, #1
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d007      	beq.n	8005f30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f06f 0201 	mvn.w	r2, #1
 8005f28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f7fb ff64 	bl	8001df8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f30:	68bb      	ldr	r3, [r7, #8]
 8005f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d104      	bne.n	8005f44 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d00c      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d007      	beq.n	8005f5e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8005f56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f58:	6878      	ldr	r0, [r7, #4]
 8005f5a:	f000 f969 	bl	8006230 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00c      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d007      	beq.n	8005f82 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005f7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 f961 	bl	8006244 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d00c      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d007      	beq.n	8005fa6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005f9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f87c 	bl	800609e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	f003 0320 	and.w	r3, r3, #32
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d00c      	beq.n	8005fca <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f003 0320 	and.w	r3, r3, #32
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d007      	beq.n	8005fca <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f06f 0220 	mvn.w	r2, #32
 8005fc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f929 	bl	800621c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005fca:	68bb      	ldr	r3, [r7, #8]
 8005fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00c      	beq.n	8005fee <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d007      	beq.n	8005fee <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8005fe6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005fe8:	6878      	ldr	r0, [r7, #4]
 8005fea:	f000 f935 	bl	8006258 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d00c      	beq.n	8006012 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d007      	beq.n	8006012 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 800600a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 f92d 	bl	800626c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00c      	beq.n	8006036 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006022:	2b00      	cmp	r3, #0
 8006024:	d007      	beq.n	8006036 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 800602e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	f000 f925 	bl	8006280 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d00c      	beq.n	800605a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006046:	2b00      	cmp	r3, #0
 8006048:	d007      	beq.n	800605a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006052:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f000 f91d 	bl	8006294 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800606a:	bf00      	nop
 800606c:	370c      	adds	r7, #12
 800606e:	46bd      	mov	sp, r7
 8006070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006074:	4770      	bx	lr

08006076 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006076:	b480      	push	{r7}
 8006078:	b083      	sub	sp, #12
 800607a:	af00      	add	r7, sp, #0
 800607c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006088:	4770      	bx	lr

0800608a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800608a:	b480      	push	{r7}
 800608c:	b083      	sub	sp, #12
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006092:	bf00      	nop
 8006094:	370c      	adds	r7, #12
 8006096:	46bd      	mov	sp, r7
 8006098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609c:	4770      	bx	lr

0800609e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800609e:	b480      	push	{r7}
 80060a0:	b083      	sub	sp, #12
 80060a2:	af00      	add	r7, sp, #0
 80060a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060a6:	bf00      	nop
 80060a8:	370c      	adds	r7, #12
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a4c      	ldr	r2, [pc, #304]	@ (80061f8 <TIM_Base_SetConfig+0x144>)
 80060c8:	4293      	cmp	r3, r2
 80060ca:	d017      	beq.n	80060fc <TIM_Base_SetConfig+0x48>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060d2:	d013      	beq.n	80060fc <TIM_Base_SetConfig+0x48>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	4a49      	ldr	r2, [pc, #292]	@ (80061fc <TIM_Base_SetConfig+0x148>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d00f      	beq.n	80060fc <TIM_Base_SetConfig+0x48>
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	4a48      	ldr	r2, [pc, #288]	@ (8006200 <TIM_Base_SetConfig+0x14c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d00b      	beq.n	80060fc <TIM_Base_SetConfig+0x48>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	4a47      	ldr	r2, [pc, #284]	@ (8006204 <TIM_Base_SetConfig+0x150>)
 80060e8:	4293      	cmp	r3, r2
 80060ea:	d007      	beq.n	80060fc <TIM_Base_SetConfig+0x48>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	4a46      	ldr	r2, [pc, #280]	@ (8006208 <TIM_Base_SetConfig+0x154>)
 80060f0:	4293      	cmp	r3, r2
 80060f2:	d003      	beq.n	80060fc <TIM_Base_SetConfig+0x48>
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	4a45      	ldr	r2, [pc, #276]	@ (800620c <TIM_Base_SetConfig+0x158>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d108      	bne.n	800610e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006102:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	4313      	orrs	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4a39      	ldr	r2, [pc, #228]	@ (80061f8 <TIM_Base_SetConfig+0x144>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d023      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800611c:	d01f      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	4a36      	ldr	r2, [pc, #216]	@ (80061fc <TIM_Base_SetConfig+0x148>)
 8006122:	4293      	cmp	r3, r2
 8006124:	d01b      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	4a35      	ldr	r2, [pc, #212]	@ (8006200 <TIM_Base_SetConfig+0x14c>)
 800612a:	4293      	cmp	r3, r2
 800612c:	d017      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a34      	ldr	r2, [pc, #208]	@ (8006204 <TIM_Base_SetConfig+0x150>)
 8006132:	4293      	cmp	r3, r2
 8006134:	d013      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	4a33      	ldr	r2, [pc, #204]	@ (8006208 <TIM_Base_SetConfig+0x154>)
 800613a:	4293      	cmp	r3, r2
 800613c:	d00f      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	4a33      	ldr	r2, [pc, #204]	@ (8006210 <TIM_Base_SetConfig+0x15c>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d00b      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	4a32      	ldr	r2, [pc, #200]	@ (8006214 <TIM_Base_SetConfig+0x160>)
 800614a:	4293      	cmp	r3, r2
 800614c:	d007      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	4a31      	ldr	r2, [pc, #196]	@ (8006218 <TIM_Base_SetConfig+0x164>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d003      	beq.n	800615e <TIM_Base_SetConfig+0xaa>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	4a2c      	ldr	r2, [pc, #176]	@ (800620c <TIM_Base_SetConfig+0x158>)
 800615a:	4293      	cmp	r3, r2
 800615c:	d108      	bne.n	8006170 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006164:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	4313      	orrs	r3, r2
 800616e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	4313      	orrs	r3, r2
 800617c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	68fa      	ldr	r2, [r7, #12]
 8006182:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	4a18      	ldr	r2, [pc, #96]	@ (80061f8 <TIM_Base_SetConfig+0x144>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d013      	beq.n	80061c4 <TIM_Base_SetConfig+0x110>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	4a1a      	ldr	r2, [pc, #104]	@ (8006208 <TIM_Base_SetConfig+0x154>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d00f      	beq.n	80061c4 <TIM_Base_SetConfig+0x110>
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a1a      	ldr	r2, [pc, #104]	@ (8006210 <TIM_Base_SetConfig+0x15c>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d00b      	beq.n	80061c4 <TIM_Base_SetConfig+0x110>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	4a19      	ldr	r2, [pc, #100]	@ (8006214 <TIM_Base_SetConfig+0x160>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d007      	beq.n	80061c4 <TIM_Base_SetConfig+0x110>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a18      	ldr	r2, [pc, #96]	@ (8006218 <TIM_Base_SetConfig+0x164>)
 80061b8:	4293      	cmp	r3, r2
 80061ba:	d003      	beq.n	80061c4 <TIM_Base_SetConfig+0x110>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	4a13      	ldr	r2, [pc, #76]	@ (800620c <TIM_Base_SetConfig+0x158>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d103      	bne.n	80061cc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d105      	bne.n	80061ea <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	691b      	ldr	r3, [r3, #16]
 80061e2:	f023 0201 	bic.w	r2, r3, #1
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	611a      	str	r2, [r3, #16]
  }
}
 80061ea:	bf00      	nop
 80061ec:	3714      	adds	r7, #20
 80061ee:	46bd      	mov	sp, r7
 80061f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f4:	4770      	bx	lr
 80061f6:	bf00      	nop
 80061f8:	40012c00 	.word	0x40012c00
 80061fc:	40000400 	.word	0x40000400
 8006200:	40000800 	.word	0x40000800
 8006204:	40000c00 	.word	0x40000c00
 8006208:	40013400 	.word	0x40013400
 800620c:	40015000 	.word	0x40015000
 8006210:	40014000 	.word	0x40014000
 8006214:	40014400 	.word	0x40014400
 8006218:	40014800 	.word	0x40014800

0800621c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006274:	bf00      	nop
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr

08006280 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006288:	bf00      	nop
 800628a:	370c      	adds	r7, #12
 800628c:	46bd      	mov	sp, r7
 800628e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006292:	4770      	bx	lr

08006294 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006294:	b480      	push	{r7}
 8006296:	b083      	sub	sp, #12
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800629c:	bf00      	nop
 800629e:	370c      	adds	r7, #12
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d101      	bne.n	80062ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	e042      	b.n	8006340 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f7fc f967 	bl	80025a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2224      	movs	r2, #36	@ 0x24
 80062d6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d002      	beq.n	80062f8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062f2:	6878      	ldr	r0, [r7, #4]
 80062f4:	f001 f806 	bl	8007304 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 fd07 	bl	8006d0c <UART_SetConfig>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b01      	cmp	r3, #1
 8006302:	d101      	bne.n	8006308 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e01b      	b.n	8006340 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	685a      	ldr	r2, [r3, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689a      	ldr	r2, [r3, #8]
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006326:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	f042 0201 	orr.w	r2, r2, #1
 8006336:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006338:	6878      	ldr	r0, [r7, #4]
 800633a:	f001 f885 	bl	8007448 <UART_CheckIdleState>
 800633e:	4603      	mov	r3, r0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3708      	adds	r7, #8
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b08a      	sub	sp, #40	@ 0x28
 800634c:	af00      	add	r7, sp, #0
 800634e:	60f8      	str	r0, [r7, #12]
 8006350:	60b9      	str	r1, [r7, #8]
 8006352:	4613      	mov	r3, r2
 8006354:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800635c:	2b20      	cmp	r3, #32
 800635e:	d167      	bne.n	8006430 <HAL_UART_Transmit_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <HAL_UART_Transmit_DMA+0x24>
 8006366:	88fb      	ldrh	r3, [r7, #6]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d101      	bne.n	8006370 <HAL_UART_Transmit_DMA+0x28>
    {
      return HAL_ERROR;
 800636c:	2301      	movs	r3, #1
 800636e:	e060      	b.n	8006432 <HAL_UART_Transmit_DMA+0xea>
    }

    huart->pTxBuffPtr  = pData;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	68ba      	ldr	r2, [r7, #8]
 8006374:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	88fa      	ldrh	r2, [r7, #6]
 800637a:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	88fa      	ldrh	r2, [r7, #6]
 8006382:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2200      	movs	r2, #0
 800638a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2221      	movs	r2, #33	@ 0x21
 8006392:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    if (huart->hdmatx != NULL)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800639a:	2b00      	cmp	r3, #0
 800639c:	d028      	beq.n	80063f0 <HAL_UART_Transmit_DMA+0xa8>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063a2:	4a26      	ldr	r2, [pc, #152]	@ (800643c <HAL_UART_Transmit_DMA+0xf4>)
 80063a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063aa:	4a25      	ldr	r2, [pc, #148]	@ (8006440 <HAL_UART_Transmit_DMA+0xf8>)
 80063ac:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063b2:	4a24      	ldr	r2, [pc, #144]	@ (8006444 <HAL_UART_Transmit_DMA+0xfc>)
 80063b4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80063ba:	2200      	movs	r2, #0
 80063bc:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063c6:	4619      	mov	r1, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3328      	adds	r3, #40	@ 0x28
 80063ce:	461a      	mov	r2, r3
 80063d0:	88fb      	ldrh	r3, [r7, #6]
 80063d2:	f7fd fed5 	bl	8004180 <HAL_DMA_Start_IT>
 80063d6:	4603      	mov	r3, r0
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d009      	beq.n	80063f0 <HAL_UART_Transmit_DMA+0xa8>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2210      	movs	r2, #16
 80063e0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_ERROR;
 80063ec:	2301      	movs	r3, #1
 80063ee:	e020      	b.n	8006432 <HAL_UART_Transmit_DMA+0xea>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2240      	movs	r2, #64	@ 0x40
 80063f6:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	3308      	adds	r3, #8
 80063fe:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	e853 3f00 	ldrex	r3, [r3]
 8006406:	613b      	str	r3, [r7, #16]
   return(result);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800640e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	3308      	adds	r3, #8
 8006416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006418:	623a      	str	r2, [r7, #32]
 800641a:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800641c:	69f9      	ldr	r1, [r7, #28]
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	e841 2300 	strex	r3, r2, [r1]
 8006424:	61bb      	str	r3, [r7, #24]
   return(result);
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d1e5      	bne.n	80063f8 <HAL_UART_Transmit_DMA+0xb0>

    return HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	e000      	b.n	8006432 <HAL_UART_Transmit_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8006430:	2302      	movs	r3, #2
  }
}
 8006432:	4618      	mov	r0, r3
 8006434:	3728      	adds	r7, #40	@ 0x28
 8006436:	46bd      	mov	sp, r7
 8006438:	bd80      	pop	{r7, pc}
 800643a:	bf00      	nop
 800643c:	08007913 	.word	0x08007913
 8006440:	080079ad 	.word	0x080079ad
 8006444:	08007b33 	.word	0x08007b33

08006448 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b08a      	sub	sp, #40	@ 0x28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	4613      	mov	r3, r2
 8006454:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800645c:	2b20      	cmp	r3, #32
 800645e:	d137      	bne.n	80064d0 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d002      	beq.n	800646c <HAL_UART_Receive_DMA+0x24>
 8006466:	88fb      	ldrh	r3, [r7, #6]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d101      	bne.n	8006470 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e030      	b.n	80064d2 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2200      	movs	r2, #0
 8006474:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a18      	ldr	r2, [pc, #96]	@ (80064dc <HAL_UART_Receive_DMA+0x94>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d01f      	beq.n	80064c0 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800648a:	2b00      	cmp	r3, #0
 800648c:	d018      	beq.n	80064c0 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	e853 3f00 	ldrex	r3, [r3]
 800649a:	613b      	str	r3, [r7, #16]
   return(result);
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	461a      	mov	r2, r3
 80064aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ac:	623b      	str	r3, [r7, #32]
 80064ae:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064b0:	69f9      	ldr	r1, [r7, #28]
 80064b2:	6a3a      	ldr	r2, [r7, #32]
 80064b4:	e841 2300 	strex	r3, r2, [r1]
 80064b8:	61bb      	str	r3, [r7, #24]
   return(result);
 80064ba:	69bb      	ldr	r3, [r7, #24]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1e6      	bne.n	800648e <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80064c0:	88fb      	ldrh	r3, [r7, #6]
 80064c2:	461a      	mov	r2, r3
 80064c4:	68b9      	ldr	r1, [r7, #8]
 80064c6:	68f8      	ldr	r0, [r7, #12]
 80064c8:	f001 f8d6 	bl	8007678 <UART_Start_Receive_DMA>
 80064cc:	4603      	mov	r3, r0
 80064ce:	e000      	b.n	80064d2 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80064d0:	2302      	movs	r3, #2
  }
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	3728      	adds	r7, #40	@ 0x28
 80064d6:	46bd      	mov	sp, r7
 80064d8:	bd80      	pop	{r7, pc}
 80064da:	bf00      	nop
 80064dc:	40008000 	.word	0x40008000

080064e0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b090      	sub	sp, #64	@ 0x40
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80064f6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006502:	2b80      	cmp	r3, #128	@ 0x80
 8006504:	d139      	bne.n	800657a <HAL_UART_DMAStop+0x9a>
 8006506:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006508:	2b21      	cmp	r3, #33	@ 0x21
 800650a:	d136      	bne.n	800657a <HAL_UART_DMAStop+0x9a>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	3308      	adds	r3, #8
 8006512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	e853 3f00 	ldrex	r3, [r3]
 800651a:	61fb      	str	r3, [r7, #28]
   return(result);
 800651c:	69fb      	ldr	r3, [r7, #28]
 800651e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006522:	637b      	str	r3, [r7, #52]	@ 0x34
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	3308      	adds	r3, #8
 800652a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800652c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800652e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006530:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006532:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006534:	e841 2300 	strex	r3, r2, [r1]
 8006538:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800653a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1e5      	bne.n	800650c <HAL_UART_DMAStop+0x2c>

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006544:	2b00      	cmp	r3, #0
 8006546:	d015      	beq.n	8006574 <HAL_UART_DMAStop+0x94>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800654c:	4618      	mov	r0, r3
 800654e:	f7fd fe92 	bl	8004276 <HAL_DMA_Abort>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d00d      	beq.n	8006574 <HAL_UART_DMAStop+0x94>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800655c:	4618      	mov	r0, r3
 800655e:	f7fd fff9 	bl	8004554 <HAL_DMA_GetError>
 8006562:	4603      	mov	r3, r0
 8006564:	2b20      	cmp	r3, #32
 8006566:	d105      	bne.n	8006574 <HAL_UART_DMAStop+0x94>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2210      	movs	r2, #16
 800656c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e047      	b.n	8006604 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndTxTransfer(huart);
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f001 f925 	bl	80077c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006584:	2b40      	cmp	r3, #64	@ 0x40
 8006586:	d13c      	bne.n	8006602 <HAL_UART_DMAStop+0x122>
 8006588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800658a:	2b22      	cmp	r3, #34	@ 0x22
 800658c:	d139      	bne.n	8006602 <HAL_UART_DMAStop+0x122>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	3308      	adds	r3, #8
 8006594:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	e853 3f00 	ldrex	r3, [r3]
 800659c:	60bb      	str	r3, [r7, #8]
   return(result);
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80065a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	3308      	adds	r3, #8
 80065ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065ae:	61ba      	str	r2, [r7, #24]
 80065b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065b2:	6979      	ldr	r1, [r7, #20]
 80065b4:	69ba      	ldr	r2, [r7, #24]
 80065b6:	e841 2300 	strex	r3, r2, [r1]
 80065ba:	613b      	str	r3, [r7, #16]
   return(result);
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d1e5      	bne.n	800658e <HAL_UART_DMAStop+0xae>

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d017      	beq.n	80065fc <HAL_UART_DMAStop+0x11c>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fd fe4f 	bl	8004276 <HAL_DMA_Abort>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d00e      	beq.n	80065fc <HAL_UART_DMAStop+0x11c>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80065e4:	4618      	mov	r0, r3
 80065e6:	f7fd ffb5 	bl	8004554 <HAL_DMA_GetError>
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b20      	cmp	r3, #32
 80065ee:	d105      	bne.n	80065fc <HAL_UART_DMAStop+0x11c>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2210      	movs	r2, #16
 80065f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e003      	b.n	8006604 <HAL_UART_DMAStop+0x124>
        }
      }
    }

    UART_EndRxTransfer(huart);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 f922 	bl	8007846 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8006602:	2300      	movs	r3, #0
}
 8006604:	4618      	mov	r0, r3
 8006606:	3740      	adds	r7, #64	@ 0x40
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}

0800660c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800660c:	b580      	push	{r7, lr}
 800660e:	b0ba      	sub	sp, #232	@ 0xe8
 8006610:	af00      	add	r7, sp, #0
 8006612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	69db      	ldr	r3, [r3, #28]
 800661a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006632:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8006636:	f640 030f 	movw	r3, #2063	@ 0x80f
 800663a:	4013      	ands	r3, r2
 800663c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006640:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d11b      	bne.n	8006680 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d015      	beq.n	8006680 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b00      	cmp	r3, #0
 800665e:	d105      	bne.n	800666c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006660:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006664:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006668:	2b00      	cmp	r3, #0
 800666a:	d009      	beq.n	8006680 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006670:	2b00      	cmp	r3, #0
 8006672:	f000 8300 	beq.w	8006c76 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	4798      	blx	r3
      }
      return;
 800667e:	e2fa      	b.n	8006c76 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006680:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006684:	2b00      	cmp	r3, #0
 8006686:	f000 8123 	beq.w	80068d0 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800668a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800668e:	4b8d      	ldr	r3, [pc, #564]	@ (80068c4 <HAL_UART_IRQHandler+0x2b8>)
 8006690:	4013      	ands	r3, r2
 8006692:	2b00      	cmp	r3, #0
 8006694:	d106      	bne.n	80066a4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006696:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800669a:	4b8b      	ldr	r3, [pc, #556]	@ (80068c8 <HAL_UART_IRQHandler+0x2bc>)
 800669c:	4013      	ands	r3, r2
 800669e:	2b00      	cmp	r3, #0
 80066a0:	f000 8116 	beq.w	80068d0 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80066a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066a8:	f003 0301 	and.w	r3, r3, #1
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d011      	beq.n	80066d4 <HAL_UART_IRQHandler+0xc8>
 80066b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	2201      	movs	r2, #1
 80066c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f043 0201 	orr.w	r2, r3, #1
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066d8:	f003 0302 	and.w	r3, r3, #2
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d011      	beq.n	8006704 <HAL_UART_IRQHandler+0xf8>
 80066e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066e4:	f003 0301 	and.w	r3, r3, #1
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d00b      	beq.n	8006704 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	2202      	movs	r2, #2
 80066f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066fa:	f043 0204 	orr.w	r2, r3, #4
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006708:	f003 0304 	and.w	r3, r3, #4
 800670c:	2b00      	cmp	r3, #0
 800670e:	d011      	beq.n	8006734 <HAL_UART_IRQHandler+0x128>
 8006710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006714:	f003 0301 	and.w	r3, r3, #1
 8006718:	2b00      	cmp	r3, #0
 800671a:	d00b      	beq.n	8006734 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	2204      	movs	r2, #4
 8006722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800672a:	f043 0202 	orr.w	r2, r3, #2
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006738:	f003 0308 	and.w	r3, r3, #8
 800673c:	2b00      	cmp	r3, #0
 800673e:	d017      	beq.n	8006770 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006740:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006744:	f003 0320 	and.w	r3, r3, #32
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800674c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8006750:	4b5c      	ldr	r3, [pc, #368]	@ (80068c4 <HAL_UART_IRQHandler+0x2b8>)
 8006752:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00b      	beq.n	8006770 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2208      	movs	r2, #8
 800675e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006766:	f043 0208 	orr.w	r2, r3, #8
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006774:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006778:	2b00      	cmp	r3, #0
 800677a:	d012      	beq.n	80067a2 <HAL_UART_IRQHandler+0x196>
 800677c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006780:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006790:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006798:	f043 0220 	orr.w	r2, r3, #32
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	f000 8266 	beq.w	8006c7a <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80067ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d013      	beq.n	80067e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80067ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067be:	f003 0320 	and.w	r3, r3, #32
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d105      	bne.n	80067d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80067c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80067ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d007      	beq.n	80067e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067de:	6878      	ldr	r0, [r7, #4]
 80067e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067e8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067f6:	2b40      	cmp	r3, #64	@ 0x40
 80067f8:	d005      	beq.n	8006806 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067fe:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006802:	2b00      	cmp	r3, #0
 8006804:	d054      	beq.n	80068b0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f001 f81d 	bl	8007846 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	689b      	ldr	r3, [r3, #8]
 8006812:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006816:	2b40      	cmp	r3, #64	@ 0x40
 8006818:	d146      	bne.n	80068a8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	3308      	adds	r3, #8
 8006820:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006824:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006828:	e853 3f00 	ldrex	r3, [r3]
 800682c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006830:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006834:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006838:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	3308      	adds	r3, #8
 8006842:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006846:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800684a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006852:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006856:	e841 2300 	strex	r3, r2, [r1]
 800685a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800685e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1d9      	bne.n	800681a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800686c:	2b00      	cmp	r3, #0
 800686e:	d017      	beq.n	80068a0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006876:	4a15      	ldr	r2, [pc, #84]	@ (80068cc <HAL_UART_IRQHandler+0x2c0>)
 8006878:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006880:	4618      	mov	r0, r3
 8006882:	f7fd fd51 	bl	8004328 <HAL_DMA_Abort_IT>
 8006886:	4603      	mov	r3, r0
 8006888:	2b00      	cmp	r3, #0
 800688a:	d019      	beq.n	80068c0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006894:	687a      	ldr	r2, [r7, #4]
 8006896:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800689a:	4610      	mov	r0, r2
 800689c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800689e:	e00f      	b.n	80068c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fa1d 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068a6:	e00b      	b.n	80068c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	f000 fa19 	bl	8006ce0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068ae:	e007      	b.n	80068c0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f000 fa15 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80068be:	e1dc      	b.n	8006c7a <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068c0:	bf00      	nop
    return;
 80068c2:	e1da      	b.n	8006c7a <HAL_UART_IRQHandler+0x66e>
 80068c4:	10000001 	.word	0x10000001
 80068c8:	04000120 	.word	0x04000120
 80068cc:	08007bb3 	.word	0x08007bb3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80068d4:	2b01      	cmp	r3, #1
 80068d6:	f040 8170 	bne.w	8006bba <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80068de:	f003 0310 	and.w	r3, r3, #16
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	f000 8169 	beq.w	8006bba <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80068e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80068ec:	f003 0310 	and.w	r3, r3, #16
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 8162 	beq.w	8006bba <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	2210      	movs	r2, #16
 80068fc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006908:	2b40      	cmp	r3, #64	@ 0x40
 800690a:	f040 80d8 	bne.w	8006abe <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800691c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006920:	2b00      	cmp	r3, #0
 8006922:	f000 80af 	beq.w	8006a84 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800692c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006930:	429a      	cmp	r2, r3
 8006932:	f080 80a7 	bcs.w	8006a84 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800693c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f003 0320 	and.w	r3, r3, #32
 800694e:	2b00      	cmp	r3, #0
 8006950:	f040 8087 	bne.w	8006a62 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800695c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006960:	e853 3f00 	ldrex	r3, [r3]
 8006964:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006968:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800696c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006970:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	461a      	mov	r2, r3
 800697a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800697e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006982:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006986:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800698a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800698e:	e841 2300 	strex	r3, r2, [r1]
 8006992:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006996:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1da      	bne.n	8006954 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3308      	adds	r3, #8
 80069a4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069a6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80069a8:	e853 3f00 	ldrex	r3, [r3]
 80069ac:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80069ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3308      	adds	r3, #8
 80069be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80069c2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80069c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069c8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80069ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80069ce:	e841 2300 	strex	r3, r2, [r1]
 80069d2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80069d4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1e1      	bne.n	800699e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3308      	adds	r3, #8
 80069e0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069e2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80069e4:	e853 3f00 	ldrex	r3, [r3]
 80069e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80069ea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80069ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80069f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3308      	adds	r3, #8
 80069fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80069fe:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a00:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a02:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a04:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a0c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1e3      	bne.n	80069da <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a28:	e853 3f00 	ldrex	r3, [r3]
 8006a2c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006a30:	f023 0310 	bic.w	r3, r3, #16
 8006a34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006a42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006a44:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a46:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006a48:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006a4a:	e841 2300 	strex	r3, r2, [r1]
 8006a4e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006a50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d1e4      	bne.n	8006a20 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	f7fd fc0a 	bl	8004276 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2202      	movs	r2, #2
 8006a66:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006a74:	b29b      	uxth	r3, r3
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 f939 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006a82:	e0fc      	b.n	8006c7e <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006a8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006a8e:	429a      	cmp	r2, r3
 8006a90:	f040 80f5 	bne.w	8006c7e <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f003 0320 	and.w	r3, r3, #32
 8006aa2:	2b20      	cmp	r3, #32
 8006aa4:	f040 80eb 	bne.w	8006c7e <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2202      	movs	r2, #2
 8006aac:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	f000 f91c 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
      return;
 8006abc:	e0df      	b.n	8006c7e <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ad8:	b29b      	uxth	r3, r3
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80d1 	beq.w	8006c82 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006ae0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	f000 80cc 	beq.w	8006c82 <HAL_UART_IRQHandler+0x676>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006af2:	e853 3f00 	ldrex	r3, [r3]
 8006af6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006af8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006afa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006afe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b14:	e841 2300 	strex	r3, r2, [r1]
 8006b18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d1e4      	bne.n	8006aea <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3308      	adds	r3, #8
 8006b26:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b2a:	e853 3f00 	ldrex	r3, [r3]
 8006b2e:	623b      	str	r3, [r7, #32]
   return(result);
 8006b30:	6a3b      	ldr	r3, [r7, #32]
 8006b32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b36:	f023 0301 	bic.w	r3, r3, #1
 8006b3a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006b48:	633a      	str	r2, [r7, #48]	@ 0x30
 8006b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b50:	e841 2300 	strex	r3, r2, [r1]
 8006b54:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d1e1      	bne.n	8006b20 <HAL_UART_IRQHandler+0x514>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2220      	movs	r2, #32
 8006b60:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2200      	movs	r2, #0
 8006b68:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	e853 3f00 	ldrex	r3, [r3]
 8006b7c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f023 0310 	bic.w	r3, r3, #16
 8006b84:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b96:	69b9      	ldr	r1, [r7, #24]
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	e841 2300 	strex	r3, r2, [r1]
 8006b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d1e4      	bne.n	8006b70 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f89e 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006bb8:	e063      	b.n	8006c82 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006bba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006bbe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d00e      	beq.n	8006be4 <HAL_UART_IRQHandler+0x5d8>
 8006bc6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d008      	beq.n	8006be4 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006bda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f001 f825 	bl	8007c2c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006be2:	e051      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006be4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006be8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d014      	beq.n	8006c1a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006bf0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006bf4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d105      	bne.n	8006c08 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006bfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d008      	beq.n	8006c1a <HAL_UART_IRQHandler+0x60e>
  {
    if (huart->TxISR != NULL)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d03a      	beq.n	8006c86 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
    }
    return;
 8006c18:	e035      	b.n	8006c86 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d009      	beq.n	8006c3a <HAL_UART_IRQHandler+0x62e>
 8006c26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d003      	beq.n	8006c3a <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 ffcf 	bl	8007bd6 <UART_EndTransmit_IT>
    return;
 8006c38:	e026      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <HAL_UART_IRQHandler+0x64e>
 8006c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c4a:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d003      	beq.n	8006c5a <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006c52:	6878      	ldr	r0, [r7, #4]
 8006c54:	f000 fffe 	bl	8007c54 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c58:	e016      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c5e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d010      	beq.n	8006c88 <HAL_UART_IRQHandler+0x67c>
 8006c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	da0c      	bge.n	8006c88 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 ffe6 	bl	8007c40 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c74:	e008      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
      return;
 8006c76:	bf00      	nop
 8006c78:	e006      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
    return;
 8006c7a:	bf00      	nop
 8006c7c:	e004      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
      return;
 8006c7e:	bf00      	nop
 8006c80:	e002      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
      return;
 8006c82:	bf00      	nop
 8006c84:	e000      	b.n	8006c88 <HAL_UART_IRQHandler+0x67c>
    return;
 8006c86:	bf00      	nop
  }
}
 8006c88:	37e8      	adds	r7, #232	@ 0xe8
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}
 8006c8e:	bf00      	nop

08006c90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006c98:	bf00      	nop
 8006c9a:	370c      	adds	r7, #12
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca2:	4770      	bx	lr

08006ca4 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ca4:	b480      	push	{r7}
 8006ca6:	b083      	sub	sp, #12
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006cb8:	b480      	push	{r7}
 8006cba:	b083      	sub	sp, #12
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006cc0:	bf00      	nop
 8006cc2:	370c      	adds	r7, #12
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cca:	4770      	bx	lr

08006ccc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b083      	sub	sp, #12
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006cd4:	bf00      	nop
 8006cd6:	370c      	adds	r7, #12
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr

08006ce0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006ce0:	b480      	push	{r7}
 8006ce2:	b083      	sub	sp, #12
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006ce8:	bf00      	nop
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr

08006cf4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b083      	sub	sp, #12
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d00:	bf00      	nop
 8006d02:	370c      	adds	r7, #12
 8006d04:	46bd      	mov	sp, r7
 8006d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d0a:	4770      	bx	lr

08006d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d10:	b08c      	sub	sp, #48	@ 0x30
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	689a      	ldr	r2, [r3, #8]
 8006d20:	697b      	ldr	r3, [r7, #20]
 8006d22:	691b      	ldr	r3, [r3, #16]
 8006d24:	431a      	orrs	r2, r3
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	431a      	orrs	r2, r3
 8006d2c:	697b      	ldr	r3, [r7, #20]
 8006d2e:	69db      	ldr	r3, [r3, #28]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	681a      	ldr	r2, [r3, #0]
 8006d3a:	4baa      	ldr	r3, [pc, #680]	@ (8006fe4 <UART_SetConfig+0x2d8>)
 8006d3c:	4013      	ands	r3, r2
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	6812      	ldr	r2, [r2, #0]
 8006d42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d44:	430b      	orrs	r3, r1
 8006d46:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d48:	697b      	ldr	r3, [r7, #20]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d52:	697b      	ldr	r3, [r7, #20]
 8006d54:	68da      	ldr	r2, [r3, #12]
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	430a      	orrs	r2, r1
 8006d5c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a9f      	ldr	r2, [pc, #636]	@ (8006fe8 <UART_SetConfig+0x2dc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d004      	beq.n	8006d78 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d74:	4313      	orrs	r3, r2
 8006d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006d82:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	6812      	ldr	r2, [r2, #0]
 8006d8a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d8c:	430b      	orrs	r3, r1
 8006d8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d96:	f023 010f 	bic.w	r1, r3, #15
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	430a      	orrs	r2, r1
 8006da4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a90      	ldr	r2, [pc, #576]	@ (8006fec <UART_SetConfig+0x2e0>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d125      	bne.n	8006dfc <UART_SetConfig+0xf0>
 8006db0:	4b8f      	ldr	r3, [pc, #572]	@ (8006ff0 <UART_SetConfig+0x2e4>)
 8006db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006db6:	f003 0303 	and.w	r3, r3, #3
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d81a      	bhi.n	8006df4 <UART_SetConfig+0xe8>
 8006dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <UART_SetConfig+0xb8>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006dd5 	.word	0x08006dd5
 8006dc8:	08006de5 	.word	0x08006de5
 8006dcc:	08006ddd 	.word	0x08006ddd
 8006dd0:	08006ded 	.word	0x08006ded
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dda:	e116      	b.n	800700a <UART_SetConfig+0x2fe>
 8006ddc:	2302      	movs	r3, #2
 8006dde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006de2:	e112      	b.n	800700a <UART_SetConfig+0x2fe>
 8006de4:	2304      	movs	r3, #4
 8006de6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dea:	e10e      	b.n	800700a <UART_SetConfig+0x2fe>
 8006dec:	2308      	movs	r3, #8
 8006dee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006df2:	e10a      	b.n	800700a <UART_SetConfig+0x2fe>
 8006df4:	2310      	movs	r3, #16
 8006df6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006dfa:	e106      	b.n	800700a <UART_SetConfig+0x2fe>
 8006dfc:	697b      	ldr	r3, [r7, #20]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	4a7c      	ldr	r2, [pc, #496]	@ (8006ff4 <UART_SetConfig+0x2e8>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d138      	bne.n	8006e78 <UART_SetConfig+0x16c>
 8006e06:	4b7a      	ldr	r3, [pc, #488]	@ (8006ff0 <UART_SetConfig+0x2e4>)
 8006e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e0c:	f003 030c 	and.w	r3, r3, #12
 8006e10:	2b0c      	cmp	r3, #12
 8006e12:	d82d      	bhi.n	8006e70 <UART_SetConfig+0x164>
 8006e14:	a201      	add	r2, pc, #4	@ (adr r2, 8006e1c <UART_SetConfig+0x110>)
 8006e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e1a:	bf00      	nop
 8006e1c:	08006e51 	.word	0x08006e51
 8006e20:	08006e71 	.word	0x08006e71
 8006e24:	08006e71 	.word	0x08006e71
 8006e28:	08006e71 	.word	0x08006e71
 8006e2c:	08006e61 	.word	0x08006e61
 8006e30:	08006e71 	.word	0x08006e71
 8006e34:	08006e71 	.word	0x08006e71
 8006e38:	08006e71 	.word	0x08006e71
 8006e3c:	08006e59 	.word	0x08006e59
 8006e40:	08006e71 	.word	0x08006e71
 8006e44:	08006e71 	.word	0x08006e71
 8006e48:	08006e71 	.word	0x08006e71
 8006e4c:	08006e69 	.word	0x08006e69
 8006e50:	2300      	movs	r3, #0
 8006e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e56:	e0d8      	b.n	800700a <UART_SetConfig+0x2fe>
 8006e58:	2302      	movs	r3, #2
 8006e5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e5e:	e0d4      	b.n	800700a <UART_SetConfig+0x2fe>
 8006e60:	2304      	movs	r3, #4
 8006e62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e66:	e0d0      	b.n	800700a <UART_SetConfig+0x2fe>
 8006e68:	2308      	movs	r3, #8
 8006e6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e6e:	e0cc      	b.n	800700a <UART_SetConfig+0x2fe>
 8006e70:	2310      	movs	r3, #16
 8006e72:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e76:	e0c8      	b.n	800700a <UART_SetConfig+0x2fe>
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	4a5e      	ldr	r2, [pc, #376]	@ (8006ff8 <UART_SetConfig+0x2ec>)
 8006e7e:	4293      	cmp	r3, r2
 8006e80:	d125      	bne.n	8006ece <UART_SetConfig+0x1c2>
 8006e82:	4b5b      	ldr	r3, [pc, #364]	@ (8006ff0 <UART_SetConfig+0x2e4>)
 8006e84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e88:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006e8c:	2b30      	cmp	r3, #48	@ 0x30
 8006e8e:	d016      	beq.n	8006ebe <UART_SetConfig+0x1b2>
 8006e90:	2b30      	cmp	r3, #48	@ 0x30
 8006e92:	d818      	bhi.n	8006ec6 <UART_SetConfig+0x1ba>
 8006e94:	2b20      	cmp	r3, #32
 8006e96:	d00a      	beq.n	8006eae <UART_SetConfig+0x1a2>
 8006e98:	2b20      	cmp	r3, #32
 8006e9a:	d814      	bhi.n	8006ec6 <UART_SetConfig+0x1ba>
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d002      	beq.n	8006ea6 <UART_SetConfig+0x19a>
 8006ea0:	2b10      	cmp	r3, #16
 8006ea2:	d008      	beq.n	8006eb6 <UART_SetConfig+0x1aa>
 8006ea4:	e00f      	b.n	8006ec6 <UART_SetConfig+0x1ba>
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eac:	e0ad      	b.n	800700a <UART_SetConfig+0x2fe>
 8006eae:	2302      	movs	r3, #2
 8006eb0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eb4:	e0a9      	b.n	800700a <UART_SetConfig+0x2fe>
 8006eb6:	2304      	movs	r3, #4
 8006eb8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ebc:	e0a5      	b.n	800700a <UART_SetConfig+0x2fe>
 8006ebe:	2308      	movs	r3, #8
 8006ec0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ec4:	e0a1      	b.n	800700a <UART_SetConfig+0x2fe>
 8006ec6:	2310      	movs	r3, #16
 8006ec8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ecc:	e09d      	b.n	800700a <UART_SetConfig+0x2fe>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	4a4a      	ldr	r2, [pc, #296]	@ (8006ffc <UART_SetConfig+0x2f0>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d125      	bne.n	8006f24 <UART_SetConfig+0x218>
 8006ed8:	4b45      	ldr	r3, [pc, #276]	@ (8006ff0 <UART_SetConfig+0x2e4>)
 8006eda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ede:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006ee2:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ee4:	d016      	beq.n	8006f14 <UART_SetConfig+0x208>
 8006ee6:	2bc0      	cmp	r3, #192	@ 0xc0
 8006ee8:	d818      	bhi.n	8006f1c <UART_SetConfig+0x210>
 8006eea:	2b80      	cmp	r3, #128	@ 0x80
 8006eec:	d00a      	beq.n	8006f04 <UART_SetConfig+0x1f8>
 8006eee:	2b80      	cmp	r3, #128	@ 0x80
 8006ef0:	d814      	bhi.n	8006f1c <UART_SetConfig+0x210>
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d002      	beq.n	8006efc <UART_SetConfig+0x1f0>
 8006ef6:	2b40      	cmp	r3, #64	@ 0x40
 8006ef8:	d008      	beq.n	8006f0c <UART_SetConfig+0x200>
 8006efa:	e00f      	b.n	8006f1c <UART_SetConfig+0x210>
 8006efc:	2300      	movs	r3, #0
 8006efe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f02:	e082      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f04:	2302      	movs	r3, #2
 8006f06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f0a:	e07e      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f0c:	2304      	movs	r3, #4
 8006f0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f12:	e07a      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f14:	2308      	movs	r3, #8
 8006f16:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f1a:	e076      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f1c:	2310      	movs	r3, #16
 8006f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f22:	e072      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a35      	ldr	r2, [pc, #212]	@ (8007000 <UART_SetConfig+0x2f4>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d12a      	bne.n	8006f84 <UART_SetConfig+0x278>
 8006f2e:	4b30      	ldr	r3, [pc, #192]	@ (8006ff0 <UART_SetConfig+0x2e4>)
 8006f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f34:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f38:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f3c:	d01a      	beq.n	8006f74 <UART_SetConfig+0x268>
 8006f3e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f42:	d81b      	bhi.n	8006f7c <UART_SetConfig+0x270>
 8006f44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f48:	d00c      	beq.n	8006f64 <UART_SetConfig+0x258>
 8006f4a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f4e:	d815      	bhi.n	8006f7c <UART_SetConfig+0x270>
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <UART_SetConfig+0x250>
 8006f54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f58:	d008      	beq.n	8006f6c <UART_SetConfig+0x260>
 8006f5a:	e00f      	b.n	8006f7c <UART_SetConfig+0x270>
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f62:	e052      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f64:	2302      	movs	r3, #2
 8006f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f6a:	e04e      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f6c:	2304      	movs	r3, #4
 8006f6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f72:	e04a      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f74:	2308      	movs	r3, #8
 8006f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f7a:	e046      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f7c:	2310      	movs	r3, #16
 8006f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f82:	e042      	b.n	800700a <UART_SetConfig+0x2fe>
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a17      	ldr	r2, [pc, #92]	@ (8006fe8 <UART_SetConfig+0x2dc>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d13a      	bne.n	8007004 <UART_SetConfig+0x2f8>
 8006f8e:	4b18      	ldr	r3, [pc, #96]	@ (8006ff0 <UART_SetConfig+0x2e4>)
 8006f90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f94:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006f98:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006f9c:	d01a      	beq.n	8006fd4 <UART_SetConfig+0x2c8>
 8006f9e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fa2:	d81b      	bhi.n	8006fdc <UART_SetConfig+0x2d0>
 8006fa4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa8:	d00c      	beq.n	8006fc4 <UART_SetConfig+0x2b8>
 8006faa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fae:	d815      	bhi.n	8006fdc <UART_SetConfig+0x2d0>
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d003      	beq.n	8006fbc <UART_SetConfig+0x2b0>
 8006fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fb8:	d008      	beq.n	8006fcc <UART_SetConfig+0x2c0>
 8006fba:	e00f      	b.n	8006fdc <UART_SetConfig+0x2d0>
 8006fbc:	2300      	movs	r3, #0
 8006fbe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fc2:	e022      	b.n	800700a <UART_SetConfig+0x2fe>
 8006fc4:	2302      	movs	r3, #2
 8006fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fca:	e01e      	b.n	800700a <UART_SetConfig+0x2fe>
 8006fcc:	2304      	movs	r3, #4
 8006fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fd2:	e01a      	b.n	800700a <UART_SetConfig+0x2fe>
 8006fd4:	2308      	movs	r3, #8
 8006fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fda:	e016      	b.n	800700a <UART_SetConfig+0x2fe>
 8006fdc:	2310      	movs	r3, #16
 8006fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fe2:	e012      	b.n	800700a <UART_SetConfig+0x2fe>
 8006fe4:	cfff69f3 	.word	0xcfff69f3
 8006fe8:	40008000 	.word	0x40008000
 8006fec:	40013800 	.word	0x40013800
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	40004400 	.word	0x40004400
 8006ff8:	40004800 	.word	0x40004800
 8006ffc:	40004c00 	.word	0x40004c00
 8007000:	40005000 	.word	0x40005000
 8007004:	2310      	movs	r3, #16
 8007006:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4aae      	ldr	r2, [pc, #696]	@ (80072c8 <UART_SetConfig+0x5bc>)
 8007010:	4293      	cmp	r3, r2
 8007012:	f040 8097 	bne.w	8007144 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8007016:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800701a:	2b08      	cmp	r3, #8
 800701c:	d823      	bhi.n	8007066 <UART_SetConfig+0x35a>
 800701e:	a201      	add	r2, pc, #4	@ (adr r2, 8007024 <UART_SetConfig+0x318>)
 8007020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007024:	08007049 	.word	0x08007049
 8007028:	08007067 	.word	0x08007067
 800702c:	08007051 	.word	0x08007051
 8007030:	08007067 	.word	0x08007067
 8007034:	08007057 	.word	0x08007057
 8007038:	08007067 	.word	0x08007067
 800703c:	08007067 	.word	0x08007067
 8007040:	08007067 	.word	0x08007067
 8007044:	0800705f 	.word	0x0800705f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007048:	f7fe fabc 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 800704c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800704e:	e010      	b.n	8007072 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007050:	4b9e      	ldr	r3, [pc, #632]	@ (80072cc <UART_SetConfig+0x5c0>)
 8007052:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007054:	e00d      	b.n	8007072 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007056:	f7fe fa47 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800705a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800705c:	e009      	b.n	8007072 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800705e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007062:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007064:	e005      	b.n	8007072 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8007066:	2300      	movs	r3, #0
 8007068:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007070:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007072:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 8130 	beq.w	80072da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800707a:	697b      	ldr	r3, [r7, #20]
 800707c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800707e:	4a94      	ldr	r2, [pc, #592]	@ (80072d0 <UART_SetConfig+0x5c4>)
 8007080:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007084:	461a      	mov	r2, r3
 8007086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007088:	fbb3 f3f2 	udiv	r3, r3, r2
 800708c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800708e:	697b      	ldr	r3, [r7, #20]
 8007090:	685a      	ldr	r2, [r3, #4]
 8007092:	4613      	mov	r3, r2
 8007094:	005b      	lsls	r3, r3, #1
 8007096:	4413      	add	r3, r2
 8007098:	69ba      	ldr	r2, [r7, #24]
 800709a:	429a      	cmp	r2, r3
 800709c:	d305      	bcc.n	80070aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800709e:	697b      	ldr	r3, [r7, #20]
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070a4:	69ba      	ldr	r2, [r7, #24]
 80070a6:	429a      	cmp	r2, r3
 80070a8:	d903      	bls.n	80070b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070b0:	e113      	b.n	80072da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b4:	2200      	movs	r2, #0
 80070b6:	60bb      	str	r3, [r7, #8]
 80070b8:	60fa      	str	r2, [r7, #12]
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070be:	4a84      	ldr	r2, [pc, #528]	@ (80072d0 <UART_SetConfig+0x5c4>)
 80070c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2200      	movs	r2, #0
 80070c8:	603b      	str	r3, [r7, #0]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80070d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80070d4:	f7f9 fd2a 	bl	8000b2c <__aeabi_uldivmod>
 80070d8:	4602      	mov	r2, r0
 80070da:	460b      	mov	r3, r1
 80070dc:	4610      	mov	r0, r2
 80070de:	4619      	mov	r1, r3
 80070e0:	f04f 0200 	mov.w	r2, #0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	020b      	lsls	r3, r1, #8
 80070ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80070ee:	0202      	lsls	r2, r0, #8
 80070f0:	6979      	ldr	r1, [r7, #20]
 80070f2:	6849      	ldr	r1, [r1, #4]
 80070f4:	0849      	lsrs	r1, r1, #1
 80070f6:	2000      	movs	r0, #0
 80070f8:	460c      	mov	r4, r1
 80070fa:	4605      	mov	r5, r0
 80070fc:	eb12 0804 	adds.w	r8, r2, r4
 8007100:	eb43 0905 	adc.w	r9, r3, r5
 8007104:	697b      	ldr	r3, [r7, #20]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	469a      	mov	sl, r3
 800710c:	4693      	mov	fp, r2
 800710e:	4652      	mov	r2, sl
 8007110:	465b      	mov	r3, fp
 8007112:	4640      	mov	r0, r8
 8007114:	4649      	mov	r1, r9
 8007116:	f7f9 fd09 	bl	8000b2c <__aeabi_uldivmod>
 800711a:	4602      	mov	r2, r0
 800711c:	460b      	mov	r3, r1
 800711e:	4613      	mov	r3, r2
 8007120:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007122:	6a3b      	ldr	r3, [r7, #32]
 8007124:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007128:	d308      	bcc.n	800713c <UART_SetConfig+0x430>
 800712a:	6a3b      	ldr	r3, [r7, #32]
 800712c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007130:	d204      	bcs.n	800713c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	6a3a      	ldr	r2, [r7, #32]
 8007138:	60da      	str	r2, [r3, #12]
 800713a:	e0ce      	b.n	80072da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800713c:	2301      	movs	r3, #1
 800713e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007142:	e0ca      	b.n	80072da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	69db      	ldr	r3, [r3, #28]
 8007148:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800714c:	d166      	bne.n	800721c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800714e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007152:	2b08      	cmp	r3, #8
 8007154:	d827      	bhi.n	80071a6 <UART_SetConfig+0x49a>
 8007156:	a201      	add	r2, pc, #4	@ (adr r2, 800715c <UART_SetConfig+0x450>)
 8007158:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800715c:	08007181 	.word	0x08007181
 8007160:	08007189 	.word	0x08007189
 8007164:	08007191 	.word	0x08007191
 8007168:	080071a7 	.word	0x080071a7
 800716c:	08007197 	.word	0x08007197
 8007170:	080071a7 	.word	0x080071a7
 8007174:	080071a7 	.word	0x080071a7
 8007178:	080071a7 	.word	0x080071a7
 800717c:	0800719f 	.word	0x0800719f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007180:	f7fe fa20 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8007184:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007186:	e014      	b.n	80071b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007188:	f7fe fa32 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 800718c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800718e:	e010      	b.n	80071b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007190:	4b4e      	ldr	r3, [pc, #312]	@ (80072cc <UART_SetConfig+0x5c0>)
 8007192:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007194:	e00d      	b.n	80071b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007196:	f7fe f9a7 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800719a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800719c:	e009      	b.n	80071b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800719e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071a2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071a4:	e005      	b.n	80071b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071a6:	2300      	movs	r3, #0
 80071a8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071aa:	2301      	movs	r3, #1
 80071ac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	f000 8090 	beq.w	80072da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071be:	4a44      	ldr	r2, [pc, #272]	@ (80072d0 <UART_SetConfig+0x5c4>)
 80071c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071c4:	461a      	mov	r2, r3
 80071c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80071cc:	005a      	lsls	r2, r3, #1
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	685b      	ldr	r3, [r3, #4]
 80071d2:	085b      	lsrs	r3, r3, #1
 80071d4:	441a      	add	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	fbb2 f3f3 	udiv	r3, r2, r3
 80071de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80071e0:	6a3b      	ldr	r3, [r7, #32]
 80071e2:	2b0f      	cmp	r3, #15
 80071e4:	d916      	bls.n	8007214 <UART_SetConfig+0x508>
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80071ec:	d212      	bcs.n	8007214 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80071ee:	6a3b      	ldr	r3, [r7, #32]
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	f023 030f 	bic.w	r3, r3, #15
 80071f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80071f8:	6a3b      	ldr	r3, [r7, #32]
 80071fa:	085b      	lsrs	r3, r3, #1
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	f003 0307 	and.w	r3, r3, #7
 8007202:	b29a      	uxth	r2, r3
 8007204:	8bfb      	ldrh	r3, [r7, #30]
 8007206:	4313      	orrs	r3, r2
 8007208:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	8bfa      	ldrh	r2, [r7, #30]
 8007210:	60da      	str	r2, [r3, #12]
 8007212:	e062      	b.n	80072da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800721a:	e05e      	b.n	80072da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800721c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007220:	2b08      	cmp	r3, #8
 8007222:	d828      	bhi.n	8007276 <UART_SetConfig+0x56a>
 8007224:	a201      	add	r2, pc, #4	@ (adr r2, 800722c <UART_SetConfig+0x520>)
 8007226:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800722a:	bf00      	nop
 800722c:	08007251 	.word	0x08007251
 8007230:	08007259 	.word	0x08007259
 8007234:	08007261 	.word	0x08007261
 8007238:	08007277 	.word	0x08007277
 800723c:	08007267 	.word	0x08007267
 8007240:	08007277 	.word	0x08007277
 8007244:	08007277 	.word	0x08007277
 8007248:	08007277 	.word	0x08007277
 800724c:	0800726f 	.word	0x0800726f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007250:	f7fe f9b8 	bl	80055c4 <HAL_RCC_GetPCLK1Freq>
 8007254:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007256:	e014      	b.n	8007282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007258:	f7fe f9ca 	bl	80055f0 <HAL_RCC_GetPCLK2Freq>
 800725c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800725e:	e010      	b.n	8007282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007260:	4b1a      	ldr	r3, [pc, #104]	@ (80072cc <UART_SetConfig+0x5c0>)
 8007262:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007264:	e00d      	b.n	8007282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007266:	f7fe f93f 	bl	80054e8 <HAL_RCC_GetSysClockFreq>
 800726a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800726c:	e009      	b.n	8007282 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800726e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007272:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007274:	e005      	b.n	8007282 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8007276:	2300      	movs	r3, #0
 8007278:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800727a:	2301      	movs	r3, #1
 800727c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8007280:	bf00      	nop
    }

    if (pclk != 0U)
 8007282:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007284:	2b00      	cmp	r3, #0
 8007286:	d028      	beq.n	80072da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800728c:	4a10      	ldr	r2, [pc, #64]	@ (80072d0 <UART_SetConfig+0x5c4>)
 800728e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007292:	461a      	mov	r2, r3
 8007294:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007296:	fbb3 f2f2 	udiv	r2, r3, r2
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	685b      	ldr	r3, [r3, #4]
 800729e:	085b      	lsrs	r3, r3, #1
 80072a0:	441a      	add	r2, r3
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80072aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072ac:	6a3b      	ldr	r3, [r7, #32]
 80072ae:	2b0f      	cmp	r3, #15
 80072b0:	d910      	bls.n	80072d4 <UART_SetConfig+0x5c8>
 80072b2:	6a3b      	ldr	r3, [r7, #32]
 80072b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072b8:	d20c      	bcs.n	80072d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ba:	6a3b      	ldr	r3, [r7, #32]
 80072bc:	b29a      	uxth	r2, r3
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	60da      	str	r2, [r3, #12]
 80072c4:	e009      	b.n	80072da <UART_SetConfig+0x5ce>
 80072c6:	bf00      	nop
 80072c8:	40008000 	.word	0x40008000
 80072cc:	00f42400 	.word	0x00f42400
 80072d0:	08018c5c 	.word	0x08018c5c
      }
      else
      {
        ret = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2201      	movs	r2, #1
 80072de:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	2201      	movs	r2, #1
 80072e6:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80072ea:	697b      	ldr	r3, [r7, #20]
 80072ec:	2200      	movs	r2, #0
 80072ee:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80072f0:	697b      	ldr	r3, [r7, #20]
 80072f2:	2200      	movs	r2, #0
 80072f4:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80072f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80072fa:	4618      	mov	r0, r3
 80072fc:	3730      	adds	r7, #48	@ 0x30
 80072fe:	46bd      	mov	sp, r7
 8007300:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007304 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00a      	beq.n	800732e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	685b      	ldr	r3, [r3, #4]
 800731e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	430a      	orrs	r2, r1
 800732c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007332:	f003 0301 	and.w	r3, r3, #1
 8007336:	2b00      	cmp	r3, #0
 8007338:	d00a      	beq.n	8007350 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	685b      	ldr	r3, [r3, #4]
 8007340:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	430a      	orrs	r2, r1
 800734e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007354:	f003 0302 	and.w	r3, r3, #2
 8007358:	2b00      	cmp	r3, #0
 800735a:	d00a      	beq.n	8007372 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	685b      	ldr	r3, [r3, #4]
 8007362:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007376:	f003 0304 	and.w	r3, r3, #4
 800737a:	2b00      	cmp	r3, #0
 800737c:	d00a      	beq.n	8007394 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	685b      	ldr	r3, [r3, #4]
 8007384:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	430a      	orrs	r2, r1
 8007392:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007398:	f003 0310 	and.w	r3, r3, #16
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00a      	beq.n	80073b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	689b      	ldr	r3, [r3, #8]
 80073a6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	430a      	orrs	r2, r1
 80073b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ba:	f003 0320 	and.w	r3, r3, #32
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d00a      	beq.n	80073d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	689b      	ldr	r3, [r3, #8]
 80073c8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	430a      	orrs	r2, r1
 80073d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01a      	beq.n	800741a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	430a      	orrs	r2, r1
 80073f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80073fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007402:	d10a      	bne.n	800741a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	430a      	orrs	r2, r1
 8007418:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800741e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007422:	2b00      	cmp	r3, #0
 8007424:	d00a      	beq.n	800743c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	430a      	orrs	r2, r1
 800743a:	605a      	str	r2, [r3, #4]
  }
}
 800743c:	bf00      	nop
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b098      	sub	sp, #96	@ 0x60
 800744c:	af02      	add	r7, sp, #8
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	2200      	movs	r2, #0
 8007454:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007458:	f7fb f9b4 	bl	80027c4 <HAL_GetTick>
 800745c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	f003 0308 	and.w	r3, r3, #8
 8007468:	2b08      	cmp	r3, #8
 800746a:	d12f      	bne.n	80074cc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800746c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007474:	2200      	movs	r2, #0
 8007476:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800747a:	6878      	ldr	r0, [r7, #4]
 800747c:	f000 f88e 	bl	800759c <UART_WaitOnFlagUntilTimeout>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d022      	beq.n	80074cc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800748c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800748e:	e853 3f00 	ldrex	r3, [r3]
 8007492:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007496:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800749a:	653b      	str	r3, [r7, #80]	@ 0x50
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	461a      	mov	r2, r3
 80074a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80074a6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074ac:	e841 2300 	strex	r3, r2, [r1]
 80074b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d1e6      	bne.n	8007486 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	2220      	movs	r2, #32
 80074bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074c8:	2303      	movs	r3, #3
 80074ca:	e063      	b.n	8007594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	f003 0304 	and.w	r3, r3, #4
 80074d6:	2b04      	cmp	r3, #4
 80074d8:	d149      	bne.n	800756e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074da:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074e2:	2200      	movs	r2, #0
 80074e4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f000 f857 	bl	800759c <UART_WaitOnFlagUntilTimeout>
 80074ee:	4603      	mov	r3, r0
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d03c      	beq.n	800756e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	623b      	str	r3, [r7, #32]
   return(result);
 8007502:	6a3b      	ldr	r3, [r7, #32]
 8007504:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007508:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007512:	633b      	str	r3, [r7, #48]	@ 0x30
 8007514:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007518:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e6      	bne.n	80074f4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	60fb      	str	r3, [r7, #12]
   return(result);
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007546:	61fa      	str	r2, [r7, #28]
 8007548:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	69b9      	ldr	r1, [r7, #24]
 800754c:	69fa      	ldr	r2, [r7, #28]
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	617b      	str	r3, [r7, #20]
   return(result);
 8007554:	697b      	ldr	r3, [r7, #20]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e5      	bne.n	8007526 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2220      	movs	r2, #32
 800755e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e012      	b.n	8007594 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2220      	movs	r2, #32
 8007572:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2220      	movs	r2, #32
 800757a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2200      	movs	r2, #0
 8007588:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	2200      	movs	r2, #0
 800758e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007592:	2300      	movs	r3, #0
}
 8007594:	4618      	mov	r0, r3
 8007596:	3758      	adds	r7, #88	@ 0x58
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	603b      	str	r3, [r7, #0]
 80075a8:	4613      	mov	r3, r2
 80075aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075ac:	e04f      	b.n	800764e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075ae:	69bb      	ldr	r3, [r7, #24]
 80075b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075b4:	d04b      	beq.n	800764e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075b6:	f7fb f905 	bl	80027c4 <HAL_GetTick>
 80075ba:	4602      	mov	r2, r0
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	1ad3      	subs	r3, r2, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	429a      	cmp	r2, r3
 80075c4:	d302      	bcc.n	80075cc <UART_WaitOnFlagUntilTimeout+0x30>
 80075c6:	69bb      	ldr	r3, [r7, #24]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80075cc:	2303      	movs	r3, #3
 80075ce:	e04e      	b.n	800766e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	f003 0304 	and.w	r3, r3, #4
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d037      	beq.n	800764e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	2b80      	cmp	r3, #128	@ 0x80
 80075e2:	d034      	beq.n	800764e <UART_WaitOnFlagUntilTimeout+0xb2>
 80075e4:	68bb      	ldr	r3, [r7, #8]
 80075e6:	2b40      	cmp	r3, #64	@ 0x40
 80075e8:	d031      	beq.n	800764e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	69db      	ldr	r3, [r3, #28]
 80075f0:	f003 0308 	and.w	r3, r3, #8
 80075f4:	2b08      	cmp	r3, #8
 80075f6:	d110      	bne.n	800761a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2208      	movs	r2, #8
 80075fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007600:	68f8      	ldr	r0, [r7, #12]
 8007602:	f000 f920 	bl	8007846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2208      	movs	r2, #8
 800760a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8007616:	2301      	movs	r3, #1
 8007618:	e029      	b.n	800766e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007628:	d111      	bne.n	800764e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f906 	bl	8007846 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2220      	movs	r2, #32
 800763e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800764a:	2303      	movs	r3, #3
 800764c:	e00f      	b.n	800766e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69da      	ldr	r2, [r3, #28]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4013      	ands	r3, r2
 8007658:	68ba      	ldr	r2, [r7, #8]
 800765a:	429a      	cmp	r2, r3
 800765c:	bf0c      	ite	eq
 800765e:	2301      	moveq	r3, #1
 8007660:	2300      	movne	r3, #0
 8007662:	b2db      	uxtb	r3, r3
 8007664:	461a      	mov	r2, r3
 8007666:	79fb      	ldrb	r3, [r7, #7]
 8007668:	429a      	cmp	r2, r3
 800766a:	d0a0      	beq.n	80075ae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
	...

08007678 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b096      	sub	sp, #88	@ 0x58
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	60b9      	str	r1, [r7, #8]
 8007682:	4613      	mov	r3, r2
 8007684:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	68ba      	ldr	r2, [r7, #8]
 800768a:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	88fa      	ldrh	r2, [r7, #6]
 8007690:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2200      	movs	r2, #0
 8007698:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2222      	movs	r2, #34	@ 0x22
 80076a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d02d      	beq.n	800770a <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076b4:	4a40      	ldr	r2, [pc, #256]	@ (80077b8 <UART_Start_Receive_DMA+0x140>)
 80076b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076be:	4a3f      	ldr	r2, [pc, #252]	@ (80077bc <UART_Start_Receive_DMA+0x144>)
 80076c0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076c8:	4a3d      	ldr	r2, [pc, #244]	@ (80077c0 <UART_Start_Receive_DMA+0x148>)
 80076ca:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80076d2:	2200      	movs	r2, #0
 80076d4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3324      	adds	r3, #36	@ 0x24
 80076e2:	4619      	mov	r1, r3
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076e8:	461a      	mov	r2, r3
 80076ea:	88fb      	ldrh	r3, [r7, #6]
 80076ec:	f7fc fd48 	bl	8004180 <HAL_DMA_Start_IT>
 80076f0:	4603      	mov	r3, r0
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d009      	beq.n	800770a <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2210      	movs	r2, #16
 80076fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2220      	movs	r2, #32
 8007702:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8007706:	2301      	movs	r3, #1
 8007708:	e051      	b.n	80077ae <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	691b      	ldr	r3, [r3, #16]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d018      	beq.n	8007744 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007718:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800771a:	e853 3f00 	ldrex	r3, [r3]
 800771e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007722:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007726:	657b      	str	r3, [r7, #84]	@ 0x54
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007730:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007732:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007734:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007736:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007738:	e841 2300 	strex	r3, r2, [r1]
 800773c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800773e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007740:	2b00      	cmp	r3, #0
 8007742:	d1e6      	bne.n	8007712 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	3308      	adds	r3, #8
 800774a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800774c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774e:	e853 3f00 	ldrex	r3, [r3]
 8007752:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	653b      	str	r3, [r7, #80]	@ 0x50
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007764:	637a      	str	r2, [r7, #52]	@ 0x34
 8007766:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007768:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800776a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800776c:	e841 2300 	strex	r3, r2, [r1]
 8007770:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007772:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007774:	2b00      	cmp	r3, #0
 8007776:	d1e5      	bne.n	8007744 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	3308      	adds	r3, #8
 800777e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007780:	697b      	ldr	r3, [r7, #20]
 8007782:	e853 3f00 	ldrex	r3, [r3]
 8007786:	613b      	str	r3, [r7, #16]
   return(result);
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800778e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	3308      	adds	r3, #8
 8007796:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007798:	623a      	str	r2, [r7, #32]
 800779a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800779c:	69f9      	ldr	r1, [r7, #28]
 800779e:	6a3a      	ldr	r2, [r7, #32]
 80077a0:	e841 2300 	strex	r3, r2, [r1]
 80077a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80077a6:	69bb      	ldr	r3, [r7, #24]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d1e5      	bne.n	8007778 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 80077ac:	2300      	movs	r3, #0
}
 80077ae:	4618      	mov	r0, r3
 80077b0:	3758      	adds	r7, #88	@ 0x58
 80077b2:	46bd      	mov	sp, r7
 80077b4:	bd80      	pop	{r7, pc}
 80077b6:	bf00      	nop
 80077b8:	080079c9 	.word	0x080079c9
 80077bc:	08007af5 	.word	0x08007af5
 80077c0:	08007b33 	.word	0x08007b33

080077c4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077c4:	b480      	push	{r7}
 80077c6:	b08f      	sub	sp, #60	@ 0x3c
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	e853 3f00 	ldrex	r3, [r3]
 80077d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80077ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80077ec:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80077f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80077f2:	e841 2300 	strex	r3, r2, [r1]
 80077f6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80077f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d1e6      	bne.n	80077cc <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	3308      	adds	r3, #8
 8007804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	e853 3f00 	ldrex	r3, [r3]
 800780c:	60bb      	str	r3, [r7, #8]
   return(result);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8007814:	633b      	str	r3, [r7, #48]	@ 0x30
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	3308      	adds	r3, #8
 800781c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800781e:	61ba      	str	r2, [r7, #24]
 8007820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007822:	6979      	ldr	r1, [r7, #20]
 8007824:	69ba      	ldr	r2, [r7, #24]
 8007826:	e841 2300 	strex	r3, r2, [r1]
 800782a:	613b      	str	r3, [r7, #16]
   return(result);
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d1e5      	bne.n	80077fe <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2220      	movs	r2, #32
 8007836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800783a:	bf00      	nop
 800783c:	373c      	adds	r7, #60	@ 0x3c
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr

08007846 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007846:	b480      	push	{r7}
 8007848:	b095      	sub	sp, #84	@ 0x54
 800784a:	af00      	add	r7, sp, #0
 800784c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007856:	e853 3f00 	ldrex	r3, [r3]
 800785a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800785c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800785e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007862:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	461a      	mov	r2, r3
 800786a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800786c:	643b      	str	r3, [r7, #64]	@ 0x40
 800786e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007870:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007872:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007874:	e841 2300 	strex	r3, r2, [r1]
 8007878:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800787a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	d1e6      	bne.n	800784e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	3308      	adds	r3, #8
 8007886:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	e853 3f00 	ldrex	r3, [r3]
 800788e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007890:	69fb      	ldr	r3, [r7, #28]
 8007892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007896:	f023 0301 	bic.w	r3, r3, #1
 800789a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80078a4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80078a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80078aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078ac:	e841 2300 	strex	r3, r2, [r1]
 80078b0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80078b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1e3      	bne.n	8007880 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d118      	bne.n	80078f2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	e853 3f00 	ldrex	r3, [r3]
 80078cc:	60bb      	str	r3, [r7, #8]
   return(result);
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	f023 0310 	bic.w	r3, r3, #16
 80078d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	461a      	mov	r2, r3
 80078dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078de:	61bb      	str	r3, [r7, #24]
 80078e0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e2:	6979      	ldr	r1, [r7, #20]
 80078e4:	69ba      	ldr	r2, [r7, #24]
 80078e6:	e841 2300 	strex	r3, r2, [r1]
 80078ea:	613b      	str	r3, [r7, #16]
   return(result);
 80078ec:	693b      	ldr	r3, [r7, #16]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d1e6      	bne.n	80078c0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2220      	movs	r2, #32
 80078f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2200      	movs	r2, #0
 8007904:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007906:	bf00      	nop
 8007908:	3754      	adds	r7, #84	@ 0x54
 800790a:	46bd      	mov	sp, r7
 800790c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007910:	4770      	bx	lr

08007912 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b090      	sub	sp, #64	@ 0x40
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800791e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 0320 	and.w	r3, r3, #32
 800792a:	2b00      	cmp	r3, #0
 800792c:	d137      	bne.n	800799e <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0U;
 800792e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007930:	2200      	movs	r2, #0
 8007932:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007936:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	3308      	adds	r3, #8
 800793c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800793e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007940:	e853 3f00 	ldrex	r3, [r3]
 8007944:	623b      	str	r3, [r7, #32]
   return(result);
 8007946:	6a3b      	ldr	r3, [r7, #32]
 8007948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800794c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800794e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	3308      	adds	r3, #8
 8007954:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007956:	633a      	str	r2, [r7, #48]	@ 0x30
 8007958:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800795a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800795c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800795e:	e841 2300 	strex	r3, r2, [r1]
 8007962:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007964:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1e5      	bne.n	8007936 <UART_DMATransmitCplt+0x24>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800796a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	693b      	ldr	r3, [r7, #16]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	60fb      	str	r3, [r7, #12]
   return(result);
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800797e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007980:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007988:	61fb      	str	r3, [r7, #28]
 800798a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	69b9      	ldr	r1, [r7, #24]
 800798e:	69fa      	ldr	r2, [r7, #28]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	617b      	str	r3, [r7, #20]
   return(result);
 8007996:	697b      	ldr	r3, [r7, #20]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_DMATransmitCplt+0x58>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800799c:	e002      	b.n	80079a4 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800799e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80079a0:	f7ff f976 	bl	8006c90 <HAL_UART_TxCpltCallback>
}
 80079a4:	bf00      	nop
 80079a6:	3740      	adds	r7, #64	@ 0x40
 80079a8:	46bd      	mov	sp, r7
 80079aa:	bd80      	pop	{r7, pc}

080079ac <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b084      	sub	sp, #16
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079b8:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80079ba:	68f8      	ldr	r0, [r7, #12]
 80079bc:	f7ff f972 	bl	8006ca4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079c0:	bf00      	nop
 80079c2:	3710      	adds	r7, #16
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b09c      	sub	sp, #112	@ 0x70
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079d4:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	f003 0320 	and.w	r3, r3, #32
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d171      	bne.n	8007ac8 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 80079e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079e6:	2200      	movs	r2, #0
 80079e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80079ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80079f4:	e853 3f00 	ldrex	r3, [r3]
 80079f8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80079fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80079fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	461a      	mov	r2, r3
 8007a08:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a0a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a0c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a12:	e841 2300 	strex	r3, r2, [r1]
 8007a16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d1e6      	bne.n	80079ec <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3308      	adds	r3, #8
 8007a24:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a28:	e853 3f00 	ldrex	r3, [r3]
 8007a2c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a30:	f023 0301 	bic.w	r3, r3, #1
 8007a34:	667b      	str	r3, [r7, #100]	@ 0x64
 8007a36:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	3308      	adds	r3, #8
 8007a3c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a3e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007a40:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a42:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007a46:	e841 2300 	strex	r3, r2, [r1]
 8007a4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007a4c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d1e5      	bne.n	8007a1e <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a52:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	3308      	adds	r3, #8
 8007a58:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a5c:	e853 3f00 	ldrex	r3, [r3]
 8007a60:	623b      	str	r3, [r7, #32]
   return(result);
 8007a62:	6a3b      	ldr	r3, [r7, #32]
 8007a64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a68:	663b      	str	r3, [r7, #96]	@ 0x60
 8007a6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	3308      	adds	r3, #8
 8007a70:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007a72:	633a      	str	r2, [r7, #48]	@ 0x30
 8007a74:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007a78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007a80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e5      	bne.n	8007a52 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007a86:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a88:	2220      	movs	r2, #32
 8007a8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a90:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007a92:	2b01      	cmp	r3, #1
 8007a94:	d118      	bne.n	8007ac8 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	e853 3f00 	ldrex	r3, [r3]
 8007aa2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f023 0310 	bic.w	r3, r3, #16
 8007aaa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007aac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	461a      	mov	r2, r3
 8007ab2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007ab4:	61fb      	str	r3, [r7, #28]
 8007ab6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab8:	69b9      	ldr	r1, [r7, #24]
 8007aba:	69fa      	ldr	r2, [r7, #28]
 8007abc:	e841 2300 	strex	r3, r2, [r1]
 8007ac0:	617b      	str	r3, [r7, #20]
   return(result);
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1e6      	bne.n	8007a96 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ac8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007aca:	2200      	movs	r2, #0
 8007acc:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ad0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d107      	bne.n	8007ae6 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ad6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ad8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007adc:	4619      	mov	r1, r3
 8007ade:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ae0:	f7ff f908 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ae4:	e002      	b.n	8007aec <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007ae6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007ae8:	f7ff f8e6 	bl	8006cb8 <HAL_UART_RxCpltCallback>
}
 8007aec:	bf00      	nop
 8007aee:	3770      	adds	r7, #112	@ 0x70
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b084      	sub	sp, #16
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b00:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	2201      	movs	r2, #1
 8007b06:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	d109      	bne.n	8007b24 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007b16:	085b      	lsrs	r3, r3, #1
 8007b18:	b29b      	uxth	r3, r3
 8007b1a:	4619      	mov	r1, r3
 8007b1c:	68f8      	ldr	r0, [r7, #12]
 8007b1e:	f7ff f8e9 	bl	8006cf4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007b22:	e002      	b.n	8007b2a <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8007b24:	68f8      	ldr	r0, [r7, #12]
 8007b26:	f7ff f8d1 	bl	8006ccc <HAL_UART_RxHalfCpltCallback>
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}

08007b32 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b086      	sub	sp, #24
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b3e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007b46:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8007b48:	697b      	ldr	r3, [r7, #20]
 8007b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007b4e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8007b50:	697b      	ldr	r3, [r7, #20]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b5a:	2b80      	cmp	r3, #128	@ 0x80
 8007b5c:	d109      	bne.n	8007b72 <UART_DMAError+0x40>
 8007b5e:	693b      	ldr	r3, [r7, #16]
 8007b60:	2b21      	cmp	r3, #33	@ 0x21
 8007b62:	d106      	bne.n	8007b72 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8007b64:	697b      	ldr	r3, [r7, #20]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8007b6c:	6978      	ldr	r0, [r7, #20]
 8007b6e:	f7ff fe29 	bl	80077c4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8007b72:	697b      	ldr	r3, [r7, #20]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b7c:	2b40      	cmp	r3, #64	@ 0x40
 8007b7e:	d109      	bne.n	8007b94 <UART_DMAError+0x62>
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	2b22      	cmp	r3, #34	@ 0x22
 8007b84:	d106      	bne.n	8007b94 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	2200      	movs	r2, #0
 8007b8a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8007b8e:	6978      	ldr	r0, [r7, #20]
 8007b90:	f7ff fe59 	bl	8007846 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b9a:	f043 0210 	orr.w	r2, r3, #16
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007ba4:	6978      	ldr	r0, [r7, #20]
 8007ba6:	f7ff f89b 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007baa:	bf00      	nop
 8007bac:	3718      	adds	r7, #24
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007bbe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007bc8:	68f8      	ldr	r0, [r7, #12]
 8007bca:	f7ff f889 	bl	8006ce0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bce:	bf00      	nop
 8007bd0:	3710      	adds	r7, #16
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	bd80      	pop	{r7, pc}

08007bd6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bd6:	b580      	push	{r7, lr}
 8007bd8:	b088      	sub	sp, #32
 8007bda:	af00      	add	r7, sp, #0
 8007bdc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	e853 3f00 	ldrex	r3, [r3]
 8007bea:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bec:	68bb      	ldr	r3, [r7, #8]
 8007bee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007bf2:	61fb      	str	r3, [r7, #28]
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	61bb      	str	r3, [r7, #24]
 8007bfe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c00:	6979      	ldr	r1, [r7, #20]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	e841 2300 	strex	r3, r2, [r1]
 8007c08:	613b      	str	r3, [r7, #16]
   return(result);
 8007c0a:	693b      	ldr	r3, [r7, #16]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1e6      	bne.n	8007bde <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2220      	movs	r2, #32
 8007c14:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	2200      	movs	r2, #0
 8007c1c:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c1e:	6878      	ldr	r0, [r7, #4]
 8007c20:	f7ff f836 	bl	8006c90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c24:	bf00      	nop
 8007c26:	3720      	adds	r7, #32
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007c34:	bf00      	nop
 8007c36:	370c      	adds	r7, #12
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007c40:	b480      	push	{r7}
 8007c42:	b083      	sub	sp, #12
 8007c44:	af00      	add	r7, sp, #0
 8007c46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007c48:	bf00      	nop
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007c5c:	bf00      	nop
 8007c5e:	370c      	adds	r7, #12
 8007c60:	46bd      	mov	sp, r7
 8007c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c66:	4770      	bx	lr

08007c68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c68:	b480      	push	{r7}
 8007c6a:	b085      	sub	sp, #20
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d101      	bne.n	8007c7e <HAL_UARTEx_DisableFifoMode+0x16>
 8007c7a:	2302      	movs	r3, #2
 8007c7c:	e027      	b.n	8007cce <HAL_UARTEx_DisableFifoMode+0x66>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	2201      	movs	r2, #1
 8007c82:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2224      	movs	r2, #36	@ 0x24
 8007c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f022 0201 	bic.w	r2, r2, #1
 8007ca4:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007cac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	68fa      	ldr	r2, [r7, #12]
 8007cba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2220      	movs	r2, #32
 8007cc0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007ccc:	2300      	movs	r3, #0
}
 8007cce:	4618      	mov	r0, r3
 8007cd0:	3714      	adds	r7, #20
 8007cd2:	46bd      	mov	sp, r7
 8007cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd8:	4770      	bx	lr

08007cda <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007cda:	b580      	push	{r7, lr}
 8007cdc:	b084      	sub	sp, #16
 8007cde:	af00      	add	r7, sp, #0
 8007ce0:	6078      	str	r0, [r7, #4]
 8007ce2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d101      	bne.n	8007cf2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007cee:	2302      	movs	r3, #2
 8007cf0:	e02d      	b.n	8007d4e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2201      	movs	r2, #1
 8007cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	2224      	movs	r2, #36	@ 0x24
 8007cfe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	681a      	ldr	r2, [r3, #0]
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f022 0201 	bic.w	r2, r2, #1
 8007d18:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	683a      	ldr	r2, [r7, #0]
 8007d2a:	430a      	orrs	r2, r1
 8007d2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f850 	bl	8007dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68fa      	ldr	r2, [r7, #12]
 8007d3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}

08007d56 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d56:	b580      	push	{r7, lr}
 8007d58:	b084      	sub	sp, #16
 8007d5a:	af00      	add	r7, sp, #0
 8007d5c:	6078      	str	r0, [r7, #4]
 8007d5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d101      	bne.n	8007d6e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d6a:	2302      	movs	r3, #2
 8007d6c:	e02d      	b.n	8007dca <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	2224      	movs	r2, #36	@ 0x24
 8007d7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	689b      	ldr	r3, [r3, #8]
 8007d9c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	683a      	ldr	r2, [r7, #0]
 8007da6:	430a      	orrs	r2, r1
 8007da8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 f812 	bl	8007dd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	68fa      	ldr	r2, [r7, #12]
 8007db6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2220      	movs	r2, #32
 8007dbc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2200      	movs	r2, #0
 8007dc4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007dc8:	2300      	movs	r3, #0
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}
	...

08007dd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b085      	sub	sp, #20
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d108      	bne.n	8007df6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2201      	movs	r2, #1
 8007de8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2201      	movs	r2, #1
 8007df0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007df4:	e031      	b.n	8007e5a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007df6:	2308      	movs	r3, #8
 8007df8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007dfa:	2308      	movs	r3, #8
 8007dfc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	681b      	ldr	r3, [r3, #0]
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	0e5b      	lsrs	r3, r3, #25
 8007e06:	b2db      	uxtb	r3, r3
 8007e08:	f003 0307 	and.w	r3, r3, #7
 8007e0c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	0f5b      	lsrs	r3, r3, #29
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	f003 0307 	and.w	r3, r3, #7
 8007e1c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	7b3a      	ldrb	r2, [r7, #12]
 8007e22:	4911      	ldr	r1, [pc, #68]	@ (8007e68 <UARTEx_SetNbDataToProcess+0x94>)
 8007e24:	5c8a      	ldrb	r2, [r1, r2]
 8007e26:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e2a:	7b3a      	ldrb	r2, [r7, #12]
 8007e2c:	490f      	ldr	r1, [pc, #60]	@ (8007e6c <UARTEx_SetNbDataToProcess+0x98>)
 8007e2e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e30:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e3c:	7bfb      	ldrb	r3, [r7, #15]
 8007e3e:	7b7a      	ldrb	r2, [r7, #13]
 8007e40:	4909      	ldr	r1, [pc, #36]	@ (8007e68 <UARTEx_SetNbDataToProcess+0x94>)
 8007e42:	5c8a      	ldrb	r2, [r1, r2]
 8007e44:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e48:	7b7a      	ldrb	r2, [r7, #13]
 8007e4a:	4908      	ldr	r1, [pc, #32]	@ (8007e6c <UARTEx_SetNbDataToProcess+0x98>)
 8007e4c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e4e:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e52:	b29a      	uxth	r2, r3
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007e5a:	bf00      	nop
 8007e5c:	3714      	adds	r7, #20
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	08018c74 	.word	0x08018c74
 8007e6c:	08018c7c 	.word	0x08018c7c

08007e70 <__NVIC_SetPriority>:
{
 8007e70:	b480      	push	{r7}
 8007e72:	b083      	sub	sp, #12
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	4603      	mov	r3, r0
 8007e78:	6039      	str	r1, [r7, #0]
 8007e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	db0a      	blt.n	8007e9a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	490c      	ldr	r1, [pc, #48]	@ (8007ebc <__NVIC_SetPriority+0x4c>)
 8007e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e8e:	0112      	lsls	r2, r2, #4
 8007e90:	b2d2      	uxtb	r2, r2
 8007e92:	440b      	add	r3, r1
 8007e94:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007e98:	e00a      	b.n	8007eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	b2da      	uxtb	r2, r3
 8007e9e:	4908      	ldr	r1, [pc, #32]	@ (8007ec0 <__NVIC_SetPriority+0x50>)
 8007ea0:	79fb      	ldrb	r3, [r7, #7]
 8007ea2:	f003 030f 	and.w	r3, r3, #15
 8007ea6:	3b04      	subs	r3, #4
 8007ea8:	0112      	lsls	r2, r2, #4
 8007eaa:	b2d2      	uxtb	r2, r2
 8007eac:	440b      	add	r3, r1
 8007eae:	761a      	strb	r2, [r3, #24]
}
 8007eb0:	bf00      	nop
 8007eb2:	370c      	adds	r7, #12
 8007eb4:	46bd      	mov	sp, r7
 8007eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eba:	4770      	bx	lr
 8007ebc:	e000e100 	.word	0xe000e100
 8007ec0:	e000ed00 	.word	0xe000ed00

08007ec4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007ec8:	4b05      	ldr	r3, [pc, #20]	@ (8007ee0 <SysTick_Handler+0x1c>)
 8007eca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007ecc:	f001 fd40 	bl	8009950 <xTaskGetSchedulerState>
 8007ed0:	4603      	mov	r3, r0
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d001      	beq.n	8007eda <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007ed6:	f002 fb37 	bl	800a548 <xPortSysTickHandler>
  }
}
 8007eda:	bf00      	nop
 8007edc:	bd80      	pop	{r7, pc}
 8007ede:	bf00      	nop
 8007ee0:	e000e010 	.word	0xe000e010

08007ee4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007ee4:	b580      	push	{r7, lr}
 8007ee6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007ee8:	2100      	movs	r1, #0
 8007eea:	f06f 0004 	mvn.w	r0, #4
 8007eee:	f7ff ffbf 	bl	8007e70 <__NVIC_SetPriority>
#endif
}
 8007ef2:	bf00      	nop
 8007ef4:	bd80      	pop	{r7, pc}
	...

08007ef8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007efe:	f3ef 8305 	mrs	r3, IPSR
 8007f02:	603b      	str	r3, [r7, #0]
  return(result);
 8007f04:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d003      	beq.n	8007f12 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007f0a:	f06f 0305 	mvn.w	r3, #5
 8007f0e:	607b      	str	r3, [r7, #4]
 8007f10:	e00c      	b.n	8007f2c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007f12:	4b0a      	ldr	r3, [pc, #40]	@ (8007f3c <osKernelInitialize+0x44>)
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d105      	bne.n	8007f26 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007f1a:	4b08      	ldr	r3, [pc, #32]	@ (8007f3c <osKernelInitialize+0x44>)
 8007f1c:	2201      	movs	r2, #1
 8007f1e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007f20:	2300      	movs	r3, #0
 8007f22:	607b      	str	r3, [r7, #4]
 8007f24:	e002      	b.n	8007f2c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007f26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f2a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f2c:	687b      	ldr	r3, [r7, #4]
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	370c      	adds	r7, #12
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr
 8007f3a:	bf00      	nop
 8007f3c:	20004c9c 	.word	0x20004c9c

08007f40 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f46:	f3ef 8305 	mrs	r3, IPSR
 8007f4a:	603b      	str	r3, [r7, #0]
  return(result);
 8007f4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d003      	beq.n	8007f5a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007f52:	f06f 0305 	mvn.w	r3, #5
 8007f56:	607b      	str	r3, [r7, #4]
 8007f58:	e010      	b.n	8007f7c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007f5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007f88 <osKernelStart+0x48>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	d109      	bne.n	8007f76 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007f62:	f7ff ffbf 	bl	8007ee4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007f66:	4b08      	ldr	r3, [pc, #32]	@ (8007f88 <osKernelStart+0x48>)
 8007f68:	2202      	movs	r2, #2
 8007f6a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007f6c:	f001 f87a 	bl	8009064 <vTaskStartScheduler>
      stat = osOK;
 8007f70:	2300      	movs	r3, #0
 8007f72:	607b      	str	r3, [r7, #4]
 8007f74:	e002      	b.n	8007f7c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007f76:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007f7a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007f7c:	687b      	ldr	r3, [r7, #4]
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
 8007f86:	bf00      	nop
 8007f88:	20004c9c 	.word	0x20004c9c

08007f8c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b08e      	sub	sp, #56	@ 0x38
 8007f90:	af04      	add	r7, sp, #16
 8007f92:	60f8      	str	r0, [r7, #12]
 8007f94:	60b9      	str	r1, [r7, #8]
 8007f96:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f9c:	f3ef 8305 	mrs	r3, IPSR
 8007fa0:	617b      	str	r3, [r7, #20]
  return(result);
 8007fa2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d17e      	bne.n	80080a6 <osThreadNew+0x11a>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d07b      	beq.n	80080a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007fae:	2380      	movs	r3, #128	@ 0x80
 8007fb0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007fb2:	2318      	movs	r3, #24
 8007fb4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007fbe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d045      	beq.n	8008052 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d002      	beq.n	8007fd4 <osThreadNew+0x48>
        name = attr->name;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	699b      	ldr	r3, [r3, #24]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d002      	beq.n	8007fe2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	699b      	ldr	r3, [r3, #24]
 8007fe0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007fe2:	69fb      	ldr	r3, [r7, #28]
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d008      	beq.n	8007ffa <osThreadNew+0x6e>
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b38      	cmp	r3, #56	@ 0x38
 8007fec:	d805      	bhi.n	8007ffa <osThreadNew+0x6e>
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	f003 0301 	and.w	r3, r3, #1
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d001      	beq.n	8007ffe <osThreadNew+0x72>
        return (NULL);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	e054      	b.n	80080a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	695b      	ldr	r3, [r3, #20]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d003      	beq.n	800800e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	695b      	ldr	r3, [r3, #20]
 800800a:	089b      	lsrs	r3, r3, #2
 800800c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	689b      	ldr	r3, [r3, #8]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00e      	beq.n	8008034 <osThreadNew+0xa8>
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	68db      	ldr	r3, [r3, #12]
 800801a:	2b5b      	cmp	r3, #91	@ 0x5b
 800801c:	d90a      	bls.n	8008034 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008022:	2b00      	cmp	r3, #0
 8008024:	d006      	beq.n	8008034 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	695b      	ldr	r3, [r3, #20]
 800802a:	2b00      	cmp	r3, #0
 800802c:	d002      	beq.n	8008034 <osThreadNew+0xa8>
        mem = 1;
 800802e:	2301      	movs	r3, #1
 8008030:	61bb      	str	r3, [r7, #24]
 8008032:	e010      	b.n	8008056 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	689b      	ldr	r3, [r3, #8]
 8008038:	2b00      	cmp	r3, #0
 800803a:	d10c      	bne.n	8008056 <osThreadNew+0xca>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	68db      	ldr	r3, [r3, #12]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d108      	bne.n	8008056 <osThreadNew+0xca>
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	691b      	ldr	r3, [r3, #16]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d104      	bne.n	8008056 <osThreadNew+0xca>
          mem = 0;
 800804c:	2300      	movs	r3, #0
 800804e:	61bb      	str	r3, [r7, #24]
 8008050:	e001      	b.n	8008056 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008052:	2300      	movs	r3, #0
 8008054:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008056:	69bb      	ldr	r3, [r7, #24]
 8008058:	2b01      	cmp	r3, #1
 800805a:	d110      	bne.n	800807e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008060:	687a      	ldr	r2, [r7, #4]
 8008062:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008064:	9202      	str	r2, [sp, #8]
 8008066:	9301      	str	r3, [sp, #4]
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	9300      	str	r3, [sp, #0]
 800806c:	68bb      	ldr	r3, [r7, #8]
 800806e:	6a3a      	ldr	r2, [r7, #32]
 8008070:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fe1a 	bl	8008cac <xTaskCreateStatic>
 8008078:	4603      	mov	r3, r0
 800807a:	613b      	str	r3, [r7, #16]
 800807c:	e013      	b.n	80080a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800807e:	69bb      	ldr	r3, [r7, #24]
 8008080:	2b00      	cmp	r3, #0
 8008082:	d110      	bne.n	80080a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008084:	6a3b      	ldr	r3, [r7, #32]
 8008086:	b29a      	uxth	r2, r3
 8008088:	f107 0310 	add.w	r3, r7, #16
 800808c:	9301      	str	r3, [sp, #4]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	9300      	str	r3, [sp, #0]
 8008092:	68bb      	ldr	r3, [r7, #8]
 8008094:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008096:	68f8      	ldr	r0, [r7, #12]
 8008098:	f000 fe68 	bl	8008d6c <xTaskCreate>
 800809c:	4603      	mov	r3, r0
 800809e:	2b01      	cmp	r3, #1
 80080a0:	d001      	beq.n	80080a6 <osThreadNew+0x11a>
            hTask = NULL;
 80080a2:	2300      	movs	r3, #0
 80080a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80080a6:	693b      	ldr	r3, [r7, #16]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3728      	adds	r7, #40	@ 0x28
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80080b8:	f3ef 8305 	mrs	r3, IPSR
 80080bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80080be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d003      	beq.n	80080cc <osDelay+0x1c>
    stat = osErrorISR;
 80080c4:	f06f 0305 	mvn.w	r3, #5
 80080c8:	60fb      	str	r3, [r7, #12]
 80080ca:	e007      	b.n	80080dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d002      	beq.n	80080dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 ff8e 	bl	8008ff8 <vTaskDelay>
    }
  }

  return (stat);
 80080dc:	68fb      	ldr	r3, [r7, #12]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80080e8:	b480      	push	{r7}
 80080ea:	b085      	sub	sp, #20
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	4a07      	ldr	r2, [pc, #28]	@ (8008114 <vApplicationGetIdleTaskMemory+0x2c>)
 80080f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	4a06      	ldr	r2, [pc, #24]	@ (8008118 <vApplicationGetIdleTaskMemory+0x30>)
 80080fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2280      	movs	r2, #128	@ 0x80
 8008104:	601a      	str	r2, [r3, #0]
}
 8008106:	bf00      	nop
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	20004ca0 	.word	0x20004ca0
 8008118:	20004cfc 	.word	0x20004cfc

0800811c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800811c:	b480      	push	{r7}
 800811e:	b085      	sub	sp, #20
 8008120:	af00      	add	r7, sp, #0
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	4a07      	ldr	r2, [pc, #28]	@ (8008148 <vApplicationGetTimerTaskMemory+0x2c>)
 800812c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4a06      	ldr	r2, [pc, #24]	@ (800814c <vApplicationGetTimerTaskMemory+0x30>)
 8008132:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800813a:	601a      	str	r2, [r3, #0]
}
 800813c:	bf00      	nop
 800813e:	3714      	adds	r7, #20
 8008140:	46bd      	mov	sp, r7
 8008142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008146:	4770      	bx	lr
 8008148:	20004efc 	.word	0x20004efc
 800814c:	20004f58 	.word	0x20004f58

08008150 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008150:	b480      	push	{r7}
 8008152:	b083      	sub	sp, #12
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	f103 0208 	add.w	r2, r3, #8
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008168:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f103 0208 	add.w	r2, r3, #8
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	f103 0208 	add.w	r2, r3, #8
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	2200      	movs	r2, #0
 8008182:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008184:	bf00      	nop
 8008186:	370c      	adds	r7, #12
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008190:	b480      	push	{r7}
 8008192:	b083      	sub	sp, #12
 8008194:	af00      	add	r7, sp, #0
 8008196:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2200      	movs	r2, #0
 800819c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800819e:	bf00      	nop
 80081a0:	370c      	adds	r7, #12
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr

080081aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081aa:	b480      	push	{r7}
 80081ac:	b085      	sub	sp, #20
 80081ae:	af00      	add	r7, sp, #0
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685b      	ldr	r3, [r3, #4]
 80081b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	689a      	ldr	r2, [r3, #8]
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	689b      	ldr	r3, [r3, #8]
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	683a      	ldr	r2, [r7, #0]
 80081d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80081d6:	683b      	ldr	r3, [r7, #0]
 80081d8:	687a      	ldr	r2, [r7, #4]
 80081da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	1c5a      	adds	r2, r3, #1
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	601a      	str	r2, [r3, #0]
}
 80081e6:	bf00      	nop
 80081e8:	3714      	adds	r7, #20
 80081ea:	46bd      	mov	sp, r7
 80081ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f0:	4770      	bx	lr

080081f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80081f2:	b480      	push	{r7}
 80081f4:	b085      	sub	sp, #20
 80081f6:	af00      	add	r7, sp, #0
 80081f8:	6078      	str	r0, [r7, #4]
 80081fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008208:	d103      	bne.n	8008212 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	60fb      	str	r3, [r7, #12]
 8008210:	e00c      	b.n	800822c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	3308      	adds	r3, #8
 8008216:	60fb      	str	r3, [r7, #12]
 8008218:	e002      	b.n	8008220 <vListInsert+0x2e>
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	685b      	ldr	r3, [r3, #4]
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	685b      	ldr	r3, [r3, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	429a      	cmp	r2, r3
 800822a:	d2f6      	bcs.n	800821a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	685a      	ldr	r2, [r3, #4]
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008234:	683b      	ldr	r3, [r7, #0]
 8008236:	685b      	ldr	r3, [r3, #4]
 8008238:	683a      	ldr	r2, [r7, #0]
 800823a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	68fa      	ldr	r2, [r7, #12]
 8008240:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	687a      	ldr	r2, [r7, #4]
 800824c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	1c5a      	adds	r2, r3, #1
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	601a      	str	r2, [r3, #0]
}
 8008258:	bf00      	nop
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	691b      	ldr	r3, [r3, #16]
 8008270:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	685b      	ldr	r3, [r3, #4]
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	6892      	ldr	r2, [r2, #8]
 800827a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	689b      	ldr	r3, [r3, #8]
 8008280:	687a      	ldr	r2, [r7, #4]
 8008282:	6852      	ldr	r2, [r2, #4]
 8008284:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	687a      	ldr	r2, [r7, #4]
 800828c:	429a      	cmp	r2, r3
 800828e:	d103      	bne.n	8008298 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2200      	movs	r2, #0
 800829c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	1e5a      	subs	r2, r3, #1
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	3714      	adds	r7, #20
 80082b0:	46bd      	mov	sp, r7
 80082b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b6:	4770      	bx	lr

080082b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80082b8:	b580      	push	{r7, lr}
 80082ba:	b084      	sub	sp, #16
 80082bc:	af00      	add	r7, sp, #0
 80082be:	6078      	str	r0, [r7, #4]
 80082c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10b      	bne.n	80082e4 <xQueueGenericReset+0x2c>
	__asm volatile
 80082cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082d0:	f383 8811 	msr	BASEPRI, r3
 80082d4:	f3bf 8f6f 	isb	sy
 80082d8:	f3bf 8f4f 	dsb	sy
 80082dc:	60bb      	str	r3, [r7, #8]
}
 80082de:	bf00      	nop
 80082e0:	bf00      	nop
 80082e2:	e7fd      	b.n	80082e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80082e4:	f002 f8a0 	bl	800a428 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80082f0:	68f9      	ldr	r1, [r7, #12]
 80082f2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80082f4:	fb01 f303 	mul.w	r3, r1, r3
 80082f8:	441a      	add	r2, r3
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681a      	ldr	r2, [r3, #0]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	681a      	ldr	r2, [r3, #0]
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008314:	3b01      	subs	r3, #1
 8008316:	68f9      	ldr	r1, [r7, #12]
 8008318:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800831a:	fb01 f303 	mul.w	r3, r1, r3
 800831e:	441a      	add	r2, r3
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	22ff      	movs	r2, #255	@ 0xff
 8008328:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	22ff      	movs	r2, #255	@ 0xff
 8008330:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8008334:	683b      	ldr	r3, [r7, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d114      	bne.n	8008364 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d01a      	beq.n	8008378 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3310      	adds	r3, #16
 8008346:	4618      	mov	r0, r3
 8008348:	f001 f91a 	bl	8009580 <xTaskRemoveFromEventList>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d012      	beq.n	8008378 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008352:	4b0d      	ldr	r3, [pc, #52]	@ (8008388 <xQueueGenericReset+0xd0>)
 8008354:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008358:	601a      	str	r2, [r3, #0]
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	e009      	b.n	8008378 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	3310      	adds	r3, #16
 8008368:	4618      	mov	r0, r3
 800836a:	f7ff fef1 	bl	8008150 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	3324      	adds	r3, #36	@ 0x24
 8008372:	4618      	mov	r0, r3
 8008374:	f7ff feec 	bl	8008150 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008378:	f002 f888 	bl	800a48c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800837c:	2301      	movs	r3, #1
}
 800837e:	4618      	mov	r0, r3
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}
 8008386:	bf00      	nop
 8008388:	e000ed04 	.word	0xe000ed04

0800838c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800838c:	b580      	push	{r7, lr}
 800838e:	b08e      	sub	sp, #56	@ 0x38
 8008390:	af02      	add	r7, sp, #8
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
 8008398:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2b00      	cmp	r3, #0
 800839e:	d10b      	bne.n	80083b8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80083a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80083b2:	bf00      	nop
 80083b4:	bf00      	nop
 80083b6:	e7fd      	b.n	80083b4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	2b00      	cmp	r3, #0
 80083bc:	d10b      	bne.n	80083d6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083d0:	bf00      	nop
 80083d2:	bf00      	nop
 80083d4:	e7fd      	b.n	80083d2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d002      	beq.n	80083e2 <xQueueGenericCreateStatic+0x56>
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d001      	beq.n	80083e6 <xQueueGenericCreateStatic+0x5a>
 80083e2:	2301      	movs	r3, #1
 80083e4:	e000      	b.n	80083e8 <xQueueGenericCreateStatic+0x5c>
 80083e6:	2300      	movs	r3, #0
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d10b      	bne.n	8008404 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80083ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f0:	f383 8811 	msr	BASEPRI, r3
 80083f4:	f3bf 8f6f 	isb	sy
 80083f8:	f3bf 8f4f 	dsb	sy
 80083fc:	623b      	str	r3, [r7, #32]
}
 80083fe:	bf00      	nop
 8008400:	bf00      	nop
 8008402:	e7fd      	b.n	8008400 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <xQueueGenericCreateStatic+0x84>
 800840a:	68bb      	ldr	r3, [r7, #8]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <xQueueGenericCreateStatic+0x88>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <xQueueGenericCreateStatic+0x8a>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61fb      	str	r3, [r7, #28]
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	e7fd      	b.n	800842e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008432:	2350      	movs	r3, #80	@ 0x50
 8008434:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008436:	697b      	ldr	r3, [r7, #20]
 8008438:	2b50      	cmp	r3, #80	@ 0x50
 800843a:	d00b      	beq.n	8008454 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	61bb      	str	r3, [r7, #24]
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008454:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008456:	683b      	ldr	r3, [r7, #0]
 8008458:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800845a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800845c:	2b00      	cmp	r3, #0
 800845e:	d00d      	beq.n	800847c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008460:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008462:	2201      	movs	r2, #1
 8008464:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008468:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800846c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800846e:	9300      	str	r3, [sp, #0]
 8008470:	4613      	mov	r3, r2
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	68b9      	ldr	r1, [r7, #8]
 8008476:	68f8      	ldr	r0, [r7, #12]
 8008478:	f000 f805 	bl	8008486 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800847c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800847e:	4618      	mov	r0, r3
 8008480:	3730      	adds	r7, #48	@ 0x30
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b084      	sub	sp, #16
 800848a:	af00      	add	r7, sp, #0
 800848c:	60f8      	str	r0, [r7, #12]
 800848e:	60b9      	str	r1, [r7, #8]
 8008490:	607a      	str	r2, [r7, #4]
 8008492:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d103      	bne.n	80084a2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800849a:	69bb      	ldr	r3, [r7, #24]
 800849c:	69ba      	ldr	r2, [r7, #24]
 800849e:	601a      	str	r2, [r3, #0]
 80084a0:	e002      	b.n	80084a8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	687a      	ldr	r2, [r7, #4]
 80084a6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80084a8:	69bb      	ldr	r3, [r7, #24]
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	68ba      	ldr	r2, [r7, #8]
 80084b2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80084b4:	2101      	movs	r1, #1
 80084b6:	69b8      	ldr	r0, [r7, #24]
 80084b8:	f7ff fefe 	bl	80082b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80084bc:	69bb      	ldr	r3, [r7, #24]
 80084be:	78fa      	ldrb	r2, [r7, #3]
 80084c0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80084c4:	bf00      	nop
 80084c6:	3710      	adds	r7, #16
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b08e      	sub	sp, #56	@ 0x38
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80084da:	2300      	movs	r3, #0
 80084dc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d10b      	bne.n	8008500 <xQueueGenericSend+0x34>
	__asm volatile
 80084e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ec:	f383 8811 	msr	BASEPRI, r3
 80084f0:	f3bf 8f6f 	isb	sy
 80084f4:	f3bf 8f4f 	dsb	sy
 80084f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80084fa:	bf00      	nop
 80084fc:	bf00      	nop
 80084fe:	e7fd      	b.n	80084fc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	2b00      	cmp	r3, #0
 8008504:	d103      	bne.n	800850e <xQueueGenericSend+0x42>
 8008506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	d101      	bne.n	8008512 <xQueueGenericSend+0x46>
 800850e:	2301      	movs	r3, #1
 8008510:	e000      	b.n	8008514 <xQueueGenericSend+0x48>
 8008512:	2300      	movs	r3, #0
 8008514:	2b00      	cmp	r3, #0
 8008516:	d10b      	bne.n	8008530 <xQueueGenericSend+0x64>
	__asm volatile
 8008518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800851c:	f383 8811 	msr	BASEPRI, r3
 8008520:	f3bf 8f6f 	isb	sy
 8008524:	f3bf 8f4f 	dsb	sy
 8008528:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800852a:	bf00      	nop
 800852c:	bf00      	nop
 800852e:	e7fd      	b.n	800852c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008530:	683b      	ldr	r3, [r7, #0]
 8008532:	2b02      	cmp	r3, #2
 8008534:	d103      	bne.n	800853e <xQueueGenericSend+0x72>
 8008536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800853a:	2b01      	cmp	r3, #1
 800853c:	d101      	bne.n	8008542 <xQueueGenericSend+0x76>
 800853e:	2301      	movs	r3, #1
 8008540:	e000      	b.n	8008544 <xQueueGenericSend+0x78>
 8008542:	2300      	movs	r3, #0
 8008544:	2b00      	cmp	r3, #0
 8008546:	d10b      	bne.n	8008560 <xQueueGenericSend+0x94>
	__asm volatile
 8008548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800854c:	f383 8811 	msr	BASEPRI, r3
 8008550:	f3bf 8f6f 	isb	sy
 8008554:	f3bf 8f4f 	dsb	sy
 8008558:	623b      	str	r3, [r7, #32]
}
 800855a:	bf00      	nop
 800855c:	bf00      	nop
 800855e:	e7fd      	b.n	800855c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008560:	f001 f9f6 	bl	8009950 <xTaskGetSchedulerState>
 8008564:	4603      	mov	r3, r0
 8008566:	2b00      	cmp	r3, #0
 8008568:	d102      	bne.n	8008570 <xQueueGenericSend+0xa4>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d101      	bne.n	8008574 <xQueueGenericSend+0xa8>
 8008570:	2301      	movs	r3, #1
 8008572:	e000      	b.n	8008576 <xQueueGenericSend+0xaa>
 8008574:	2300      	movs	r3, #0
 8008576:	2b00      	cmp	r3, #0
 8008578:	d10b      	bne.n	8008592 <xQueueGenericSend+0xc6>
	__asm volatile
 800857a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800857e:	f383 8811 	msr	BASEPRI, r3
 8008582:	f3bf 8f6f 	isb	sy
 8008586:	f3bf 8f4f 	dsb	sy
 800858a:	61fb      	str	r3, [r7, #28]
}
 800858c:	bf00      	nop
 800858e:	bf00      	nop
 8008590:	e7fd      	b.n	800858e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008592:	f001 ff49 	bl	800a428 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008598:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800859a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800859c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800859e:	429a      	cmp	r2, r3
 80085a0:	d302      	bcc.n	80085a8 <xQueueGenericSend+0xdc>
 80085a2:	683b      	ldr	r3, [r7, #0]
 80085a4:	2b02      	cmp	r3, #2
 80085a6:	d129      	bne.n	80085fc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80085a8:	683a      	ldr	r2, [r7, #0]
 80085aa:	68b9      	ldr	r1, [r7, #8]
 80085ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80085ae:	f000 fa0f 	bl	80089d0 <prvCopyDataToQueue>
 80085b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80085b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d010      	beq.n	80085de <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80085bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085be:	3324      	adds	r3, #36	@ 0x24
 80085c0:	4618      	mov	r0, r3
 80085c2:	f000 ffdd 	bl	8009580 <xTaskRemoveFromEventList>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d013      	beq.n	80085f4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80085cc:	4b3f      	ldr	r3, [pc, #252]	@ (80086cc <xQueueGenericSend+0x200>)
 80085ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085d2:	601a      	str	r2, [r3, #0]
 80085d4:	f3bf 8f4f 	dsb	sy
 80085d8:	f3bf 8f6f 	isb	sy
 80085dc:	e00a      	b.n	80085f4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80085de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d007      	beq.n	80085f4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80085e4:	4b39      	ldr	r3, [pc, #228]	@ (80086cc <xQueueGenericSend+0x200>)
 80085e6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085ea:	601a      	str	r2, [r3, #0]
 80085ec:	f3bf 8f4f 	dsb	sy
 80085f0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80085f4:	f001 ff4a 	bl	800a48c <vPortExitCritical>
				return pdPASS;
 80085f8:	2301      	movs	r3, #1
 80085fa:	e063      	b.n	80086c4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d103      	bne.n	800860a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008602:	f001 ff43 	bl	800a48c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008606:	2300      	movs	r3, #0
 8008608:	e05c      	b.n	80086c4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800860a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800860c:	2b00      	cmp	r3, #0
 800860e:	d106      	bne.n	800861e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008610:	f107 0314 	add.w	r3, r7, #20
 8008614:	4618      	mov	r0, r3
 8008616:	f001 f83f 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800861a:	2301      	movs	r3, #1
 800861c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800861e:	f001 ff35 	bl	800a48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008622:	f000 fd87 	bl	8009134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008626:	f001 feff 	bl	800a428 <vPortEnterCritical>
 800862a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800862c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008630:	b25b      	sxtb	r3, r3
 8008632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008636:	d103      	bne.n	8008640 <xQueueGenericSend+0x174>
 8008638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008642:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008646:	b25b      	sxtb	r3, r3
 8008648:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800864c:	d103      	bne.n	8008656 <xQueueGenericSend+0x18a>
 800864e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008650:	2200      	movs	r2, #0
 8008652:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008656:	f001 ff19 	bl	800a48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800865a:	1d3a      	adds	r2, r7, #4
 800865c:	f107 0314 	add.w	r3, r7, #20
 8008660:	4611      	mov	r1, r2
 8008662:	4618      	mov	r0, r3
 8008664:	f001 f82e 	bl	80096c4 <xTaskCheckForTimeOut>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d124      	bne.n	80086b8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800866e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008670:	f000 faa6 	bl	8008bc0 <prvIsQueueFull>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d018      	beq.n	80086ac <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800867a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800867c:	3310      	adds	r3, #16
 800867e:	687a      	ldr	r2, [r7, #4]
 8008680:	4611      	mov	r1, r2
 8008682:	4618      	mov	r0, r3
 8008684:	f000 ff2a 	bl	80094dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008688:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800868a:	f000 fa31 	bl	8008af0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800868e:	f000 fd5f 	bl	8009150 <xTaskResumeAll>
 8008692:	4603      	mov	r3, r0
 8008694:	2b00      	cmp	r3, #0
 8008696:	f47f af7c 	bne.w	8008592 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800869a:	4b0c      	ldr	r3, [pc, #48]	@ (80086cc <xQueueGenericSend+0x200>)
 800869c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80086a0:	601a      	str	r2, [r3, #0]
 80086a2:	f3bf 8f4f 	dsb	sy
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	e772      	b.n	8008592 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80086ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ae:	f000 fa1f 	bl	8008af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80086b2:	f000 fd4d 	bl	8009150 <xTaskResumeAll>
 80086b6:	e76c      	b.n	8008592 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80086b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80086ba:	f000 fa19 	bl	8008af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80086be:	f000 fd47 	bl	8009150 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80086c2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80086c4:	4618      	mov	r0, r3
 80086c6:	3738      	adds	r7, #56	@ 0x38
 80086c8:	46bd      	mov	sp, r7
 80086ca:	bd80      	pop	{r7, pc}
 80086cc:	e000ed04 	.word	0xe000ed04

080086d0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b090      	sub	sp, #64	@ 0x40
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	60f8      	str	r0, [r7, #12]
 80086d8:	60b9      	str	r1, [r7, #8]
 80086da:	607a      	str	r2, [r7, #4]
 80086dc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80086e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10b      	bne.n	8008700 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80086e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ec:	f383 8811 	msr	BASEPRI, r3
 80086f0:	f3bf 8f6f 	isb	sy
 80086f4:	f3bf 8f4f 	dsb	sy
 80086f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80086fa:	bf00      	nop
 80086fc:	bf00      	nop
 80086fe:	e7fd      	b.n	80086fc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d103      	bne.n	800870e <xQueueGenericSendFromISR+0x3e>
 8008706:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <xQueueGenericSendFromISR+0x42>
 800870e:	2301      	movs	r3, #1
 8008710:	e000      	b.n	8008714 <xQueueGenericSendFromISR+0x44>
 8008712:	2300      	movs	r3, #0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d10b      	bne.n	8008730 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8008718:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800871c:	f383 8811 	msr	BASEPRI, r3
 8008720:	f3bf 8f6f 	isb	sy
 8008724:	f3bf 8f4f 	dsb	sy
 8008728:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800872a:	bf00      	nop
 800872c:	bf00      	nop
 800872e:	e7fd      	b.n	800872c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	2b02      	cmp	r3, #2
 8008734:	d103      	bne.n	800873e <xQueueGenericSendFromISR+0x6e>
 8008736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800873a:	2b01      	cmp	r3, #1
 800873c:	d101      	bne.n	8008742 <xQueueGenericSendFromISR+0x72>
 800873e:	2301      	movs	r3, #1
 8008740:	e000      	b.n	8008744 <xQueueGenericSendFromISR+0x74>
 8008742:	2300      	movs	r3, #0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d10b      	bne.n	8008760 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8008748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800874c:	f383 8811 	msr	BASEPRI, r3
 8008750:	f3bf 8f6f 	isb	sy
 8008754:	f3bf 8f4f 	dsb	sy
 8008758:	623b      	str	r3, [r7, #32]
}
 800875a:	bf00      	nop
 800875c:	bf00      	nop
 800875e:	e7fd      	b.n	800875c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008760:	f001 ff42 	bl	800a5e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008764:	f3ef 8211 	mrs	r2, BASEPRI
 8008768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800876c:	f383 8811 	msr	BASEPRI, r3
 8008770:	f3bf 8f6f 	isb	sy
 8008774:	f3bf 8f4f 	dsb	sy
 8008778:	61fa      	str	r2, [r7, #28]
 800877a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800877c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800877e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008782:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008788:	429a      	cmp	r2, r3
 800878a:	d302      	bcc.n	8008792 <xQueueGenericSendFromISR+0xc2>
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	2b02      	cmp	r3, #2
 8008790:	d12f      	bne.n	80087f2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008794:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008798:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800879c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800879e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80087a2:	683a      	ldr	r2, [r7, #0]
 80087a4:	68b9      	ldr	r1, [r7, #8]
 80087a6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80087a8:	f000 f912 	bl	80089d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80087ac:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80087b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087b4:	d112      	bne.n	80087dc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80087b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d016      	beq.n	80087ec <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80087be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087c0:	3324      	adds	r3, #36	@ 0x24
 80087c2:	4618      	mov	r0, r3
 80087c4:	f000 fedc 	bl	8009580 <xTaskRemoveFromEventList>
 80087c8:	4603      	mov	r3, r0
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d00e      	beq.n	80087ec <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d00b      	beq.n	80087ec <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	601a      	str	r2, [r3, #0]
 80087da:	e007      	b.n	80087ec <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80087dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087e0:	3301      	adds	r3, #1
 80087e2:	b2db      	uxtb	r3, r3
 80087e4:	b25a      	sxtb	r2, r3
 80087e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80087e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80087ec:	2301      	movs	r3, #1
 80087ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80087f0:	e001      	b.n	80087f6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80087f2:	2300      	movs	r3, #0
 80087f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80087f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087f8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80087fa:	697b      	ldr	r3, [r7, #20]
 80087fc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008800:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008802:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008804:	4618      	mov	r0, r3
 8008806:	3740      	adds	r7, #64	@ 0x40
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b08c      	sub	sp, #48	@ 0x30
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008818:	2300      	movs	r3, #0
 800881a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <xQueueReceive+0x32>
	__asm volatile
 8008826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800882a:	f383 8811 	msr	BASEPRI, r3
 800882e:	f3bf 8f6f 	isb	sy
 8008832:	f3bf 8f4f 	dsb	sy
 8008836:	623b      	str	r3, [r7, #32]
}
 8008838:	bf00      	nop
 800883a:	bf00      	nop
 800883c:	e7fd      	b.n	800883a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d103      	bne.n	800884c <xQueueReceive+0x40>
 8008844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008848:	2b00      	cmp	r3, #0
 800884a:	d101      	bne.n	8008850 <xQueueReceive+0x44>
 800884c:	2301      	movs	r3, #1
 800884e:	e000      	b.n	8008852 <xQueueReceive+0x46>
 8008850:	2300      	movs	r3, #0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d10b      	bne.n	800886e <xQueueReceive+0x62>
	__asm volatile
 8008856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800885a:	f383 8811 	msr	BASEPRI, r3
 800885e:	f3bf 8f6f 	isb	sy
 8008862:	f3bf 8f4f 	dsb	sy
 8008866:	61fb      	str	r3, [r7, #28]
}
 8008868:	bf00      	nop
 800886a:	bf00      	nop
 800886c:	e7fd      	b.n	800886a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800886e:	f001 f86f 	bl	8009950 <xTaskGetSchedulerState>
 8008872:	4603      	mov	r3, r0
 8008874:	2b00      	cmp	r3, #0
 8008876:	d102      	bne.n	800887e <xQueueReceive+0x72>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d101      	bne.n	8008882 <xQueueReceive+0x76>
 800887e:	2301      	movs	r3, #1
 8008880:	e000      	b.n	8008884 <xQueueReceive+0x78>
 8008882:	2300      	movs	r3, #0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10b      	bne.n	80088a0 <xQueueReceive+0x94>
	__asm volatile
 8008888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800888c:	f383 8811 	msr	BASEPRI, r3
 8008890:	f3bf 8f6f 	isb	sy
 8008894:	f3bf 8f4f 	dsb	sy
 8008898:	61bb      	str	r3, [r7, #24]
}
 800889a:	bf00      	nop
 800889c:	bf00      	nop
 800889e:	e7fd      	b.n	800889c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80088a0:	f001 fdc2 	bl	800a428 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80088a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088a8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80088aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d01f      	beq.n	80088f0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80088b0:	68b9      	ldr	r1, [r7, #8]
 80088b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80088b4:	f000 f8f6 	bl	8008aa4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80088b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80088ba:	1e5a      	subs	r2, r3, #1
 80088bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088be:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80088c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c2:	691b      	ldr	r3, [r3, #16]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d00f      	beq.n	80088e8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80088c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ca:	3310      	adds	r3, #16
 80088cc:	4618      	mov	r0, r3
 80088ce:	f000 fe57 	bl	8009580 <xTaskRemoveFromEventList>
 80088d2:	4603      	mov	r3, r0
 80088d4:	2b00      	cmp	r3, #0
 80088d6:	d007      	beq.n	80088e8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80088d8:	4b3c      	ldr	r3, [pc, #240]	@ (80089cc <xQueueReceive+0x1c0>)
 80088da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088de:	601a      	str	r2, [r3, #0]
 80088e0:	f3bf 8f4f 	dsb	sy
 80088e4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80088e8:	f001 fdd0 	bl	800a48c <vPortExitCritical>
				return pdPASS;
 80088ec:	2301      	movs	r3, #1
 80088ee:	e069      	b.n	80089c4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d103      	bne.n	80088fe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088f6:	f001 fdc9 	bl	800a48c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e062      	b.n	80089c4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008900:	2b00      	cmp	r3, #0
 8008902:	d106      	bne.n	8008912 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008904:	f107 0310 	add.w	r3, r7, #16
 8008908:	4618      	mov	r0, r3
 800890a:	f000 fec5 	bl	8009698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800890e:	2301      	movs	r3, #1
 8008910:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008912:	f001 fdbb 	bl	800a48c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008916:	f000 fc0d 	bl	8009134 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800891a:	f001 fd85 	bl	800a428 <vPortEnterCritical>
 800891e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008920:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008924:	b25b      	sxtb	r3, r3
 8008926:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800892a:	d103      	bne.n	8008934 <xQueueReceive+0x128>
 800892c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800892e:	2200      	movs	r2, #0
 8008930:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008936:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800893a:	b25b      	sxtb	r3, r3
 800893c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008940:	d103      	bne.n	800894a <xQueueReceive+0x13e>
 8008942:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008944:	2200      	movs	r2, #0
 8008946:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800894a:	f001 fd9f 	bl	800a48c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800894e:	1d3a      	adds	r2, r7, #4
 8008950:	f107 0310 	add.w	r3, r7, #16
 8008954:	4611      	mov	r1, r2
 8008956:	4618      	mov	r0, r3
 8008958:	f000 feb4 	bl	80096c4 <xTaskCheckForTimeOut>
 800895c:	4603      	mov	r3, r0
 800895e:	2b00      	cmp	r3, #0
 8008960:	d123      	bne.n	80089aa <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008962:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008964:	f000 f916 	bl	8008b94 <prvIsQueueEmpty>
 8008968:	4603      	mov	r3, r0
 800896a:	2b00      	cmp	r3, #0
 800896c:	d017      	beq.n	800899e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800896e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008970:	3324      	adds	r3, #36	@ 0x24
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	4611      	mov	r1, r2
 8008976:	4618      	mov	r0, r3
 8008978:	f000 fdb0 	bl	80094dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800897c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800897e:	f000 f8b7 	bl	8008af0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008982:	f000 fbe5 	bl	8009150 <xTaskResumeAll>
 8008986:	4603      	mov	r3, r0
 8008988:	2b00      	cmp	r3, #0
 800898a:	d189      	bne.n	80088a0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800898c:	4b0f      	ldr	r3, [pc, #60]	@ (80089cc <xQueueReceive+0x1c0>)
 800898e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008992:	601a      	str	r2, [r3, #0]
 8008994:	f3bf 8f4f 	dsb	sy
 8008998:	f3bf 8f6f 	isb	sy
 800899c:	e780      	b.n	80088a0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800899e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089a0:	f000 f8a6 	bl	8008af0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80089a4:	f000 fbd4 	bl	8009150 <xTaskResumeAll>
 80089a8:	e77a      	b.n	80088a0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80089aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089ac:	f000 f8a0 	bl	8008af0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80089b0:	f000 fbce 	bl	8009150 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80089b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80089b6:	f000 f8ed 	bl	8008b94 <prvIsQueueEmpty>
 80089ba:	4603      	mov	r3, r0
 80089bc:	2b00      	cmp	r3, #0
 80089be:	f43f af6f 	beq.w	80088a0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80089c2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80089c4:	4618      	mov	r0, r3
 80089c6:	3730      	adds	r7, #48	@ 0x30
 80089c8:	46bd      	mov	sp, r7
 80089ca:	bd80      	pop	{r7, pc}
 80089cc:	e000ed04 	.word	0xe000ed04

080089d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b086      	sub	sp, #24
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	60f8      	str	r0, [r7, #12]
 80089d8:	60b9      	str	r1, [r7, #8]
 80089da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80089dc:	2300      	movs	r3, #0
 80089de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d10d      	bne.n	8008a0a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d14d      	bne.n	8008a92 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	689b      	ldr	r3, [r3, #8]
 80089fa:	4618      	mov	r0, r3
 80089fc:	f000 ffc6 	bl	800998c <xTaskPriorityDisinherit>
 8008a00:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	2200      	movs	r2, #0
 8008a06:	609a      	str	r2, [r3, #8]
 8008a08:	e043      	b.n	8008a92 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d119      	bne.n	8008a44 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	6858      	ldr	r0, [r3, #4]
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a18:	461a      	mov	r2, r3
 8008a1a:	68b9      	ldr	r1, [r7, #8]
 8008a1c:	f00f f975 	bl	8017d0a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	685a      	ldr	r2, [r3, #4]
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a28:	441a      	add	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	685a      	ldr	r2, [r3, #4]
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	689b      	ldr	r3, [r3, #8]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d32b      	bcc.n	8008a92 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	681a      	ldr	r2, [r3, #0]
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	605a      	str	r2, [r3, #4]
 8008a42:	e026      	b.n	8008a92 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68d8      	ldr	r0, [r3, #12]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	f00f f95b 	bl	8017d0a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	68da      	ldr	r2, [r3, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a5c:	425b      	negs	r3, r3
 8008a5e:	441a      	add	r2, r3
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	68da      	ldr	r2, [r3, #12]
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d207      	bcs.n	8008a80 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689a      	ldr	r2, [r3, #8]
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a78:	425b      	negs	r3, r3
 8008a7a:	441a      	add	r2, r3
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2b02      	cmp	r3, #2
 8008a84:	d105      	bne.n	8008a92 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d002      	beq.n	8008a92 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008a92:	693b      	ldr	r3, [r7, #16]
 8008a94:	1c5a      	adds	r2, r3, #1
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008a9a:	697b      	ldr	r3, [r7, #20]
}
 8008a9c:	4618      	mov	r0, r3
 8008a9e:	3718      	adds	r7, #24
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	bd80      	pop	{r7, pc}

08008aa4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d018      	beq.n	8008ae8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008abe:	441a      	add	r2, r3
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	68da      	ldr	r2, [r3, #12]
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d303      	bcc.n	8008ad8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	68d9      	ldr	r1, [r3, #12]
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	6838      	ldr	r0, [r7, #0]
 8008ae4:	f00f f911 	bl	8017d0a <memcpy>
	}
}
 8008ae8:	bf00      	nop
 8008aea:	3708      	adds	r7, #8
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}

08008af0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008af0:	b580      	push	{r7, lr}
 8008af2:	b084      	sub	sp, #16
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008af8:	f001 fc96 	bl	800a428 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b02:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b04:	e011      	b.n	8008b2a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d012      	beq.n	8008b34 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3324      	adds	r3, #36	@ 0x24
 8008b12:	4618      	mov	r0, r3
 8008b14:	f000 fd34 	bl	8009580 <xTaskRemoveFromEventList>
 8008b18:	4603      	mov	r3, r0
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d001      	beq.n	8008b22 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008b1e:	f000 fe35 	bl	800978c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008b22:	7bfb      	ldrb	r3, [r7, #15]
 8008b24:	3b01      	subs	r3, #1
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008b2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	dce9      	bgt.n	8008b06 <prvUnlockQueue+0x16>
 8008b32:	e000      	b.n	8008b36 <prvUnlockQueue+0x46>
					break;
 8008b34:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	22ff      	movs	r2, #255	@ 0xff
 8008b3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008b3e:	f001 fca5 	bl	800a48c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008b42:	f001 fc71 	bl	800a428 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008b4c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b4e:	e011      	b.n	8008b74 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	691b      	ldr	r3, [r3, #16]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d012      	beq.n	8008b7e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	3310      	adds	r3, #16
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	f000 fd0f 	bl	8009580 <xTaskRemoveFromEventList>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008b68:	f000 fe10 	bl	800978c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008b6c:	7bbb      	ldrb	r3, [r7, #14]
 8008b6e:	3b01      	subs	r3, #1
 8008b70:	b2db      	uxtb	r3, r3
 8008b72:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008b74:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	dce9      	bgt.n	8008b50 <prvUnlockQueue+0x60>
 8008b7c:	e000      	b.n	8008b80 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008b7e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	22ff      	movs	r2, #255	@ 0xff
 8008b84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008b88:	f001 fc80 	bl	800a48c <vPortExitCritical>
}
 8008b8c:	bf00      	nop
 8008b8e:	3710      	adds	r7, #16
 8008b90:	46bd      	mov	sp, r7
 8008b92:	bd80      	pop	{r7, pc}

08008b94 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008b94:	b580      	push	{r7, lr}
 8008b96:	b084      	sub	sp, #16
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008b9c:	f001 fc44 	bl	800a428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d102      	bne.n	8008bae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008ba8:	2301      	movs	r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	e001      	b.n	8008bb2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008bb2:	f001 fc6b 	bl	800a48c <vPortExitCritical>

	return xReturn;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
}
 8008bb8:	4618      	mov	r0, r3
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}

08008bc0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b084      	sub	sp, #16
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008bc8:	f001 fc2e 	bl	800a428 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008bd4:	429a      	cmp	r2, r3
 8008bd6:	d102      	bne.n	8008bde <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008bd8:	2301      	movs	r3, #1
 8008bda:	60fb      	str	r3, [r7, #12]
 8008bdc:	e001      	b.n	8008be2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008bde:	2300      	movs	r3, #0
 8008be0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008be2:	f001 fc53 	bl	800a48c <vPortExitCritical>

	return xReturn;
 8008be6:	68fb      	ldr	r3, [r7, #12]
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	3710      	adds	r7, #16
 8008bec:	46bd      	mov	sp, r7
 8008bee:	bd80      	pop	{r7, pc}

08008bf0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	60fb      	str	r3, [r7, #12]
 8008bfe:	e014      	b.n	8008c2a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008c00:	4a0f      	ldr	r2, [pc, #60]	@ (8008c40 <vQueueAddToRegistry+0x50>)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d10b      	bne.n	8008c24 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008c0c:	490c      	ldr	r1, [pc, #48]	@ (8008c40 <vQueueAddToRegistry+0x50>)
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	683a      	ldr	r2, [r7, #0]
 8008c12:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008c16:	4a0a      	ldr	r2, [pc, #40]	@ (8008c40 <vQueueAddToRegistry+0x50>)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	00db      	lsls	r3, r3, #3
 8008c1c:	4413      	add	r3, r2
 8008c1e:	687a      	ldr	r2, [r7, #4]
 8008c20:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008c22:	e006      	b.n	8008c32 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	3301      	adds	r3, #1
 8008c28:	60fb      	str	r3, [r7, #12]
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	2b07      	cmp	r3, #7
 8008c2e:	d9e7      	bls.n	8008c00 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008c30:	bf00      	nop
 8008c32:	bf00      	nop
 8008c34:	3714      	adds	r7, #20
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr
 8008c3e:	bf00      	nop
 8008c40:	20005358 	.word	0x20005358

08008c44 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008c44:	b580      	push	{r7, lr}
 8008c46:	b086      	sub	sp, #24
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	60f8      	str	r0, [r7, #12]
 8008c4c:	60b9      	str	r1, [r7, #8]
 8008c4e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008c54:	f001 fbe8 	bl	800a428 <vPortEnterCritical>
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008c5e:	b25b      	sxtb	r3, r3
 8008c60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c64:	d103      	bne.n	8008c6e <vQueueWaitForMessageRestricted+0x2a>
 8008c66:	697b      	ldr	r3, [r7, #20]
 8008c68:	2200      	movs	r2, #0
 8008c6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008c74:	b25b      	sxtb	r3, r3
 8008c76:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008c7a:	d103      	bne.n	8008c84 <vQueueWaitForMessageRestricted+0x40>
 8008c7c:	697b      	ldr	r3, [r7, #20]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008c84:	f001 fc02 	bl	800a48c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008c88:	697b      	ldr	r3, [r7, #20]
 8008c8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d106      	bne.n	8008c9e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008c90:	697b      	ldr	r3, [r7, #20]
 8008c92:	3324      	adds	r3, #36	@ 0x24
 8008c94:	687a      	ldr	r2, [r7, #4]
 8008c96:	68b9      	ldr	r1, [r7, #8]
 8008c98:	4618      	mov	r0, r3
 8008c9a:	f000 fc45 	bl	8009528 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008c9e:	6978      	ldr	r0, [r7, #20]
 8008ca0:	f7ff ff26 	bl	8008af0 <prvUnlockQueue>
	}
 8008ca4:	bf00      	nop
 8008ca6:	3718      	adds	r7, #24
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b08e      	sub	sp, #56	@ 0x38
 8008cb0:	af04      	add	r7, sp, #16
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
 8008cb8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008cba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	623b      	str	r3, [r7, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d10b      	bne.n	8008cf6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008cde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ce2:	f383 8811 	msr	BASEPRI, r3
 8008ce6:	f3bf 8f6f 	isb	sy
 8008cea:	f3bf 8f4f 	dsb	sy
 8008cee:	61fb      	str	r3, [r7, #28]
}
 8008cf0:	bf00      	nop
 8008cf2:	bf00      	nop
 8008cf4:	e7fd      	b.n	8008cf2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008cf6:	235c      	movs	r3, #92	@ 0x5c
 8008cf8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	2b5c      	cmp	r3, #92	@ 0x5c
 8008cfe:	d00b      	beq.n	8008d18 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d04:	f383 8811 	msr	BASEPRI, r3
 8008d08:	f3bf 8f6f 	isb	sy
 8008d0c:	f3bf 8f4f 	dsb	sy
 8008d10:	61bb      	str	r3, [r7, #24]
}
 8008d12:	bf00      	nop
 8008d14:	bf00      	nop
 8008d16:	e7fd      	b.n	8008d14 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008d18:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d1c:	2b00      	cmp	r3, #0
 8008d1e:	d01e      	beq.n	8008d5e <xTaskCreateStatic+0xb2>
 8008d20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d01b      	beq.n	8008d5e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d28:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008d2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008d2e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008d30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d32:	2202      	movs	r2, #2
 8008d34:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9303      	str	r3, [sp, #12]
 8008d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d3e:	9302      	str	r3, [sp, #8]
 8008d40:	f107 0314 	add.w	r3, r7, #20
 8008d44:	9301      	str	r3, [sp, #4]
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	683b      	ldr	r3, [r7, #0]
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	68b9      	ldr	r1, [r7, #8]
 8008d50:	68f8      	ldr	r0, [r7, #12]
 8008d52:	f000 f850 	bl	8008df6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008d56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008d58:	f000 f8de 	bl	8008f18 <prvAddNewTaskToReadyList>
 8008d5c:	e001      	b.n	8008d62 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008d5e:	2300      	movs	r3, #0
 8008d60:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008d62:	697b      	ldr	r3, [r7, #20]
	}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3728      	adds	r7, #40	@ 0x28
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b08c      	sub	sp, #48	@ 0x30
 8008d70:	af04      	add	r7, sp, #16
 8008d72:	60f8      	str	r0, [r7, #12]
 8008d74:	60b9      	str	r1, [r7, #8]
 8008d76:	603b      	str	r3, [r7, #0]
 8008d78:	4613      	mov	r3, r2
 8008d7a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008d7c:	88fb      	ldrh	r3, [r7, #6]
 8008d7e:	009b      	lsls	r3, r3, #2
 8008d80:	4618      	mov	r0, r3
 8008d82:	f001 fc73 	bl	800a66c <pvPortMalloc>
 8008d86:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d00e      	beq.n	8008dac <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008d8e:	205c      	movs	r0, #92	@ 0x5c
 8008d90:	f001 fc6c 	bl	800a66c <pvPortMalloc>
 8008d94:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d003      	beq.n	8008da4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008d9c:	69fb      	ldr	r3, [r7, #28]
 8008d9e:	697a      	ldr	r2, [r7, #20]
 8008da0:	631a      	str	r2, [r3, #48]	@ 0x30
 8008da2:	e005      	b.n	8008db0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008da4:	6978      	ldr	r0, [r7, #20]
 8008da6:	f001 fd2f 	bl	800a808 <vPortFree>
 8008daa:	e001      	b.n	8008db0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008dac:	2300      	movs	r3, #0
 8008dae:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008db0:	69fb      	ldr	r3, [r7, #28]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d017      	beq.n	8008de6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008db6:	69fb      	ldr	r3, [r7, #28]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008dbe:	88fa      	ldrh	r2, [r7, #6]
 8008dc0:	2300      	movs	r3, #0
 8008dc2:	9303      	str	r3, [sp, #12]
 8008dc4:	69fb      	ldr	r3, [r7, #28]
 8008dc6:	9302      	str	r3, [sp, #8]
 8008dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dca:	9301      	str	r3, [sp, #4]
 8008dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dce:	9300      	str	r3, [sp, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	68b9      	ldr	r1, [r7, #8]
 8008dd4:	68f8      	ldr	r0, [r7, #12]
 8008dd6:	f000 f80e 	bl	8008df6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008dda:	69f8      	ldr	r0, [r7, #28]
 8008ddc:	f000 f89c 	bl	8008f18 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008de0:	2301      	movs	r3, #1
 8008de2:	61bb      	str	r3, [r7, #24]
 8008de4:	e002      	b.n	8008dec <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008de6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008dea:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008dec:	69bb      	ldr	r3, [r7, #24]
	}
 8008dee:	4618      	mov	r0, r3
 8008df0:	3720      	adds	r7, #32
 8008df2:	46bd      	mov	sp, r7
 8008df4:	bd80      	pop	{r7, pc}

08008df6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008df6:	b580      	push	{r7, lr}
 8008df8:	b088      	sub	sp, #32
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	60f8      	str	r0, [r7, #12]
 8008dfe:	60b9      	str	r1, [r7, #8]
 8008e00:	607a      	str	r2, [r7, #4]
 8008e02:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e06:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	009b      	lsls	r3, r3, #2
 8008e0c:	461a      	mov	r2, r3
 8008e0e:	21a5      	movs	r1, #165	@ 0xa5
 8008e10:	f00e feb2 	bl	8017b78 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e16:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008e1e:	3b01      	subs	r3, #1
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	f023 0307 	bic.w	r3, r3, #7
 8008e2c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e2e:	69bb      	ldr	r3, [r7, #24]
 8008e30:	f003 0307 	and.w	r3, r3, #7
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d00b      	beq.n	8008e50 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e3c:	f383 8811 	msr	BASEPRI, r3
 8008e40:	f3bf 8f6f 	isb	sy
 8008e44:	f3bf 8f4f 	dsb	sy
 8008e48:	617b      	str	r3, [r7, #20]
}
 8008e4a:	bf00      	nop
 8008e4c:	bf00      	nop
 8008e4e:	e7fd      	b.n	8008e4c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d01f      	beq.n	8008e96 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e56:	2300      	movs	r3, #0
 8008e58:	61fb      	str	r3, [r7, #28]
 8008e5a:	e012      	b.n	8008e82 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e5c:	68ba      	ldr	r2, [r7, #8]
 8008e5e:	69fb      	ldr	r3, [r7, #28]
 8008e60:	4413      	add	r3, r2
 8008e62:	7819      	ldrb	r1, [r3, #0]
 8008e64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008e66:	69fb      	ldr	r3, [r7, #28]
 8008e68:	4413      	add	r3, r2
 8008e6a:	3334      	adds	r3, #52	@ 0x34
 8008e6c:	460a      	mov	r2, r1
 8008e6e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e70:	68ba      	ldr	r2, [r7, #8]
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	4413      	add	r3, r2
 8008e76:	781b      	ldrb	r3, [r3, #0]
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d006      	beq.n	8008e8a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e7c:	69fb      	ldr	r3, [r7, #28]
 8008e7e:	3301      	adds	r3, #1
 8008e80:	61fb      	str	r3, [r7, #28]
 8008e82:	69fb      	ldr	r3, [r7, #28]
 8008e84:	2b0f      	cmp	r3, #15
 8008e86:	d9e9      	bls.n	8008e5c <prvInitialiseNewTask+0x66>
 8008e88:	e000      	b.n	8008e8c <prvInitialiseNewTask+0x96>
			{
				break;
 8008e8a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e8e:	2200      	movs	r2, #0
 8008e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008e94:	e003      	b.n	8008e9e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008e98:	2200      	movs	r2, #0
 8008e9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008e9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea0:	2b37      	cmp	r3, #55	@ 0x37
 8008ea2:	d901      	bls.n	8008ea8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008ea4:	2337      	movs	r3, #55	@ 0x37
 8008ea6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ea8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eaa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eac:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008eae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eb6:	2200      	movs	r2, #0
 8008eb8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008eba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ebc:	3304      	adds	r3, #4
 8008ebe:	4618      	mov	r0, r3
 8008ec0:	f7ff f966 	bl	8008190 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ec6:	3318      	adds	r3, #24
 8008ec8:	4618      	mov	r0, r3
 8008eca:	f7ff f961 	bl	8008190 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ed2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008edc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008ee2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ee6:	2200      	movs	r2, #0
 8008ee8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008eea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008eec:	2200      	movs	r2, #0
 8008eee:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008ef2:	683a      	ldr	r2, [r7, #0]
 8008ef4:	68f9      	ldr	r1, [r7, #12]
 8008ef6:	69b8      	ldr	r0, [r7, #24]
 8008ef8:	f001 f966 	bl	800a1c8 <pxPortInitialiseStack>
 8008efc:	4602      	mov	r2, r0
 8008efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008f00:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	d002      	beq.n	8008f0e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008f0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008f0c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f0e:	bf00      	nop
 8008f10:	3720      	adds	r7, #32
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	b082      	sub	sp, #8
 8008f1c:	af00      	add	r7, sp, #0
 8008f1e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f20:	f001 fa82 	bl	800a428 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f24:	4b2d      	ldr	r3, [pc, #180]	@ (8008fdc <prvAddNewTaskToReadyList+0xc4>)
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	3301      	adds	r3, #1
 8008f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8008fdc <prvAddNewTaskToReadyList+0xc4>)
 8008f2c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008f2e:	4b2c      	ldr	r3, [pc, #176]	@ (8008fe0 <prvAddNewTaskToReadyList+0xc8>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d109      	bne.n	8008f4a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f36:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe0 <prvAddNewTaskToReadyList+0xc8>)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f3c:	4b27      	ldr	r3, [pc, #156]	@ (8008fdc <prvAddNewTaskToReadyList+0xc4>)
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d110      	bne.n	8008f66 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f44:	f000 fc46 	bl	80097d4 <prvInitialiseTaskLists>
 8008f48:	e00d      	b.n	8008f66 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f4a:	4b26      	ldr	r3, [pc, #152]	@ (8008fe4 <prvAddNewTaskToReadyList+0xcc>)
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d109      	bne.n	8008f66 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f52:	4b23      	ldr	r3, [pc, #140]	@ (8008fe0 <prvAddNewTaskToReadyList+0xc8>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d802      	bhi.n	8008f66 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f60:	4a1f      	ldr	r2, [pc, #124]	@ (8008fe0 <prvAddNewTaskToReadyList+0xc8>)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f66:	4b20      	ldr	r3, [pc, #128]	@ (8008fe8 <prvAddNewTaskToReadyList+0xd0>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	3301      	adds	r3, #1
 8008f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8008fe8 <prvAddNewTaskToReadyList+0xd0>)
 8008f6e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008f70:	4b1d      	ldr	r3, [pc, #116]	@ (8008fe8 <prvAddNewTaskToReadyList+0xd0>)
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f7c:	4b1b      	ldr	r3, [pc, #108]	@ (8008fec <prvAddNewTaskToReadyList+0xd4>)
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	429a      	cmp	r2, r3
 8008f82:	d903      	bls.n	8008f8c <prvAddNewTaskToReadyList+0x74>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f88:	4a18      	ldr	r2, [pc, #96]	@ (8008fec <prvAddNewTaskToReadyList+0xd4>)
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f90:	4613      	mov	r3, r2
 8008f92:	009b      	lsls	r3, r3, #2
 8008f94:	4413      	add	r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	4a15      	ldr	r2, [pc, #84]	@ (8008ff0 <prvAddNewTaskToReadyList+0xd8>)
 8008f9a:	441a      	add	r2, r3
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	3304      	adds	r3, #4
 8008fa0:	4619      	mov	r1, r3
 8008fa2:	4610      	mov	r0, r2
 8008fa4:	f7ff f901 	bl	80081aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fa8:	f001 fa70 	bl	800a48c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fac:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <prvAddNewTaskToReadyList+0xcc>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d00e      	beq.n	8008fd2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fb4:	4b0a      	ldr	r3, [pc, #40]	@ (8008fe0 <prvAddNewTaskToReadyList+0xc8>)
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d207      	bcs.n	8008fd2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff4 <prvAddNewTaskToReadyList+0xdc>)
 8008fc4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008fc8:	601a      	str	r2, [r3, #0]
 8008fca:	f3bf 8f4f 	dsb	sy
 8008fce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fd2:	bf00      	nop
 8008fd4:	3708      	adds	r7, #8
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
 8008fda:	bf00      	nop
 8008fdc:	2000586c 	.word	0x2000586c
 8008fe0:	20005398 	.word	0x20005398
 8008fe4:	20005878 	.word	0x20005878
 8008fe8:	20005888 	.word	0x20005888
 8008fec:	20005874 	.word	0x20005874
 8008ff0:	2000539c 	.word	0x2000539c
 8008ff4:	e000ed04 	.word	0xe000ed04

08008ff8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	2b00      	cmp	r3, #0
 8009008:	d018      	beq.n	800903c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800900a:	4b14      	ldr	r3, [pc, #80]	@ (800905c <vTaskDelay+0x64>)
 800900c:	681b      	ldr	r3, [r3, #0]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d00b      	beq.n	800902a <vTaskDelay+0x32>
	__asm volatile
 8009012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009016:	f383 8811 	msr	BASEPRI, r3
 800901a:	f3bf 8f6f 	isb	sy
 800901e:	f3bf 8f4f 	dsb	sy
 8009022:	60bb      	str	r3, [r7, #8]
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop
 8009028:	e7fd      	b.n	8009026 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800902a:	f000 f883 	bl	8009134 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800902e:	2100      	movs	r1, #0
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fd1b 	bl	8009a6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009036:	f000 f88b 	bl	8009150 <xTaskResumeAll>
 800903a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800903c:	68fb      	ldr	r3, [r7, #12]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d107      	bne.n	8009052 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009042:	4b07      	ldr	r3, [pc, #28]	@ (8009060 <vTaskDelay+0x68>)
 8009044:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009048:	601a      	str	r2, [r3, #0]
 800904a:	f3bf 8f4f 	dsb	sy
 800904e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	20005894 	.word	0x20005894
 8009060:	e000ed04 	.word	0xe000ed04

08009064 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009064:	b580      	push	{r7, lr}
 8009066:	b08a      	sub	sp, #40	@ 0x28
 8009068:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800906a:	2300      	movs	r3, #0
 800906c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800906e:	2300      	movs	r3, #0
 8009070:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009072:	463a      	mov	r2, r7
 8009074:	1d39      	adds	r1, r7, #4
 8009076:	f107 0308 	add.w	r3, r7, #8
 800907a:	4618      	mov	r0, r3
 800907c:	f7ff f834 	bl	80080e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009080:	6839      	ldr	r1, [r7, #0]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68ba      	ldr	r2, [r7, #8]
 8009086:	9202      	str	r2, [sp, #8]
 8009088:	9301      	str	r3, [sp, #4]
 800908a:	2300      	movs	r3, #0
 800908c:	9300      	str	r3, [sp, #0]
 800908e:	2300      	movs	r3, #0
 8009090:	460a      	mov	r2, r1
 8009092:	4922      	ldr	r1, [pc, #136]	@ (800911c <vTaskStartScheduler+0xb8>)
 8009094:	4822      	ldr	r0, [pc, #136]	@ (8009120 <vTaskStartScheduler+0xbc>)
 8009096:	f7ff fe09 	bl	8008cac <xTaskCreateStatic>
 800909a:	4603      	mov	r3, r0
 800909c:	4a21      	ldr	r2, [pc, #132]	@ (8009124 <vTaskStartScheduler+0xc0>)
 800909e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80090a0:	4b20      	ldr	r3, [pc, #128]	@ (8009124 <vTaskStartScheduler+0xc0>)
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80090a8:	2301      	movs	r3, #1
 80090aa:	617b      	str	r3, [r7, #20]
 80090ac:	e001      	b.n	80090b2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80090ae:	2300      	movs	r3, #0
 80090b0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80090b2:	697b      	ldr	r3, [r7, #20]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d102      	bne.n	80090be <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80090b8:	f000 fd2c 	bl	8009b14 <xTimerCreateTimerTask>
 80090bc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80090be:	697b      	ldr	r3, [r7, #20]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d116      	bne.n	80090f2 <vTaskStartScheduler+0x8e>
	__asm volatile
 80090c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090c8:	f383 8811 	msr	BASEPRI, r3
 80090cc:	f3bf 8f6f 	isb	sy
 80090d0:	f3bf 8f4f 	dsb	sy
 80090d4:	613b      	str	r3, [r7, #16]
}
 80090d6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80090d8:	4b13      	ldr	r3, [pc, #76]	@ (8009128 <vTaskStartScheduler+0xc4>)
 80090da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80090de:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80090e0:	4b12      	ldr	r3, [pc, #72]	@ (800912c <vTaskStartScheduler+0xc8>)
 80090e2:	2201      	movs	r2, #1
 80090e4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80090e6:	4b12      	ldr	r3, [pc, #72]	@ (8009130 <vTaskStartScheduler+0xcc>)
 80090e8:	2200      	movs	r2, #0
 80090ea:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80090ec:	f001 f8f8 	bl	800a2e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80090f0:	e00f      	b.n	8009112 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80090f2:	697b      	ldr	r3, [r7, #20]
 80090f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090f8:	d10b      	bne.n	8009112 <vTaskStartScheduler+0xae>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	60fb      	str	r3, [r7, #12]
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	e7fd      	b.n	800910e <vTaskStartScheduler+0xaa>
}
 8009112:	bf00      	nop
 8009114:	3718      	adds	r7, #24
 8009116:	46bd      	mov	sp, r7
 8009118:	bd80      	pop	{r7, pc}
 800911a:	bf00      	nop
 800911c:	08018be8 	.word	0x08018be8
 8009120:	080097a5 	.word	0x080097a5
 8009124:	20005890 	.word	0x20005890
 8009128:	2000588c 	.word	0x2000588c
 800912c:	20005878 	.word	0x20005878
 8009130:	20005870 	.word	0x20005870

08009134 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009134:	b480      	push	{r7}
 8009136:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009138:	4b04      	ldr	r3, [pc, #16]	@ (800914c <vTaskSuspendAll+0x18>)
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	3301      	adds	r3, #1
 800913e:	4a03      	ldr	r2, [pc, #12]	@ (800914c <vTaskSuspendAll+0x18>)
 8009140:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009142:	bf00      	nop
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr
 800914c:	20005894 	.word	0x20005894

08009150 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009156:	2300      	movs	r3, #0
 8009158:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800915a:	2300      	movs	r3, #0
 800915c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800915e:	4b42      	ldr	r3, [pc, #264]	@ (8009268 <xTaskResumeAll+0x118>)
 8009160:	681b      	ldr	r3, [r3, #0]
 8009162:	2b00      	cmp	r3, #0
 8009164:	d10b      	bne.n	800917e <xTaskResumeAll+0x2e>
	__asm volatile
 8009166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800916a:	f383 8811 	msr	BASEPRI, r3
 800916e:	f3bf 8f6f 	isb	sy
 8009172:	f3bf 8f4f 	dsb	sy
 8009176:	603b      	str	r3, [r7, #0]
}
 8009178:	bf00      	nop
 800917a:	bf00      	nop
 800917c:	e7fd      	b.n	800917a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800917e:	f001 f953 	bl	800a428 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009182:	4b39      	ldr	r3, [pc, #228]	@ (8009268 <xTaskResumeAll+0x118>)
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	3b01      	subs	r3, #1
 8009188:	4a37      	ldr	r2, [pc, #220]	@ (8009268 <xTaskResumeAll+0x118>)
 800918a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800918c:	4b36      	ldr	r3, [pc, #216]	@ (8009268 <xTaskResumeAll+0x118>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d162      	bne.n	800925a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009194:	4b35      	ldr	r3, [pc, #212]	@ (800926c <xTaskResumeAll+0x11c>)
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d05e      	beq.n	800925a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800919c:	e02f      	b.n	80091fe <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800919e:	4b34      	ldr	r3, [pc, #208]	@ (8009270 <xTaskResumeAll+0x120>)
 80091a0:	68db      	ldr	r3, [r3, #12]
 80091a2:	68db      	ldr	r3, [r3, #12]
 80091a4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	3318      	adds	r3, #24
 80091aa:	4618      	mov	r0, r3
 80091ac:	f7ff f85a 	bl	8008264 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	3304      	adds	r3, #4
 80091b4:	4618      	mov	r0, r3
 80091b6:	f7ff f855 	bl	8008264 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091be:	4b2d      	ldr	r3, [pc, #180]	@ (8009274 <xTaskResumeAll+0x124>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	429a      	cmp	r2, r3
 80091c4:	d903      	bls.n	80091ce <xTaskResumeAll+0x7e>
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091ca:	4a2a      	ldr	r2, [pc, #168]	@ (8009274 <xTaskResumeAll+0x124>)
 80091cc:	6013      	str	r3, [r2, #0]
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091d2:	4613      	mov	r3, r2
 80091d4:	009b      	lsls	r3, r3, #2
 80091d6:	4413      	add	r3, r2
 80091d8:	009b      	lsls	r3, r3, #2
 80091da:	4a27      	ldr	r2, [pc, #156]	@ (8009278 <xTaskResumeAll+0x128>)
 80091dc:	441a      	add	r2, r3
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	3304      	adds	r3, #4
 80091e2:	4619      	mov	r1, r3
 80091e4:	4610      	mov	r0, r2
 80091e6:	f7fe ffe0 	bl	80081aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091ee:	4b23      	ldr	r3, [pc, #140]	@ (800927c <xTaskResumeAll+0x12c>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80091f4:	429a      	cmp	r2, r3
 80091f6:	d302      	bcc.n	80091fe <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80091f8:	4b21      	ldr	r3, [pc, #132]	@ (8009280 <xTaskResumeAll+0x130>)
 80091fa:	2201      	movs	r2, #1
 80091fc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80091fe:	4b1c      	ldr	r3, [pc, #112]	@ (8009270 <xTaskResumeAll+0x120>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d1cb      	bne.n	800919e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009206:	68fb      	ldr	r3, [r7, #12]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d001      	beq.n	8009210 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800920c:	f000 fb80 	bl	8009910 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009210:	4b1c      	ldr	r3, [pc, #112]	@ (8009284 <xTaskResumeAll+0x134>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d010      	beq.n	800923e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800921c:	f000 f846 	bl	80092ac <xTaskIncrementTick>
 8009220:	4603      	mov	r3, r0
 8009222:	2b00      	cmp	r3, #0
 8009224:	d002      	beq.n	800922c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009226:	4b16      	ldr	r3, [pc, #88]	@ (8009280 <xTaskResumeAll+0x130>)
 8009228:	2201      	movs	r2, #1
 800922a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	3b01      	subs	r3, #1
 8009230:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2b00      	cmp	r3, #0
 8009236:	d1f1      	bne.n	800921c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009238:	4b12      	ldr	r3, [pc, #72]	@ (8009284 <xTaskResumeAll+0x134>)
 800923a:	2200      	movs	r2, #0
 800923c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800923e:	4b10      	ldr	r3, [pc, #64]	@ (8009280 <xTaskResumeAll+0x130>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	2b00      	cmp	r3, #0
 8009244:	d009      	beq.n	800925a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009246:	2301      	movs	r3, #1
 8009248:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800924a:	4b0f      	ldr	r3, [pc, #60]	@ (8009288 <xTaskResumeAll+0x138>)
 800924c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	f3bf 8f4f 	dsb	sy
 8009256:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800925a:	f001 f917 	bl	800a48c <vPortExitCritical>

	return xAlreadyYielded;
 800925e:	68bb      	ldr	r3, [r7, #8]
}
 8009260:	4618      	mov	r0, r3
 8009262:	3710      	adds	r7, #16
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}
 8009268:	20005894 	.word	0x20005894
 800926c:	2000586c 	.word	0x2000586c
 8009270:	2000582c 	.word	0x2000582c
 8009274:	20005874 	.word	0x20005874
 8009278:	2000539c 	.word	0x2000539c
 800927c:	20005398 	.word	0x20005398
 8009280:	20005880 	.word	0x20005880
 8009284:	2000587c 	.word	0x2000587c
 8009288:	e000ed04 	.word	0xe000ed04

0800928c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800928c:	b480      	push	{r7}
 800928e:	b083      	sub	sp, #12
 8009290:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009292:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <xTaskGetTickCount+0x1c>)
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009298:	687b      	ldr	r3, [r7, #4]
}
 800929a:	4618      	mov	r0, r3
 800929c:	370c      	adds	r7, #12
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr
 80092a6:	bf00      	nop
 80092a8:	20005870 	.word	0x20005870

080092ac <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b086      	sub	sp, #24
 80092b0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80092b2:	2300      	movs	r3, #0
 80092b4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80092b6:	4b4f      	ldr	r3, [pc, #316]	@ (80093f4 <xTaskIncrementTick+0x148>)
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	f040 8090 	bne.w	80093e0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80092c0:	4b4d      	ldr	r3, [pc, #308]	@ (80093f8 <xTaskIncrementTick+0x14c>)
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	3301      	adds	r3, #1
 80092c6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80092c8:	4a4b      	ldr	r2, [pc, #300]	@ (80093f8 <xTaskIncrementTick+0x14c>)
 80092ca:	693b      	ldr	r3, [r7, #16]
 80092cc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d121      	bne.n	8009318 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80092d4:	4b49      	ldr	r3, [pc, #292]	@ (80093fc <xTaskIncrementTick+0x150>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d00b      	beq.n	80092f6 <xTaskIncrementTick+0x4a>
	__asm volatile
 80092de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092e2:	f383 8811 	msr	BASEPRI, r3
 80092e6:	f3bf 8f6f 	isb	sy
 80092ea:	f3bf 8f4f 	dsb	sy
 80092ee:	603b      	str	r3, [r7, #0]
}
 80092f0:	bf00      	nop
 80092f2:	bf00      	nop
 80092f4:	e7fd      	b.n	80092f2 <xTaskIncrementTick+0x46>
 80092f6:	4b41      	ldr	r3, [pc, #260]	@ (80093fc <xTaskIncrementTick+0x150>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	60fb      	str	r3, [r7, #12]
 80092fc:	4b40      	ldr	r3, [pc, #256]	@ (8009400 <xTaskIncrementTick+0x154>)
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a3e      	ldr	r2, [pc, #248]	@ (80093fc <xTaskIncrementTick+0x150>)
 8009302:	6013      	str	r3, [r2, #0]
 8009304:	4a3e      	ldr	r2, [pc, #248]	@ (8009400 <xTaskIncrementTick+0x154>)
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6013      	str	r3, [r2, #0]
 800930a:	4b3e      	ldr	r3, [pc, #248]	@ (8009404 <xTaskIncrementTick+0x158>)
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	3301      	adds	r3, #1
 8009310:	4a3c      	ldr	r2, [pc, #240]	@ (8009404 <xTaskIncrementTick+0x158>)
 8009312:	6013      	str	r3, [r2, #0]
 8009314:	f000 fafc 	bl	8009910 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009318:	4b3b      	ldr	r3, [pc, #236]	@ (8009408 <xTaskIncrementTick+0x15c>)
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	693a      	ldr	r2, [r7, #16]
 800931e:	429a      	cmp	r2, r3
 8009320:	d349      	bcc.n	80093b6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009322:	4b36      	ldr	r3, [pc, #216]	@ (80093fc <xTaskIncrementTick+0x150>)
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d104      	bne.n	8009336 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800932c:	4b36      	ldr	r3, [pc, #216]	@ (8009408 <xTaskIncrementTick+0x15c>)
 800932e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009332:	601a      	str	r2, [r3, #0]
					break;
 8009334:	e03f      	b.n	80093b6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009336:	4b31      	ldr	r3, [pc, #196]	@ (80093fc <xTaskIncrementTick+0x150>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	68db      	ldr	r3, [r3, #12]
 800933e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	685b      	ldr	r3, [r3, #4]
 8009344:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009346:	693a      	ldr	r2, [r7, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	429a      	cmp	r2, r3
 800934c:	d203      	bcs.n	8009356 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800934e:	4a2e      	ldr	r2, [pc, #184]	@ (8009408 <xTaskIncrementTick+0x15c>)
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009354:	e02f      	b.n	80093b6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009356:	68bb      	ldr	r3, [r7, #8]
 8009358:	3304      	adds	r3, #4
 800935a:	4618      	mov	r0, r3
 800935c:	f7fe ff82 	bl	8008264 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009364:	2b00      	cmp	r3, #0
 8009366:	d004      	beq.n	8009372 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	3318      	adds	r3, #24
 800936c:	4618      	mov	r0, r3
 800936e:	f7fe ff79 	bl	8008264 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009376:	4b25      	ldr	r3, [pc, #148]	@ (800940c <xTaskIncrementTick+0x160>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	429a      	cmp	r2, r3
 800937c:	d903      	bls.n	8009386 <xTaskIncrementTick+0xda>
 800937e:	68bb      	ldr	r3, [r7, #8]
 8009380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009382:	4a22      	ldr	r2, [pc, #136]	@ (800940c <xTaskIncrementTick+0x160>)
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800938a:	4613      	mov	r3, r2
 800938c:	009b      	lsls	r3, r3, #2
 800938e:	4413      	add	r3, r2
 8009390:	009b      	lsls	r3, r3, #2
 8009392:	4a1f      	ldr	r2, [pc, #124]	@ (8009410 <xTaskIncrementTick+0x164>)
 8009394:	441a      	add	r2, r3
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	3304      	adds	r3, #4
 800939a:	4619      	mov	r1, r3
 800939c:	4610      	mov	r0, r2
 800939e:	f7fe ff04 	bl	80081aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093a6:	4b1b      	ldr	r3, [pc, #108]	@ (8009414 <xTaskIncrementTick+0x168>)
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ac:	429a      	cmp	r2, r3
 80093ae:	d3b8      	bcc.n	8009322 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80093b0:	2301      	movs	r3, #1
 80093b2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80093b4:	e7b5      	b.n	8009322 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80093b6:	4b17      	ldr	r3, [pc, #92]	@ (8009414 <xTaskIncrementTick+0x168>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093bc:	4914      	ldr	r1, [pc, #80]	@ (8009410 <xTaskIncrementTick+0x164>)
 80093be:	4613      	mov	r3, r2
 80093c0:	009b      	lsls	r3, r3, #2
 80093c2:	4413      	add	r3, r2
 80093c4:	009b      	lsls	r3, r3, #2
 80093c6:	440b      	add	r3, r1
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d901      	bls.n	80093d2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80093ce:	2301      	movs	r3, #1
 80093d0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80093d2:	4b11      	ldr	r3, [pc, #68]	@ (8009418 <xTaskIncrementTick+0x16c>)
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d007      	beq.n	80093ea <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80093da:	2301      	movs	r3, #1
 80093dc:	617b      	str	r3, [r7, #20]
 80093de:	e004      	b.n	80093ea <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80093e0:	4b0e      	ldr	r3, [pc, #56]	@ (800941c <xTaskIncrementTick+0x170>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	3301      	adds	r3, #1
 80093e6:	4a0d      	ldr	r2, [pc, #52]	@ (800941c <xTaskIncrementTick+0x170>)
 80093e8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80093ea:	697b      	ldr	r3, [r7, #20]
}
 80093ec:	4618      	mov	r0, r3
 80093ee:	3718      	adds	r7, #24
 80093f0:	46bd      	mov	sp, r7
 80093f2:	bd80      	pop	{r7, pc}
 80093f4:	20005894 	.word	0x20005894
 80093f8:	20005870 	.word	0x20005870
 80093fc:	20005824 	.word	0x20005824
 8009400:	20005828 	.word	0x20005828
 8009404:	20005884 	.word	0x20005884
 8009408:	2000588c 	.word	0x2000588c
 800940c:	20005874 	.word	0x20005874
 8009410:	2000539c 	.word	0x2000539c
 8009414:	20005398 	.word	0x20005398
 8009418:	20005880 	.word	0x20005880
 800941c:	2000587c 	.word	0x2000587c

08009420 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009420:	b480      	push	{r7}
 8009422:	b085      	sub	sp, #20
 8009424:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009426:	4b28      	ldr	r3, [pc, #160]	@ (80094c8 <vTaskSwitchContext+0xa8>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	2b00      	cmp	r3, #0
 800942c:	d003      	beq.n	8009436 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800942e:	4b27      	ldr	r3, [pc, #156]	@ (80094cc <vTaskSwitchContext+0xac>)
 8009430:	2201      	movs	r2, #1
 8009432:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009434:	e042      	b.n	80094bc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8009436:	4b25      	ldr	r3, [pc, #148]	@ (80094cc <vTaskSwitchContext+0xac>)
 8009438:	2200      	movs	r2, #0
 800943a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800943c:	4b24      	ldr	r3, [pc, #144]	@ (80094d0 <vTaskSwitchContext+0xb0>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	60fb      	str	r3, [r7, #12]
 8009442:	e011      	b.n	8009468 <vTaskSwitchContext+0x48>
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d10b      	bne.n	8009462 <vTaskSwitchContext+0x42>
	__asm volatile
 800944a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800944e:	f383 8811 	msr	BASEPRI, r3
 8009452:	f3bf 8f6f 	isb	sy
 8009456:	f3bf 8f4f 	dsb	sy
 800945a:	607b      	str	r3, [r7, #4]
}
 800945c:	bf00      	nop
 800945e:	bf00      	nop
 8009460:	e7fd      	b.n	800945e <vTaskSwitchContext+0x3e>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3b01      	subs	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]
 8009468:	491a      	ldr	r1, [pc, #104]	@ (80094d4 <vTaskSwitchContext+0xb4>)
 800946a:	68fa      	ldr	r2, [r7, #12]
 800946c:	4613      	mov	r3, r2
 800946e:	009b      	lsls	r3, r3, #2
 8009470:	4413      	add	r3, r2
 8009472:	009b      	lsls	r3, r3, #2
 8009474:	440b      	add	r3, r1
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d0e3      	beq.n	8009444 <vTaskSwitchContext+0x24>
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	4613      	mov	r3, r2
 8009480:	009b      	lsls	r3, r3, #2
 8009482:	4413      	add	r3, r2
 8009484:	009b      	lsls	r3, r3, #2
 8009486:	4a13      	ldr	r2, [pc, #76]	@ (80094d4 <vTaskSwitchContext+0xb4>)
 8009488:	4413      	add	r3, r2
 800948a:	60bb      	str	r3, [r7, #8]
 800948c:	68bb      	ldr	r3, [r7, #8]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	685a      	ldr	r2, [r3, #4]
 8009492:	68bb      	ldr	r3, [r7, #8]
 8009494:	605a      	str	r2, [r3, #4]
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	685a      	ldr	r2, [r3, #4]
 800949a:	68bb      	ldr	r3, [r7, #8]
 800949c:	3308      	adds	r3, #8
 800949e:	429a      	cmp	r2, r3
 80094a0:	d104      	bne.n	80094ac <vTaskSwitchContext+0x8c>
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	605a      	str	r2, [r3, #4]
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	685b      	ldr	r3, [r3, #4]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	4a09      	ldr	r2, [pc, #36]	@ (80094d8 <vTaskSwitchContext+0xb8>)
 80094b4:	6013      	str	r3, [r2, #0]
 80094b6:	4a06      	ldr	r2, [pc, #24]	@ (80094d0 <vTaskSwitchContext+0xb0>)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	6013      	str	r3, [r2, #0]
}
 80094bc:	bf00      	nop
 80094be:	3714      	adds	r7, #20
 80094c0:	46bd      	mov	sp, r7
 80094c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c6:	4770      	bx	lr
 80094c8:	20005894 	.word	0x20005894
 80094cc:	20005880 	.word	0x20005880
 80094d0:	20005874 	.word	0x20005874
 80094d4:	2000539c 	.word	0x2000539c
 80094d8:	20005398 	.word	0x20005398

080094dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d10b      	bne.n	8009504 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80094ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80094f0:	f383 8811 	msr	BASEPRI, r3
 80094f4:	f3bf 8f6f 	isb	sy
 80094f8:	f3bf 8f4f 	dsb	sy
 80094fc:	60fb      	str	r3, [r7, #12]
}
 80094fe:	bf00      	nop
 8009500:	bf00      	nop
 8009502:	e7fd      	b.n	8009500 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009504:	4b07      	ldr	r3, [pc, #28]	@ (8009524 <vTaskPlaceOnEventList+0x48>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	3318      	adds	r3, #24
 800950a:	4619      	mov	r1, r3
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	f7fe fe70 	bl	80081f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009512:	2101      	movs	r1, #1
 8009514:	6838      	ldr	r0, [r7, #0]
 8009516:	f000 faa9 	bl	8009a6c <prvAddCurrentTaskToDelayedList>
}
 800951a:	bf00      	nop
 800951c:	3710      	adds	r7, #16
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	20005398 	.word	0x20005398

08009528 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009528:	b580      	push	{r7, lr}
 800952a:	b086      	sub	sp, #24
 800952c:	af00      	add	r7, sp, #0
 800952e:	60f8      	str	r0, [r7, #12]
 8009530:	60b9      	str	r1, [r7, #8]
 8009532:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d10b      	bne.n	8009552 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800953a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800953e:	f383 8811 	msr	BASEPRI, r3
 8009542:	f3bf 8f6f 	isb	sy
 8009546:	f3bf 8f4f 	dsb	sy
 800954a:	617b      	str	r3, [r7, #20]
}
 800954c:	bf00      	nop
 800954e:	bf00      	nop
 8009550:	e7fd      	b.n	800954e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009552:	4b0a      	ldr	r3, [pc, #40]	@ (800957c <vTaskPlaceOnEventListRestricted+0x54>)
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	3318      	adds	r3, #24
 8009558:	4619      	mov	r1, r3
 800955a:	68f8      	ldr	r0, [r7, #12]
 800955c:	f7fe fe25 	bl	80081aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d002      	beq.n	800956c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8009566:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800956a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800956c:	6879      	ldr	r1, [r7, #4]
 800956e:	68b8      	ldr	r0, [r7, #8]
 8009570:	f000 fa7c 	bl	8009a6c <prvAddCurrentTaskToDelayedList>
	}
 8009574:	bf00      	nop
 8009576:	3718      	adds	r7, #24
 8009578:	46bd      	mov	sp, r7
 800957a:	bd80      	pop	{r7, pc}
 800957c:	20005398 	.word	0x20005398

08009580 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b086      	sub	sp, #24
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	68db      	ldr	r3, [r3, #12]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009590:	693b      	ldr	r3, [r7, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d10b      	bne.n	80095ae <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8009596:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959a:	f383 8811 	msr	BASEPRI, r3
 800959e:	f3bf 8f6f 	isb	sy
 80095a2:	f3bf 8f4f 	dsb	sy
 80095a6:	60fb      	str	r3, [r7, #12]
}
 80095a8:	bf00      	nop
 80095aa:	bf00      	nop
 80095ac:	e7fd      	b.n	80095aa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80095ae:	693b      	ldr	r3, [r7, #16]
 80095b0:	3318      	adds	r3, #24
 80095b2:	4618      	mov	r0, r3
 80095b4:	f7fe fe56 	bl	8008264 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80095b8:	4b1d      	ldr	r3, [pc, #116]	@ (8009630 <xTaskRemoveFromEventList+0xb0>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d11d      	bne.n	80095fc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	3304      	adds	r3, #4
 80095c4:	4618      	mov	r0, r3
 80095c6:	f7fe fe4d 	bl	8008264 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80095ca:	693b      	ldr	r3, [r7, #16]
 80095cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095ce:	4b19      	ldr	r3, [pc, #100]	@ (8009634 <xTaskRemoveFromEventList+0xb4>)
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	429a      	cmp	r2, r3
 80095d4:	d903      	bls.n	80095de <xTaskRemoveFromEventList+0x5e>
 80095d6:	693b      	ldr	r3, [r7, #16]
 80095d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095da:	4a16      	ldr	r2, [pc, #88]	@ (8009634 <xTaskRemoveFromEventList+0xb4>)
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	693b      	ldr	r3, [r7, #16]
 80095e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e2:	4613      	mov	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	4413      	add	r3, r2
 80095e8:	009b      	lsls	r3, r3, #2
 80095ea:	4a13      	ldr	r2, [pc, #76]	@ (8009638 <xTaskRemoveFromEventList+0xb8>)
 80095ec:	441a      	add	r2, r3
 80095ee:	693b      	ldr	r3, [r7, #16]
 80095f0:	3304      	adds	r3, #4
 80095f2:	4619      	mov	r1, r3
 80095f4:	4610      	mov	r0, r2
 80095f6:	f7fe fdd8 	bl	80081aa <vListInsertEnd>
 80095fa:	e005      	b.n	8009608 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80095fc:	693b      	ldr	r3, [r7, #16]
 80095fe:	3318      	adds	r3, #24
 8009600:	4619      	mov	r1, r3
 8009602:	480e      	ldr	r0, [pc, #56]	@ (800963c <xTaskRemoveFromEventList+0xbc>)
 8009604:	f7fe fdd1 	bl	80081aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009608:	693b      	ldr	r3, [r7, #16]
 800960a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800960c:	4b0c      	ldr	r3, [pc, #48]	@ (8009640 <xTaskRemoveFromEventList+0xc0>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009612:	429a      	cmp	r2, r3
 8009614:	d905      	bls.n	8009622 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009616:	2301      	movs	r3, #1
 8009618:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800961a:	4b0a      	ldr	r3, [pc, #40]	@ (8009644 <xTaskRemoveFromEventList+0xc4>)
 800961c:	2201      	movs	r2, #1
 800961e:	601a      	str	r2, [r3, #0]
 8009620:	e001      	b.n	8009626 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009622:	2300      	movs	r3, #0
 8009624:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8009626:	697b      	ldr	r3, [r7, #20]
}
 8009628:	4618      	mov	r0, r3
 800962a:	3718      	adds	r7, #24
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}
 8009630:	20005894 	.word	0x20005894
 8009634:	20005874 	.word	0x20005874
 8009638:	2000539c 	.word	0x2000539c
 800963c:	2000582c 	.word	0x2000582c
 8009640:	20005398 	.word	0x20005398
 8009644:	20005880 	.word	0x20005880

08009648 <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b084      	sub	sp, #16
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d10b      	bne.n	800966e <vTaskSetTimeOutState+0x26>
	__asm volatile
 8009656:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800965a:	f383 8811 	msr	BASEPRI, r3
 800965e:	f3bf 8f6f 	isb	sy
 8009662:	f3bf 8f4f 	dsb	sy
 8009666:	60fb      	str	r3, [r7, #12]
}
 8009668:	bf00      	nop
 800966a:	bf00      	nop
 800966c:	e7fd      	b.n	800966a <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 800966e:	f000 fedb 	bl	800a428 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009672:	4b07      	ldr	r3, [pc, #28]	@ (8009690 <vTaskSetTimeOutState+0x48>)
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 800967a:	4b06      	ldr	r3, [pc, #24]	@ (8009694 <vTaskSetTimeOutState+0x4c>)
 800967c:	681a      	ldr	r2, [r3, #0]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8009682:	f000 ff03 	bl	800a48c <vPortExitCritical>
}
 8009686:	bf00      	nop
 8009688:	3710      	adds	r7, #16
 800968a:	46bd      	mov	sp, r7
 800968c:	bd80      	pop	{r7, pc}
 800968e:	bf00      	nop
 8009690:	20005884 	.word	0x20005884
 8009694:	20005870 	.word	0x20005870

08009698 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009698:	b480      	push	{r7}
 800969a:	b083      	sub	sp, #12
 800969c:	af00      	add	r7, sp, #0
 800969e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80096a0:	4b06      	ldr	r3, [pc, #24]	@ (80096bc <vTaskInternalSetTimeOutState+0x24>)
 80096a2:	681a      	ldr	r2, [r3, #0]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80096a8:	4b05      	ldr	r3, [pc, #20]	@ (80096c0 <vTaskInternalSetTimeOutState+0x28>)
 80096aa:	681a      	ldr	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	605a      	str	r2, [r3, #4]
}
 80096b0:	bf00      	nop
 80096b2:	370c      	adds	r7, #12
 80096b4:	46bd      	mov	sp, r7
 80096b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ba:	4770      	bx	lr
 80096bc:	20005884 	.word	0x20005884
 80096c0:	20005870 	.word	0x20005870

080096c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80096c4:	b580      	push	{r7, lr}
 80096c6:	b088      	sub	sp, #32
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d10b      	bne.n	80096ec <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80096d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096d8:	f383 8811 	msr	BASEPRI, r3
 80096dc:	f3bf 8f6f 	isb	sy
 80096e0:	f3bf 8f4f 	dsb	sy
 80096e4:	613b      	str	r3, [r7, #16]
}
 80096e6:	bf00      	nop
 80096e8:	bf00      	nop
 80096ea:	e7fd      	b.n	80096e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d10b      	bne.n	800970a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80096f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f6:	f383 8811 	msr	BASEPRI, r3
 80096fa:	f3bf 8f6f 	isb	sy
 80096fe:	f3bf 8f4f 	dsb	sy
 8009702:	60fb      	str	r3, [r7, #12]
}
 8009704:	bf00      	nop
 8009706:	bf00      	nop
 8009708:	e7fd      	b.n	8009706 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800970a:	f000 fe8d 	bl	800a428 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800970e:	4b1d      	ldr	r3, [pc, #116]	@ (8009784 <xTaskCheckForTimeOut+0xc0>)
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	69ba      	ldr	r2, [r7, #24]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800971e:	683b      	ldr	r3, [r7, #0]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009726:	d102      	bne.n	800972e <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009728:	2300      	movs	r3, #0
 800972a:	61fb      	str	r3, [r7, #28]
 800972c:	e023      	b.n	8009776 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	4b15      	ldr	r3, [pc, #84]	@ (8009788 <xTaskCheckForTimeOut+0xc4>)
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	429a      	cmp	r2, r3
 8009738:	d007      	beq.n	800974a <xTaskCheckForTimeOut+0x86>
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	685b      	ldr	r3, [r3, #4]
 800973e:	69ba      	ldr	r2, [r7, #24]
 8009740:	429a      	cmp	r2, r3
 8009742:	d302      	bcc.n	800974a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009744:	2301      	movs	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e015      	b.n	8009776 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	697a      	ldr	r2, [r7, #20]
 8009750:	429a      	cmp	r2, r3
 8009752:	d20b      	bcs.n	800976c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	1ad2      	subs	r2, r2, r3
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f7ff ff99 	bl	8009698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	61fb      	str	r3, [r7, #28]
 800976a:	e004      	b.n	8009776 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800976c:	683b      	ldr	r3, [r7, #0]
 800976e:	2200      	movs	r2, #0
 8009770:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009772:	2301      	movs	r3, #1
 8009774:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8009776:	f000 fe89 	bl	800a48c <vPortExitCritical>

	return xReturn;
 800977a:	69fb      	ldr	r3, [r7, #28]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3720      	adds	r7, #32
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	20005870 	.word	0x20005870
 8009788:	20005884 	.word	0x20005884

0800978c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800978c:	b480      	push	{r7}
 800978e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009790:	4b03      	ldr	r3, [pc, #12]	@ (80097a0 <vTaskMissedYield+0x14>)
 8009792:	2201      	movs	r2, #1
 8009794:	601a      	str	r2, [r3, #0]
}
 8009796:	bf00      	nop
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr
 80097a0:	20005880 	.word	0x20005880

080097a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80097a4:	b580      	push	{r7, lr}
 80097a6:	b082      	sub	sp, #8
 80097a8:	af00      	add	r7, sp, #0
 80097aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80097ac:	f000 f852 	bl	8009854 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80097b0:	4b06      	ldr	r3, [pc, #24]	@ (80097cc <prvIdleTask+0x28>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	2b01      	cmp	r3, #1
 80097b6:	d9f9      	bls.n	80097ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80097b8:	4b05      	ldr	r3, [pc, #20]	@ (80097d0 <prvIdleTask+0x2c>)
 80097ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80097be:	601a      	str	r2, [r3, #0]
 80097c0:	f3bf 8f4f 	dsb	sy
 80097c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80097c8:	e7f0      	b.n	80097ac <prvIdleTask+0x8>
 80097ca:	bf00      	nop
 80097cc:	2000539c 	.word	0x2000539c
 80097d0:	e000ed04 	.word	0xe000ed04

080097d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b082      	sub	sp, #8
 80097d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097da:	2300      	movs	r3, #0
 80097dc:	607b      	str	r3, [r7, #4]
 80097de:	e00c      	b.n	80097fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4613      	mov	r3, r2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	4413      	add	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4a12      	ldr	r2, [pc, #72]	@ (8009834 <prvInitialiseTaskLists+0x60>)
 80097ec:	4413      	add	r3, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f7fe fcae 	bl	8008150 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	3301      	adds	r3, #1
 80097f8:	607b      	str	r3, [r7, #4]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2b37      	cmp	r3, #55	@ 0x37
 80097fe:	d9ef      	bls.n	80097e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009800:	480d      	ldr	r0, [pc, #52]	@ (8009838 <prvInitialiseTaskLists+0x64>)
 8009802:	f7fe fca5 	bl	8008150 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009806:	480d      	ldr	r0, [pc, #52]	@ (800983c <prvInitialiseTaskLists+0x68>)
 8009808:	f7fe fca2 	bl	8008150 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800980c:	480c      	ldr	r0, [pc, #48]	@ (8009840 <prvInitialiseTaskLists+0x6c>)
 800980e:	f7fe fc9f 	bl	8008150 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009812:	480c      	ldr	r0, [pc, #48]	@ (8009844 <prvInitialiseTaskLists+0x70>)
 8009814:	f7fe fc9c 	bl	8008150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009818:	480b      	ldr	r0, [pc, #44]	@ (8009848 <prvInitialiseTaskLists+0x74>)
 800981a:	f7fe fc99 	bl	8008150 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800981e:	4b0b      	ldr	r3, [pc, #44]	@ (800984c <prvInitialiseTaskLists+0x78>)
 8009820:	4a05      	ldr	r2, [pc, #20]	@ (8009838 <prvInitialiseTaskLists+0x64>)
 8009822:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009824:	4b0a      	ldr	r3, [pc, #40]	@ (8009850 <prvInitialiseTaskLists+0x7c>)
 8009826:	4a05      	ldr	r2, [pc, #20]	@ (800983c <prvInitialiseTaskLists+0x68>)
 8009828:	601a      	str	r2, [r3, #0]
}
 800982a:	bf00      	nop
 800982c:	3708      	adds	r7, #8
 800982e:	46bd      	mov	sp, r7
 8009830:	bd80      	pop	{r7, pc}
 8009832:	bf00      	nop
 8009834:	2000539c 	.word	0x2000539c
 8009838:	200057fc 	.word	0x200057fc
 800983c:	20005810 	.word	0x20005810
 8009840:	2000582c 	.word	0x2000582c
 8009844:	20005840 	.word	0x20005840
 8009848:	20005858 	.word	0x20005858
 800984c:	20005824 	.word	0x20005824
 8009850:	20005828 	.word	0x20005828

08009854 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009854:	b580      	push	{r7, lr}
 8009856:	b082      	sub	sp, #8
 8009858:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800985a:	e019      	b.n	8009890 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800985c:	f000 fde4 	bl	800a428 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009860:	4b10      	ldr	r3, [pc, #64]	@ (80098a4 <prvCheckTasksWaitingTermination+0x50>)
 8009862:	68db      	ldr	r3, [r3, #12]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	3304      	adds	r3, #4
 800986c:	4618      	mov	r0, r3
 800986e:	f7fe fcf9 	bl	8008264 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009872:	4b0d      	ldr	r3, [pc, #52]	@ (80098a8 <prvCheckTasksWaitingTermination+0x54>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3b01      	subs	r3, #1
 8009878:	4a0b      	ldr	r2, [pc, #44]	@ (80098a8 <prvCheckTasksWaitingTermination+0x54>)
 800987a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800987c:	4b0b      	ldr	r3, [pc, #44]	@ (80098ac <prvCheckTasksWaitingTermination+0x58>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	3b01      	subs	r3, #1
 8009882:	4a0a      	ldr	r2, [pc, #40]	@ (80098ac <prvCheckTasksWaitingTermination+0x58>)
 8009884:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009886:	f000 fe01 	bl	800a48c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	f000 f810 	bl	80098b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009890:	4b06      	ldr	r3, [pc, #24]	@ (80098ac <prvCheckTasksWaitingTermination+0x58>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	2b00      	cmp	r3, #0
 8009896:	d1e1      	bne.n	800985c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009898:	bf00      	nop
 800989a:	bf00      	nop
 800989c:	3708      	adds	r7, #8
 800989e:	46bd      	mov	sp, r7
 80098a0:	bd80      	pop	{r7, pc}
 80098a2:	bf00      	nop
 80098a4:	20005840 	.word	0x20005840
 80098a8:	2000586c 	.word	0x2000586c
 80098ac:	20005854 	.word	0x20005854

080098b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b084      	sub	sp, #16
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d108      	bne.n	80098d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 ff9e 	bl	800a808 <vPortFree>
				vPortFree( pxTCB );
 80098cc:	6878      	ldr	r0, [r7, #4]
 80098ce:	f000 ff9b 	bl	800a808 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80098d2:	e019      	b.n	8009908 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098da:	2b01      	cmp	r3, #1
 80098dc:	d103      	bne.n	80098e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80098de:	6878      	ldr	r0, [r7, #4]
 80098e0:	f000 ff92 	bl	800a808 <vPortFree>
	}
 80098e4:	e010      	b.n	8009908 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80098ec:	2b02      	cmp	r3, #2
 80098ee:	d00b      	beq.n	8009908 <prvDeleteTCB+0x58>
	__asm volatile
 80098f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098f4:	f383 8811 	msr	BASEPRI, r3
 80098f8:	f3bf 8f6f 	isb	sy
 80098fc:	f3bf 8f4f 	dsb	sy
 8009900:	60fb      	str	r3, [r7, #12]
}
 8009902:	bf00      	nop
 8009904:	bf00      	nop
 8009906:	e7fd      	b.n	8009904 <prvDeleteTCB+0x54>
	}
 8009908:	bf00      	nop
 800990a:	3710      	adds	r7, #16
 800990c:	46bd      	mov	sp, r7
 800990e:	bd80      	pop	{r7, pc}

08009910 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009910:	b480      	push	{r7}
 8009912:	b083      	sub	sp, #12
 8009914:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009916:	4b0c      	ldr	r3, [pc, #48]	@ (8009948 <prvResetNextTaskUnblockTime+0x38>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d104      	bne.n	800992a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009920:	4b0a      	ldr	r3, [pc, #40]	@ (800994c <prvResetNextTaskUnblockTime+0x3c>)
 8009922:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009926:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009928:	e008      	b.n	800993c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800992a:	4b07      	ldr	r3, [pc, #28]	@ (8009948 <prvResetNextTaskUnblockTime+0x38>)
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	68db      	ldr	r3, [r3, #12]
 8009930:	68db      	ldr	r3, [r3, #12]
 8009932:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	685b      	ldr	r3, [r3, #4]
 8009938:	4a04      	ldr	r2, [pc, #16]	@ (800994c <prvResetNextTaskUnblockTime+0x3c>)
 800993a:	6013      	str	r3, [r2, #0]
}
 800993c:	bf00      	nop
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20005824 	.word	0x20005824
 800994c:	2000588c 	.word	0x2000588c

08009950 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009950:	b480      	push	{r7}
 8009952:	b083      	sub	sp, #12
 8009954:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009956:	4b0b      	ldr	r3, [pc, #44]	@ (8009984 <xTaskGetSchedulerState+0x34>)
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d102      	bne.n	8009964 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800995e:	2301      	movs	r3, #1
 8009960:	607b      	str	r3, [r7, #4]
 8009962:	e008      	b.n	8009976 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009964:	4b08      	ldr	r3, [pc, #32]	@ (8009988 <xTaskGetSchedulerState+0x38>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d102      	bne.n	8009972 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800996c:	2302      	movs	r3, #2
 800996e:	607b      	str	r3, [r7, #4]
 8009970:	e001      	b.n	8009976 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009972:	2300      	movs	r3, #0
 8009974:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009976:	687b      	ldr	r3, [r7, #4]
	}
 8009978:	4618      	mov	r0, r3
 800997a:	370c      	adds	r7, #12
 800997c:	46bd      	mov	sp, r7
 800997e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009982:	4770      	bx	lr
 8009984:	20005878 	.word	0x20005878
 8009988:	20005894 	.word	0x20005894

0800998c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009998:	2300      	movs	r3, #0
 800999a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2b00      	cmp	r3, #0
 80099a0:	d058      	beq.n	8009a54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80099a2:	4b2f      	ldr	r3, [pc, #188]	@ (8009a60 <xTaskPriorityDisinherit+0xd4>)
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	693a      	ldr	r2, [r7, #16]
 80099a8:	429a      	cmp	r2, r3
 80099aa:	d00b      	beq.n	80099c4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80099ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099b0:	f383 8811 	msr	BASEPRI, r3
 80099b4:	f3bf 8f6f 	isb	sy
 80099b8:	f3bf 8f4f 	dsb	sy
 80099bc:	60fb      	str	r3, [r7, #12]
}
 80099be:	bf00      	nop
 80099c0:	bf00      	nop
 80099c2:	e7fd      	b.n	80099c0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80099c4:	693b      	ldr	r3, [r7, #16]
 80099c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d10b      	bne.n	80099e4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80099cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80099d0:	f383 8811 	msr	BASEPRI, r3
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	f3bf 8f4f 	dsb	sy
 80099dc:	60bb      	str	r3, [r7, #8]
}
 80099de:	bf00      	nop
 80099e0:	bf00      	nop
 80099e2:	e7fd      	b.n	80099e0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80099e4:	693b      	ldr	r3, [r7, #16]
 80099e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099e8:	1e5a      	subs	r2, r3, #1
 80099ea:	693b      	ldr	r3, [r7, #16]
 80099ec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80099f2:	693b      	ldr	r3, [r7, #16]
 80099f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80099f6:	429a      	cmp	r2, r3
 80099f8:	d02c      	beq.n	8009a54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099fa:	693b      	ldr	r3, [r7, #16]
 80099fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d128      	bne.n	8009a54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	3304      	adds	r3, #4
 8009a06:	4618      	mov	r0, r3
 8009a08:	f7fe fc2c 	bl	8008264 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009a0c:	693b      	ldr	r3, [r7, #16]
 8009a0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009a10:	693b      	ldr	r3, [r7, #16]
 8009a12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009a1c:	693b      	ldr	r3, [r7, #16]
 8009a1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009a20:	693b      	ldr	r3, [r7, #16]
 8009a22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a24:	4b0f      	ldr	r3, [pc, #60]	@ (8009a64 <xTaskPriorityDisinherit+0xd8>)
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d903      	bls.n	8009a34 <xTaskPriorityDisinherit+0xa8>
 8009a2c:	693b      	ldr	r3, [r7, #16]
 8009a2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a30:	4a0c      	ldr	r2, [pc, #48]	@ (8009a64 <xTaskPriorityDisinherit+0xd8>)
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009a38:	4613      	mov	r3, r2
 8009a3a:	009b      	lsls	r3, r3, #2
 8009a3c:	4413      	add	r3, r2
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4a09      	ldr	r2, [pc, #36]	@ (8009a68 <xTaskPriorityDisinherit+0xdc>)
 8009a42:	441a      	add	r2, r3
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	3304      	adds	r3, #4
 8009a48:	4619      	mov	r1, r3
 8009a4a:	4610      	mov	r0, r2
 8009a4c:	f7fe fbad 	bl	80081aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a50:	2301      	movs	r3, #1
 8009a52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a54:	697b      	ldr	r3, [r7, #20]
	}
 8009a56:	4618      	mov	r0, r3
 8009a58:	3718      	adds	r7, #24
 8009a5a:	46bd      	mov	sp, r7
 8009a5c:	bd80      	pop	{r7, pc}
 8009a5e:	bf00      	nop
 8009a60:	20005398 	.word	0x20005398
 8009a64:	20005874 	.word	0x20005874
 8009a68:	2000539c 	.word	0x2000539c

08009a6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b084      	sub	sp, #16
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
 8009a74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a76:	4b21      	ldr	r3, [pc, #132]	@ (8009afc <prvAddCurrentTaskToDelayedList+0x90>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a7c:	4b20      	ldr	r3, [pc, #128]	@ (8009b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3304      	adds	r3, #4
 8009a82:	4618      	mov	r0, r3
 8009a84:	f7fe fbee 	bl	8008264 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009a8e:	d10a      	bne.n	8009aa6 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d007      	beq.n	8009aa6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a96:	4b1a      	ldr	r3, [pc, #104]	@ (8009b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4819      	ldr	r0, [pc, #100]	@ (8009b04 <prvAddCurrentTaskToDelayedList+0x98>)
 8009aa0:	f7fe fb83 	bl	80081aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009aa4:	e026      	b.n	8009af4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009aa6:	68fa      	ldr	r2, [r7, #12]
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4413      	add	r3, r2
 8009aac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009aae:	4b14      	ldr	r3, [pc, #80]	@ (8009b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	68ba      	ldr	r2, [r7, #8]
 8009ab4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009ab6:	68ba      	ldr	r2, [r7, #8]
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	429a      	cmp	r2, r3
 8009abc:	d209      	bcs.n	8009ad2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009abe:	4b12      	ldr	r3, [pc, #72]	@ (8009b08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009ac0:	681a      	ldr	r2, [r3, #0]
 8009ac2:	4b0f      	ldr	r3, [pc, #60]	@ (8009b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	3304      	adds	r3, #4
 8009ac8:	4619      	mov	r1, r3
 8009aca:	4610      	mov	r0, r2
 8009acc:	f7fe fb91 	bl	80081f2 <vListInsert>
}
 8009ad0:	e010      	b.n	8009af4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8009b0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8009b00 <prvAddCurrentTaskToDelayedList+0x94>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	3304      	adds	r3, #4
 8009adc:	4619      	mov	r1, r3
 8009ade:	4610      	mov	r0, r2
 8009ae0:	f7fe fb87 	bl	80081f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009ae4:	4b0a      	ldr	r3, [pc, #40]	@ (8009b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	68ba      	ldr	r2, [r7, #8]
 8009aea:	429a      	cmp	r2, r3
 8009aec:	d202      	bcs.n	8009af4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009aee:	4a08      	ldr	r2, [pc, #32]	@ (8009b10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	6013      	str	r3, [r2, #0]
}
 8009af4:	bf00      	nop
 8009af6:	3710      	adds	r7, #16
 8009af8:	46bd      	mov	sp, r7
 8009afa:	bd80      	pop	{r7, pc}
 8009afc:	20005870 	.word	0x20005870
 8009b00:	20005398 	.word	0x20005398
 8009b04:	20005858 	.word	0x20005858
 8009b08:	20005828 	.word	0x20005828
 8009b0c:	20005824 	.word	0x20005824
 8009b10:	2000588c 	.word	0x2000588c

08009b14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b08a      	sub	sp, #40	@ 0x28
 8009b18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009b1e:	f000 fb13 	bl	800a148 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009b22:	4b1d      	ldr	r3, [pc, #116]	@ (8009b98 <xTimerCreateTimerTask+0x84>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d021      	beq.n	8009b6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009b32:	1d3a      	adds	r2, r7, #4
 8009b34:	f107 0108 	add.w	r1, r7, #8
 8009b38:	f107 030c 	add.w	r3, r7, #12
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f7fe faed 	bl	800811c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009b42:	6879      	ldr	r1, [r7, #4]
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	68fa      	ldr	r2, [r7, #12]
 8009b48:	9202      	str	r2, [sp, #8]
 8009b4a:	9301      	str	r3, [sp, #4]
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	9300      	str	r3, [sp, #0]
 8009b50:	2300      	movs	r3, #0
 8009b52:	460a      	mov	r2, r1
 8009b54:	4911      	ldr	r1, [pc, #68]	@ (8009b9c <xTimerCreateTimerTask+0x88>)
 8009b56:	4812      	ldr	r0, [pc, #72]	@ (8009ba0 <xTimerCreateTimerTask+0x8c>)
 8009b58:	f7ff f8a8 	bl	8008cac <xTaskCreateStatic>
 8009b5c:	4603      	mov	r3, r0
 8009b5e:	4a11      	ldr	r2, [pc, #68]	@ (8009ba4 <xTimerCreateTimerTask+0x90>)
 8009b60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009b62:	4b10      	ldr	r3, [pc, #64]	@ (8009ba4 <xTimerCreateTimerTask+0x90>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d001      	beq.n	8009b6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009b6e:	697b      	ldr	r3, [r7, #20]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d10b      	bne.n	8009b8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009b74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b78:	f383 8811 	msr	BASEPRI, r3
 8009b7c:	f3bf 8f6f 	isb	sy
 8009b80:	f3bf 8f4f 	dsb	sy
 8009b84:	613b      	str	r3, [r7, #16]
}
 8009b86:	bf00      	nop
 8009b88:	bf00      	nop
 8009b8a:	e7fd      	b.n	8009b88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009b8c:	697b      	ldr	r3, [r7, #20]
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3718      	adds	r7, #24
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop
 8009b98:	200058c8 	.word	0x200058c8
 8009b9c:	08018bf0 	.word	0x08018bf0
 8009ba0:	08009ce1 	.word	0x08009ce1
 8009ba4:	200058cc 	.word	0x200058cc

08009ba8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b08a      	sub	sp, #40	@ 0x28
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	60f8      	str	r0, [r7, #12]
 8009bb0:	60b9      	str	r1, [r7, #8]
 8009bb2:	607a      	str	r2, [r7, #4]
 8009bb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d10b      	bne.n	8009bd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8009bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc4:	f383 8811 	msr	BASEPRI, r3
 8009bc8:	f3bf 8f6f 	isb	sy
 8009bcc:	f3bf 8f4f 	dsb	sy
 8009bd0:	623b      	str	r3, [r7, #32]
}
 8009bd2:	bf00      	nop
 8009bd4:	bf00      	nop
 8009bd6:	e7fd      	b.n	8009bd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009bd8:	4b19      	ldr	r3, [pc, #100]	@ (8009c40 <xTimerGenericCommand+0x98>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d02a      	beq.n	8009c36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009be0:	68bb      	ldr	r3, [r7, #8]
 8009be2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009bec:	68bb      	ldr	r3, [r7, #8]
 8009bee:	2b05      	cmp	r3, #5
 8009bf0:	dc18      	bgt.n	8009c24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009bf2:	f7ff fead 	bl	8009950 <xTaskGetSchedulerState>
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	2b02      	cmp	r3, #2
 8009bfa:	d109      	bne.n	8009c10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009bfc:	4b10      	ldr	r3, [pc, #64]	@ (8009c40 <xTimerGenericCommand+0x98>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	f107 0110 	add.w	r1, r7, #16
 8009c04:	2300      	movs	r3, #0
 8009c06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009c08:	f7fe fc60 	bl	80084cc <xQueueGenericSend>
 8009c0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c0e:	e012      	b.n	8009c36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009c10:	4b0b      	ldr	r3, [pc, #44]	@ (8009c40 <xTimerGenericCommand+0x98>)
 8009c12:	6818      	ldr	r0, [r3, #0]
 8009c14:	f107 0110 	add.w	r1, r7, #16
 8009c18:	2300      	movs	r3, #0
 8009c1a:	2200      	movs	r2, #0
 8009c1c:	f7fe fc56 	bl	80084cc <xQueueGenericSend>
 8009c20:	6278      	str	r0, [r7, #36]	@ 0x24
 8009c22:	e008      	b.n	8009c36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009c24:	4b06      	ldr	r3, [pc, #24]	@ (8009c40 <xTimerGenericCommand+0x98>)
 8009c26:	6818      	ldr	r0, [r3, #0]
 8009c28:	f107 0110 	add.w	r1, r7, #16
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	f7fe fd4e 	bl	80086d0 <xQueueGenericSendFromISR>
 8009c34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009c36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	3728      	adds	r7, #40	@ 0x28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	bd80      	pop	{r7, pc}
 8009c40:	200058c8 	.word	0x200058c8

08009c44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b088      	sub	sp, #32
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009c4e:	4b23      	ldr	r3, [pc, #140]	@ (8009cdc <prvProcessExpiredTimer+0x98>)
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	68db      	ldr	r3, [r3, #12]
 8009c56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009c58:	697b      	ldr	r3, [r7, #20]
 8009c5a:	3304      	adds	r3, #4
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	f7fe fb01 	bl	8008264 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009c62:	697b      	ldr	r3, [r7, #20]
 8009c64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009c68:	f003 0304 	and.w	r3, r3, #4
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	d023      	beq.n	8009cb8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009c70:	697b      	ldr	r3, [r7, #20]
 8009c72:	699a      	ldr	r2, [r3, #24]
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	18d1      	adds	r1, r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	683a      	ldr	r2, [r7, #0]
 8009c7c:	6978      	ldr	r0, [r7, #20]
 8009c7e:	f000 f8d5 	bl	8009e2c <prvInsertTimerInActiveList>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d020      	beq.n	8009cca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9300      	str	r3, [sp, #0]
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	687a      	ldr	r2, [r7, #4]
 8009c90:	2100      	movs	r1, #0
 8009c92:	6978      	ldr	r0, [r7, #20]
 8009c94:	f7ff ff88 	bl	8009ba8 <xTimerGenericCommand>
 8009c98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009c9a:	693b      	ldr	r3, [r7, #16]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d114      	bne.n	8009cca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ca4:	f383 8811 	msr	BASEPRI, r3
 8009ca8:	f3bf 8f6f 	isb	sy
 8009cac:	f3bf 8f4f 	dsb	sy
 8009cb0:	60fb      	str	r3, [r7, #12]
}
 8009cb2:	bf00      	nop
 8009cb4:	bf00      	nop
 8009cb6:	e7fd      	b.n	8009cb4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009cb8:	697b      	ldr	r3, [r7, #20]
 8009cba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009cbe:	f023 0301 	bic.w	r3, r3, #1
 8009cc2:	b2da      	uxtb	r2, r3
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009cca:	697b      	ldr	r3, [r7, #20]
 8009ccc:	6a1b      	ldr	r3, [r3, #32]
 8009cce:	6978      	ldr	r0, [r7, #20]
 8009cd0:	4798      	blx	r3
}
 8009cd2:	bf00      	nop
 8009cd4:	3718      	adds	r7, #24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	bd80      	pop	{r7, pc}
 8009cda:	bf00      	nop
 8009cdc:	200058c0 	.word	0x200058c0

08009ce0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ce8:	f107 0308 	add.w	r3, r7, #8
 8009cec:	4618      	mov	r0, r3
 8009cee:	f000 f859 	bl	8009da4 <prvGetNextExpireTime>
 8009cf2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f000 f805 	bl	8009d08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009cfe:	f000 f8d7 	bl	8009eb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009d02:	bf00      	nop
 8009d04:	e7f0      	b.n	8009ce8 <prvTimerTask+0x8>
	...

08009d08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009d08:	b580      	push	{r7, lr}
 8009d0a:	b084      	sub	sp, #16
 8009d0c:	af00      	add	r7, sp, #0
 8009d0e:	6078      	str	r0, [r7, #4]
 8009d10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009d12:	f7ff fa0f 	bl	8009134 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009d16:	f107 0308 	add.w	r3, r7, #8
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 f866 	bl	8009dec <prvSampleTimeNow>
 8009d20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d130      	bne.n	8009d8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d10a      	bne.n	8009d44 <prvProcessTimerOrBlockTask+0x3c>
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d806      	bhi.n	8009d44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009d36:	f7ff fa0b 	bl	8009150 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009d3a:	68f9      	ldr	r1, [r7, #12]
 8009d3c:	6878      	ldr	r0, [r7, #4]
 8009d3e:	f7ff ff81 	bl	8009c44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009d42:	e024      	b.n	8009d8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d008      	beq.n	8009d5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009d4a:	4b13      	ldr	r3, [pc, #76]	@ (8009d98 <prvProcessTimerOrBlockTask+0x90>)
 8009d4c:	681b      	ldr	r3, [r3, #0]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d101      	bne.n	8009d58 <prvProcessTimerOrBlockTask+0x50>
 8009d54:	2301      	movs	r3, #1
 8009d56:	e000      	b.n	8009d5a <prvProcessTimerOrBlockTask+0x52>
 8009d58:	2300      	movs	r3, #0
 8009d5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8009d9c <prvProcessTimerOrBlockTask+0x94>)
 8009d5e:	6818      	ldr	r0, [r3, #0]
 8009d60:	687a      	ldr	r2, [r7, #4]
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	4619      	mov	r1, r3
 8009d6a:	f7fe ff6b 	bl	8008c44 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009d6e:	f7ff f9ef 	bl	8009150 <xTaskResumeAll>
 8009d72:	4603      	mov	r3, r0
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d10a      	bne.n	8009d8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009d78:	4b09      	ldr	r3, [pc, #36]	@ (8009da0 <prvProcessTimerOrBlockTask+0x98>)
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	f3bf 8f6f 	isb	sy
}
 8009d88:	e001      	b.n	8009d8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009d8a:	f7ff f9e1 	bl	8009150 <xTaskResumeAll>
}
 8009d8e:	bf00      	nop
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	200058c4 	.word	0x200058c4
 8009d9c:	200058c8 	.word	0x200058c8
 8009da0:	e000ed04 	.word	0xe000ed04

08009da4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009dac:	4b0e      	ldr	r3, [pc, #56]	@ (8009de8 <prvGetNextExpireTime+0x44>)
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <prvGetNextExpireTime+0x16>
 8009db6:	2201      	movs	r2, #1
 8009db8:	e000      	b.n	8009dbc <prvGetNextExpireTime+0x18>
 8009dba:	2200      	movs	r2, #0
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d105      	bne.n	8009dd4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009dc8:	4b07      	ldr	r3, [pc, #28]	@ (8009de8 <prvGetNextExpireTime+0x44>)
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	68db      	ldr	r3, [r3, #12]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e001      	b.n	8009dd8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009dd4:	2300      	movs	r3, #0
 8009dd6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	3714      	adds	r7, #20
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr
 8009de6:	bf00      	nop
 8009de8:	200058c0 	.word	0x200058c0

08009dec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009df4:	f7ff fa4a 	bl	800928c <xTaskGetTickCount>
 8009df8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8009e28 <prvSampleTimeNow+0x3c>)
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	68fa      	ldr	r2, [r7, #12]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	d205      	bcs.n	8009e10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009e04:	f000 f93a 	bl	800a07c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	2201      	movs	r2, #1
 8009e0c:	601a      	str	r2, [r3, #0]
 8009e0e:	e002      	b.n	8009e16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2200      	movs	r2, #0
 8009e14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009e16:	4a04      	ldr	r2, [pc, #16]	@ (8009e28 <prvSampleTimeNow+0x3c>)
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3710      	adds	r7, #16
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	200058d0 	.word	0x200058d0

08009e2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b086      	sub	sp, #24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	607a      	str	r2, [r7, #4]
 8009e38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	68ba      	ldr	r2, [r7, #8]
 8009e42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	68fa      	ldr	r2, [r7, #12]
 8009e48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009e4a:	68ba      	ldr	r2, [r7, #8]
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d812      	bhi.n	8009e78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e52:	687a      	ldr	r2, [r7, #4]
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	1ad2      	subs	r2, r2, r3
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	699b      	ldr	r3, [r3, #24]
 8009e5c:	429a      	cmp	r2, r3
 8009e5e:	d302      	bcc.n	8009e66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009e60:	2301      	movs	r3, #1
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	e01b      	b.n	8009e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009e66:	4b10      	ldr	r3, [pc, #64]	@ (8009ea8 <prvInsertTimerInActiveList+0x7c>)
 8009e68:	681a      	ldr	r2, [r3, #0]
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	3304      	adds	r3, #4
 8009e6e:	4619      	mov	r1, r3
 8009e70:	4610      	mov	r0, r2
 8009e72:	f7fe f9be 	bl	80081f2 <vListInsert>
 8009e76:	e012      	b.n	8009e9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	429a      	cmp	r2, r3
 8009e7e:	d206      	bcs.n	8009e8e <prvInsertTimerInActiveList+0x62>
 8009e80:	68ba      	ldr	r2, [r7, #8]
 8009e82:	683b      	ldr	r3, [r7, #0]
 8009e84:	429a      	cmp	r2, r3
 8009e86:	d302      	bcc.n	8009e8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009e88:	2301      	movs	r3, #1
 8009e8a:	617b      	str	r3, [r7, #20]
 8009e8c:	e007      	b.n	8009e9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009e8e:	4b07      	ldr	r3, [pc, #28]	@ (8009eac <prvInsertTimerInActiveList+0x80>)
 8009e90:	681a      	ldr	r2, [r3, #0]
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	3304      	adds	r3, #4
 8009e96:	4619      	mov	r1, r3
 8009e98:	4610      	mov	r0, r2
 8009e9a:	f7fe f9aa 	bl	80081f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009e9e:	697b      	ldr	r3, [r7, #20]
}
 8009ea0:	4618      	mov	r0, r3
 8009ea2:	3718      	adds	r7, #24
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	200058c4 	.word	0x200058c4
 8009eac:	200058c0 	.word	0x200058c0

08009eb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b08e      	sub	sp, #56	@ 0x38
 8009eb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009eb6:	e0ce      	b.n	800a056 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	da19      	bge.n	8009ef2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009ebe:	1d3b      	adds	r3, r7, #4
 8009ec0:	3304      	adds	r3, #4
 8009ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009ec4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d10b      	bne.n	8009ee2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009eca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ece:	f383 8811 	msr	BASEPRI, r3
 8009ed2:	f3bf 8f6f 	isb	sy
 8009ed6:	f3bf 8f4f 	dsb	sy
 8009eda:	61fb      	str	r3, [r7, #28]
}
 8009edc:	bf00      	nop
 8009ede:	bf00      	nop
 8009ee0:	e7fd      	b.n	8009ede <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009ee2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009ee8:	6850      	ldr	r0, [r2, #4]
 8009eea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009eec:	6892      	ldr	r2, [r2, #8]
 8009eee:	4611      	mov	r1, r2
 8009ef0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009ef2:	687b      	ldr	r3, [r7, #4]
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	f2c0 80ae 	blt.w	800a056 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009efe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f00:	695b      	ldr	r3, [r3, #20]
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	d004      	beq.n	8009f10 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f08:	3304      	adds	r3, #4
 8009f0a:	4618      	mov	r0, r3
 8009f0c:	f7fe f9aa 	bl	8008264 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f10:	463b      	mov	r3, r7
 8009f12:	4618      	mov	r0, r3
 8009f14:	f7ff ff6a 	bl	8009dec <prvSampleTimeNow>
 8009f18:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b09      	cmp	r3, #9
 8009f1e:	f200 8097 	bhi.w	800a050 <prvProcessReceivedCommands+0x1a0>
 8009f22:	a201      	add	r2, pc, #4	@ (adr r2, 8009f28 <prvProcessReceivedCommands+0x78>)
 8009f24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f28:	08009f51 	.word	0x08009f51
 8009f2c:	08009f51 	.word	0x08009f51
 8009f30:	08009f51 	.word	0x08009f51
 8009f34:	08009fc7 	.word	0x08009fc7
 8009f38:	08009fdb 	.word	0x08009fdb
 8009f3c:	0800a027 	.word	0x0800a027
 8009f40:	08009f51 	.word	0x08009f51
 8009f44:	08009f51 	.word	0x08009f51
 8009f48:	08009fc7 	.word	0x08009fc7
 8009f4c:	08009fdb 	.word	0x08009fdb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f52:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f56:	f043 0301 	orr.w	r3, r3, #1
 8009f5a:	b2da      	uxtb	r2, r3
 8009f5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f5e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	18d1      	adds	r1, r2, r3
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f70:	f7ff ff5c 	bl	8009e2c <prvInsertTimerInActiveList>
 8009f74:	4603      	mov	r3, r0
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d06c      	beq.n	800a054 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f7c:	6a1b      	ldr	r3, [r3, #32]
 8009f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009f80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f88:	f003 0304 	and.w	r3, r3, #4
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d061      	beq.n	800a054 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009f90:	68ba      	ldr	r2, [r7, #8]
 8009f92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f94:	699b      	ldr	r3, [r3, #24]
 8009f96:	441a      	add	r2, r3
 8009f98:	2300      	movs	r3, #0
 8009f9a:	9300      	str	r3, [sp, #0]
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2100      	movs	r1, #0
 8009fa0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009fa2:	f7ff fe01 	bl	8009ba8 <xTimerGenericCommand>
 8009fa6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009fa8:	6a3b      	ldr	r3, [r7, #32]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d152      	bne.n	800a054 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	61bb      	str	r3, [r7, #24]
}
 8009fc0:	bf00      	nop
 8009fc2:	bf00      	nop
 8009fc4:	e7fd      	b.n	8009fc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fcc:	f023 0301 	bic.w	r3, r3, #1
 8009fd0:	b2da      	uxtb	r2, r3
 8009fd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009fd8:	e03d      	b.n	800a056 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009fe0:	f043 0301 	orr.w	r3, r3, #1
 8009fe4:	b2da      	uxtb	r2, r3
 8009fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009fe8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ff4:	699b      	ldr	r3, [r3, #24]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	d10b      	bne.n	800a012 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009ffa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ffe:	f383 8811 	msr	BASEPRI, r3
 800a002:	f3bf 8f6f 	isb	sy
 800a006:	f3bf 8f4f 	dsb	sy
 800a00a:	617b      	str	r3, [r7, #20]
}
 800a00c:	bf00      	nop
 800a00e:	bf00      	nop
 800a010:	e7fd      	b.n	800a00e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a012:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a014:	699a      	ldr	r2, [r3, #24]
 800a016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a018:	18d1      	adds	r1, r2, r3
 800a01a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a01e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a020:	f7ff ff04 	bl	8009e2c <prvInsertTimerInActiveList>
					break;
 800a024:	e017      	b.n	800a056 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a02c:	f003 0302 	and.w	r3, r3, #2
 800a030:	2b00      	cmp	r3, #0
 800a032:	d103      	bne.n	800a03c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a034:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a036:	f000 fbe7 	bl	800a808 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a03a:	e00c      	b.n	800a056 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a03c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a03e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a042:	f023 0301 	bic.w	r3, r3, #1
 800a046:	b2da      	uxtb	r2, r3
 800a048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a04a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a04e:	e002      	b.n	800a056 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a050:	bf00      	nop
 800a052:	e000      	b.n	800a056 <prvProcessReceivedCommands+0x1a6>
					break;
 800a054:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a056:	4b08      	ldr	r3, [pc, #32]	@ (800a078 <prvProcessReceivedCommands+0x1c8>)
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	1d39      	adds	r1, r7, #4
 800a05c:	2200      	movs	r2, #0
 800a05e:	4618      	mov	r0, r3
 800a060:	f7fe fbd4 	bl	800880c <xQueueReceive>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	f47f af26 	bne.w	8009eb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a06c:	bf00      	nop
 800a06e:	bf00      	nop
 800a070:	3730      	adds	r7, #48	@ 0x30
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}
 800a076:	bf00      	nop
 800a078:	200058c8 	.word	0x200058c8

0800a07c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a082:	e049      	b.n	800a118 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a084:	4b2e      	ldr	r3, [pc, #184]	@ (800a140 <prvSwitchTimerLists+0xc4>)
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	68db      	ldr	r3, [r3, #12]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a08e:	4b2c      	ldr	r3, [pc, #176]	@ (800a140 <prvSwitchTimerLists+0xc4>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	68db      	ldr	r3, [r3, #12]
 800a096:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3304      	adds	r3, #4
 800a09c:	4618      	mov	r0, r3
 800a09e:	f7fe f8e1 	bl	8008264 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	6a1b      	ldr	r3, [r3, #32]
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a0b0:	f003 0304 	and.w	r3, r3, #4
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d02f      	beq.n	800a118 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	699b      	ldr	r3, [r3, #24]
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4413      	add	r3, r2
 800a0c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a0c2:	68ba      	ldr	r2, [r7, #8]
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	429a      	cmp	r2, r3
 800a0c8:	d90e      	bls.n	800a0e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	68fa      	ldr	r2, [r7, #12]
 800a0d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0d6:	4b1a      	ldr	r3, [pc, #104]	@ (800a140 <prvSwitchTimerLists+0xc4>)
 800a0d8:	681a      	ldr	r2, [r3, #0]
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	3304      	adds	r3, #4
 800a0de:	4619      	mov	r1, r3
 800a0e0:	4610      	mov	r0, r2
 800a0e2:	f7fe f886 	bl	80081f2 <vListInsert>
 800a0e6:	e017      	b.n	800a118 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a0e8:	2300      	movs	r3, #0
 800a0ea:	9300      	str	r3, [sp, #0]
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	693a      	ldr	r2, [r7, #16]
 800a0f0:	2100      	movs	r1, #0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f7ff fd58 	bl	8009ba8 <xTimerGenericCommand>
 800a0f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d10b      	bne.n	800a118 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a104:	f383 8811 	msr	BASEPRI, r3
 800a108:	f3bf 8f6f 	isb	sy
 800a10c:	f3bf 8f4f 	dsb	sy
 800a110:	603b      	str	r3, [r7, #0]
}
 800a112:	bf00      	nop
 800a114:	bf00      	nop
 800a116:	e7fd      	b.n	800a114 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a118:	4b09      	ldr	r3, [pc, #36]	@ (800a140 <prvSwitchTimerLists+0xc4>)
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1b0      	bne.n	800a084 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a122:	4b07      	ldr	r3, [pc, #28]	@ (800a140 <prvSwitchTimerLists+0xc4>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a128:	4b06      	ldr	r3, [pc, #24]	@ (800a144 <prvSwitchTimerLists+0xc8>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4a04      	ldr	r2, [pc, #16]	@ (800a140 <prvSwitchTimerLists+0xc4>)
 800a12e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a130:	4a04      	ldr	r2, [pc, #16]	@ (800a144 <prvSwitchTimerLists+0xc8>)
 800a132:	697b      	ldr	r3, [r7, #20]
 800a134:	6013      	str	r3, [r2, #0]
}
 800a136:	bf00      	nop
 800a138:	3718      	adds	r7, #24
 800a13a:	46bd      	mov	sp, r7
 800a13c:	bd80      	pop	{r7, pc}
 800a13e:	bf00      	nop
 800a140:	200058c0 	.word	0x200058c0
 800a144:	200058c4 	.word	0x200058c4

0800a148 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a14e:	f000 f96b 	bl	800a428 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a152:	4b15      	ldr	r3, [pc, #84]	@ (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d120      	bne.n	800a19c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a15a:	4814      	ldr	r0, [pc, #80]	@ (800a1ac <prvCheckForValidListAndQueue+0x64>)
 800a15c:	f7fd fff8 	bl	8008150 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a160:	4813      	ldr	r0, [pc, #76]	@ (800a1b0 <prvCheckForValidListAndQueue+0x68>)
 800a162:	f7fd fff5 	bl	8008150 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a166:	4b13      	ldr	r3, [pc, #76]	@ (800a1b4 <prvCheckForValidListAndQueue+0x6c>)
 800a168:	4a10      	ldr	r2, [pc, #64]	@ (800a1ac <prvCheckForValidListAndQueue+0x64>)
 800a16a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a16c:	4b12      	ldr	r3, [pc, #72]	@ (800a1b8 <prvCheckForValidListAndQueue+0x70>)
 800a16e:	4a10      	ldr	r2, [pc, #64]	@ (800a1b0 <prvCheckForValidListAndQueue+0x68>)
 800a170:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a172:	2300      	movs	r3, #0
 800a174:	9300      	str	r3, [sp, #0]
 800a176:	4b11      	ldr	r3, [pc, #68]	@ (800a1bc <prvCheckForValidListAndQueue+0x74>)
 800a178:	4a11      	ldr	r2, [pc, #68]	@ (800a1c0 <prvCheckForValidListAndQueue+0x78>)
 800a17a:	2110      	movs	r1, #16
 800a17c:	200a      	movs	r0, #10
 800a17e:	f7fe f905 	bl	800838c <xQueueGenericCreateStatic>
 800a182:	4603      	mov	r3, r0
 800a184:	4a08      	ldr	r2, [pc, #32]	@ (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a186:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a188:	4b07      	ldr	r3, [pc, #28]	@ (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	2b00      	cmp	r3, #0
 800a18e:	d005      	beq.n	800a19c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a190:	4b05      	ldr	r3, [pc, #20]	@ (800a1a8 <prvCheckForValidListAndQueue+0x60>)
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	490b      	ldr	r1, [pc, #44]	@ (800a1c4 <prvCheckForValidListAndQueue+0x7c>)
 800a196:	4618      	mov	r0, r3
 800a198:	f7fe fd2a 	bl	8008bf0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a19c:	f000 f976 	bl	800a48c <vPortExitCritical>
}
 800a1a0:	bf00      	nop
 800a1a2:	46bd      	mov	sp, r7
 800a1a4:	bd80      	pop	{r7, pc}
 800a1a6:	bf00      	nop
 800a1a8:	200058c8 	.word	0x200058c8
 800a1ac:	20005898 	.word	0x20005898
 800a1b0:	200058ac 	.word	0x200058ac
 800a1b4:	200058c0 	.word	0x200058c0
 800a1b8:	200058c4 	.word	0x200058c4
 800a1bc:	20005974 	.word	0x20005974
 800a1c0:	200058d4 	.word	0x200058d4
 800a1c4:	08018bf8 	.word	0x08018bf8

0800a1c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a1c8:	b480      	push	{r7}
 800a1ca:	b085      	sub	sp, #20
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	60f8      	str	r0, [r7, #12]
 800a1d0:	60b9      	str	r1, [r7, #8]
 800a1d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	3b04      	subs	r3, #4
 800a1d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a1e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	3b04      	subs	r3, #4
 800a1e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	f023 0201 	bic.w	r2, r3, #1
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	3b04      	subs	r3, #4
 800a1f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a1f8:	4a0c      	ldr	r2, [pc, #48]	@ (800a22c <pxPortInitialiseStack+0x64>)
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	3b14      	subs	r3, #20
 800a202:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	3b04      	subs	r3, #4
 800a20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f06f 0202 	mvn.w	r2, #2
 800a216:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	3b20      	subs	r3, #32
 800a21c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a21e:	68fb      	ldr	r3, [r7, #12]
}
 800a220:	4618      	mov	r0, r3
 800a222:	3714      	adds	r7, #20
 800a224:	46bd      	mov	sp, r7
 800a226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22a:	4770      	bx	lr
 800a22c:	0800a231 	.word	0x0800a231

0800a230 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a230:	b480      	push	{r7}
 800a232:	b085      	sub	sp, #20
 800a234:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a23a:	4b13      	ldr	r3, [pc, #76]	@ (800a288 <prvTaskExitError+0x58>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a242:	d00b      	beq.n	800a25c <prvTaskExitError+0x2c>
	__asm volatile
 800a244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a248:	f383 8811 	msr	BASEPRI, r3
 800a24c:	f3bf 8f6f 	isb	sy
 800a250:	f3bf 8f4f 	dsb	sy
 800a254:	60fb      	str	r3, [r7, #12]
}
 800a256:	bf00      	nop
 800a258:	bf00      	nop
 800a25a:	e7fd      	b.n	800a258 <prvTaskExitError+0x28>
	__asm volatile
 800a25c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a260:	f383 8811 	msr	BASEPRI, r3
 800a264:	f3bf 8f6f 	isb	sy
 800a268:	f3bf 8f4f 	dsb	sy
 800a26c:	60bb      	str	r3, [r7, #8]
}
 800a26e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a270:	bf00      	nop
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2b00      	cmp	r3, #0
 800a276:	d0fc      	beq.n	800a272 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a278:	bf00      	nop
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20000010 	.word	0x20000010
 800a28c:	00000000 	.word	0x00000000

0800a290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a290:	4b07      	ldr	r3, [pc, #28]	@ (800a2b0 <pxCurrentTCBConst2>)
 800a292:	6819      	ldr	r1, [r3, #0]
 800a294:	6808      	ldr	r0, [r1, #0]
 800a296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a29a:	f380 8809 	msr	PSP, r0
 800a29e:	f3bf 8f6f 	isb	sy
 800a2a2:	f04f 0000 	mov.w	r0, #0
 800a2a6:	f380 8811 	msr	BASEPRI, r0
 800a2aa:	4770      	bx	lr
 800a2ac:	f3af 8000 	nop.w

0800a2b0 <pxCurrentTCBConst2>:
 800a2b0:	20005398 	.word	0x20005398
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a2b4:	bf00      	nop
 800a2b6:	bf00      	nop

0800a2b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a2b8:	4808      	ldr	r0, [pc, #32]	@ (800a2dc <prvPortStartFirstTask+0x24>)
 800a2ba:	6800      	ldr	r0, [r0, #0]
 800a2bc:	6800      	ldr	r0, [r0, #0]
 800a2be:	f380 8808 	msr	MSP, r0
 800a2c2:	f04f 0000 	mov.w	r0, #0
 800a2c6:	f380 8814 	msr	CONTROL, r0
 800a2ca:	b662      	cpsie	i
 800a2cc:	b661      	cpsie	f
 800a2ce:	f3bf 8f4f 	dsb	sy
 800a2d2:	f3bf 8f6f 	isb	sy
 800a2d6:	df00      	svc	0
 800a2d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a2da:	bf00      	nop
 800a2dc:	e000ed08 	.word	0xe000ed08

0800a2e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a2e6:	4b47      	ldr	r3, [pc, #284]	@ (800a404 <xPortStartScheduler+0x124>)
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	4a47      	ldr	r2, [pc, #284]	@ (800a408 <xPortStartScheduler+0x128>)
 800a2ec:	4293      	cmp	r3, r2
 800a2ee:	d10b      	bne.n	800a308 <xPortStartScheduler+0x28>
	__asm volatile
 800a2f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2f4:	f383 8811 	msr	BASEPRI, r3
 800a2f8:	f3bf 8f6f 	isb	sy
 800a2fc:	f3bf 8f4f 	dsb	sy
 800a300:	613b      	str	r3, [r7, #16]
}
 800a302:	bf00      	nop
 800a304:	bf00      	nop
 800a306:	e7fd      	b.n	800a304 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a308:	4b3e      	ldr	r3, [pc, #248]	@ (800a404 <xPortStartScheduler+0x124>)
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	4a3f      	ldr	r2, [pc, #252]	@ (800a40c <xPortStartScheduler+0x12c>)
 800a30e:	4293      	cmp	r3, r2
 800a310:	d10b      	bne.n	800a32a <xPortStartScheduler+0x4a>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	60fb      	str	r3, [r7, #12]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a32a:	4b39      	ldr	r3, [pc, #228]	@ (800a410 <xPortStartScheduler+0x130>)
 800a32c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	b2db      	uxtb	r3, r3
 800a334:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	22ff      	movs	r2, #255	@ 0xff
 800a33a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a33c:	697b      	ldr	r3, [r7, #20]
 800a33e:	781b      	ldrb	r3, [r3, #0]
 800a340:	b2db      	uxtb	r3, r3
 800a342:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	b2db      	uxtb	r3, r3
 800a348:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a34c:	b2da      	uxtb	r2, r3
 800a34e:	4b31      	ldr	r3, [pc, #196]	@ (800a414 <xPortStartScheduler+0x134>)
 800a350:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a352:	4b31      	ldr	r3, [pc, #196]	@ (800a418 <xPortStartScheduler+0x138>)
 800a354:	2207      	movs	r2, #7
 800a356:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a358:	e009      	b.n	800a36e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a35a:	4b2f      	ldr	r3, [pc, #188]	@ (800a418 <xPortStartScheduler+0x138>)
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	3b01      	subs	r3, #1
 800a360:	4a2d      	ldr	r2, [pc, #180]	@ (800a418 <xPortStartScheduler+0x138>)
 800a362:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a364:	78fb      	ldrb	r3, [r7, #3]
 800a366:	b2db      	uxtb	r3, r3
 800a368:	005b      	lsls	r3, r3, #1
 800a36a:	b2db      	uxtb	r3, r3
 800a36c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a36e:	78fb      	ldrb	r3, [r7, #3]
 800a370:	b2db      	uxtb	r3, r3
 800a372:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a376:	2b80      	cmp	r3, #128	@ 0x80
 800a378:	d0ef      	beq.n	800a35a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a37a:	4b27      	ldr	r3, [pc, #156]	@ (800a418 <xPortStartScheduler+0x138>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f1c3 0307 	rsb	r3, r3, #7
 800a382:	2b04      	cmp	r3, #4
 800a384:	d00b      	beq.n	800a39e <xPortStartScheduler+0xbe>
	__asm volatile
 800a386:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a38a:	f383 8811 	msr	BASEPRI, r3
 800a38e:	f3bf 8f6f 	isb	sy
 800a392:	f3bf 8f4f 	dsb	sy
 800a396:	60bb      	str	r3, [r7, #8]
}
 800a398:	bf00      	nop
 800a39a:	bf00      	nop
 800a39c:	e7fd      	b.n	800a39a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a39e:	4b1e      	ldr	r3, [pc, #120]	@ (800a418 <xPortStartScheduler+0x138>)
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	021b      	lsls	r3, r3, #8
 800a3a4:	4a1c      	ldr	r2, [pc, #112]	@ (800a418 <xPortStartScheduler+0x138>)
 800a3a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a3a8:	4b1b      	ldr	r3, [pc, #108]	@ (800a418 <xPortStartScheduler+0x138>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a3b0:	4a19      	ldr	r2, [pc, #100]	@ (800a418 <xPortStartScheduler+0x138>)
 800a3b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	b2da      	uxtb	r2, r3
 800a3b8:	697b      	ldr	r3, [r7, #20]
 800a3ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a3bc:	4b17      	ldr	r3, [pc, #92]	@ (800a41c <xPortStartScheduler+0x13c>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a16      	ldr	r2, [pc, #88]	@ (800a41c <xPortStartScheduler+0x13c>)
 800a3c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a3c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a3c8:	4b14      	ldr	r3, [pc, #80]	@ (800a41c <xPortStartScheduler+0x13c>)
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	4a13      	ldr	r2, [pc, #76]	@ (800a41c <xPortStartScheduler+0x13c>)
 800a3ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a3d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a3d4:	f000 f8da 	bl	800a58c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a3d8:	4b11      	ldr	r3, [pc, #68]	@ (800a420 <xPortStartScheduler+0x140>)
 800a3da:	2200      	movs	r2, #0
 800a3dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a3de:	f000 f8f9 	bl	800a5d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a3e2:	4b10      	ldr	r3, [pc, #64]	@ (800a424 <xPortStartScheduler+0x144>)
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	4a0f      	ldr	r2, [pc, #60]	@ (800a424 <xPortStartScheduler+0x144>)
 800a3e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a3ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a3ee:	f7ff ff63 	bl	800a2b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a3f2:	f7ff f815 	bl	8009420 <vTaskSwitchContext>
	prvTaskExitError();
 800a3f6:	f7ff ff1b 	bl	800a230 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a3fa:	2300      	movs	r3, #0
}
 800a3fc:	4618      	mov	r0, r3
 800a3fe:	3718      	adds	r7, #24
 800a400:	46bd      	mov	sp, r7
 800a402:	bd80      	pop	{r7, pc}
 800a404:	e000ed00 	.word	0xe000ed00
 800a408:	410fc271 	.word	0x410fc271
 800a40c:	410fc270 	.word	0x410fc270
 800a410:	e000e400 	.word	0xe000e400
 800a414:	200059c4 	.word	0x200059c4
 800a418:	200059c8 	.word	0x200059c8
 800a41c:	e000ed20 	.word	0xe000ed20
 800a420:	20000010 	.word	0x20000010
 800a424:	e000ef34 	.word	0xe000ef34

0800a428 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a428:	b480      	push	{r7}
 800a42a:	b083      	sub	sp, #12
 800a42c:	af00      	add	r7, sp, #0
	__asm volatile
 800a42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a432:	f383 8811 	msr	BASEPRI, r3
 800a436:	f3bf 8f6f 	isb	sy
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	607b      	str	r3, [r7, #4]
}
 800a440:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a442:	4b10      	ldr	r3, [pc, #64]	@ (800a484 <vPortEnterCritical+0x5c>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	3301      	adds	r3, #1
 800a448:	4a0e      	ldr	r2, [pc, #56]	@ (800a484 <vPortEnterCritical+0x5c>)
 800a44a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a44c:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <vPortEnterCritical+0x5c>)
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	2b01      	cmp	r3, #1
 800a452:	d110      	bne.n	800a476 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a454:	4b0c      	ldr	r3, [pc, #48]	@ (800a488 <vPortEnterCritical+0x60>)
 800a456:	681b      	ldr	r3, [r3, #0]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d00b      	beq.n	800a476 <vPortEnterCritical+0x4e>
	__asm volatile
 800a45e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a462:	f383 8811 	msr	BASEPRI, r3
 800a466:	f3bf 8f6f 	isb	sy
 800a46a:	f3bf 8f4f 	dsb	sy
 800a46e:	603b      	str	r3, [r7, #0]
}
 800a470:	bf00      	nop
 800a472:	bf00      	nop
 800a474:	e7fd      	b.n	800a472 <vPortEnterCritical+0x4a>
	}
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	20000010 	.word	0x20000010
 800a488:	e000ed04 	.word	0xe000ed04

0800a48c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a48c:	b480      	push	{r7}
 800a48e:	b083      	sub	sp, #12
 800a490:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a492:	4b12      	ldr	r3, [pc, #72]	@ (800a4dc <vPortExitCritical+0x50>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	2b00      	cmp	r3, #0
 800a498:	d10b      	bne.n	800a4b2 <vPortExitCritical+0x26>
	__asm volatile
 800a49a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49e:	f383 8811 	msr	BASEPRI, r3
 800a4a2:	f3bf 8f6f 	isb	sy
 800a4a6:	f3bf 8f4f 	dsb	sy
 800a4aa:	607b      	str	r3, [r7, #4]
}
 800a4ac:	bf00      	nop
 800a4ae:	bf00      	nop
 800a4b0:	e7fd      	b.n	800a4ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a4b2:	4b0a      	ldr	r3, [pc, #40]	@ (800a4dc <vPortExitCritical+0x50>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	3b01      	subs	r3, #1
 800a4b8:	4a08      	ldr	r2, [pc, #32]	@ (800a4dc <vPortExitCritical+0x50>)
 800a4ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a4bc:	4b07      	ldr	r3, [pc, #28]	@ (800a4dc <vPortExitCritical+0x50>)
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d105      	bne.n	800a4d0 <vPortExitCritical+0x44>
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	f383 8811 	msr	BASEPRI, r3
}
 800a4ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a4d0:	bf00      	nop
 800a4d2:	370c      	adds	r7, #12
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4da:	4770      	bx	lr
 800a4dc:	20000010 	.word	0x20000010

0800a4e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a4e0:	f3ef 8009 	mrs	r0, PSP
 800a4e4:	f3bf 8f6f 	isb	sy
 800a4e8:	4b15      	ldr	r3, [pc, #84]	@ (800a540 <pxCurrentTCBConst>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	f01e 0f10 	tst.w	lr, #16
 800a4f0:	bf08      	it	eq
 800a4f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a4f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4fa:	6010      	str	r0, [r2, #0]
 800a4fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a500:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a504:	f380 8811 	msr	BASEPRI, r0
 800a508:	f3bf 8f4f 	dsb	sy
 800a50c:	f3bf 8f6f 	isb	sy
 800a510:	f7fe ff86 	bl	8009420 <vTaskSwitchContext>
 800a514:	f04f 0000 	mov.w	r0, #0
 800a518:	f380 8811 	msr	BASEPRI, r0
 800a51c:	bc09      	pop	{r0, r3}
 800a51e:	6819      	ldr	r1, [r3, #0]
 800a520:	6808      	ldr	r0, [r1, #0]
 800a522:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a526:	f01e 0f10 	tst.w	lr, #16
 800a52a:	bf08      	it	eq
 800a52c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a530:	f380 8809 	msr	PSP, r0
 800a534:	f3bf 8f6f 	isb	sy
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	f3af 8000 	nop.w

0800a540 <pxCurrentTCBConst>:
 800a540:	20005398 	.word	0x20005398
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a544:	bf00      	nop
 800a546:	bf00      	nop

0800a548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a548:	b580      	push	{r7, lr}
 800a54a:	b082      	sub	sp, #8
 800a54c:	af00      	add	r7, sp, #0
	__asm volatile
 800a54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a552:	f383 8811 	msr	BASEPRI, r3
 800a556:	f3bf 8f6f 	isb	sy
 800a55a:	f3bf 8f4f 	dsb	sy
 800a55e:	607b      	str	r3, [r7, #4]
}
 800a560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a562:	f7fe fea3 	bl	80092ac <xTaskIncrementTick>
 800a566:	4603      	mov	r3, r0
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d003      	beq.n	800a574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a56c:	4b06      	ldr	r3, [pc, #24]	@ (800a588 <xPortSysTickHandler+0x40>)
 800a56e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a572:	601a      	str	r2, [r3, #0]
 800a574:	2300      	movs	r3, #0
 800a576:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	f383 8811 	msr	BASEPRI, r3
}
 800a57e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a580:	bf00      	nop
 800a582:	3708      	adds	r7, #8
 800a584:	46bd      	mov	sp, r7
 800a586:	bd80      	pop	{r7, pc}
 800a588:	e000ed04 	.word	0xe000ed04

0800a58c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a58c:	b480      	push	{r7}
 800a58e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a590:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c0 <vPortSetupTimerInterrupt+0x34>)
 800a592:	2200      	movs	r2, #0
 800a594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a596:	4b0b      	ldr	r3, [pc, #44]	@ (800a5c4 <vPortSetupTimerInterrupt+0x38>)
 800a598:	2200      	movs	r2, #0
 800a59a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a59c:	4b0a      	ldr	r3, [pc, #40]	@ (800a5c8 <vPortSetupTimerInterrupt+0x3c>)
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	4a0a      	ldr	r2, [pc, #40]	@ (800a5cc <vPortSetupTimerInterrupt+0x40>)
 800a5a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a5a6:	099b      	lsrs	r3, r3, #6
 800a5a8:	4a09      	ldr	r2, [pc, #36]	@ (800a5d0 <vPortSetupTimerInterrupt+0x44>)
 800a5aa:	3b01      	subs	r3, #1
 800a5ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a5ae:	4b04      	ldr	r3, [pc, #16]	@ (800a5c0 <vPortSetupTimerInterrupt+0x34>)
 800a5b0:	2207      	movs	r2, #7
 800a5b2:	601a      	str	r2, [r3, #0]
}
 800a5b4:	bf00      	nop
 800a5b6:	46bd      	mov	sp, r7
 800a5b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5bc:	4770      	bx	lr
 800a5be:	bf00      	nop
 800a5c0:	e000e010 	.word	0xe000e010
 800a5c4:	e000e018 	.word	0xe000e018
 800a5c8:	20000004 	.word	0x20000004
 800a5cc:	10624dd3 	.word	0x10624dd3
 800a5d0:	e000e014 	.word	0xe000e014

0800a5d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a5d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a5e4 <vPortEnableVFP+0x10>
 800a5d8:	6801      	ldr	r1, [r0, #0]
 800a5da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a5de:	6001      	str	r1, [r0, #0]
 800a5e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a5e2:	bf00      	nop
 800a5e4:	e000ed88 	.word	0xe000ed88

0800a5e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a5e8:	b480      	push	{r7}
 800a5ea:	b085      	sub	sp, #20
 800a5ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a5ee:	f3ef 8305 	mrs	r3, IPSR
 800a5f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2b0f      	cmp	r3, #15
 800a5f8:	d915      	bls.n	800a626 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a5fa:	4a18      	ldr	r2, [pc, #96]	@ (800a65c <vPortValidateInterruptPriority+0x74>)
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	4413      	add	r3, r2
 800a600:	781b      	ldrb	r3, [r3, #0]
 800a602:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a604:	4b16      	ldr	r3, [pc, #88]	@ (800a660 <vPortValidateInterruptPriority+0x78>)
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	7afa      	ldrb	r2, [r7, #11]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d20b      	bcs.n	800a626 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a60e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a612:	f383 8811 	msr	BASEPRI, r3
 800a616:	f3bf 8f6f 	isb	sy
 800a61a:	f3bf 8f4f 	dsb	sy
 800a61e:	607b      	str	r3, [r7, #4]
}
 800a620:	bf00      	nop
 800a622:	bf00      	nop
 800a624:	e7fd      	b.n	800a622 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a626:	4b0f      	ldr	r3, [pc, #60]	@ (800a664 <vPortValidateInterruptPriority+0x7c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a62e:	4b0e      	ldr	r3, [pc, #56]	@ (800a668 <vPortValidateInterruptPriority+0x80>)
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	429a      	cmp	r2, r3
 800a634:	d90b      	bls.n	800a64e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a636:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63a:	f383 8811 	msr	BASEPRI, r3
 800a63e:	f3bf 8f6f 	isb	sy
 800a642:	f3bf 8f4f 	dsb	sy
 800a646:	603b      	str	r3, [r7, #0]
}
 800a648:	bf00      	nop
 800a64a:	bf00      	nop
 800a64c:	e7fd      	b.n	800a64a <vPortValidateInterruptPriority+0x62>
	}
 800a64e:	bf00      	nop
 800a650:	3714      	adds	r7, #20
 800a652:	46bd      	mov	sp, r7
 800a654:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a658:	4770      	bx	lr
 800a65a:	bf00      	nop
 800a65c:	e000e3f0 	.word	0xe000e3f0
 800a660:	200059c4 	.word	0x200059c4
 800a664:	e000ed0c 	.word	0xe000ed0c
 800a668:	200059c8 	.word	0x200059c8

0800a66c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a66c:	b580      	push	{r7, lr}
 800a66e:	b08a      	sub	sp, #40	@ 0x28
 800a670:	af00      	add	r7, sp, #0
 800a672:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a674:	2300      	movs	r3, #0
 800a676:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a678:	f7fe fd5c 	bl	8009134 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a67c:	4b5c      	ldr	r3, [pc, #368]	@ (800a7f0 <pvPortMalloc+0x184>)
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a684:	f000 f924 	bl	800a8d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a688:	4b5a      	ldr	r3, [pc, #360]	@ (800a7f4 <pvPortMalloc+0x188>)
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	4013      	ands	r3, r2
 800a690:	2b00      	cmp	r3, #0
 800a692:	f040 8095 	bne.w	800a7c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d01e      	beq.n	800a6da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a69c:	2208      	movs	r2, #8
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	4413      	add	r3, r2
 800a6a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	f003 0307 	and.w	r3, r3, #7
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d015      	beq.n	800a6da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f023 0307 	bic.w	r3, r3, #7
 800a6b4:	3308      	adds	r3, #8
 800a6b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	f003 0307 	and.w	r3, r3, #7
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d00b      	beq.n	800a6da <pvPortMalloc+0x6e>
	__asm volatile
 800a6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6c6:	f383 8811 	msr	BASEPRI, r3
 800a6ca:	f3bf 8f6f 	isb	sy
 800a6ce:	f3bf 8f4f 	dsb	sy
 800a6d2:	617b      	str	r3, [r7, #20]
}
 800a6d4:	bf00      	nop
 800a6d6:	bf00      	nop
 800a6d8:	e7fd      	b.n	800a6d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d06f      	beq.n	800a7c0 <pvPortMalloc+0x154>
 800a6e0:	4b45      	ldr	r3, [pc, #276]	@ (800a7f8 <pvPortMalloc+0x18c>)
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	687a      	ldr	r2, [r7, #4]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d86a      	bhi.n	800a7c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a6ea:	4b44      	ldr	r3, [pc, #272]	@ (800a7fc <pvPortMalloc+0x190>)
 800a6ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a6ee:	4b43      	ldr	r3, [pc, #268]	@ (800a7fc <pvPortMalloc+0x190>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a6f4:	e004      	b.n	800a700 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a6f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a6fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	687a      	ldr	r2, [r7, #4]
 800a706:	429a      	cmp	r2, r3
 800a708:	d903      	bls.n	800a712 <pvPortMalloc+0xa6>
 800a70a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	2b00      	cmp	r3, #0
 800a710:	d1f1      	bne.n	800a6f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a712:	4b37      	ldr	r3, [pc, #220]	@ (800a7f0 <pvPortMalloc+0x184>)
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a718:	429a      	cmp	r2, r3
 800a71a:	d051      	beq.n	800a7c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a71c:	6a3b      	ldr	r3, [r7, #32]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	2208      	movs	r2, #8
 800a722:	4413      	add	r3, r2
 800a724:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a728:	681a      	ldr	r2, [r3, #0]
 800a72a:	6a3b      	ldr	r3, [r7, #32]
 800a72c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a72e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	1ad2      	subs	r2, r2, r3
 800a736:	2308      	movs	r3, #8
 800a738:	005b      	lsls	r3, r3, #1
 800a73a:	429a      	cmp	r2, r3
 800a73c:	d920      	bls.n	800a780 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a73e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	4413      	add	r3, r2
 800a744:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	f003 0307 	and.w	r3, r3, #7
 800a74c:	2b00      	cmp	r3, #0
 800a74e:	d00b      	beq.n	800a768 <pvPortMalloc+0xfc>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	613b      	str	r3, [r7, #16]
}
 800a762:	bf00      	nop
 800a764:	bf00      	nop
 800a766:	e7fd      	b.n	800a764 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a76a:	685a      	ldr	r2, [r3, #4]
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	1ad2      	subs	r2, r2, r3
 800a770:	69bb      	ldr	r3, [r7, #24]
 800a772:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a776:	687a      	ldr	r2, [r7, #4]
 800a778:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a77a:	69b8      	ldr	r0, [r7, #24]
 800a77c:	f000 f90a 	bl	800a994 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a780:	4b1d      	ldr	r3, [pc, #116]	@ (800a7f8 <pvPortMalloc+0x18c>)
 800a782:	681a      	ldr	r2, [r3, #0]
 800a784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a786:	685b      	ldr	r3, [r3, #4]
 800a788:	1ad3      	subs	r3, r2, r3
 800a78a:	4a1b      	ldr	r2, [pc, #108]	@ (800a7f8 <pvPortMalloc+0x18c>)
 800a78c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a78e:	4b1a      	ldr	r3, [pc, #104]	@ (800a7f8 <pvPortMalloc+0x18c>)
 800a790:	681a      	ldr	r2, [r3, #0]
 800a792:	4b1b      	ldr	r3, [pc, #108]	@ (800a800 <pvPortMalloc+0x194>)
 800a794:	681b      	ldr	r3, [r3, #0]
 800a796:	429a      	cmp	r2, r3
 800a798:	d203      	bcs.n	800a7a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a79a:	4b17      	ldr	r3, [pc, #92]	@ (800a7f8 <pvPortMalloc+0x18c>)
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	4a18      	ldr	r2, [pc, #96]	@ (800a800 <pvPortMalloc+0x194>)
 800a7a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a7a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7a4:	685a      	ldr	r2, [r3, #4]
 800a7a6:	4b13      	ldr	r3, [pc, #76]	@ (800a7f4 <pvPortMalloc+0x188>)
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	431a      	orrs	r2, r3
 800a7ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a7b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a7b6:	4b13      	ldr	r3, [pc, #76]	@ (800a804 <pvPortMalloc+0x198>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	3301      	adds	r3, #1
 800a7bc:	4a11      	ldr	r2, [pc, #68]	@ (800a804 <pvPortMalloc+0x198>)
 800a7be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a7c0:	f7fe fcc6 	bl	8009150 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	f003 0307 	and.w	r3, r3, #7
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d00b      	beq.n	800a7e6 <pvPortMalloc+0x17a>
	__asm volatile
 800a7ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7d2:	f383 8811 	msr	BASEPRI, r3
 800a7d6:	f3bf 8f6f 	isb	sy
 800a7da:	f3bf 8f4f 	dsb	sy
 800a7de:	60fb      	str	r3, [r7, #12]
}
 800a7e0:	bf00      	nop
 800a7e2:	bf00      	nop
 800a7e4:	e7fd      	b.n	800a7e2 <pvPortMalloc+0x176>
	return pvReturn;
 800a7e6:	69fb      	ldr	r3, [r7, #28]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3728      	adds	r7, #40	@ 0x28
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	200065d4 	.word	0x200065d4
 800a7f4:	200065e8 	.word	0x200065e8
 800a7f8:	200065d8 	.word	0x200065d8
 800a7fc:	200065cc 	.word	0x200065cc
 800a800:	200065dc 	.word	0x200065dc
 800a804:	200065e0 	.word	0x200065e0

0800a808 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b086      	sub	sp, #24
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2b00      	cmp	r3, #0
 800a818:	d04f      	beq.n	800a8ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a81a:	2308      	movs	r3, #8
 800a81c:	425b      	negs	r3, r3
 800a81e:	697a      	ldr	r2, [r7, #20]
 800a820:	4413      	add	r3, r2
 800a822:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a824:	697b      	ldr	r3, [r7, #20]
 800a826:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	685a      	ldr	r2, [r3, #4]
 800a82c:	4b25      	ldr	r3, [pc, #148]	@ (800a8c4 <vPortFree+0xbc>)
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4013      	ands	r3, r2
 800a832:	2b00      	cmp	r3, #0
 800a834:	d10b      	bne.n	800a84e <vPortFree+0x46>
	__asm volatile
 800a836:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a83a:	f383 8811 	msr	BASEPRI, r3
 800a83e:	f3bf 8f6f 	isb	sy
 800a842:	f3bf 8f4f 	dsb	sy
 800a846:	60fb      	str	r3, [r7, #12]
}
 800a848:	bf00      	nop
 800a84a:	bf00      	nop
 800a84c:	e7fd      	b.n	800a84a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00b      	beq.n	800a86e <vPortFree+0x66>
	__asm volatile
 800a856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a85a:	f383 8811 	msr	BASEPRI, r3
 800a85e:	f3bf 8f6f 	isb	sy
 800a862:	f3bf 8f4f 	dsb	sy
 800a866:	60bb      	str	r3, [r7, #8]
}
 800a868:	bf00      	nop
 800a86a:	bf00      	nop
 800a86c:	e7fd      	b.n	800a86a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a86e:	693b      	ldr	r3, [r7, #16]
 800a870:	685a      	ldr	r2, [r3, #4]
 800a872:	4b14      	ldr	r3, [pc, #80]	@ (800a8c4 <vPortFree+0xbc>)
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4013      	ands	r3, r2
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d01e      	beq.n	800a8ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a87c:	693b      	ldr	r3, [r7, #16]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d11a      	bne.n	800a8ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	685a      	ldr	r2, [r3, #4]
 800a888:	4b0e      	ldr	r3, [pc, #56]	@ (800a8c4 <vPortFree+0xbc>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	43db      	mvns	r3, r3
 800a88e:	401a      	ands	r2, r3
 800a890:	693b      	ldr	r3, [r7, #16]
 800a892:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a894:	f7fe fc4e 	bl	8009134 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	685a      	ldr	r2, [r3, #4]
 800a89c:	4b0a      	ldr	r3, [pc, #40]	@ (800a8c8 <vPortFree+0xc0>)
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4413      	add	r3, r2
 800a8a2:	4a09      	ldr	r2, [pc, #36]	@ (800a8c8 <vPortFree+0xc0>)
 800a8a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a8a6:	6938      	ldr	r0, [r7, #16]
 800a8a8:	f000 f874 	bl	800a994 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a8ac:	4b07      	ldr	r3, [pc, #28]	@ (800a8cc <vPortFree+0xc4>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	3301      	adds	r3, #1
 800a8b2:	4a06      	ldr	r2, [pc, #24]	@ (800a8cc <vPortFree+0xc4>)
 800a8b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a8b6:	f7fe fc4b 	bl	8009150 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a8ba:	bf00      	nop
 800a8bc:	3718      	adds	r7, #24
 800a8be:	46bd      	mov	sp, r7
 800a8c0:	bd80      	pop	{r7, pc}
 800a8c2:	bf00      	nop
 800a8c4:	200065e8 	.word	0x200065e8
 800a8c8:	200065d8 	.word	0x200065d8
 800a8cc:	200065e4 	.word	0x200065e4

0800a8d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b085      	sub	sp, #20
 800a8d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a8d6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800a8da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a8dc:	4b27      	ldr	r3, [pc, #156]	@ (800a97c <prvHeapInit+0xac>)
 800a8de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f003 0307 	and.w	r3, r3, #7
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d00c      	beq.n	800a904 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	3307      	adds	r3, #7
 800a8ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	f023 0307 	bic.w	r3, r3, #7
 800a8f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a8f8:	68ba      	ldr	r2, [r7, #8]
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	1ad3      	subs	r3, r2, r3
 800a8fe:	4a1f      	ldr	r2, [pc, #124]	@ (800a97c <prvHeapInit+0xac>)
 800a900:	4413      	add	r3, r2
 800a902:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a908:	4a1d      	ldr	r2, [pc, #116]	@ (800a980 <prvHeapInit+0xb0>)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a90e:	4b1c      	ldr	r3, [pc, #112]	@ (800a980 <prvHeapInit+0xb0>)
 800a910:	2200      	movs	r2, #0
 800a912:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	4413      	add	r3, r2
 800a91a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a91c:	2208      	movs	r2, #8
 800a91e:	68fb      	ldr	r3, [r7, #12]
 800a920:	1a9b      	subs	r3, r3, r2
 800a922:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f023 0307 	bic.w	r3, r3, #7
 800a92a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	4a15      	ldr	r2, [pc, #84]	@ (800a984 <prvHeapInit+0xb4>)
 800a930:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a932:	4b14      	ldr	r3, [pc, #80]	@ (800a984 <prvHeapInit+0xb4>)
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	2200      	movs	r2, #0
 800a938:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a93a:	4b12      	ldr	r3, [pc, #72]	@ (800a984 <prvHeapInit+0xb4>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2200      	movs	r2, #0
 800a940:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	1ad2      	subs	r2, r2, r3
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a950:	4b0c      	ldr	r3, [pc, #48]	@ (800a984 <prvHeapInit+0xb4>)
 800a952:	681a      	ldr	r2, [r3, #0]
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	685b      	ldr	r3, [r3, #4]
 800a95c:	4a0a      	ldr	r2, [pc, #40]	@ (800a988 <prvHeapInit+0xb8>)
 800a95e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	685b      	ldr	r3, [r3, #4]
 800a964:	4a09      	ldr	r2, [pc, #36]	@ (800a98c <prvHeapInit+0xbc>)
 800a966:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a968:	4b09      	ldr	r3, [pc, #36]	@ (800a990 <prvHeapInit+0xc0>)
 800a96a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a96e:	601a      	str	r2, [r3, #0]
}
 800a970:	bf00      	nop
 800a972:	3714      	adds	r7, #20
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr
 800a97c:	200059cc 	.word	0x200059cc
 800a980:	200065cc 	.word	0x200065cc
 800a984:	200065d4 	.word	0x200065d4
 800a988:	200065dc 	.word	0x200065dc
 800a98c:	200065d8 	.word	0x200065d8
 800a990:	200065e8 	.word	0x200065e8

0800a994 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a99c:	4b28      	ldr	r3, [pc, #160]	@ (800aa40 <prvInsertBlockIntoFreeList+0xac>)
 800a99e:	60fb      	str	r3, [r7, #12]
 800a9a0:	e002      	b.n	800a9a8 <prvInsertBlockIntoFreeList+0x14>
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	429a      	cmp	r2, r3
 800a9b0:	d8f7      	bhi.n	800a9a2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	68ba      	ldr	r2, [r7, #8]
 800a9bc:	4413      	add	r3, r2
 800a9be:	687a      	ldr	r2, [r7, #4]
 800a9c0:	429a      	cmp	r2, r3
 800a9c2:	d108      	bne.n	800a9d6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	685b      	ldr	r3, [r3, #4]
 800a9cc:	441a      	add	r2, r3
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	68ba      	ldr	r2, [r7, #8]
 800a9e0:	441a      	add	r2, r3
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d118      	bne.n	800aa1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	681a      	ldr	r2, [r3, #0]
 800a9ee:	4b15      	ldr	r3, [pc, #84]	@ (800aa44 <prvInsertBlockIntoFreeList+0xb0>)
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	429a      	cmp	r2, r3
 800a9f4:	d00d      	beq.n	800aa12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685a      	ldr	r2, [r3, #4]
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	681b      	ldr	r3, [r3, #0]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	441a      	add	r2, r3
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	681a      	ldr	r2, [r3, #0]
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	601a      	str	r2, [r3, #0]
 800aa10:	e008      	b.n	800aa24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800aa12:	4b0c      	ldr	r3, [pc, #48]	@ (800aa44 <prvInsertBlockIntoFreeList+0xb0>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	e003      	b.n	800aa24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	681a      	ldr	r2, [r3, #0]
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800aa24:	68fa      	ldr	r2, [r7, #12]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	429a      	cmp	r2, r3
 800aa2a:	d002      	beq.n	800aa32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	687a      	ldr	r2, [r7, #4]
 800aa30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aa32:	bf00      	nop
 800aa34:	3714      	adds	r7, #20
 800aa36:	46bd      	mov	sp, r7
 800aa38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa3c:	4770      	bx	lr
 800aa3e:	bf00      	nop
 800aa40:	200065cc 	.word	0x200065cc
 800aa44:	200065d4 	.word	0x200065d4

0800aa48 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa48:	4b04      	ldr	r3, [pc, #16]	@ (800aa5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa4a:	681a      	ldr	r2, [r3, #0]
 800aa4c:	b10a      	cbz	r2, 800aa52 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xa>
 800aa4e:	4803      	ldr	r0, [pc, #12]	@ (800aa5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa50:	4770      	bx	lr
 800aa52:	4a03      	ldr	r2, [pc, #12]	@ (800aa60 <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x18>)
 800aa54:	4801      	ldr	r0, [pc, #4]	@ (800aa5c <rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x14>)
 800aa56:	6812      	ldr	r2, [r2, #0]
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	4770      	bx	lr
 800aa5c:	2000001c 	.word	0x2000001c
 800aa60:	200001d0 	.word	0x200001d0

0800aa64 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa64:	4a02      	ldr	r2, [pc, #8]	@ (800aa70 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0xc>)
 800aa66:	4b03      	ldr	r3, [pc, #12]	@ (800aa74 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x10>)
 800aa68:	6812      	ldr	r2, [r2, #0]
 800aa6a:	601a      	str	r2, [r3, #0]
 800aa6c:	4770      	bx	lr
 800aa6e:	bf00      	nop
 800aa70:	200001d0 	.word	0x200001d0
 800aa74:	2000001c 	.word	0x2000001c

0800aa78 <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_init_function>:
 800aa78:	f003 be74 	b.w	800e764 <geometry_msgs__msg__Twist__init>

0800aa7c <geometry_msgs__msg__Twist__rosidl_typesupport_introspection_c__Twist_fini_function>:
 800aa7c:	f003 be96 	b.w	800e7ac <geometry_msgs__msg__Twist__fini>

0800aa80 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800aa80:	b510      	push	{r4, lr}
 800aa82:	f000 f819 	bl	800aab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aa86:	4c07      	ldr	r4, [pc, #28]	@ (800aaa4 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x24>)
 800aa88:	60e0      	str	r0, [r4, #12]
 800aa8a:	f000 f815 	bl	800aab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aa8e:	4b06      	ldr	r3, [pc, #24]	@ (800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aa90:	64a0      	str	r0, [r4, #72]	@ 0x48
 800aa92:	681a      	ldr	r2, [r3, #0]
 800aa94:	b10a      	cbz	r2, 800aa9a <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x1a>
 800aa96:	4804      	ldr	r0, [pc, #16]	@ (800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aa98:	bd10      	pop	{r4, pc}
 800aa9a:	4a04      	ldr	r2, [pc, #16]	@ (800aaac <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x2c>)
 800aa9c:	4802      	ldr	r0, [pc, #8]	@ (800aaa8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x28>)
 800aa9e:	6812      	ldr	r2, [r2, #0]
 800aaa0:	601a      	str	r2, [r3, #0]
 800aaa2:	bd10      	pop	{r4, pc}
 800aaa4:	20000028 	.word	0x20000028
 800aaa8:	200000a0 	.word	0x200000a0
 800aaac:	200001d4 	.word	0x200001d4

0800aab0 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_init_function>:
 800aab0:	f003 be88 	b.w	800e7c4 <geometry_msgs__msg__Vector3__init>

0800aab4 <geometry_msgs__msg__Vector3__rosidl_typesupport_introspection_c__Vector3_fini_function>:
 800aab4:	f003 be8a 	b.w	800e7cc <geometry_msgs__msg__Vector3__fini>

0800aab8 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800aab8:	4b04      	ldr	r3, [pc, #16]	@ (800aacc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aaba:	681a      	ldr	r2, [r3, #0]
 800aabc:	b10a      	cbz	r2, 800aac2 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0xa>
 800aabe:	4803      	ldr	r0, [pc, #12]	@ (800aacc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aac0:	4770      	bx	lr
 800aac2:	4a03      	ldr	r2, [pc, #12]	@ (800aad0 <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x18>)
 800aac4:	4801      	ldr	r0, [pc, #4]	@ (800aacc <rosidl_typesupport_introspection_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x14>)
 800aac6:	6812      	ldr	r2, [r2, #0]
 800aac8:	601a      	str	r2, [r3, #0]
 800aaca:	4770      	bx	lr
 800aacc:	20000160 	.word	0x20000160
 800aad0:	200001d4 	.word	0x200001d4

0800aad4 <get_serialized_size_geometry_msgs__msg__Twist>:
 800aad4:	b570      	push	{r4, r5, r6, lr}
 800aad6:	4604      	mov	r4, r0
 800aad8:	b148      	cbz	r0, 800aaee <get_serialized_size_geometry_msgs__msg__Twist+0x1a>
 800aada:	460d      	mov	r5, r1
 800aadc:	f000 f860 	bl	800aba0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800aae0:	4606      	mov	r6, r0
 800aae2:	1829      	adds	r1, r5, r0
 800aae4:	f104 0018 	add.w	r0, r4, #24
 800aae8:	f000 f85a 	bl	800aba0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800aaec:	4430      	add	r0, r6
 800aaee:	bd70      	pop	{r4, r5, r6, pc}

0800aaf0 <_Twist__cdr_deserialize>:
 800aaf0:	b570      	push	{r4, r5, r6, lr}
 800aaf2:	460c      	mov	r4, r1
 800aaf4:	b189      	cbz	r1, 800ab1a <_Twist__cdr_deserialize+0x2a>
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	f000 f8de 	bl	800acb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800aafc:	6843      	ldr	r3, [r0, #4]
 800aafe:	4621      	mov	r1, r4
 800ab00:	68db      	ldr	r3, [r3, #12]
 800ab02:	4628      	mov	r0, r5
 800ab04:	4798      	blx	r3
 800ab06:	f000 f8d7 	bl	800acb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab0a:	6843      	ldr	r3, [r0, #4]
 800ab0c:	f104 0118 	add.w	r1, r4, #24
 800ab10:	4628      	mov	r0, r5
 800ab12:	68db      	ldr	r3, [r3, #12]
 800ab14:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ab18:	4718      	bx	r3
 800ab1a:	4608      	mov	r0, r1
 800ab1c:	bd70      	pop	{r4, r5, r6, pc}
 800ab1e:	bf00      	nop

0800ab20 <_Twist__cdr_serialize>:
 800ab20:	b510      	push	{r4, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	9101      	str	r1, [sp, #4]
 800ab26:	b190      	cbz	r0, 800ab4e <_Twist__cdr_serialize+0x2e>
 800ab28:	4604      	mov	r4, r0
 800ab2a:	f000 f8c5 	bl	800acb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab2e:	6843      	ldr	r3, [r0, #4]
 800ab30:	9901      	ldr	r1, [sp, #4]
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	4620      	mov	r0, r4
 800ab36:	4798      	blx	r3
 800ab38:	f000 f8be 	bl	800acb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>
 800ab3c:	6843      	ldr	r3, [r0, #4]
 800ab3e:	9901      	ldr	r1, [sp, #4]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f104 0018 	add.w	r0, r4, #24
 800ab46:	b002      	add	sp, #8
 800ab48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ab4c:	4718      	bx	r3
 800ab4e:	b002      	add	sp, #8
 800ab50:	bd10      	pop	{r4, pc}
 800ab52:	bf00      	nop

0800ab54 <_Twist__get_serialized_size>:
 800ab54:	b538      	push	{r3, r4, r5, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	b148      	cbz	r0, 800ab6e <_Twist__get_serialized_size+0x1a>
 800ab5a:	2100      	movs	r1, #0
 800ab5c:	f000 f820 	bl	800aba0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab60:	4605      	mov	r5, r0
 800ab62:	4601      	mov	r1, r0
 800ab64:	f104 0018 	add.w	r0, r4, #24
 800ab68:	f000 f81a 	bl	800aba0 <get_serialized_size_geometry_msgs__msg__Vector3>
 800ab6c:	4428      	add	r0, r5
 800ab6e:	bd38      	pop	{r3, r4, r5, pc}

0800ab70 <_Twist__max_serialized_size>:
 800ab70:	b510      	push	{r4, lr}
 800ab72:	b082      	sub	sp, #8
 800ab74:	2301      	movs	r3, #1
 800ab76:	2100      	movs	r1, #0
 800ab78:	f10d 0007 	add.w	r0, sp, #7
 800ab7c:	f88d 3007 	strb.w	r3, [sp, #7]
 800ab80:	f000 f87e 	bl	800ac80 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ab84:	4604      	mov	r4, r0
 800ab86:	4601      	mov	r1, r0
 800ab88:	f10d 0007 	add.w	r0, sp, #7
 800ab8c:	f000 f878 	bl	800ac80 <max_serialized_size_geometry_msgs__msg__Vector3>
 800ab90:	4420      	add	r0, r4
 800ab92:	b002      	add	sp, #8
 800ab94:	bd10      	pop	{r4, pc}
 800ab96:	bf00      	nop

0800ab98 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist>:
 800ab98:	4800      	ldr	r0, [pc, #0]	@ (800ab9c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Twist+0x4>)
 800ab9a:	4770      	bx	lr
 800ab9c:	2000016c 	.word	0x2000016c

0800aba0 <get_serialized_size_geometry_msgs__msg__Vector3>:
 800aba0:	b1b8      	cbz	r0, 800abd2 <get_serialized_size_geometry_msgs__msg__Vector3+0x32>
 800aba2:	b538      	push	{r3, r4, r5, lr}
 800aba4:	460d      	mov	r5, r1
 800aba6:	4628      	mov	r0, r5
 800aba8:	2108      	movs	r1, #8
 800abaa:	f001 f9fd 	bl	800bfa8 <ucdr_alignment>
 800abae:	f105 0308 	add.w	r3, r5, #8
 800abb2:	181c      	adds	r4, r3, r0
 800abb4:	2108      	movs	r1, #8
 800abb6:	4620      	mov	r0, r4
 800abb8:	f001 f9f6 	bl	800bfa8 <ucdr_alignment>
 800abbc:	3008      	adds	r0, #8
 800abbe:	4404      	add	r4, r0
 800abc0:	2108      	movs	r1, #8
 800abc2:	4620      	mov	r0, r4
 800abc4:	f001 f9f0 	bl	800bfa8 <ucdr_alignment>
 800abc8:	f1c5 0508 	rsb	r5, r5, #8
 800abcc:	4428      	add	r0, r5
 800abce:	4420      	add	r0, r4
 800abd0:	bd38      	pop	{r3, r4, r5, pc}
 800abd2:	4770      	bx	lr

0800abd4 <_Vector3__cdr_deserialize>:
 800abd4:	b538      	push	{r3, r4, r5, lr}
 800abd6:	460c      	mov	r4, r1
 800abd8:	b171      	cbz	r1, 800abf8 <_Vector3__cdr_deserialize+0x24>
 800abda:	4605      	mov	r5, r0
 800abdc:	f001 f8c6 	bl	800bd6c <ucdr_deserialize_double>
 800abe0:	f104 0108 	add.w	r1, r4, #8
 800abe4:	4628      	mov	r0, r5
 800abe6:	f001 f8c1 	bl	800bd6c <ucdr_deserialize_double>
 800abea:	f104 0110 	add.w	r1, r4, #16
 800abee:	4628      	mov	r0, r5
 800abf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf4:	f001 b8ba 	b.w	800bd6c <ucdr_deserialize_double>
 800abf8:	4608      	mov	r0, r1
 800abfa:	bd38      	pop	{r3, r4, r5, pc}

0800abfc <_Vector3__cdr_serialize>:
 800abfc:	b198      	cbz	r0, 800ac26 <_Vector3__cdr_serialize+0x2a>
 800abfe:	b538      	push	{r3, r4, r5, lr}
 800ac00:	ed90 0b00 	vldr	d0, [r0]
 800ac04:	460d      	mov	r5, r1
 800ac06:	4604      	mov	r4, r0
 800ac08:	4608      	mov	r0, r1
 800ac0a:	f000 ffdf 	bl	800bbcc <ucdr_serialize_double>
 800ac0e:	ed94 0b02 	vldr	d0, [r4, #8]
 800ac12:	4628      	mov	r0, r5
 800ac14:	f000 ffda 	bl	800bbcc <ucdr_serialize_double>
 800ac18:	ed94 0b04 	vldr	d0, [r4, #16]
 800ac1c:	4628      	mov	r0, r5
 800ac1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ac22:	f000 bfd3 	b.w	800bbcc <ucdr_serialize_double>
 800ac26:	4770      	bx	lr

0800ac28 <_Vector3__get_serialized_size>:
 800ac28:	b198      	cbz	r0, 800ac52 <_Vector3__get_serialized_size+0x2a>
 800ac2a:	b510      	push	{r4, lr}
 800ac2c:	2108      	movs	r1, #8
 800ac2e:	2000      	movs	r0, #0
 800ac30:	f001 f9ba 	bl	800bfa8 <ucdr_alignment>
 800ac34:	f100 0408 	add.w	r4, r0, #8
 800ac38:	2108      	movs	r1, #8
 800ac3a:	4620      	mov	r0, r4
 800ac3c:	f001 f9b4 	bl	800bfa8 <ucdr_alignment>
 800ac40:	3008      	adds	r0, #8
 800ac42:	4404      	add	r4, r0
 800ac44:	2108      	movs	r1, #8
 800ac46:	4620      	mov	r0, r4
 800ac48:	f001 f9ae 	bl	800bfa8 <ucdr_alignment>
 800ac4c:	3008      	adds	r0, #8
 800ac4e:	4420      	add	r0, r4
 800ac50:	bd10      	pop	{r4, pc}
 800ac52:	4770      	bx	lr

0800ac54 <_Vector3__max_serialized_size>:
 800ac54:	b538      	push	{r3, r4, r5, lr}
 800ac56:	2108      	movs	r1, #8
 800ac58:	2000      	movs	r0, #0
 800ac5a:	f001 f9a5 	bl	800bfa8 <ucdr_alignment>
 800ac5e:	f100 0508 	add.w	r5, r0, #8
 800ac62:	2108      	movs	r1, #8
 800ac64:	4628      	mov	r0, r5
 800ac66:	f001 f99f 	bl	800bfa8 <ucdr_alignment>
 800ac6a:	f100 0408 	add.w	r4, r0, #8
 800ac6e:	442c      	add	r4, r5
 800ac70:	2108      	movs	r1, #8
 800ac72:	4620      	mov	r0, r4
 800ac74:	f001 f998 	bl	800bfa8 <ucdr_alignment>
 800ac78:	3008      	adds	r0, #8
 800ac7a:	4420      	add	r0, r4
 800ac7c:	bd38      	pop	{r3, r4, r5, pc}
 800ac7e:	bf00      	nop

0800ac80 <max_serialized_size_geometry_msgs__msg__Vector3>:
 800ac80:	b570      	push	{r4, r5, r6, lr}
 800ac82:	2301      	movs	r3, #1
 800ac84:	460c      	mov	r4, r1
 800ac86:	7003      	strb	r3, [r0, #0]
 800ac88:	2108      	movs	r1, #8
 800ac8a:	4620      	mov	r0, r4
 800ac8c:	f001 f98c 	bl	800bfa8 <ucdr_alignment>
 800ac90:	f104 0508 	add.w	r5, r4, #8
 800ac94:	1946      	adds	r6, r0, r5
 800ac96:	2108      	movs	r1, #8
 800ac98:	4630      	mov	r0, r6
 800ac9a:	f001 f985 	bl	800bfa8 <ucdr_alignment>
 800ac9e:	f100 0508 	add.w	r5, r0, #8
 800aca2:	4435      	add	r5, r6
 800aca4:	2108      	movs	r1, #8
 800aca6:	4628      	mov	r0, r5
 800aca8:	f001 f97e 	bl	800bfa8 <ucdr_alignment>
 800acac:	f1c4 0408 	rsb	r4, r4, #8
 800acb0:	4420      	add	r0, r4
 800acb2:	4428      	add	r0, r5
 800acb4:	bd70      	pop	{r4, r5, r6, pc}
 800acb6:	bf00      	nop

0800acb8 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3>:
 800acb8:	4800      	ldr	r0, [pc, #0]	@ (800acbc <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__geometry_msgs__msg__Vector3+0x4>)
 800acba:	4770      	bx	lr
 800acbc:	20000194 	.word	0x20000194

0800acc0 <ucdr_serialize_bool>:
 800acc0:	b538      	push	{r3, r4, r5, lr}
 800acc2:	460d      	mov	r5, r1
 800acc4:	2101      	movs	r1, #1
 800acc6:	4604      	mov	r4, r0
 800acc8:	f001 f922 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800accc:	b148      	cbz	r0, 800ace2 <ucdr_serialize_bool+0x22>
 800acce:	68a3      	ldr	r3, [r4, #8]
 800acd0:	701d      	strb	r5, [r3, #0]
 800acd2:	68a2      	ldr	r2, [r4, #8]
 800acd4:	6923      	ldr	r3, [r4, #16]
 800acd6:	2101      	movs	r1, #1
 800acd8:	440a      	add	r2, r1
 800acda:	440b      	add	r3, r1
 800acdc:	60a2      	str	r2, [r4, #8]
 800acde:	6123      	str	r3, [r4, #16]
 800ace0:	7561      	strb	r1, [r4, #21]
 800ace2:	7da0      	ldrb	r0, [r4, #22]
 800ace4:	f080 0001 	eor.w	r0, r0, #1
 800ace8:	bd38      	pop	{r3, r4, r5, pc}
 800acea:	bf00      	nop

0800acec <ucdr_deserialize_bool>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	460d      	mov	r5, r1
 800acf0:	2101      	movs	r1, #1
 800acf2:	4604      	mov	r4, r0
 800acf4:	f001 f90c 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800acf8:	b160      	cbz	r0, 800ad14 <ucdr_deserialize_bool+0x28>
 800acfa:	68a2      	ldr	r2, [r4, #8]
 800acfc:	6923      	ldr	r3, [r4, #16]
 800acfe:	f812 1b01 	ldrb.w	r1, [r2], #1
 800ad02:	3900      	subs	r1, #0
 800ad04:	bf18      	it	ne
 800ad06:	2101      	movne	r1, #1
 800ad08:	7029      	strb	r1, [r5, #0]
 800ad0a:	3301      	adds	r3, #1
 800ad0c:	2101      	movs	r1, #1
 800ad0e:	60a2      	str	r2, [r4, #8]
 800ad10:	6123      	str	r3, [r4, #16]
 800ad12:	7561      	strb	r1, [r4, #21]
 800ad14:	7da0      	ldrb	r0, [r4, #22]
 800ad16:	f080 0001 	eor.w	r0, r0, #1
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}

0800ad1c <ucdr_serialize_uint8_t>:
 800ad1c:	b538      	push	{r3, r4, r5, lr}
 800ad1e:	460d      	mov	r5, r1
 800ad20:	2101      	movs	r1, #1
 800ad22:	4604      	mov	r4, r0
 800ad24:	f001 f8f4 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800ad28:	b148      	cbz	r0, 800ad3e <ucdr_serialize_uint8_t+0x22>
 800ad2a:	68a3      	ldr	r3, [r4, #8]
 800ad2c:	701d      	strb	r5, [r3, #0]
 800ad2e:	68a2      	ldr	r2, [r4, #8]
 800ad30:	6923      	ldr	r3, [r4, #16]
 800ad32:	2101      	movs	r1, #1
 800ad34:	440a      	add	r2, r1
 800ad36:	440b      	add	r3, r1
 800ad38:	60a2      	str	r2, [r4, #8]
 800ad3a:	6123      	str	r3, [r4, #16]
 800ad3c:	7561      	strb	r1, [r4, #21]
 800ad3e:	7da0      	ldrb	r0, [r4, #22]
 800ad40:	f080 0001 	eor.w	r0, r0, #1
 800ad44:	bd38      	pop	{r3, r4, r5, pc}
 800ad46:	bf00      	nop

0800ad48 <ucdr_deserialize_uint8_t>:
 800ad48:	b538      	push	{r3, r4, r5, lr}
 800ad4a:	460d      	mov	r5, r1
 800ad4c:	2101      	movs	r1, #1
 800ad4e:	4604      	mov	r4, r0
 800ad50:	f001 f8de 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800ad54:	b150      	cbz	r0, 800ad6c <ucdr_deserialize_uint8_t+0x24>
 800ad56:	68a3      	ldr	r3, [r4, #8]
 800ad58:	781b      	ldrb	r3, [r3, #0]
 800ad5a:	702b      	strb	r3, [r5, #0]
 800ad5c:	68a2      	ldr	r2, [r4, #8]
 800ad5e:	6923      	ldr	r3, [r4, #16]
 800ad60:	2101      	movs	r1, #1
 800ad62:	440a      	add	r2, r1
 800ad64:	440b      	add	r3, r1
 800ad66:	60a2      	str	r2, [r4, #8]
 800ad68:	6123      	str	r3, [r4, #16]
 800ad6a:	7561      	strb	r1, [r4, #21]
 800ad6c:	7da0      	ldrb	r0, [r4, #22]
 800ad6e:	f080 0001 	eor.w	r0, r0, #1
 800ad72:	bd38      	pop	{r3, r4, r5, pc}

0800ad74 <ucdr_serialize_uint16_t>:
 800ad74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad78:	b082      	sub	sp, #8
 800ad7a:	460b      	mov	r3, r1
 800ad7c:	2102      	movs	r1, #2
 800ad7e:	4604      	mov	r4, r0
 800ad80:	f8ad 3006 	strh.w	r3, [sp, #6]
 800ad84:	f001 f918 	bl	800bfb8 <ucdr_buffer_alignment>
 800ad88:	4601      	mov	r1, r0
 800ad8a:	4620      	mov	r0, r4
 800ad8c:	7d67      	ldrb	r7, [r4, #21]
 800ad8e:	f001 f957 	bl	800c040 <ucdr_advance_buffer>
 800ad92:	2102      	movs	r1, #2
 800ad94:	4620      	mov	r0, r4
 800ad96:	f001 f8af 	bl	800bef8 <ucdr_check_buffer_available_for>
 800ad9a:	bb78      	cbnz	r0, 800adfc <ucdr_serialize_uint16_t+0x88>
 800ad9c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800ada0:	42ab      	cmp	r3, r5
 800ada2:	d926      	bls.n	800adf2 <ucdr_serialize_uint16_t+0x7e>
 800ada4:	1b5e      	subs	r6, r3, r5
 800ada6:	60a3      	str	r3, [r4, #8]
 800ada8:	6923      	ldr	r3, [r4, #16]
 800adaa:	f1c6 0802 	rsb	r8, r6, #2
 800adae:	4433      	add	r3, r6
 800adb0:	6123      	str	r3, [r4, #16]
 800adb2:	4641      	mov	r1, r8
 800adb4:	4620      	mov	r0, r4
 800adb6:	f001 f8ab 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800adba:	2800      	cmp	r0, #0
 800adbc:	d03b      	beq.n	800ae36 <ucdr_serialize_uint16_t+0xc2>
 800adbe:	7d23      	ldrb	r3, [r4, #20]
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d04a      	beq.n	800ae5a <ucdr_serialize_uint16_t+0xe6>
 800adc4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800adc8:	702b      	strb	r3, [r5, #0]
 800adca:	2e00      	cmp	r6, #0
 800adcc:	d040      	beq.n	800ae50 <ucdr_serialize_uint16_t+0xdc>
 800adce:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800add2:	706b      	strb	r3, [r5, #1]
 800add4:	6923      	ldr	r3, [r4, #16]
 800add6:	68a2      	ldr	r2, [r4, #8]
 800add8:	7da0      	ldrb	r0, [r4, #22]
 800adda:	3302      	adds	r3, #2
 800addc:	1b9e      	subs	r6, r3, r6
 800adde:	4442      	add	r2, r8
 800ade0:	2302      	movs	r3, #2
 800ade2:	f080 0001 	eor.w	r0, r0, #1
 800ade6:	60a2      	str	r2, [r4, #8]
 800ade8:	6126      	str	r6, [r4, #16]
 800adea:	7563      	strb	r3, [r4, #21]
 800adec:	b002      	add	sp, #8
 800adee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800adf2:	2102      	movs	r1, #2
 800adf4:	4620      	mov	r0, r4
 800adf6:	f001 f88b 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800adfa:	b190      	cbz	r0, 800ae22 <ucdr_serialize_uint16_t+0xae>
 800adfc:	7d23      	ldrb	r3, [r4, #20]
 800adfe:	2b01      	cmp	r3, #1
 800ae00:	68a3      	ldr	r3, [r4, #8]
 800ae02:	d014      	beq.n	800ae2e <ucdr_serialize_uint16_t+0xba>
 800ae04:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ae08:	701a      	strb	r2, [r3, #0]
 800ae0a:	68a3      	ldr	r3, [r4, #8]
 800ae0c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae10:	705a      	strb	r2, [r3, #1]
 800ae12:	68a2      	ldr	r2, [r4, #8]
 800ae14:	6923      	ldr	r3, [r4, #16]
 800ae16:	3202      	adds	r2, #2
 800ae18:	3302      	adds	r3, #2
 800ae1a:	2102      	movs	r1, #2
 800ae1c:	60a2      	str	r2, [r4, #8]
 800ae1e:	6123      	str	r3, [r4, #16]
 800ae20:	7561      	strb	r1, [r4, #21]
 800ae22:	7da0      	ldrb	r0, [r4, #22]
 800ae24:	f080 0001 	eor.w	r0, r0, #1
 800ae28:	b002      	add	sp, #8
 800ae2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae2e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ae32:	801a      	strh	r2, [r3, #0]
 800ae34:	e7ed      	b.n	800ae12 <ucdr_serialize_uint16_t+0x9e>
 800ae36:	68a2      	ldr	r2, [r4, #8]
 800ae38:	6923      	ldr	r3, [r4, #16]
 800ae3a:	7da0      	ldrb	r0, [r4, #22]
 800ae3c:	7567      	strb	r7, [r4, #21]
 800ae3e:	1b92      	subs	r2, r2, r6
 800ae40:	1b9b      	subs	r3, r3, r6
 800ae42:	f080 0001 	eor.w	r0, r0, #1
 800ae46:	60a2      	str	r2, [r4, #8]
 800ae48:	6123      	str	r3, [r4, #16]
 800ae4a:	b002      	add	sp, #8
 800ae4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ae50:	68a3      	ldr	r3, [r4, #8]
 800ae52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ae56:	701a      	strb	r2, [r3, #0]
 800ae58:	e7bc      	b.n	800add4 <ucdr_serialize_uint16_t+0x60>
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	f10d 0506 	add.w	r5, sp, #6
 800ae60:	4629      	mov	r1, r5
 800ae62:	4632      	mov	r2, r6
 800ae64:	f00c ff51 	bl	8017d0a <memcpy>
 800ae68:	68a0      	ldr	r0, [r4, #8]
 800ae6a:	4642      	mov	r2, r8
 800ae6c:	19a9      	adds	r1, r5, r6
 800ae6e:	f00c ff4c 	bl	8017d0a <memcpy>
 800ae72:	e7af      	b.n	800add4 <ucdr_serialize_uint16_t+0x60>

0800ae74 <ucdr_serialize_endian_uint16_t>:
 800ae74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ae78:	b083      	sub	sp, #12
 800ae7a:	460d      	mov	r5, r1
 800ae7c:	2102      	movs	r1, #2
 800ae7e:	4604      	mov	r4, r0
 800ae80:	f8ad 2006 	strh.w	r2, [sp, #6]
 800ae84:	f001 f898 	bl	800bfb8 <ucdr_buffer_alignment>
 800ae88:	4601      	mov	r1, r0
 800ae8a:	4620      	mov	r0, r4
 800ae8c:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ae90:	f001 f8d6 	bl	800c040 <ucdr_advance_buffer>
 800ae94:	2102      	movs	r1, #2
 800ae96:	4620      	mov	r0, r4
 800ae98:	f001 f82e 	bl	800bef8 <ucdr_check_buffer_available_for>
 800ae9c:	bb70      	cbnz	r0, 800aefc <ucdr_serialize_endian_uint16_t+0x88>
 800ae9e:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800aea2:	42be      	cmp	r6, r7
 800aea4:	d925      	bls.n	800aef2 <ucdr_serialize_endian_uint16_t+0x7e>
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	60a6      	str	r6, [r4, #8]
 800aeaa:	1bf6      	subs	r6, r6, r7
 800aeac:	4433      	add	r3, r6
 800aeae:	f1c6 0902 	rsb	r9, r6, #2
 800aeb2:	6123      	str	r3, [r4, #16]
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	4620      	mov	r0, r4
 800aeb8:	f001 f82a 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800aebc:	2800      	cmp	r0, #0
 800aebe:	d039      	beq.n	800af34 <ucdr_serialize_endian_uint16_t+0xc0>
 800aec0:	2d01      	cmp	r5, #1
 800aec2:	d04a      	beq.n	800af5a <ucdr_serialize_endian_uint16_t+0xe6>
 800aec4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800aec8:	703b      	strb	r3, [r7, #0]
 800aeca:	2e00      	cmp	r6, #0
 800aecc:	d040      	beq.n	800af50 <ucdr_serialize_endian_uint16_t+0xdc>
 800aece:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800aed2:	707b      	strb	r3, [r7, #1]
 800aed4:	6923      	ldr	r3, [r4, #16]
 800aed6:	68a2      	ldr	r2, [r4, #8]
 800aed8:	7da0      	ldrb	r0, [r4, #22]
 800aeda:	3302      	adds	r3, #2
 800aedc:	444a      	add	r2, r9
 800aede:	1b9b      	subs	r3, r3, r6
 800aee0:	2102      	movs	r1, #2
 800aee2:	f080 0001 	eor.w	r0, r0, #1
 800aee6:	60a2      	str	r2, [r4, #8]
 800aee8:	6123      	str	r3, [r4, #16]
 800aeea:	7561      	strb	r1, [r4, #21]
 800aeec:	b003      	add	sp, #12
 800aeee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aef2:	2102      	movs	r1, #2
 800aef4:	4620      	mov	r0, r4
 800aef6:	f001 f80b 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800aefa:	b188      	cbz	r0, 800af20 <ucdr_serialize_endian_uint16_t+0xac>
 800aefc:	2d01      	cmp	r5, #1
 800aefe:	68a3      	ldr	r3, [r4, #8]
 800af00:	d014      	beq.n	800af2c <ucdr_serialize_endian_uint16_t+0xb8>
 800af02:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800af06:	701a      	strb	r2, [r3, #0]
 800af08:	68a3      	ldr	r3, [r4, #8]
 800af0a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af0e:	705a      	strb	r2, [r3, #1]
 800af10:	68a2      	ldr	r2, [r4, #8]
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	3202      	adds	r2, #2
 800af16:	3302      	adds	r3, #2
 800af18:	2102      	movs	r1, #2
 800af1a:	60a2      	str	r2, [r4, #8]
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	7561      	strb	r1, [r4, #21]
 800af20:	7da0      	ldrb	r0, [r4, #22]
 800af22:	f080 0001 	eor.w	r0, r0, #1
 800af26:	b003      	add	sp, #12
 800af28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800af30:	801a      	strh	r2, [r3, #0]
 800af32:	e7ed      	b.n	800af10 <ucdr_serialize_endian_uint16_t+0x9c>
 800af34:	68a2      	ldr	r2, [r4, #8]
 800af36:	6923      	ldr	r3, [r4, #16]
 800af38:	7da0      	ldrb	r0, [r4, #22]
 800af3a:	f884 8015 	strb.w	r8, [r4, #21]
 800af3e:	1b92      	subs	r2, r2, r6
 800af40:	1b9b      	subs	r3, r3, r6
 800af42:	f080 0001 	eor.w	r0, r0, #1
 800af46:	60a2      	str	r2, [r4, #8]
 800af48:	6123      	str	r3, [r4, #16]
 800af4a:	b003      	add	sp, #12
 800af4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af50:	68a3      	ldr	r3, [r4, #8]
 800af52:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800af56:	701a      	strb	r2, [r3, #0]
 800af58:	e7bc      	b.n	800aed4 <ucdr_serialize_endian_uint16_t+0x60>
 800af5a:	f10d 0506 	add.w	r5, sp, #6
 800af5e:	4629      	mov	r1, r5
 800af60:	4632      	mov	r2, r6
 800af62:	4638      	mov	r0, r7
 800af64:	f00c fed1 	bl	8017d0a <memcpy>
 800af68:	68a0      	ldr	r0, [r4, #8]
 800af6a:	464a      	mov	r2, r9
 800af6c:	19a9      	adds	r1, r5, r6
 800af6e:	f00c fecc 	bl	8017d0a <memcpy>
 800af72:	e7af      	b.n	800aed4 <ucdr_serialize_endian_uint16_t+0x60>

0800af74 <ucdr_deserialize_uint16_t>:
 800af74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af78:	460d      	mov	r5, r1
 800af7a:	2102      	movs	r1, #2
 800af7c:	4604      	mov	r4, r0
 800af7e:	f001 f81b 	bl	800bfb8 <ucdr_buffer_alignment>
 800af82:	4601      	mov	r1, r0
 800af84:	4620      	mov	r0, r4
 800af86:	f894 8015 	ldrb.w	r8, [r4, #21]
 800af8a:	f001 f859 	bl	800c040 <ucdr_advance_buffer>
 800af8e:	2102      	movs	r1, #2
 800af90:	4620      	mov	r0, r4
 800af92:	f000 ffb1 	bl	800bef8 <ucdr_check_buffer_available_for>
 800af96:	bb60      	cbnz	r0, 800aff2 <ucdr_deserialize_uint16_t+0x7e>
 800af98:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800af9c:	42be      	cmp	r6, r7
 800af9e:	d923      	bls.n	800afe8 <ucdr_deserialize_uint16_t+0x74>
 800afa0:	6923      	ldr	r3, [r4, #16]
 800afa2:	60a6      	str	r6, [r4, #8]
 800afa4:	1bf6      	subs	r6, r6, r7
 800afa6:	4433      	add	r3, r6
 800afa8:	f1c6 0902 	rsb	r9, r6, #2
 800afac:	6123      	str	r3, [r4, #16]
 800afae:	4649      	mov	r1, r9
 800afb0:	4620      	mov	r0, r4
 800afb2:	f000 ffad 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800afb6:	2800      	cmp	r0, #0
 800afb8:	d034      	beq.n	800b024 <ucdr_deserialize_uint16_t+0xb0>
 800afba:	7d23      	ldrb	r3, [r4, #20]
 800afbc:	2b01      	cmp	r3, #1
 800afbe:	d042      	beq.n	800b046 <ucdr_deserialize_uint16_t+0xd2>
 800afc0:	787b      	ldrb	r3, [r7, #1]
 800afc2:	702b      	strb	r3, [r5, #0]
 800afc4:	2e00      	cmp	r6, #0
 800afc6:	d03a      	beq.n	800b03e <ucdr_deserialize_uint16_t+0xca>
 800afc8:	783b      	ldrb	r3, [r7, #0]
 800afca:	706b      	strb	r3, [r5, #1]
 800afcc:	6923      	ldr	r3, [r4, #16]
 800afce:	68a2      	ldr	r2, [r4, #8]
 800afd0:	7da0      	ldrb	r0, [r4, #22]
 800afd2:	2102      	movs	r1, #2
 800afd4:	3302      	adds	r3, #2
 800afd6:	444a      	add	r2, r9
 800afd8:	1b9b      	subs	r3, r3, r6
 800afda:	7561      	strb	r1, [r4, #21]
 800afdc:	60a2      	str	r2, [r4, #8]
 800afde:	6123      	str	r3, [r4, #16]
 800afe0:	f080 0001 	eor.w	r0, r0, #1
 800afe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800afe8:	2102      	movs	r1, #2
 800afea:	4620      	mov	r0, r4
 800afec:	f000 ff90 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800aff0:	b180      	cbz	r0, 800b014 <ucdr_deserialize_uint16_t+0xa0>
 800aff2:	7d23      	ldrb	r3, [r4, #20]
 800aff4:	2b01      	cmp	r3, #1
 800aff6:	68a3      	ldr	r3, [r4, #8]
 800aff8:	d011      	beq.n	800b01e <ucdr_deserialize_uint16_t+0xaa>
 800affa:	785b      	ldrb	r3, [r3, #1]
 800affc:	702b      	strb	r3, [r5, #0]
 800affe:	68a3      	ldr	r3, [r4, #8]
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	706b      	strb	r3, [r5, #1]
 800b004:	68a2      	ldr	r2, [r4, #8]
 800b006:	6923      	ldr	r3, [r4, #16]
 800b008:	3202      	adds	r2, #2
 800b00a:	3302      	adds	r3, #2
 800b00c:	2102      	movs	r1, #2
 800b00e:	60a2      	str	r2, [r4, #8]
 800b010:	6123      	str	r3, [r4, #16]
 800b012:	7561      	strb	r1, [r4, #21]
 800b014:	7da0      	ldrb	r0, [r4, #22]
 800b016:	f080 0001 	eor.w	r0, r0, #1
 800b01a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b01e:	881b      	ldrh	r3, [r3, #0]
 800b020:	802b      	strh	r3, [r5, #0]
 800b022:	e7ef      	b.n	800b004 <ucdr_deserialize_uint16_t+0x90>
 800b024:	68a2      	ldr	r2, [r4, #8]
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	7da0      	ldrb	r0, [r4, #22]
 800b02a:	f884 8015 	strb.w	r8, [r4, #21]
 800b02e:	1b92      	subs	r2, r2, r6
 800b030:	1b9b      	subs	r3, r3, r6
 800b032:	60a2      	str	r2, [r4, #8]
 800b034:	6123      	str	r3, [r4, #16]
 800b036:	f080 0001 	eor.w	r0, r0, #1
 800b03a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b03e:	68a3      	ldr	r3, [r4, #8]
 800b040:	781b      	ldrb	r3, [r3, #0]
 800b042:	706b      	strb	r3, [r5, #1]
 800b044:	e7c2      	b.n	800afcc <ucdr_deserialize_uint16_t+0x58>
 800b046:	4639      	mov	r1, r7
 800b048:	4632      	mov	r2, r6
 800b04a:	4628      	mov	r0, r5
 800b04c:	f00c fe5d 	bl	8017d0a <memcpy>
 800b050:	68a1      	ldr	r1, [r4, #8]
 800b052:	464a      	mov	r2, r9
 800b054:	19a8      	adds	r0, r5, r6
 800b056:	f00c fe58 	bl	8017d0a <memcpy>
 800b05a:	e7b7      	b.n	800afcc <ucdr_deserialize_uint16_t+0x58>

0800b05c <ucdr_deserialize_endian_uint16_t>:
 800b05c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b060:	460e      	mov	r6, r1
 800b062:	2102      	movs	r1, #2
 800b064:	4604      	mov	r4, r0
 800b066:	4615      	mov	r5, r2
 800b068:	f000 ffa6 	bl	800bfb8 <ucdr_buffer_alignment>
 800b06c:	4601      	mov	r1, r0
 800b06e:	4620      	mov	r0, r4
 800b070:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b074:	f000 ffe4 	bl	800c040 <ucdr_advance_buffer>
 800b078:	2102      	movs	r1, #2
 800b07a:	4620      	mov	r0, r4
 800b07c:	f000 ff3c 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b080:	bb70      	cbnz	r0, 800b0e0 <ucdr_deserialize_endian_uint16_t+0x84>
 800b082:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b086:	4547      	cmp	r7, r8
 800b088:	d925      	bls.n	800b0d6 <ucdr_deserialize_endian_uint16_t+0x7a>
 800b08a:	6923      	ldr	r3, [r4, #16]
 800b08c:	60a7      	str	r7, [r4, #8]
 800b08e:	eba7 0708 	sub.w	r7, r7, r8
 800b092:	443b      	add	r3, r7
 800b094:	f1c7 0a02 	rsb	sl, r7, #2
 800b098:	6123      	str	r3, [r4, #16]
 800b09a:	4651      	mov	r1, sl
 800b09c:	4620      	mov	r0, r4
 800b09e:	f000 ff37 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d034      	beq.n	800b110 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b0a6:	2e01      	cmp	r6, #1
 800b0a8:	d043      	beq.n	800b132 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b0aa:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b0ae:	702b      	strb	r3, [r5, #0]
 800b0b0:	2f00      	cmp	r7, #0
 800b0b2:	d03a      	beq.n	800b12a <ucdr_deserialize_endian_uint16_t+0xce>
 800b0b4:	f898 3000 	ldrb.w	r3, [r8]
 800b0b8:	706b      	strb	r3, [r5, #1]
 800b0ba:	6923      	ldr	r3, [r4, #16]
 800b0bc:	68a2      	ldr	r2, [r4, #8]
 800b0be:	7da0      	ldrb	r0, [r4, #22]
 800b0c0:	2102      	movs	r1, #2
 800b0c2:	3302      	adds	r3, #2
 800b0c4:	4452      	add	r2, sl
 800b0c6:	1bdb      	subs	r3, r3, r7
 800b0c8:	7561      	strb	r1, [r4, #21]
 800b0ca:	60a2      	str	r2, [r4, #8]
 800b0cc:	6123      	str	r3, [r4, #16]
 800b0ce:	f080 0001 	eor.w	r0, r0, #1
 800b0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b0d6:	2102      	movs	r1, #2
 800b0d8:	4620      	mov	r0, r4
 800b0da:	f000 ff19 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b0de:	b178      	cbz	r0, 800b100 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b0e0:	2e01      	cmp	r6, #1
 800b0e2:	68a3      	ldr	r3, [r4, #8]
 800b0e4:	d011      	beq.n	800b10a <ucdr_deserialize_endian_uint16_t+0xae>
 800b0e6:	785b      	ldrb	r3, [r3, #1]
 800b0e8:	702b      	strb	r3, [r5, #0]
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	781b      	ldrb	r3, [r3, #0]
 800b0ee:	706b      	strb	r3, [r5, #1]
 800b0f0:	68a2      	ldr	r2, [r4, #8]
 800b0f2:	6923      	ldr	r3, [r4, #16]
 800b0f4:	3202      	adds	r2, #2
 800b0f6:	3302      	adds	r3, #2
 800b0f8:	2102      	movs	r1, #2
 800b0fa:	60a2      	str	r2, [r4, #8]
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	7561      	strb	r1, [r4, #21]
 800b100:	7da0      	ldrb	r0, [r4, #22]
 800b102:	f080 0001 	eor.w	r0, r0, #1
 800b106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b10a:	881b      	ldrh	r3, [r3, #0]
 800b10c:	802b      	strh	r3, [r5, #0]
 800b10e:	e7ef      	b.n	800b0f0 <ucdr_deserialize_endian_uint16_t+0x94>
 800b110:	68a2      	ldr	r2, [r4, #8]
 800b112:	6923      	ldr	r3, [r4, #16]
 800b114:	7da0      	ldrb	r0, [r4, #22]
 800b116:	f884 9015 	strb.w	r9, [r4, #21]
 800b11a:	1bd2      	subs	r2, r2, r7
 800b11c:	1bdb      	subs	r3, r3, r7
 800b11e:	60a2      	str	r2, [r4, #8]
 800b120:	6123      	str	r3, [r4, #16]
 800b122:	f080 0001 	eor.w	r0, r0, #1
 800b126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b12a:	68a3      	ldr	r3, [r4, #8]
 800b12c:	781b      	ldrb	r3, [r3, #0]
 800b12e:	706b      	strb	r3, [r5, #1]
 800b130:	e7c3      	b.n	800b0ba <ucdr_deserialize_endian_uint16_t+0x5e>
 800b132:	4641      	mov	r1, r8
 800b134:	463a      	mov	r2, r7
 800b136:	4628      	mov	r0, r5
 800b138:	f00c fde7 	bl	8017d0a <memcpy>
 800b13c:	68a1      	ldr	r1, [r4, #8]
 800b13e:	4652      	mov	r2, sl
 800b140:	19e8      	adds	r0, r5, r7
 800b142:	f00c fde2 	bl	8017d0a <memcpy>
 800b146:	e7b8      	b.n	800b0ba <ucdr_deserialize_endian_uint16_t+0x5e>

0800b148 <ucdr_serialize_uint32_t>:
 800b148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b14c:	b082      	sub	sp, #8
 800b14e:	4604      	mov	r4, r0
 800b150:	9101      	str	r1, [sp, #4]
 800b152:	2104      	movs	r1, #4
 800b154:	f000 ff30 	bl	800bfb8 <ucdr_buffer_alignment>
 800b158:	4601      	mov	r1, r0
 800b15a:	4620      	mov	r0, r4
 800b15c:	7d67      	ldrb	r7, [r4, #21]
 800b15e:	f000 ff6f 	bl	800c040 <ucdr_advance_buffer>
 800b162:	2104      	movs	r1, #4
 800b164:	4620      	mov	r0, r4
 800b166:	f000 fec7 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d139      	bne.n	800b1e2 <ucdr_serialize_uint32_t+0x9a>
 800b16e:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b172:	42ab      	cmp	r3, r5
 800b174:	d930      	bls.n	800b1d8 <ucdr_serialize_uint32_t+0x90>
 800b176:	1b5e      	subs	r6, r3, r5
 800b178:	60a3      	str	r3, [r4, #8]
 800b17a:	6923      	ldr	r3, [r4, #16]
 800b17c:	f1c6 0804 	rsb	r8, r6, #4
 800b180:	4433      	add	r3, r6
 800b182:	6123      	str	r3, [r4, #16]
 800b184:	4641      	mov	r1, r8
 800b186:	4620      	mov	r0, r4
 800b188:	f000 fec2 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b18c:	2800      	cmp	r0, #0
 800b18e:	d04c      	beq.n	800b22a <ucdr_serialize_uint32_t+0xe2>
 800b190:	7d23      	ldrb	r3, [r4, #20]
 800b192:	2b01      	cmp	r3, #1
 800b194:	d063      	beq.n	800b25e <ucdr_serialize_uint32_t+0x116>
 800b196:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b19a:	702b      	strb	r3, [r5, #0]
 800b19c:	2e00      	cmp	r6, #0
 800b19e:	d051      	beq.n	800b244 <ucdr_serialize_uint32_t+0xfc>
 800b1a0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b1a4:	706b      	strb	r3, [r5, #1]
 800b1a6:	2e01      	cmp	r6, #1
 800b1a8:	d050      	beq.n	800b24c <ucdr_serialize_uint32_t+0x104>
 800b1aa:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b1ae:	70ab      	strb	r3, [r5, #2]
 800b1b0:	2e02      	cmp	r6, #2
 800b1b2:	d04f      	beq.n	800b254 <ucdr_serialize_uint32_t+0x10c>
 800b1b4:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b1b8:	70eb      	strb	r3, [r5, #3]
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	68a2      	ldr	r2, [r4, #8]
 800b1be:	7da0      	ldrb	r0, [r4, #22]
 800b1c0:	3304      	adds	r3, #4
 800b1c2:	1b9e      	subs	r6, r3, r6
 800b1c4:	4442      	add	r2, r8
 800b1c6:	2304      	movs	r3, #4
 800b1c8:	f080 0001 	eor.w	r0, r0, #1
 800b1cc:	60a2      	str	r2, [r4, #8]
 800b1ce:	6126      	str	r6, [r4, #16]
 800b1d0:	7563      	strb	r3, [r4, #21]
 800b1d2:	b002      	add	sp, #8
 800b1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b1d8:	2104      	movs	r1, #4
 800b1da:	4620      	mov	r0, r4
 800b1dc:	f000 fe98 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b1e0:	b1d0      	cbz	r0, 800b218 <ucdr_serialize_uint32_t+0xd0>
 800b1e2:	7d23      	ldrb	r3, [r4, #20]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	68a3      	ldr	r3, [r4, #8]
 800b1e8:	d01c      	beq.n	800b224 <ucdr_serialize_uint32_t+0xdc>
 800b1ea:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b1ee:	701a      	strb	r2, [r3, #0]
 800b1f0:	68a3      	ldr	r3, [r4, #8]
 800b1f2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b1f6:	705a      	strb	r2, [r3, #1]
 800b1f8:	68a3      	ldr	r3, [r4, #8]
 800b1fa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b1fe:	709a      	strb	r2, [r3, #2]
 800b200:	68a3      	ldr	r3, [r4, #8]
 800b202:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b206:	70da      	strb	r2, [r3, #3]
 800b208:	68a2      	ldr	r2, [r4, #8]
 800b20a:	6923      	ldr	r3, [r4, #16]
 800b20c:	3204      	adds	r2, #4
 800b20e:	3304      	adds	r3, #4
 800b210:	2104      	movs	r1, #4
 800b212:	60a2      	str	r2, [r4, #8]
 800b214:	6123      	str	r3, [r4, #16]
 800b216:	7561      	strb	r1, [r4, #21]
 800b218:	7da0      	ldrb	r0, [r4, #22]
 800b21a:	f080 0001 	eor.w	r0, r0, #1
 800b21e:	b002      	add	sp, #8
 800b220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b224:	9a01      	ldr	r2, [sp, #4]
 800b226:	601a      	str	r2, [r3, #0]
 800b228:	e7ee      	b.n	800b208 <ucdr_serialize_uint32_t+0xc0>
 800b22a:	68a2      	ldr	r2, [r4, #8]
 800b22c:	6923      	ldr	r3, [r4, #16]
 800b22e:	7da0      	ldrb	r0, [r4, #22]
 800b230:	7567      	strb	r7, [r4, #21]
 800b232:	1b92      	subs	r2, r2, r6
 800b234:	1b9b      	subs	r3, r3, r6
 800b236:	f080 0001 	eor.w	r0, r0, #1
 800b23a:	60a2      	str	r2, [r4, #8]
 800b23c:	6123      	str	r3, [r4, #16]
 800b23e:	b002      	add	sp, #8
 800b240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b244:	68a3      	ldr	r3, [r4, #8]
 800b246:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b24a:	701a      	strb	r2, [r3, #0]
 800b24c:	68a3      	ldr	r3, [r4, #8]
 800b24e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b252:	701a      	strb	r2, [r3, #0]
 800b254:	68a3      	ldr	r3, [r4, #8]
 800b256:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b25a:	701a      	strb	r2, [r3, #0]
 800b25c:	e7ad      	b.n	800b1ba <ucdr_serialize_uint32_t+0x72>
 800b25e:	4628      	mov	r0, r5
 800b260:	ad01      	add	r5, sp, #4
 800b262:	4629      	mov	r1, r5
 800b264:	4632      	mov	r2, r6
 800b266:	f00c fd50 	bl	8017d0a <memcpy>
 800b26a:	68a0      	ldr	r0, [r4, #8]
 800b26c:	4642      	mov	r2, r8
 800b26e:	19a9      	adds	r1, r5, r6
 800b270:	f00c fd4b 	bl	8017d0a <memcpy>
 800b274:	e7a1      	b.n	800b1ba <ucdr_serialize_uint32_t+0x72>
 800b276:	bf00      	nop

0800b278 <ucdr_serialize_endian_uint32_t>:
 800b278:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b27c:	b083      	sub	sp, #12
 800b27e:	460d      	mov	r5, r1
 800b280:	2104      	movs	r1, #4
 800b282:	4604      	mov	r4, r0
 800b284:	9201      	str	r2, [sp, #4]
 800b286:	f000 fe97 	bl	800bfb8 <ucdr_buffer_alignment>
 800b28a:	4601      	mov	r1, r0
 800b28c:	4620      	mov	r0, r4
 800b28e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b292:	f000 fed5 	bl	800c040 <ucdr_advance_buffer>
 800b296:	2104      	movs	r1, #4
 800b298:	4620      	mov	r0, r4
 800b29a:	f000 fe2d 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	d138      	bne.n	800b314 <ucdr_serialize_endian_uint32_t+0x9c>
 800b2a2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b2a6:	42b7      	cmp	r7, r6
 800b2a8:	d92f      	bls.n	800b30a <ucdr_serialize_endian_uint32_t+0x92>
 800b2aa:	6923      	ldr	r3, [r4, #16]
 800b2ac:	60a7      	str	r7, [r4, #8]
 800b2ae:	1bbf      	subs	r7, r7, r6
 800b2b0:	443b      	add	r3, r7
 800b2b2:	f1c7 0904 	rsb	r9, r7, #4
 800b2b6:	6123      	str	r3, [r4, #16]
 800b2b8:	4649      	mov	r1, r9
 800b2ba:	4620      	mov	r0, r4
 800b2bc:	f000 fe28 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b2c0:	2800      	cmp	r0, #0
 800b2c2:	d04a      	beq.n	800b35a <ucdr_serialize_endian_uint32_t+0xe2>
 800b2c4:	2d01      	cmp	r5, #1
 800b2c6:	d063      	beq.n	800b390 <ucdr_serialize_endian_uint32_t+0x118>
 800b2c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b2cc:	7033      	strb	r3, [r6, #0]
 800b2ce:	2f00      	cmp	r7, #0
 800b2d0:	d051      	beq.n	800b376 <ucdr_serialize_endian_uint32_t+0xfe>
 800b2d2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b2d6:	7073      	strb	r3, [r6, #1]
 800b2d8:	2f01      	cmp	r7, #1
 800b2da:	d050      	beq.n	800b37e <ucdr_serialize_endian_uint32_t+0x106>
 800b2dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b2e0:	70b3      	strb	r3, [r6, #2]
 800b2e2:	2f02      	cmp	r7, #2
 800b2e4:	d04f      	beq.n	800b386 <ucdr_serialize_endian_uint32_t+0x10e>
 800b2e6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b2ea:	70f3      	strb	r3, [r6, #3]
 800b2ec:	6923      	ldr	r3, [r4, #16]
 800b2ee:	68a2      	ldr	r2, [r4, #8]
 800b2f0:	7da0      	ldrb	r0, [r4, #22]
 800b2f2:	3304      	adds	r3, #4
 800b2f4:	444a      	add	r2, r9
 800b2f6:	1bdb      	subs	r3, r3, r7
 800b2f8:	2104      	movs	r1, #4
 800b2fa:	f080 0001 	eor.w	r0, r0, #1
 800b2fe:	60a2      	str	r2, [r4, #8]
 800b300:	6123      	str	r3, [r4, #16]
 800b302:	7561      	strb	r1, [r4, #21]
 800b304:	b003      	add	sp, #12
 800b306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b30a:	2104      	movs	r1, #4
 800b30c:	4620      	mov	r0, r4
 800b30e:	f000 fdff 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b312:	b1c8      	cbz	r0, 800b348 <ucdr_serialize_endian_uint32_t+0xd0>
 800b314:	2d01      	cmp	r5, #1
 800b316:	68a3      	ldr	r3, [r4, #8]
 800b318:	d01c      	beq.n	800b354 <ucdr_serialize_endian_uint32_t+0xdc>
 800b31a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b31e:	701a      	strb	r2, [r3, #0]
 800b320:	68a3      	ldr	r3, [r4, #8]
 800b322:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b326:	705a      	strb	r2, [r3, #1]
 800b328:	68a3      	ldr	r3, [r4, #8]
 800b32a:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b32e:	709a      	strb	r2, [r3, #2]
 800b330:	68a3      	ldr	r3, [r4, #8]
 800b332:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b336:	70da      	strb	r2, [r3, #3]
 800b338:	68a2      	ldr	r2, [r4, #8]
 800b33a:	6923      	ldr	r3, [r4, #16]
 800b33c:	3204      	adds	r2, #4
 800b33e:	3304      	adds	r3, #4
 800b340:	2104      	movs	r1, #4
 800b342:	60a2      	str	r2, [r4, #8]
 800b344:	6123      	str	r3, [r4, #16]
 800b346:	7561      	strb	r1, [r4, #21]
 800b348:	7da0      	ldrb	r0, [r4, #22]
 800b34a:	f080 0001 	eor.w	r0, r0, #1
 800b34e:	b003      	add	sp, #12
 800b350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b354:	9a01      	ldr	r2, [sp, #4]
 800b356:	601a      	str	r2, [r3, #0]
 800b358:	e7ee      	b.n	800b338 <ucdr_serialize_endian_uint32_t+0xc0>
 800b35a:	68a2      	ldr	r2, [r4, #8]
 800b35c:	6923      	ldr	r3, [r4, #16]
 800b35e:	7da0      	ldrb	r0, [r4, #22]
 800b360:	f884 8015 	strb.w	r8, [r4, #21]
 800b364:	1bd2      	subs	r2, r2, r7
 800b366:	1bdb      	subs	r3, r3, r7
 800b368:	f080 0001 	eor.w	r0, r0, #1
 800b36c:	60a2      	str	r2, [r4, #8]
 800b36e:	6123      	str	r3, [r4, #16]
 800b370:	b003      	add	sp, #12
 800b372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b376:	68a3      	ldr	r3, [r4, #8]
 800b378:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b37c:	701a      	strb	r2, [r3, #0]
 800b37e:	68a3      	ldr	r3, [r4, #8]
 800b380:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	68a3      	ldr	r3, [r4, #8]
 800b388:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b38c:	701a      	strb	r2, [r3, #0]
 800b38e:	e7ad      	b.n	800b2ec <ucdr_serialize_endian_uint32_t+0x74>
 800b390:	ad01      	add	r5, sp, #4
 800b392:	4629      	mov	r1, r5
 800b394:	463a      	mov	r2, r7
 800b396:	4630      	mov	r0, r6
 800b398:	f00c fcb7 	bl	8017d0a <memcpy>
 800b39c:	68a0      	ldr	r0, [r4, #8]
 800b39e:	464a      	mov	r2, r9
 800b3a0:	19e9      	adds	r1, r5, r7
 800b3a2:	f00c fcb2 	bl	8017d0a <memcpy>
 800b3a6:	e7a1      	b.n	800b2ec <ucdr_serialize_endian_uint32_t+0x74>

0800b3a8 <ucdr_deserialize_uint32_t>:
 800b3a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b3ac:	460d      	mov	r5, r1
 800b3ae:	2104      	movs	r1, #4
 800b3b0:	4604      	mov	r4, r0
 800b3b2:	f000 fe01 	bl	800bfb8 <ucdr_buffer_alignment>
 800b3b6:	4601      	mov	r1, r0
 800b3b8:	4620      	mov	r0, r4
 800b3ba:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b3be:	f000 fe3f 	bl	800c040 <ucdr_advance_buffer>
 800b3c2:	2104      	movs	r1, #4
 800b3c4:	4620      	mov	r0, r4
 800b3c6:	f000 fd97 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d138      	bne.n	800b440 <ucdr_deserialize_uint32_t+0x98>
 800b3ce:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b3d2:	42b7      	cmp	r7, r6
 800b3d4:	d92f      	bls.n	800b436 <ucdr_deserialize_uint32_t+0x8e>
 800b3d6:	6923      	ldr	r3, [r4, #16]
 800b3d8:	60a7      	str	r7, [r4, #8]
 800b3da:	1bbf      	subs	r7, r7, r6
 800b3dc:	443b      	add	r3, r7
 800b3de:	f1c7 0904 	rsb	r9, r7, #4
 800b3e2:	6123      	str	r3, [r4, #16]
 800b3e4:	4649      	mov	r1, r9
 800b3e6:	4620      	mov	r0, r4
 800b3e8:	f000 fd92 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d046      	beq.n	800b47e <ucdr_deserialize_uint32_t+0xd6>
 800b3f0:	7d23      	ldrb	r3, [r4, #20]
 800b3f2:	2b01      	cmp	r3, #1
 800b3f4:	d05c      	beq.n	800b4b0 <ucdr_deserialize_uint32_t+0x108>
 800b3f6:	78f3      	ldrb	r3, [r6, #3]
 800b3f8:	702b      	strb	r3, [r5, #0]
 800b3fa:	2f00      	cmp	r7, #0
 800b3fc:	d04c      	beq.n	800b498 <ucdr_deserialize_uint32_t+0xf0>
 800b3fe:	78b3      	ldrb	r3, [r6, #2]
 800b400:	706b      	strb	r3, [r5, #1]
 800b402:	2f01      	cmp	r7, #1
 800b404:	f105 0302 	add.w	r3, r5, #2
 800b408:	d04a      	beq.n	800b4a0 <ucdr_deserialize_uint32_t+0xf8>
 800b40a:	7873      	ldrb	r3, [r6, #1]
 800b40c:	70ab      	strb	r3, [r5, #2]
 800b40e:	2f02      	cmp	r7, #2
 800b410:	f105 0303 	add.w	r3, r5, #3
 800b414:	d048      	beq.n	800b4a8 <ucdr_deserialize_uint32_t+0x100>
 800b416:	7833      	ldrb	r3, [r6, #0]
 800b418:	70eb      	strb	r3, [r5, #3]
 800b41a:	6923      	ldr	r3, [r4, #16]
 800b41c:	68a2      	ldr	r2, [r4, #8]
 800b41e:	7da0      	ldrb	r0, [r4, #22]
 800b420:	2104      	movs	r1, #4
 800b422:	3304      	adds	r3, #4
 800b424:	444a      	add	r2, r9
 800b426:	1bdb      	subs	r3, r3, r7
 800b428:	7561      	strb	r1, [r4, #21]
 800b42a:	60a2      	str	r2, [r4, #8]
 800b42c:	6123      	str	r3, [r4, #16]
 800b42e:	f080 0001 	eor.w	r0, r0, #1
 800b432:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b436:	2104      	movs	r1, #4
 800b438:	4620      	mov	r0, r4
 800b43a:	f000 fd69 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b43e:	b1b0      	cbz	r0, 800b46e <ucdr_deserialize_uint32_t+0xc6>
 800b440:	7d23      	ldrb	r3, [r4, #20]
 800b442:	2b01      	cmp	r3, #1
 800b444:	68a3      	ldr	r3, [r4, #8]
 800b446:	d017      	beq.n	800b478 <ucdr_deserialize_uint32_t+0xd0>
 800b448:	78db      	ldrb	r3, [r3, #3]
 800b44a:	702b      	strb	r3, [r5, #0]
 800b44c:	68a3      	ldr	r3, [r4, #8]
 800b44e:	789b      	ldrb	r3, [r3, #2]
 800b450:	706b      	strb	r3, [r5, #1]
 800b452:	68a3      	ldr	r3, [r4, #8]
 800b454:	785b      	ldrb	r3, [r3, #1]
 800b456:	70ab      	strb	r3, [r5, #2]
 800b458:	68a3      	ldr	r3, [r4, #8]
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	70eb      	strb	r3, [r5, #3]
 800b45e:	68a2      	ldr	r2, [r4, #8]
 800b460:	6923      	ldr	r3, [r4, #16]
 800b462:	3204      	adds	r2, #4
 800b464:	3304      	adds	r3, #4
 800b466:	2104      	movs	r1, #4
 800b468:	60a2      	str	r2, [r4, #8]
 800b46a:	6123      	str	r3, [r4, #16]
 800b46c:	7561      	strb	r1, [r4, #21]
 800b46e:	7da0      	ldrb	r0, [r4, #22]
 800b470:	f080 0001 	eor.w	r0, r0, #1
 800b474:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	602b      	str	r3, [r5, #0]
 800b47c:	e7ef      	b.n	800b45e <ucdr_deserialize_uint32_t+0xb6>
 800b47e:	68a2      	ldr	r2, [r4, #8]
 800b480:	6923      	ldr	r3, [r4, #16]
 800b482:	7da0      	ldrb	r0, [r4, #22]
 800b484:	f884 8015 	strb.w	r8, [r4, #21]
 800b488:	1bd2      	subs	r2, r2, r7
 800b48a:	1bdb      	subs	r3, r3, r7
 800b48c:	60a2      	str	r2, [r4, #8]
 800b48e:	6123      	str	r3, [r4, #16]
 800b490:	f080 0001 	eor.w	r0, r0, #1
 800b494:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b498:	68a3      	ldr	r3, [r4, #8]
 800b49a:	789b      	ldrb	r3, [r3, #2]
 800b49c:	706b      	strb	r3, [r5, #1]
 800b49e:	1cab      	adds	r3, r5, #2
 800b4a0:	68a2      	ldr	r2, [r4, #8]
 800b4a2:	7852      	ldrb	r2, [r2, #1]
 800b4a4:	f803 2b01 	strb.w	r2, [r3], #1
 800b4a8:	68a2      	ldr	r2, [r4, #8]
 800b4aa:	7812      	ldrb	r2, [r2, #0]
 800b4ac:	701a      	strb	r2, [r3, #0]
 800b4ae:	e7b4      	b.n	800b41a <ucdr_deserialize_uint32_t+0x72>
 800b4b0:	4631      	mov	r1, r6
 800b4b2:	463a      	mov	r2, r7
 800b4b4:	4628      	mov	r0, r5
 800b4b6:	f00c fc28 	bl	8017d0a <memcpy>
 800b4ba:	68a1      	ldr	r1, [r4, #8]
 800b4bc:	464a      	mov	r2, r9
 800b4be:	19e8      	adds	r0, r5, r7
 800b4c0:	f00c fc23 	bl	8017d0a <memcpy>
 800b4c4:	e7a9      	b.n	800b41a <ucdr_deserialize_uint32_t+0x72>
 800b4c6:	bf00      	nop

0800b4c8 <ucdr_deserialize_endian_uint32_t>:
 800b4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4cc:	460e      	mov	r6, r1
 800b4ce:	2104      	movs	r1, #4
 800b4d0:	4604      	mov	r4, r0
 800b4d2:	4615      	mov	r5, r2
 800b4d4:	f000 fd70 	bl	800bfb8 <ucdr_buffer_alignment>
 800b4d8:	4601      	mov	r1, r0
 800b4da:	4620      	mov	r0, r4
 800b4dc:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b4e0:	f000 fdae 	bl	800c040 <ucdr_advance_buffer>
 800b4e4:	2104      	movs	r1, #4
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 fd06 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b4ec:	2800      	cmp	r0, #0
 800b4ee:	d13c      	bne.n	800b56a <ucdr_deserialize_endian_uint32_t+0xa2>
 800b4f0:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b4f4:	42bb      	cmp	r3, r7
 800b4f6:	d933      	bls.n	800b560 <ucdr_deserialize_endian_uint32_t+0x98>
 800b4f8:	eba3 0807 	sub.w	r8, r3, r7
 800b4fc:	60a3      	str	r3, [r4, #8]
 800b4fe:	6923      	ldr	r3, [r4, #16]
 800b500:	f1c8 0a04 	rsb	sl, r8, #4
 800b504:	4443      	add	r3, r8
 800b506:	6123      	str	r3, [r4, #16]
 800b508:	4651      	mov	r1, sl
 800b50a:	4620      	mov	r0, r4
 800b50c:	f000 fd00 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b510:	2800      	cmp	r0, #0
 800b512:	d048      	beq.n	800b5a6 <ucdr_deserialize_endian_uint32_t+0xde>
 800b514:	2e01      	cmp	r6, #1
 800b516:	d061      	beq.n	800b5dc <ucdr_deserialize_endian_uint32_t+0x114>
 800b518:	78fb      	ldrb	r3, [r7, #3]
 800b51a:	702b      	strb	r3, [r5, #0]
 800b51c:	f1b8 0f00 	cmp.w	r8, #0
 800b520:	d050      	beq.n	800b5c4 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b522:	78bb      	ldrb	r3, [r7, #2]
 800b524:	706b      	strb	r3, [r5, #1]
 800b526:	f1b8 0f01 	cmp.w	r8, #1
 800b52a:	f105 0302 	add.w	r3, r5, #2
 800b52e:	d04d      	beq.n	800b5cc <ucdr_deserialize_endian_uint32_t+0x104>
 800b530:	787b      	ldrb	r3, [r7, #1]
 800b532:	70ab      	strb	r3, [r5, #2]
 800b534:	f1b8 0f02 	cmp.w	r8, #2
 800b538:	f105 0303 	add.w	r3, r5, #3
 800b53c:	d04a      	beq.n	800b5d4 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b53e:	783b      	ldrb	r3, [r7, #0]
 800b540:	70eb      	strb	r3, [r5, #3]
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	68a2      	ldr	r2, [r4, #8]
 800b546:	7da0      	ldrb	r0, [r4, #22]
 800b548:	2104      	movs	r1, #4
 800b54a:	3304      	adds	r3, #4
 800b54c:	4452      	add	r2, sl
 800b54e:	eba3 0308 	sub.w	r3, r3, r8
 800b552:	7561      	strb	r1, [r4, #21]
 800b554:	60a2      	str	r2, [r4, #8]
 800b556:	6123      	str	r3, [r4, #16]
 800b558:	f080 0001 	eor.w	r0, r0, #1
 800b55c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b560:	2104      	movs	r1, #4
 800b562:	4620      	mov	r0, r4
 800b564:	f000 fcd4 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b568:	b1a8      	cbz	r0, 800b596 <ucdr_deserialize_endian_uint32_t+0xce>
 800b56a:	2e01      	cmp	r6, #1
 800b56c:	68a3      	ldr	r3, [r4, #8]
 800b56e:	d017      	beq.n	800b5a0 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b570:	78db      	ldrb	r3, [r3, #3]
 800b572:	702b      	strb	r3, [r5, #0]
 800b574:	68a3      	ldr	r3, [r4, #8]
 800b576:	789b      	ldrb	r3, [r3, #2]
 800b578:	706b      	strb	r3, [r5, #1]
 800b57a:	68a3      	ldr	r3, [r4, #8]
 800b57c:	785b      	ldrb	r3, [r3, #1]
 800b57e:	70ab      	strb	r3, [r5, #2]
 800b580:	68a3      	ldr	r3, [r4, #8]
 800b582:	781b      	ldrb	r3, [r3, #0]
 800b584:	70eb      	strb	r3, [r5, #3]
 800b586:	68a2      	ldr	r2, [r4, #8]
 800b588:	6923      	ldr	r3, [r4, #16]
 800b58a:	3204      	adds	r2, #4
 800b58c:	3304      	adds	r3, #4
 800b58e:	2104      	movs	r1, #4
 800b590:	60a2      	str	r2, [r4, #8]
 800b592:	6123      	str	r3, [r4, #16]
 800b594:	7561      	strb	r1, [r4, #21]
 800b596:	7da0      	ldrb	r0, [r4, #22]
 800b598:	f080 0001 	eor.w	r0, r0, #1
 800b59c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	602b      	str	r3, [r5, #0]
 800b5a4:	e7ef      	b.n	800b586 <ucdr_deserialize_endian_uint32_t+0xbe>
 800b5a6:	68a2      	ldr	r2, [r4, #8]
 800b5a8:	6923      	ldr	r3, [r4, #16]
 800b5aa:	7da0      	ldrb	r0, [r4, #22]
 800b5ac:	f884 9015 	strb.w	r9, [r4, #21]
 800b5b0:	eba2 0208 	sub.w	r2, r2, r8
 800b5b4:	eba3 0308 	sub.w	r3, r3, r8
 800b5b8:	60a2      	str	r2, [r4, #8]
 800b5ba:	6123      	str	r3, [r4, #16]
 800b5bc:	f080 0001 	eor.w	r0, r0, #1
 800b5c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5c4:	68a3      	ldr	r3, [r4, #8]
 800b5c6:	789b      	ldrb	r3, [r3, #2]
 800b5c8:	706b      	strb	r3, [r5, #1]
 800b5ca:	1cab      	adds	r3, r5, #2
 800b5cc:	68a2      	ldr	r2, [r4, #8]
 800b5ce:	7852      	ldrb	r2, [r2, #1]
 800b5d0:	f803 2b01 	strb.w	r2, [r3], #1
 800b5d4:	68a2      	ldr	r2, [r4, #8]
 800b5d6:	7812      	ldrb	r2, [r2, #0]
 800b5d8:	701a      	strb	r2, [r3, #0]
 800b5da:	e7b2      	b.n	800b542 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b5dc:	4639      	mov	r1, r7
 800b5de:	4642      	mov	r2, r8
 800b5e0:	4628      	mov	r0, r5
 800b5e2:	f00c fb92 	bl	8017d0a <memcpy>
 800b5e6:	68a1      	ldr	r1, [r4, #8]
 800b5e8:	4652      	mov	r2, sl
 800b5ea:	eb05 0008 	add.w	r0, r5, r8
 800b5ee:	f00c fb8c 	bl	8017d0a <memcpy>
 800b5f2:	e7a6      	b.n	800b542 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b5f4 <ucdr_serialize_uint64_t>:
 800b5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f8:	2108      	movs	r1, #8
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	4604      	mov	r4, r0
 800b5fe:	e9cd 2300 	strd	r2, r3, [sp]
 800b602:	f000 fcd9 	bl	800bfb8 <ucdr_buffer_alignment>
 800b606:	4601      	mov	r1, r0
 800b608:	4620      	mov	r0, r4
 800b60a:	7d67      	ldrb	r7, [r4, #21]
 800b60c:	f000 fd18 	bl	800c040 <ucdr_advance_buffer>
 800b610:	2108      	movs	r1, #8
 800b612:	4620      	mov	r0, r4
 800b614:	f000 fc70 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d14e      	bne.n	800b6ba <ucdr_serialize_uint64_t+0xc6>
 800b61c:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b620:	42ab      	cmp	r3, r5
 800b622:	d945      	bls.n	800b6b0 <ucdr_serialize_uint64_t+0xbc>
 800b624:	1b5e      	subs	r6, r3, r5
 800b626:	60a3      	str	r3, [r4, #8]
 800b628:	6923      	ldr	r3, [r4, #16]
 800b62a:	f1c6 0808 	rsb	r8, r6, #8
 800b62e:	4433      	add	r3, r6
 800b630:	6123      	str	r3, [r4, #16]
 800b632:	4641      	mov	r1, r8
 800b634:	4620      	mov	r0, r4
 800b636:	f000 fc6b 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b63a:	2800      	cmp	r0, #0
 800b63c:	d074      	beq.n	800b728 <ucdr_serialize_uint64_t+0x134>
 800b63e:	7d23      	ldrb	r3, [r4, #20]
 800b640:	2b01      	cmp	r3, #1
 800b642:	f000 809b 	beq.w	800b77c <ucdr_serialize_uint64_t+0x188>
 800b646:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b64a:	702b      	strb	r3, [r5, #0]
 800b64c:	2e00      	cmp	r6, #0
 800b64e:	d078      	beq.n	800b742 <ucdr_serialize_uint64_t+0x14e>
 800b650:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b654:	706b      	strb	r3, [r5, #1]
 800b656:	2e01      	cmp	r6, #1
 800b658:	d077      	beq.n	800b74a <ucdr_serialize_uint64_t+0x156>
 800b65a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b65e:	70ab      	strb	r3, [r5, #2]
 800b660:	2e02      	cmp	r6, #2
 800b662:	d076      	beq.n	800b752 <ucdr_serialize_uint64_t+0x15e>
 800b664:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b668:	70eb      	strb	r3, [r5, #3]
 800b66a:	2e03      	cmp	r6, #3
 800b66c:	d075      	beq.n	800b75a <ucdr_serialize_uint64_t+0x166>
 800b66e:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b672:	712b      	strb	r3, [r5, #4]
 800b674:	2e04      	cmp	r6, #4
 800b676:	d074      	beq.n	800b762 <ucdr_serialize_uint64_t+0x16e>
 800b678:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b67c:	716b      	strb	r3, [r5, #5]
 800b67e:	2e05      	cmp	r6, #5
 800b680:	d073      	beq.n	800b76a <ucdr_serialize_uint64_t+0x176>
 800b682:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b686:	71ab      	strb	r3, [r5, #6]
 800b688:	2e06      	cmp	r6, #6
 800b68a:	d072      	beq.n	800b772 <ucdr_serialize_uint64_t+0x17e>
 800b68c:	f89d 3000 	ldrb.w	r3, [sp]
 800b690:	71eb      	strb	r3, [r5, #7]
 800b692:	6923      	ldr	r3, [r4, #16]
 800b694:	68a2      	ldr	r2, [r4, #8]
 800b696:	7da0      	ldrb	r0, [r4, #22]
 800b698:	3308      	adds	r3, #8
 800b69a:	1b9e      	subs	r6, r3, r6
 800b69c:	4442      	add	r2, r8
 800b69e:	2308      	movs	r3, #8
 800b6a0:	f080 0001 	eor.w	r0, r0, #1
 800b6a4:	60a2      	str	r2, [r4, #8]
 800b6a6:	6126      	str	r6, [r4, #16]
 800b6a8:	7563      	strb	r3, [r4, #21]
 800b6aa:	b002      	add	sp, #8
 800b6ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b6b0:	2108      	movs	r1, #8
 800b6b2:	4620      	mov	r0, r4
 800b6b4:	f000 fc2c 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b6b8:	b350      	cbz	r0, 800b710 <ucdr_serialize_uint64_t+0x11c>
 800b6ba:	7d23      	ldrb	r3, [r4, #20]
 800b6bc:	2b01      	cmp	r3, #1
 800b6be:	d02d      	beq.n	800b71c <ucdr_serialize_uint64_t+0x128>
 800b6c0:	68a3      	ldr	r3, [r4, #8]
 800b6c2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b6c6:	701a      	strb	r2, [r3, #0]
 800b6c8:	68a3      	ldr	r3, [r4, #8]
 800b6ca:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b6ce:	705a      	strb	r2, [r3, #1]
 800b6d0:	68a3      	ldr	r3, [r4, #8]
 800b6d2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b6d6:	709a      	strb	r2, [r3, #2]
 800b6d8:	68a3      	ldr	r3, [r4, #8]
 800b6da:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b6de:	70da      	strb	r2, [r3, #3]
 800b6e0:	68a3      	ldr	r3, [r4, #8]
 800b6e2:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b6e6:	711a      	strb	r2, [r3, #4]
 800b6e8:	68a3      	ldr	r3, [r4, #8]
 800b6ea:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b6ee:	715a      	strb	r2, [r3, #5]
 800b6f0:	68a3      	ldr	r3, [r4, #8]
 800b6f2:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b6f6:	719a      	strb	r2, [r3, #6]
 800b6f8:	68a3      	ldr	r3, [r4, #8]
 800b6fa:	f89d 2000 	ldrb.w	r2, [sp]
 800b6fe:	71da      	strb	r2, [r3, #7]
 800b700:	68a2      	ldr	r2, [r4, #8]
 800b702:	6923      	ldr	r3, [r4, #16]
 800b704:	3208      	adds	r2, #8
 800b706:	3308      	adds	r3, #8
 800b708:	2108      	movs	r1, #8
 800b70a:	60a2      	str	r2, [r4, #8]
 800b70c:	6123      	str	r3, [r4, #16]
 800b70e:	7561      	strb	r1, [r4, #21]
 800b710:	7da0      	ldrb	r0, [r4, #22]
 800b712:	f080 0001 	eor.w	r0, r0, #1
 800b716:	b002      	add	sp, #8
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	466b      	mov	r3, sp
 800b71e:	cb03      	ldmia	r3!, {r0, r1}
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	6018      	str	r0, [r3, #0]
 800b724:	6059      	str	r1, [r3, #4]
 800b726:	e7eb      	b.n	800b700 <ucdr_serialize_uint64_t+0x10c>
 800b728:	68a2      	ldr	r2, [r4, #8]
 800b72a:	6923      	ldr	r3, [r4, #16]
 800b72c:	7da0      	ldrb	r0, [r4, #22]
 800b72e:	7567      	strb	r7, [r4, #21]
 800b730:	1b92      	subs	r2, r2, r6
 800b732:	1b9b      	subs	r3, r3, r6
 800b734:	f080 0001 	eor.w	r0, r0, #1
 800b738:	60a2      	str	r2, [r4, #8]
 800b73a:	6123      	str	r3, [r4, #16]
 800b73c:	b002      	add	sp, #8
 800b73e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b742:	68a3      	ldr	r3, [r4, #8]
 800b744:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b748:	701a      	strb	r2, [r3, #0]
 800b74a:	68a3      	ldr	r3, [r4, #8]
 800b74c:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b750:	701a      	strb	r2, [r3, #0]
 800b752:	68a3      	ldr	r3, [r4, #8]
 800b754:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	68a3      	ldr	r3, [r4, #8]
 800b75c:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b760:	701a      	strb	r2, [r3, #0]
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b768:	701a      	strb	r2, [r3, #0]
 800b76a:	68a3      	ldr	r3, [r4, #8]
 800b76c:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	68a3      	ldr	r3, [r4, #8]
 800b774:	f89d 2000 	ldrb.w	r2, [sp]
 800b778:	701a      	strb	r2, [r3, #0]
 800b77a:	e78a      	b.n	800b692 <ucdr_serialize_uint64_t+0x9e>
 800b77c:	4628      	mov	r0, r5
 800b77e:	466d      	mov	r5, sp
 800b780:	4629      	mov	r1, r5
 800b782:	4632      	mov	r2, r6
 800b784:	f00c fac1 	bl	8017d0a <memcpy>
 800b788:	68a0      	ldr	r0, [r4, #8]
 800b78a:	4642      	mov	r2, r8
 800b78c:	19a9      	adds	r1, r5, r6
 800b78e:	f00c fabc 	bl	8017d0a <memcpy>
 800b792:	e77e      	b.n	800b692 <ucdr_serialize_uint64_t+0x9e>

0800b794 <ucdr_serialize_int16_t>:
 800b794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b798:	b082      	sub	sp, #8
 800b79a:	460b      	mov	r3, r1
 800b79c:	2102      	movs	r1, #2
 800b79e:	4604      	mov	r4, r0
 800b7a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b7a4:	f000 fc08 	bl	800bfb8 <ucdr_buffer_alignment>
 800b7a8:	4601      	mov	r1, r0
 800b7aa:	4620      	mov	r0, r4
 800b7ac:	7d67      	ldrb	r7, [r4, #21]
 800b7ae:	f000 fc47 	bl	800c040 <ucdr_advance_buffer>
 800b7b2:	2102      	movs	r1, #2
 800b7b4:	4620      	mov	r0, r4
 800b7b6:	f000 fb9f 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b7ba:	bb78      	cbnz	r0, 800b81c <ucdr_serialize_int16_t+0x88>
 800b7bc:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7c0:	42ab      	cmp	r3, r5
 800b7c2:	d926      	bls.n	800b812 <ucdr_serialize_int16_t+0x7e>
 800b7c4:	1b5e      	subs	r6, r3, r5
 800b7c6:	60a3      	str	r3, [r4, #8]
 800b7c8:	6923      	ldr	r3, [r4, #16]
 800b7ca:	f1c6 0802 	rsb	r8, r6, #2
 800b7ce:	4433      	add	r3, r6
 800b7d0:	6123      	str	r3, [r4, #16]
 800b7d2:	4641      	mov	r1, r8
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f000 fb9b 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b7da:	2800      	cmp	r0, #0
 800b7dc:	d03b      	beq.n	800b856 <ucdr_serialize_int16_t+0xc2>
 800b7de:	7d23      	ldrb	r3, [r4, #20]
 800b7e0:	2b01      	cmp	r3, #1
 800b7e2:	d04a      	beq.n	800b87a <ucdr_serialize_int16_t+0xe6>
 800b7e4:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7e8:	702b      	strb	r3, [r5, #0]
 800b7ea:	2e00      	cmp	r6, #0
 800b7ec:	d040      	beq.n	800b870 <ucdr_serialize_int16_t+0xdc>
 800b7ee:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b7f2:	706b      	strb	r3, [r5, #1]
 800b7f4:	6923      	ldr	r3, [r4, #16]
 800b7f6:	68a2      	ldr	r2, [r4, #8]
 800b7f8:	7da0      	ldrb	r0, [r4, #22]
 800b7fa:	3302      	adds	r3, #2
 800b7fc:	1b9e      	subs	r6, r3, r6
 800b7fe:	4442      	add	r2, r8
 800b800:	2302      	movs	r3, #2
 800b802:	f080 0001 	eor.w	r0, r0, #1
 800b806:	60a2      	str	r2, [r4, #8]
 800b808:	6126      	str	r6, [r4, #16]
 800b80a:	7563      	strb	r3, [r4, #21]
 800b80c:	b002      	add	sp, #8
 800b80e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b812:	2102      	movs	r1, #2
 800b814:	4620      	mov	r0, r4
 800b816:	f000 fb7b 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b81a:	b190      	cbz	r0, 800b842 <ucdr_serialize_int16_t+0xae>
 800b81c:	7d23      	ldrb	r3, [r4, #20]
 800b81e:	2b01      	cmp	r3, #1
 800b820:	68a3      	ldr	r3, [r4, #8]
 800b822:	d014      	beq.n	800b84e <ucdr_serialize_int16_t+0xba>
 800b824:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b828:	701a      	strb	r2, [r3, #0]
 800b82a:	68a3      	ldr	r3, [r4, #8]
 800b82c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b830:	705a      	strb	r2, [r3, #1]
 800b832:	68a2      	ldr	r2, [r4, #8]
 800b834:	6923      	ldr	r3, [r4, #16]
 800b836:	3202      	adds	r2, #2
 800b838:	3302      	adds	r3, #2
 800b83a:	2102      	movs	r1, #2
 800b83c:	60a2      	str	r2, [r4, #8]
 800b83e:	6123      	str	r3, [r4, #16]
 800b840:	7561      	strb	r1, [r4, #21]
 800b842:	7da0      	ldrb	r0, [r4, #22]
 800b844:	f080 0001 	eor.w	r0, r0, #1
 800b848:	b002      	add	sp, #8
 800b84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b84e:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	e7ed      	b.n	800b832 <ucdr_serialize_int16_t+0x9e>
 800b856:	68a2      	ldr	r2, [r4, #8]
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	7da0      	ldrb	r0, [r4, #22]
 800b85c:	7567      	strb	r7, [r4, #21]
 800b85e:	1b92      	subs	r2, r2, r6
 800b860:	1b9b      	subs	r3, r3, r6
 800b862:	f080 0001 	eor.w	r0, r0, #1
 800b866:	60a2      	str	r2, [r4, #8]
 800b868:	6123      	str	r3, [r4, #16]
 800b86a:	b002      	add	sp, #8
 800b86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b870:	68a3      	ldr	r3, [r4, #8]
 800b872:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b876:	701a      	strb	r2, [r3, #0]
 800b878:	e7bc      	b.n	800b7f4 <ucdr_serialize_int16_t+0x60>
 800b87a:	4628      	mov	r0, r5
 800b87c:	f10d 0506 	add.w	r5, sp, #6
 800b880:	4629      	mov	r1, r5
 800b882:	4632      	mov	r2, r6
 800b884:	f00c fa41 	bl	8017d0a <memcpy>
 800b888:	68a0      	ldr	r0, [r4, #8]
 800b88a:	4642      	mov	r2, r8
 800b88c:	19a9      	adds	r1, r5, r6
 800b88e:	f00c fa3c 	bl	8017d0a <memcpy>
 800b892:	e7af      	b.n	800b7f4 <ucdr_serialize_int16_t+0x60>

0800b894 <ucdr_deserialize_int16_t>:
 800b894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b898:	460d      	mov	r5, r1
 800b89a:	2102      	movs	r1, #2
 800b89c:	4604      	mov	r4, r0
 800b89e:	f000 fb8b 	bl	800bfb8 <ucdr_buffer_alignment>
 800b8a2:	4601      	mov	r1, r0
 800b8a4:	4620      	mov	r0, r4
 800b8a6:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b8aa:	f000 fbc9 	bl	800c040 <ucdr_advance_buffer>
 800b8ae:	2102      	movs	r1, #2
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 fb21 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b8b6:	bb60      	cbnz	r0, 800b912 <ucdr_deserialize_int16_t+0x7e>
 800b8b8:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b8bc:	42be      	cmp	r6, r7
 800b8be:	d923      	bls.n	800b908 <ucdr_deserialize_int16_t+0x74>
 800b8c0:	6923      	ldr	r3, [r4, #16]
 800b8c2:	60a6      	str	r6, [r4, #8]
 800b8c4:	1bf6      	subs	r6, r6, r7
 800b8c6:	4433      	add	r3, r6
 800b8c8:	f1c6 0902 	rsb	r9, r6, #2
 800b8cc:	6123      	str	r3, [r4, #16]
 800b8ce:	4649      	mov	r1, r9
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 fb1d 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b8d6:	2800      	cmp	r0, #0
 800b8d8:	d034      	beq.n	800b944 <ucdr_deserialize_int16_t+0xb0>
 800b8da:	7d23      	ldrb	r3, [r4, #20]
 800b8dc:	2b01      	cmp	r3, #1
 800b8de:	d042      	beq.n	800b966 <ucdr_deserialize_int16_t+0xd2>
 800b8e0:	787b      	ldrb	r3, [r7, #1]
 800b8e2:	702b      	strb	r3, [r5, #0]
 800b8e4:	2e00      	cmp	r6, #0
 800b8e6:	d03a      	beq.n	800b95e <ucdr_deserialize_int16_t+0xca>
 800b8e8:	783b      	ldrb	r3, [r7, #0]
 800b8ea:	706b      	strb	r3, [r5, #1]
 800b8ec:	6923      	ldr	r3, [r4, #16]
 800b8ee:	68a2      	ldr	r2, [r4, #8]
 800b8f0:	7da0      	ldrb	r0, [r4, #22]
 800b8f2:	2102      	movs	r1, #2
 800b8f4:	3302      	adds	r3, #2
 800b8f6:	444a      	add	r2, r9
 800b8f8:	1b9b      	subs	r3, r3, r6
 800b8fa:	7561      	strb	r1, [r4, #21]
 800b8fc:	60a2      	str	r2, [r4, #8]
 800b8fe:	6123      	str	r3, [r4, #16]
 800b900:	f080 0001 	eor.w	r0, r0, #1
 800b904:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b908:	2102      	movs	r1, #2
 800b90a:	4620      	mov	r0, r4
 800b90c:	f000 fb00 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b910:	b180      	cbz	r0, 800b934 <ucdr_deserialize_int16_t+0xa0>
 800b912:	7d23      	ldrb	r3, [r4, #20]
 800b914:	2b01      	cmp	r3, #1
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	d011      	beq.n	800b93e <ucdr_deserialize_int16_t+0xaa>
 800b91a:	785b      	ldrb	r3, [r3, #1]
 800b91c:	702b      	strb	r3, [r5, #0]
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	781b      	ldrb	r3, [r3, #0]
 800b922:	706b      	strb	r3, [r5, #1]
 800b924:	68a2      	ldr	r2, [r4, #8]
 800b926:	6923      	ldr	r3, [r4, #16]
 800b928:	3202      	adds	r2, #2
 800b92a:	3302      	adds	r3, #2
 800b92c:	2102      	movs	r1, #2
 800b92e:	60a2      	str	r2, [r4, #8]
 800b930:	6123      	str	r3, [r4, #16]
 800b932:	7561      	strb	r1, [r4, #21]
 800b934:	7da0      	ldrb	r0, [r4, #22]
 800b936:	f080 0001 	eor.w	r0, r0, #1
 800b93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93e:	881b      	ldrh	r3, [r3, #0]
 800b940:	802b      	strh	r3, [r5, #0]
 800b942:	e7ef      	b.n	800b924 <ucdr_deserialize_int16_t+0x90>
 800b944:	68a2      	ldr	r2, [r4, #8]
 800b946:	6923      	ldr	r3, [r4, #16]
 800b948:	7da0      	ldrb	r0, [r4, #22]
 800b94a:	f884 8015 	strb.w	r8, [r4, #21]
 800b94e:	1b92      	subs	r2, r2, r6
 800b950:	1b9b      	subs	r3, r3, r6
 800b952:	60a2      	str	r2, [r4, #8]
 800b954:	6123      	str	r3, [r4, #16]
 800b956:	f080 0001 	eor.w	r0, r0, #1
 800b95a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	706b      	strb	r3, [r5, #1]
 800b964:	e7c2      	b.n	800b8ec <ucdr_deserialize_int16_t+0x58>
 800b966:	4639      	mov	r1, r7
 800b968:	4632      	mov	r2, r6
 800b96a:	4628      	mov	r0, r5
 800b96c:	f00c f9cd 	bl	8017d0a <memcpy>
 800b970:	68a1      	ldr	r1, [r4, #8]
 800b972:	464a      	mov	r2, r9
 800b974:	19a8      	adds	r0, r5, r6
 800b976:	f00c f9c8 	bl	8017d0a <memcpy>
 800b97a:	e7b7      	b.n	800b8ec <ucdr_deserialize_int16_t+0x58>

0800b97c <ucdr_serialize_int32_t>:
 800b97c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b980:	b082      	sub	sp, #8
 800b982:	4604      	mov	r4, r0
 800b984:	9101      	str	r1, [sp, #4]
 800b986:	2104      	movs	r1, #4
 800b988:	f000 fb16 	bl	800bfb8 <ucdr_buffer_alignment>
 800b98c:	4601      	mov	r1, r0
 800b98e:	4620      	mov	r0, r4
 800b990:	7d67      	ldrb	r7, [r4, #21]
 800b992:	f000 fb55 	bl	800c040 <ucdr_advance_buffer>
 800b996:	2104      	movs	r1, #4
 800b998:	4620      	mov	r0, r4
 800b99a:	f000 faad 	bl	800bef8 <ucdr_check_buffer_available_for>
 800b99e:	2800      	cmp	r0, #0
 800b9a0:	d139      	bne.n	800ba16 <ucdr_serialize_int32_t+0x9a>
 800b9a2:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b9a6:	42ab      	cmp	r3, r5
 800b9a8:	d930      	bls.n	800ba0c <ucdr_serialize_int32_t+0x90>
 800b9aa:	1b5e      	subs	r6, r3, r5
 800b9ac:	60a3      	str	r3, [r4, #8]
 800b9ae:	6923      	ldr	r3, [r4, #16]
 800b9b0:	f1c6 0804 	rsb	r8, r6, #4
 800b9b4:	4433      	add	r3, r6
 800b9b6:	6123      	str	r3, [r4, #16]
 800b9b8:	4641      	mov	r1, r8
 800b9ba:	4620      	mov	r0, r4
 800b9bc:	f000 faa8 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800b9c0:	2800      	cmp	r0, #0
 800b9c2:	d04c      	beq.n	800ba5e <ucdr_serialize_int32_t+0xe2>
 800b9c4:	7d23      	ldrb	r3, [r4, #20]
 800b9c6:	2b01      	cmp	r3, #1
 800b9c8:	d063      	beq.n	800ba92 <ucdr_serialize_int32_t+0x116>
 800b9ca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b9ce:	702b      	strb	r3, [r5, #0]
 800b9d0:	2e00      	cmp	r6, #0
 800b9d2:	d051      	beq.n	800ba78 <ucdr_serialize_int32_t+0xfc>
 800b9d4:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9d8:	706b      	strb	r3, [r5, #1]
 800b9da:	2e01      	cmp	r6, #1
 800b9dc:	d050      	beq.n	800ba80 <ucdr_serialize_int32_t+0x104>
 800b9de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b9e2:	70ab      	strb	r3, [r5, #2]
 800b9e4:	2e02      	cmp	r6, #2
 800b9e6:	d04f      	beq.n	800ba88 <ucdr_serialize_int32_t+0x10c>
 800b9e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b9ec:	70eb      	strb	r3, [r5, #3]
 800b9ee:	6923      	ldr	r3, [r4, #16]
 800b9f0:	68a2      	ldr	r2, [r4, #8]
 800b9f2:	7da0      	ldrb	r0, [r4, #22]
 800b9f4:	3304      	adds	r3, #4
 800b9f6:	1b9e      	subs	r6, r3, r6
 800b9f8:	4442      	add	r2, r8
 800b9fa:	2304      	movs	r3, #4
 800b9fc:	f080 0001 	eor.w	r0, r0, #1
 800ba00:	60a2      	str	r2, [r4, #8]
 800ba02:	6126      	str	r6, [r4, #16]
 800ba04:	7563      	strb	r3, [r4, #21]
 800ba06:	b002      	add	sp, #8
 800ba08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba0c:	2104      	movs	r1, #4
 800ba0e:	4620      	mov	r0, r4
 800ba10:	f000 fa7e 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800ba14:	b1d0      	cbz	r0, 800ba4c <ucdr_serialize_int32_t+0xd0>
 800ba16:	7d23      	ldrb	r3, [r4, #20]
 800ba18:	2b01      	cmp	r3, #1
 800ba1a:	68a3      	ldr	r3, [r4, #8]
 800ba1c:	d01c      	beq.n	800ba58 <ucdr_serialize_int32_t+0xdc>
 800ba1e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800ba22:	701a      	strb	r2, [r3, #0]
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba2a:	705a      	strb	r2, [r3, #1]
 800ba2c:	68a3      	ldr	r3, [r4, #8]
 800ba2e:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba32:	709a      	strb	r2, [r3, #2]
 800ba34:	68a3      	ldr	r3, [r4, #8]
 800ba36:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba3a:	70da      	strb	r2, [r3, #3]
 800ba3c:	68a2      	ldr	r2, [r4, #8]
 800ba3e:	6923      	ldr	r3, [r4, #16]
 800ba40:	3204      	adds	r2, #4
 800ba42:	3304      	adds	r3, #4
 800ba44:	2104      	movs	r1, #4
 800ba46:	60a2      	str	r2, [r4, #8]
 800ba48:	6123      	str	r3, [r4, #16]
 800ba4a:	7561      	strb	r1, [r4, #21]
 800ba4c:	7da0      	ldrb	r0, [r4, #22]
 800ba4e:	f080 0001 	eor.w	r0, r0, #1
 800ba52:	b002      	add	sp, #8
 800ba54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba58:	9a01      	ldr	r2, [sp, #4]
 800ba5a:	601a      	str	r2, [r3, #0]
 800ba5c:	e7ee      	b.n	800ba3c <ucdr_serialize_int32_t+0xc0>
 800ba5e:	68a2      	ldr	r2, [r4, #8]
 800ba60:	6923      	ldr	r3, [r4, #16]
 800ba62:	7da0      	ldrb	r0, [r4, #22]
 800ba64:	7567      	strb	r7, [r4, #21]
 800ba66:	1b92      	subs	r2, r2, r6
 800ba68:	1b9b      	subs	r3, r3, r6
 800ba6a:	f080 0001 	eor.w	r0, r0, #1
 800ba6e:	60a2      	str	r2, [r4, #8]
 800ba70:	6123      	str	r3, [r4, #16]
 800ba72:	b002      	add	sp, #8
 800ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba78:	68a3      	ldr	r3, [r4, #8]
 800ba7a:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba7e:	701a      	strb	r2, [r3, #0]
 800ba80:	68a3      	ldr	r3, [r4, #8]
 800ba82:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800ba86:	701a      	strb	r2, [r3, #0]
 800ba88:	68a3      	ldr	r3, [r4, #8]
 800ba8a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800ba8e:	701a      	strb	r2, [r3, #0]
 800ba90:	e7ad      	b.n	800b9ee <ucdr_serialize_int32_t+0x72>
 800ba92:	4628      	mov	r0, r5
 800ba94:	ad01      	add	r5, sp, #4
 800ba96:	4629      	mov	r1, r5
 800ba98:	4632      	mov	r2, r6
 800ba9a:	f00c f936 	bl	8017d0a <memcpy>
 800ba9e:	68a0      	ldr	r0, [r4, #8]
 800baa0:	4642      	mov	r2, r8
 800baa2:	19a9      	adds	r1, r5, r6
 800baa4:	f00c f931 	bl	8017d0a <memcpy>
 800baa8:	e7a1      	b.n	800b9ee <ucdr_serialize_int32_t+0x72>
 800baaa:	bf00      	nop

0800baac <ucdr_deserialize_int32_t>:
 800baac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bab0:	460d      	mov	r5, r1
 800bab2:	2104      	movs	r1, #4
 800bab4:	4604      	mov	r4, r0
 800bab6:	f000 fa7f 	bl	800bfb8 <ucdr_buffer_alignment>
 800baba:	4601      	mov	r1, r0
 800babc:	4620      	mov	r0, r4
 800babe:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bac2:	f000 fabd 	bl	800c040 <ucdr_advance_buffer>
 800bac6:	2104      	movs	r1, #4
 800bac8:	4620      	mov	r0, r4
 800baca:	f000 fa15 	bl	800bef8 <ucdr_check_buffer_available_for>
 800bace:	2800      	cmp	r0, #0
 800bad0:	d138      	bne.n	800bb44 <ucdr_deserialize_int32_t+0x98>
 800bad2:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bad6:	42b7      	cmp	r7, r6
 800bad8:	d92f      	bls.n	800bb3a <ucdr_deserialize_int32_t+0x8e>
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	60a7      	str	r7, [r4, #8]
 800bade:	1bbf      	subs	r7, r7, r6
 800bae0:	443b      	add	r3, r7
 800bae2:	f1c7 0904 	rsb	r9, r7, #4
 800bae6:	6123      	str	r3, [r4, #16]
 800bae8:	4649      	mov	r1, r9
 800baea:	4620      	mov	r0, r4
 800baec:	f000 fa10 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800baf0:	2800      	cmp	r0, #0
 800baf2:	d046      	beq.n	800bb82 <ucdr_deserialize_int32_t+0xd6>
 800baf4:	7d23      	ldrb	r3, [r4, #20]
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d05c      	beq.n	800bbb4 <ucdr_deserialize_int32_t+0x108>
 800bafa:	78f3      	ldrb	r3, [r6, #3]
 800bafc:	702b      	strb	r3, [r5, #0]
 800bafe:	2f00      	cmp	r7, #0
 800bb00:	d04c      	beq.n	800bb9c <ucdr_deserialize_int32_t+0xf0>
 800bb02:	78b3      	ldrb	r3, [r6, #2]
 800bb04:	706b      	strb	r3, [r5, #1]
 800bb06:	2f01      	cmp	r7, #1
 800bb08:	f105 0302 	add.w	r3, r5, #2
 800bb0c:	d04a      	beq.n	800bba4 <ucdr_deserialize_int32_t+0xf8>
 800bb0e:	7873      	ldrb	r3, [r6, #1]
 800bb10:	70ab      	strb	r3, [r5, #2]
 800bb12:	2f02      	cmp	r7, #2
 800bb14:	f105 0303 	add.w	r3, r5, #3
 800bb18:	d048      	beq.n	800bbac <ucdr_deserialize_int32_t+0x100>
 800bb1a:	7833      	ldrb	r3, [r6, #0]
 800bb1c:	70eb      	strb	r3, [r5, #3]
 800bb1e:	6923      	ldr	r3, [r4, #16]
 800bb20:	68a2      	ldr	r2, [r4, #8]
 800bb22:	7da0      	ldrb	r0, [r4, #22]
 800bb24:	2104      	movs	r1, #4
 800bb26:	3304      	adds	r3, #4
 800bb28:	444a      	add	r2, r9
 800bb2a:	1bdb      	subs	r3, r3, r7
 800bb2c:	7561      	strb	r1, [r4, #21]
 800bb2e:	60a2      	str	r2, [r4, #8]
 800bb30:	6123      	str	r3, [r4, #16]
 800bb32:	f080 0001 	eor.w	r0, r0, #1
 800bb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb3a:	2104      	movs	r1, #4
 800bb3c:	4620      	mov	r0, r4
 800bb3e:	f000 f9e7 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800bb42:	b1b0      	cbz	r0, 800bb72 <ucdr_deserialize_int32_t+0xc6>
 800bb44:	7d23      	ldrb	r3, [r4, #20]
 800bb46:	2b01      	cmp	r3, #1
 800bb48:	68a3      	ldr	r3, [r4, #8]
 800bb4a:	d017      	beq.n	800bb7c <ucdr_deserialize_int32_t+0xd0>
 800bb4c:	78db      	ldrb	r3, [r3, #3]
 800bb4e:	702b      	strb	r3, [r5, #0]
 800bb50:	68a3      	ldr	r3, [r4, #8]
 800bb52:	789b      	ldrb	r3, [r3, #2]
 800bb54:	706b      	strb	r3, [r5, #1]
 800bb56:	68a3      	ldr	r3, [r4, #8]
 800bb58:	785b      	ldrb	r3, [r3, #1]
 800bb5a:	70ab      	strb	r3, [r5, #2]
 800bb5c:	68a3      	ldr	r3, [r4, #8]
 800bb5e:	781b      	ldrb	r3, [r3, #0]
 800bb60:	70eb      	strb	r3, [r5, #3]
 800bb62:	68a2      	ldr	r2, [r4, #8]
 800bb64:	6923      	ldr	r3, [r4, #16]
 800bb66:	3204      	adds	r2, #4
 800bb68:	3304      	adds	r3, #4
 800bb6a:	2104      	movs	r1, #4
 800bb6c:	60a2      	str	r2, [r4, #8]
 800bb6e:	6123      	str	r3, [r4, #16]
 800bb70:	7561      	strb	r1, [r4, #21]
 800bb72:	7da0      	ldrb	r0, [r4, #22]
 800bb74:	f080 0001 	eor.w	r0, r0, #1
 800bb78:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	602b      	str	r3, [r5, #0]
 800bb80:	e7ef      	b.n	800bb62 <ucdr_deserialize_int32_t+0xb6>
 800bb82:	68a2      	ldr	r2, [r4, #8]
 800bb84:	6923      	ldr	r3, [r4, #16]
 800bb86:	7da0      	ldrb	r0, [r4, #22]
 800bb88:	f884 8015 	strb.w	r8, [r4, #21]
 800bb8c:	1bd2      	subs	r2, r2, r7
 800bb8e:	1bdb      	subs	r3, r3, r7
 800bb90:	60a2      	str	r2, [r4, #8]
 800bb92:	6123      	str	r3, [r4, #16]
 800bb94:	f080 0001 	eor.w	r0, r0, #1
 800bb98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb9c:	68a3      	ldr	r3, [r4, #8]
 800bb9e:	789b      	ldrb	r3, [r3, #2]
 800bba0:	706b      	strb	r3, [r5, #1]
 800bba2:	1cab      	adds	r3, r5, #2
 800bba4:	68a2      	ldr	r2, [r4, #8]
 800bba6:	7852      	ldrb	r2, [r2, #1]
 800bba8:	f803 2b01 	strb.w	r2, [r3], #1
 800bbac:	68a2      	ldr	r2, [r4, #8]
 800bbae:	7812      	ldrb	r2, [r2, #0]
 800bbb0:	701a      	strb	r2, [r3, #0]
 800bbb2:	e7b4      	b.n	800bb1e <ucdr_deserialize_int32_t+0x72>
 800bbb4:	4631      	mov	r1, r6
 800bbb6:	463a      	mov	r2, r7
 800bbb8:	4628      	mov	r0, r5
 800bbba:	f00c f8a6 	bl	8017d0a <memcpy>
 800bbbe:	68a1      	ldr	r1, [r4, #8]
 800bbc0:	464a      	mov	r2, r9
 800bbc2:	19e8      	adds	r0, r5, r7
 800bbc4:	f00c f8a1 	bl	8017d0a <memcpy>
 800bbc8:	e7a9      	b.n	800bb1e <ucdr_deserialize_int32_t+0x72>
 800bbca:	bf00      	nop

0800bbcc <ucdr_serialize_double>:
 800bbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbd0:	2108      	movs	r1, #8
 800bbd2:	b082      	sub	sp, #8
 800bbd4:	4604      	mov	r4, r0
 800bbd6:	ed8d 0b00 	vstr	d0, [sp]
 800bbda:	f000 f9ed 	bl	800bfb8 <ucdr_buffer_alignment>
 800bbde:	4601      	mov	r1, r0
 800bbe0:	4620      	mov	r0, r4
 800bbe2:	7d67      	ldrb	r7, [r4, #21]
 800bbe4:	f000 fa2c 	bl	800c040 <ucdr_advance_buffer>
 800bbe8:	2108      	movs	r1, #8
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 f984 	bl	800bef8 <ucdr_check_buffer_available_for>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d14e      	bne.n	800bc92 <ucdr_serialize_double+0xc6>
 800bbf4:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bbf8:	42ab      	cmp	r3, r5
 800bbfa:	d945      	bls.n	800bc88 <ucdr_serialize_double+0xbc>
 800bbfc:	1b5e      	subs	r6, r3, r5
 800bbfe:	60a3      	str	r3, [r4, #8]
 800bc00:	6923      	ldr	r3, [r4, #16]
 800bc02:	f1c6 0808 	rsb	r8, r6, #8
 800bc06:	4433      	add	r3, r6
 800bc08:	6123      	str	r3, [r4, #16]
 800bc0a:	4641      	mov	r1, r8
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f000 f97f 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800bc12:	2800      	cmp	r0, #0
 800bc14:	d074      	beq.n	800bd00 <ucdr_serialize_double+0x134>
 800bc16:	7d23      	ldrb	r3, [r4, #20]
 800bc18:	2b01      	cmp	r3, #1
 800bc1a:	f000 809b 	beq.w	800bd54 <ucdr_serialize_double+0x188>
 800bc1e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bc22:	702b      	strb	r3, [r5, #0]
 800bc24:	2e00      	cmp	r6, #0
 800bc26:	d078      	beq.n	800bd1a <ucdr_serialize_double+0x14e>
 800bc28:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bc2c:	706b      	strb	r3, [r5, #1]
 800bc2e:	2e01      	cmp	r6, #1
 800bc30:	d077      	beq.n	800bd22 <ucdr_serialize_double+0x156>
 800bc32:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bc36:	70ab      	strb	r3, [r5, #2]
 800bc38:	2e02      	cmp	r6, #2
 800bc3a:	d076      	beq.n	800bd2a <ucdr_serialize_double+0x15e>
 800bc3c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bc40:	70eb      	strb	r3, [r5, #3]
 800bc42:	2e03      	cmp	r6, #3
 800bc44:	d075      	beq.n	800bd32 <ucdr_serialize_double+0x166>
 800bc46:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800bc4a:	712b      	strb	r3, [r5, #4]
 800bc4c:	2e04      	cmp	r6, #4
 800bc4e:	d074      	beq.n	800bd3a <ucdr_serialize_double+0x16e>
 800bc50:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800bc54:	716b      	strb	r3, [r5, #5]
 800bc56:	2e05      	cmp	r6, #5
 800bc58:	d073      	beq.n	800bd42 <ucdr_serialize_double+0x176>
 800bc5a:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800bc5e:	71ab      	strb	r3, [r5, #6]
 800bc60:	2e06      	cmp	r6, #6
 800bc62:	d072      	beq.n	800bd4a <ucdr_serialize_double+0x17e>
 800bc64:	f89d 3000 	ldrb.w	r3, [sp]
 800bc68:	71eb      	strb	r3, [r5, #7]
 800bc6a:	6923      	ldr	r3, [r4, #16]
 800bc6c:	68a2      	ldr	r2, [r4, #8]
 800bc6e:	7da0      	ldrb	r0, [r4, #22]
 800bc70:	3308      	adds	r3, #8
 800bc72:	1b9e      	subs	r6, r3, r6
 800bc74:	4442      	add	r2, r8
 800bc76:	2308      	movs	r3, #8
 800bc78:	f080 0001 	eor.w	r0, r0, #1
 800bc7c:	60a2      	str	r2, [r4, #8]
 800bc7e:	6126      	str	r6, [r4, #16]
 800bc80:	7563      	strb	r3, [r4, #21]
 800bc82:	b002      	add	sp, #8
 800bc84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc88:	2108      	movs	r1, #8
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f000 f940 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800bc90:	b350      	cbz	r0, 800bce8 <ucdr_serialize_double+0x11c>
 800bc92:	7d23      	ldrb	r3, [r4, #20]
 800bc94:	2b01      	cmp	r3, #1
 800bc96:	d02d      	beq.n	800bcf4 <ucdr_serialize_double+0x128>
 800bc98:	68a3      	ldr	r3, [r4, #8]
 800bc9a:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bc9e:	701a      	strb	r2, [r3, #0]
 800bca0:	68a3      	ldr	r3, [r4, #8]
 800bca2:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bca6:	705a      	strb	r2, [r3, #1]
 800bca8:	68a3      	ldr	r3, [r4, #8]
 800bcaa:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bcae:	709a      	strb	r2, [r3, #2]
 800bcb0:	68a3      	ldr	r3, [r4, #8]
 800bcb2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bcb6:	70da      	strb	r2, [r3, #3]
 800bcb8:	68a3      	ldr	r3, [r4, #8]
 800bcba:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bcbe:	711a      	strb	r2, [r3, #4]
 800bcc0:	68a3      	ldr	r3, [r4, #8]
 800bcc2:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bcc6:	715a      	strb	r2, [r3, #5]
 800bcc8:	68a3      	ldr	r3, [r4, #8]
 800bcca:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bcce:	719a      	strb	r2, [r3, #6]
 800bcd0:	68a3      	ldr	r3, [r4, #8]
 800bcd2:	f89d 2000 	ldrb.w	r2, [sp]
 800bcd6:	71da      	strb	r2, [r3, #7]
 800bcd8:	68a2      	ldr	r2, [r4, #8]
 800bcda:	6923      	ldr	r3, [r4, #16]
 800bcdc:	3208      	adds	r2, #8
 800bcde:	3308      	adds	r3, #8
 800bce0:	2108      	movs	r1, #8
 800bce2:	60a2      	str	r2, [r4, #8]
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	7561      	strb	r1, [r4, #21]
 800bce8:	7da0      	ldrb	r0, [r4, #22]
 800bcea:	f080 0001 	eor.w	r0, r0, #1
 800bcee:	b002      	add	sp, #8
 800bcf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcf4:	466b      	mov	r3, sp
 800bcf6:	cb03      	ldmia	r3!, {r0, r1}
 800bcf8:	68a3      	ldr	r3, [r4, #8]
 800bcfa:	6018      	str	r0, [r3, #0]
 800bcfc:	6059      	str	r1, [r3, #4]
 800bcfe:	e7eb      	b.n	800bcd8 <ucdr_serialize_double+0x10c>
 800bd00:	68a2      	ldr	r2, [r4, #8]
 800bd02:	6923      	ldr	r3, [r4, #16]
 800bd04:	7da0      	ldrb	r0, [r4, #22]
 800bd06:	7567      	strb	r7, [r4, #21]
 800bd08:	1b92      	subs	r2, r2, r6
 800bd0a:	1b9b      	subs	r3, r3, r6
 800bd0c:	f080 0001 	eor.w	r0, r0, #1
 800bd10:	60a2      	str	r2, [r4, #8]
 800bd12:	6123      	str	r3, [r4, #16]
 800bd14:	b002      	add	sp, #8
 800bd16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd1a:	68a3      	ldr	r3, [r4, #8]
 800bd1c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bd20:	701a      	strb	r2, [r3, #0]
 800bd22:	68a3      	ldr	r3, [r4, #8]
 800bd24:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bd28:	701a      	strb	r2, [r3, #0]
 800bd2a:	68a3      	ldr	r3, [r4, #8]
 800bd2c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bd30:	701a      	strb	r2, [r3, #0]
 800bd32:	68a3      	ldr	r3, [r4, #8]
 800bd34:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800bd38:	701a      	strb	r2, [r3, #0]
 800bd3a:	68a3      	ldr	r3, [r4, #8]
 800bd3c:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800bd40:	701a      	strb	r2, [r3, #0]
 800bd42:	68a3      	ldr	r3, [r4, #8]
 800bd44:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800bd48:	701a      	strb	r2, [r3, #0]
 800bd4a:	68a3      	ldr	r3, [r4, #8]
 800bd4c:	f89d 2000 	ldrb.w	r2, [sp]
 800bd50:	701a      	strb	r2, [r3, #0]
 800bd52:	e78a      	b.n	800bc6a <ucdr_serialize_double+0x9e>
 800bd54:	4628      	mov	r0, r5
 800bd56:	466d      	mov	r5, sp
 800bd58:	4629      	mov	r1, r5
 800bd5a:	4632      	mov	r2, r6
 800bd5c:	f00b ffd5 	bl	8017d0a <memcpy>
 800bd60:	68a0      	ldr	r0, [r4, #8]
 800bd62:	4642      	mov	r2, r8
 800bd64:	19a9      	adds	r1, r5, r6
 800bd66:	f00b ffd0 	bl	8017d0a <memcpy>
 800bd6a:	e77e      	b.n	800bc6a <ucdr_serialize_double+0x9e>

0800bd6c <ucdr_deserialize_double>:
 800bd6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd70:	460d      	mov	r5, r1
 800bd72:	2108      	movs	r1, #8
 800bd74:	4604      	mov	r4, r0
 800bd76:	f000 f91f 	bl	800bfb8 <ucdr_buffer_alignment>
 800bd7a:	4601      	mov	r1, r0
 800bd7c:	4620      	mov	r0, r4
 800bd7e:	f894 9015 	ldrb.w	r9, [r4, #21]
 800bd82:	f000 f95d 	bl	800c040 <ucdr_advance_buffer>
 800bd86:	2108      	movs	r1, #8
 800bd88:	4620      	mov	r0, r4
 800bd8a:	f000 f8b5 	bl	800bef8 <ucdr_check_buffer_available_for>
 800bd8e:	2800      	cmp	r0, #0
 800bd90:	d151      	bne.n	800be36 <ucdr_deserialize_double+0xca>
 800bd92:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800bd96:	42be      	cmp	r6, r7
 800bd98:	d948      	bls.n	800be2c <ucdr_deserialize_double+0xc0>
 800bd9a:	6923      	ldr	r3, [r4, #16]
 800bd9c:	60a6      	str	r6, [r4, #8]
 800bd9e:	1bf6      	subs	r6, r6, r7
 800bda0:	4433      	add	r3, r6
 800bda2:	f1c6 0808 	rsb	r8, r6, #8
 800bda6:	6123      	str	r3, [r4, #16]
 800bda8:	4641      	mov	r1, r8
 800bdaa:	4620      	mov	r0, r4
 800bdac:	f000 f8b0 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800bdb0:	2800      	cmp	r0, #0
 800bdb2:	d06d      	beq.n	800be90 <ucdr_deserialize_double+0x124>
 800bdb4:	7d23      	ldrb	r3, [r4, #20]
 800bdb6:	2b01      	cmp	r3, #1
 800bdb8:	f000 8093 	beq.w	800bee2 <ucdr_deserialize_double+0x176>
 800bdbc:	79fb      	ldrb	r3, [r7, #7]
 800bdbe:	702b      	strb	r3, [r5, #0]
 800bdc0:	2e00      	cmp	r6, #0
 800bdc2:	d072      	beq.n	800beaa <ucdr_deserialize_double+0x13e>
 800bdc4:	79bb      	ldrb	r3, [r7, #6]
 800bdc6:	706b      	strb	r3, [r5, #1]
 800bdc8:	2e01      	cmp	r6, #1
 800bdca:	f105 0302 	add.w	r3, r5, #2
 800bdce:	d070      	beq.n	800beb2 <ucdr_deserialize_double+0x146>
 800bdd0:	797b      	ldrb	r3, [r7, #5]
 800bdd2:	70ab      	strb	r3, [r5, #2]
 800bdd4:	2e02      	cmp	r6, #2
 800bdd6:	f105 0303 	add.w	r3, r5, #3
 800bdda:	d06e      	beq.n	800beba <ucdr_deserialize_double+0x14e>
 800bddc:	793b      	ldrb	r3, [r7, #4]
 800bdde:	70eb      	strb	r3, [r5, #3]
 800bde0:	2e03      	cmp	r6, #3
 800bde2:	f105 0304 	add.w	r3, r5, #4
 800bde6:	d06c      	beq.n	800bec2 <ucdr_deserialize_double+0x156>
 800bde8:	78fb      	ldrb	r3, [r7, #3]
 800bdea:	712b      	strb	r3, [r5, #4]
 800bdec:	2e04      	cmp	r6, #4
 800bdee:	f105 0305 	add.w	r3, r5, #5
 800bdf2:	d06a      	beq.n	800beca <ucdr_deserialize_double+0x15e>
 800bdf4:	78bb      	ldrb	r3, [r7, #2]
 800bdf6:	716b      	strb	r3, [r5, #5]
 800bdf8:	2e05      	cmp	r6, #5
 800bdfa:	f105 0306 	add.w	r3, r5, #6
 800bdfe:	d068      	beq.n	800bed2 <ucdr_deserialize_double+0x166>
 800be00:	787b      	ldrb	r3, [r7, #1]
 800be02:	71ab      	strb	r3, [r5, #6]
 800be04:	2e06      	cmp	r6, #6
 800be06:	f105 0307 	add.w	r3, r5, #7
 800be0a:	d066      	beq.n	800beda <ucdr_deserialize_double+0x16e>
 800be0c:	783b      	ldrb	r3, [r7, #0]
 800be0e:	71eb      	strb	r3, [r5, #7]
 800be10:	6923      	ldr	r3, [r4, #16]
 800be12:	68a2      	ldr	r2, [r4, #8]
 800be14:	7da0      	ldrb	r0, [r4, #22]
 800be16:	3308      	adds	r3, #8
 800be18:	1b9e      	subs	r6, r3, r6
 800be1a:	2308      	movs	r3, #8
 800be1c:	4442      	add	r2, r8
 800be1e:	7563      	strb	r3, [r4, #21]
 800be20:	60a2      	str	r2, [r4, #8]
 800be22:	6126      	str	r6, [r4, #16]
 800be24:	f080 0001 	eor.w	r0, r0, #1
 800be28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be2c:	2108      	movs	r1, #8
 800be2e:	4620      	mov	r0, r4
 800be30:	f000 f86e 	bl	800bf10 <ucdr_check_final_buffer_behavior>
 800be34:	b310      	cbz	r0, 800be7c <ucdr_deserialize_double+0x110>
 800be36:	7d23      	ldrb	r3, [r4, #20]
 800be38:	2b01      	cmp	r3, #1
 800be3a:	68a3      	ldr	r3, [r4, #8]
 800be3c:	d023      	beq.n	800be86 <ucdr_deserialize_double+0x11a>
 800be3e:	79db      	ldrb	r3, [r3, #7]
 800be40:	702b      	strb	r3, [r5, #0]
 800be42:	68a3      	ldr	r3, [r4, #8]
 800be44:	799b      	ldrb	r3, [r3, #6]
 800be46:	706b      	strb	r3, [r5, #1]
 800be48:	68a3      	ldr	r3, [r4, #8]
 800be4a:	795b      	ldrb	r3, [r3, #5]
 800be4c:	70ab      	strb	r3, [r5, #2]
 800be4e:	68a3      	ldr	r3, [r4, #8]
 800be50:	791b      	ldrb	r3, [r3, #4]
 800be52:	70eb      	strb	r3, [r5, #3]
 800be54:	68a3      	ldr	r3, [r4, #8]
 800be56:	78db      	ldrb	r3, [r3, #3]
 800be58:	712b      	strb	r3, [r5, #4]
 800be5a:	68a3      	ldr	r3, [r4, #8]
 800be5c:	789b      	ldrb	r3, [r3, #2]
 800be5e:	716b      	strb	r3, [r5, #5]
 800be60:	68a3      	ldr	r3, [r4, #8]
 800be62:	785b      	ldrb	r3, [r3, #1]
 800be64:	71ab      	strb	r3, [r5, #6]
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	71eb      	strb	r3, [r5, #7]
 800be6c:	68a2      	ldr	r2, [r4, #8]
 800be6e:	6923      	ldr	r3, [r4, #16]
 800be70:	3208      	adds	r2, #8
 800be72:	3308      	adds	r3, #8
 800be74:	2108      	movs	r1, #8
 800be76:	60a2      	str	r2, [r4, #8]
 800be78:	6123      	str	r3, [r4, #16]
 800be7a:	7561      	strb	r1, [r4, #21]
 800be7c:	7da0      	ldrb	r0, [r4, #22]
 800be7e:	f080 0001 	eor.w	r0, r0, #1
 800be82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be86:	681a      	ldr	r2, [r3, #0]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	606b      	str	r3, [r5, #4]
 800be8c:	602a      	str	r2, [r5, #0]
 800be8e:	e7ed      	b.n	800be6c <ucdr_deserialize_double+0x100>
 800be90:	68a2      	ldr	r2, [r4, #8]
 800be92:	6923      	ldr	r3, [r4, #16]
 800be94:	7da0      	ldrb	r0, [r4, #22]
 800be96:	f884 9015 	strb.w	r9, [r4, #21]
 800be9a:	1b92      	subs	r2, r2, r6
 800be9c:	1b9b      	subs	r3, r3, r6
 800be9e:	60a2      	str	r2, [r4, #8]
 800bea0:	6123      	str	r3, [r4, #16]
 800bea2:	f080 0001 	eor.w	r0, r0, #1
 800bea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beaa:	68a3      	ldr	r3, [r4, #8]
 800beac:	799b      	ldrb	r3, [r3, #6]
 800beae:	706b      	strb	r3, [r5, #1]
 800beb0:	1cab      	adds	r3, r5, #2
 800beb2:	68a2      	ldr	r2, [r4, #8]
 800beb4:	7952      	ldrb	r2, [r2, #5]
 800beb6:	f803 2b01 	strb.w	r2, [r3], #1
 800beba:	68a2      	ldr	r2, [r4, #8]
 800bebc:	7912      	ldrb	r2, [r2, #4]
 800bebe:	f803 2b01 	strb.w	r2, [r3], #1
 800bec2:	68a2      	ldr	r2, [r4, #8]
 800bec4:	78d2      	ldrb	r2, [r2, #3]
 800bec6:	f803 2b01 	strb.w	r2, [r3], #1
 800beca:	68a2      	ldr	r2, [r4, #8]
 800becc:	7892      	ldrb	r2, [r2, #2]
 800bece:	f803 2b01 	strb.w	r2, [r3], #1
 800bed2:	68a2      	ldr	r2, [r4, #8]
 800bed4:	7852      	ldrb	r2, [r2, #1]
 800bed6:	f803 2b01 	strb.w	r2, [r3], #1
 800beda:	68a2      	ldr	r2, [r4, #8]
 800bedc:	7812      	ldrb	r2, [r2, #0]
 800bede:	701a      	strb	r2, [r3, #0]
 800bee0:	e796      	b.n	800be10 <ucdr_deserialize_double+0xa4>
 800bee2:	4639      	mov	r1, r7
 800bee4:	4632      	mov	r2, r6
 800bee6:	4628      	mov	r0, r5
 800bee8:	f00b ff0f 	bl	8017d0a <memcpy>
 800beec:	68a1      	ldr	r1, [r4, #8]
 800beee:	4642      	mov	r2, r8
 800bef0:	19a8      	adds	r0, r5, r6
 800bef2:	f00b ff0a 	bl	8017d0a <memcpy>
 800bef6:	e78b      	b.n	800be10 <ucdr_deserialize_double+0xa4>

0800bef8 <ucdr_check_buffer_available_for>:
 800bef8:	7d83      	ldrb	r3, [r0, #22]
 800befa:	b93b      	cbnz	r3, 800bf0c <ucdr_check_buffer_available_for+0x14>
 800befc:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bf00:	4419      	add	r1, r3
 800bf02:	4288      	cmp	r0, r1
 800bf04:	bf34      	ite	cc
 800bf06:	2000      	movcc	r0, #0
 800bf08:	2001      	movcs	r0, #1
 800bf0a:	4770      	bx	lr
 800bf0c:	2000      	movs	r0, #0
 800bf0e:	4770      	bx	lr

0800bf10 <ucdr_check_final_buffer_behavior>:
 800bf10:	7d83      	ldrb	r3, [r0, #22]
 800bf12:	b943      	cbnz	r3, 800bf26 <ucdr_check_final_buffer_behavior+0x16>
 800bf14:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bf18:	4291      	cmp	r1, r2
 800bf1a:	b510      	push	{r4, lr}
 800bf1c:	4604      	mov	r4, r0
 800bf1e:	d205      	bcs.n	800bf2c <ucdr_check_final_buffer_behavior+0x1c>
 800bf20:	2301      	movs	r3, #1
 800bf22:	4618      	mov	r0, r3
 800bf24:	bd10      	pop	{r4, pc}
 800bf26:	2300      	movs	r3, #0
 800bf28:	4618      	mov	r0, r3
 800bf2a:	4770      	bx	lr
 800bf2c:	6982      	ldr	r2, [r0, #24]
 800bf2e:	b13a      	cbz	r2, 800bf40 <ucdr_check_final_buffer_behavior+0x30>
 800bf30:	69c1      	ldr	r1, [r0, #28]
 800bf32:	4790      	blx	r2
 800bf34:	f080 0301 	eor.w	r3, r0, #1
 800bf38:	b2db      	uxtb	r3, r3
 800bf3a:	75a0      	strb	r0, [r4, #22]
 800bf3c:	4618      	mov	r0, r3
 800bf3e:	bd10      	pop	{r4, pc}
 800bf40:	2001      	movs	r0, #1
 800bf42:	75a0      	strb	r0, [r4, #22]
 800bf44:	e7fa      	b.n	800bf3c <ucdr_check_final_buffer_behavior+0x2c>
 800bf46:	bf00      	nop

0800bf48 <ucdr_set_on_full_buffer_callback>:
 800bf48:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop

0800bf50 <ucdr_init_buffer_origin_offset_endian>:
 800bf50:	b410      	push	{r4}
 800bf52:	9c01      	ldr	r4, [sp, #4]
 800bf54:	6001      	str	r1, [r0, #0]
 800bf56:	440a      	add	r2, r1
 800bf58:	6042      	str	r2, [r0, #4]
 800bf5a:	190a      	adds	r2, r1, r4
 800bf5c:	441c      	add	r4, r3
 800bf5e:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bf62:	6082      	str	r2, [r0, #8]
 800bf64:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bf68:	7503      	strb	r3, [r0, #20]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bf70:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bf74:	7542      	strb	r2, [r0, #21]
 800bf76:	7582      	strb	r2, [r0, #22]
 800bf78:	4770      	bx	lr
 800bf7a:	bf00      	nop

0800bf7c <ucdr_init_buffer_origin_offset>:
 800bf7c:	b510      	push	{r4, lr}
 800bf7e:	b082      	sub	sp, #8
 800bf80:	9c04      	ldr	r4, [sp, #16]
 800bf82:	9400      	str	r4, [sp, #0]
 800bf84:	2401      	movs	r4, #1
 800bf86:	9401      	str	r4, [sp, #4]
 800bf88:	f7ff ffe2 	bl	800bf50 <ucdr_init_buffer_origin_offset_endian>
 800bf8c:	b002      	add	sp, #8
 800bf8e:	bd10      	pop	{r4, pc}

0800bf90 <ucdr_init_buffer_origin>:
 800bf90:	b510      	push	{r4, lr}
 800bf92:	b082      	sub	sp, #8
 800bf94:	2400      	movs	r4, #0
 800bf96:	9400      	str	r4, [sp, #0]
 800bf98:	f7ff fff0 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 800bf9c:	b002      	add	sp, #8
 800bf9e:	bd10      	pop	{r4, pc}

0800bfa0 <ucdr_init_buffer>:
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	f7ff bff5 	b.w	800bf90 <ucdr_init_buffer_origin>
 800bfa6:	bf00      	nop

0800bfa8 <ucdr_alignment>:
 800bfa8:	fbb0 f3f1 	udiv	r3, r0, r1
 800bfac:	fb03 0011 	mls	r0, r3, r1, r0
 800bfb0:	1a08      	subs	r0, r1, r0
 800bfb2:	3901      	subs	r1, #1
 800bfb4:	4008      	ands	r0, r1
 800bfb6:	4770      	bx	lr

0800bfb8 <ucdr_buffer_alignment>:
 800bfb8:	7d43      	ldrb	r3, [r0, #21]
 800bfba:	428b      	cmp	r3, r1
 800bfbc:	d208      	bcs.n	800bfd0 <ucdr_buffer_alignment+0x18>
 800bfbe:	6900      	ldr	r0, [r0, #16]
 800bfc0:	fbb0 f3f1 	udiv	r3, r0, r1
 800bfc4:	fb01 0013 	mls	r0, r1, r3, r0
 800bfc8:	1a08      	subs	r0, r1, r0
 800bfca:	3901      	subs	r1, #1
 800bfcc:	4008      	ands	r0, r1
 800bfce:	4770      	bx	lr
 800bfd0:	2000      	movs	r0, #0
 800bfd2:	4770      	bx	lr

0800bfd4 <ucdr_align_to>:
 800bfd4:	b538      	push	{r3, r4, r5, lr}
 800bfd6:	4604      	mov	r4, r0
 800bfd8:	460d      	mov	r5, r1
 800bfda:	f7ff ffed 	bl	800bfb8 <ucdr_buffer_alignment>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	6921      	ldr	r1, [r4, #16]
 800bfe2:	7565      	strb	r5, [r4, #21]
 800bfe4:	181a      	adds	r2, r3, r0
 800bfe6:	6863      	ldr	r3, [r4, #4]
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	4408      	add	r0, r1
 800bfec:	bf28      	it	cs
 800bfee:	4613      	movcs	r3, r2
 800bff0:	6120      	str	r0, [r4, #16]
 800bff2:	60a3      	str	r3, [r4, #8]
 800bff4:	bd38      	pop	{r3, r4, r5, pc}
 800bff6:	bf00      	nop

0800bff8 <ucdr_buffer_length>:
 800bff8:	6882      	ldr	r2, [r0, #8]
 800bffa:	6800      	ldr	r0, [r0, #0]
 800bffc:	1a10      	subs	r0, r2, r0
 800bffe:	4770      	bx	lr

0800c000 <ucdr_buffer_remaining>:
 800c000:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800c004:	1a10      	subs	r0, r2, r0
 800c006:	4770      	bx	lr

0800c008 <ucdr_check_final_buffer_behavior_array>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	7d83      	ldrb	r3, [r0, #22]
 800c00c:	b963      	cbnz	r3, 800c028 <ucdr_check_final_buffer_behavior_array+0x20>
 800c00e:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800c012:	429a      	cmp	r2, r3
 800c014:	4604      	mov	r4, r0
 800c016:	460d      	mov	r5, r1
 800c018:	d308      	bcc.n	800c02c <ucdr_check_final_buffer_behavior_array+0x24>
 800c01a:	b139      	cbz	r1, 800c02c <ucdr_check_final_buffer_behavior_array+0x24>
 800c01c:	6983      	ldr	r3, [r0, #24]
 800c01e:	b163      	cbz	r3, 800c03a <ucdr_check_final_buffer_behavior_array+0x32>
 800c020:	69c1      	ldr	r1, [r0, #28]
 800c022:	4798      	blx	r3
 800c024:	75a0      	strb	r0, [r4, #22]
 800c026:	b108      	cbz	r0, 800c02c <ucdr_check_final_buffer_behavior_array+0x24>
 800c028:	2000      	movs	r0, #0
 800c02a:	bd38      	pop	{r3, r4, r5, pc}
 800c02c:	4620      	mov	r0, r4
 800c02e:	f7ff ffe7 	bl	800c000 <ucdr_buffer_remaining>
 800c032:	42a8      	cmp	r0, r5
 800c034:	bf28      	it	cs
 800c036:	4628      	movcs	r0, r5
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	2301      	movs	r3, #1
 800c03c:	7583      	strb	r3, [r0, #22]
 800c03e:	e7f3      	b.n	800c028 <ucdr_check_final_buffer_behavior_array+0x20>

0800c040 <ucdr_advance_buffer>:
 800c040:	b538      	push	{r3, r4, r5, lr}
 800c042:	4604      	mov	r4, r0
 800c044:	460d      	mov	r5, r1
 800c046:	f7ff ff57 	bl	800bef8 <ucdr_check_buffer_available_for>
 800c04a:	b178      	cbz	r0, 800c06c <ucdr_advance_buffer+0x2c>
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	68a2      	ldr	r2, [r4, #8]
 800c050:	442b      	add	r3, r5
 800c052:	6123      	str	r3, [r4, #16]
 800c054:	2301      	movs	r3, #1
 800c056:	442a      	add	r2, r5
 800c058:	7563      	strb	r3, [r4, #21]
 800c05a:	60a2      	str	r2, [r4, #8]
 800c05c:	bd38      	pop	{r3, r4, r5, pc}
 800c05e:	68a2      	ldr	r2, [r4, #8]
 800c060:	6923      	ldr	r3, [r4, #16]
 800c062:	4402      	add	r2, r0
 800c064:	4403      	add	r3, r0
 800c066:	1a2d      	subs	r5, r5, r0
 800c068:	60a2      	str	r2, [r4, #8]
 800c06a:	6123      	str	r3, [r4, #16]
 800c06c:	4629      	mov	r1, r5
 800c06e:	2201      	movs	r2, #1
 800c070:	4620      	mov	r0, r4
 800c072:	f7ff ffc9 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 800c076:	2800      	cmp	r0, #0
 800c078:	d1f1      	bne.n	800c05e <ucdr_advance_buffer+0x1e>
 800c07a:	2301      	movs	r3, #1
 800c07c:	7563      	strb	r3, [r4, #21]
 800c07e:	bd38      	pop	{r3, r4, r5, pc}

0800c080 <rcl_get_zero_initialized_init_options>:
 800c080:	2000      	movs	r0, #0
 800c082:	4770      	bx	lr

0800c084 <rcl_init_options_init>:
 800c084:	b084      	sub	sp, #16
 800c086:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c088:	b097      	sub	sp, #92	@ 0x5c
 800c08a:	ae1d      	add	r6, sp, #116	@ 0x74
 800c08c:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800c090:	2800      	cmp	r0, #0
 800c092:	d058      	beq.n	800c146 <rcl_init_options_init+0xc2>
 800c094:	6803      	ldr	r3, [r0, #0]
 800c096:	4605      	mov	r5, r0
 800c098:	b133      	cbz	r3, 800c0a8 <rcl_init_options_init+0x24>
 800c09a:	2464      	movs	r4, #100	@ 0x64
 800c09c:	4620      	mov	r0, r4
 800c09e:	b017      	add	sp, #92	@ 0x5c
 800c0a0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800c0a4:	b004      	add	sp, #16
 800c0a6:	4770      	bx	lr
 800c0a8:	4630      	mov	r0, r6
 800c0aa:	f001 f927 	bl	800d2fc <rcutils_allocator_is_valid>
 800c0ae:	2800      	cmp	r0, #0
 800c0b0:	d049      	beq.n	800c146 <rcl_init_options_init+0xc2>
 800c0b2:	46b4      	mov	ip, r6
 800c0b4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0b8:	ac11      	add	r4, sp, #68	@ 0x44
 800c0ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c0bc:	f8dc 3000 	ldr.w	r3, [ip]
 800c0c0:	6023      	str	r3, [r4, #0]
 800c0c2:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c0c4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800c0c6:	2050      	movs	r0, #80	@ 0x50
 800c0c8:	4798      	blx	r3
 800c0ca:	4604      	mov	r4, r0
 800c0cc:	6028      	str	r0, [r5, #0]
 800c0ce:	2800      	cmp	r0, #0
 800c0d0:	d03b      	beq.n	800c14a <rcl_init_options_init+0xc6>
 800c0d2:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 800c0d6:	4686      	mov	lr, r0
 800c0d8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c0dc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c0e0:	f8dc 3000 	ldr.w	r3, [ip]
 800c0e4:	f8ce 3000 	str.w	r3, [lr]
 800c0e8:	a802      	add	r0, sp, #8
 800c0ea:	f001 f999 	bl	800d420 <rmw_get_zero_initialized_init_options>
 800c0ee:	f10d 0e08 	add.w	lr, sp, #8
 800c0f2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c0f6:	f104 0c18 	add.w	ip, r4, #24
 800c0fa:	682f      	ldr	r7, [r5, #0]
 800c0fc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c100:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c104:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c108:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c10c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c110:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c114:	ac20      	add	r4, sp, #128	@ 0x80
 800c116:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c11a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800c11e:	e88d 0003 	stmia.w	sp, {r0, r1}
 800c122:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800c126:	f107 0018 	add.w	r0, r7, #24
 800c12a:	f001 f9a7 	bl	800d47c <rmw_init_options_init>
 800c12e:	4604      	mov	r4, r0
 800c130:	2800      	cmp	r0, #0
 800c132:	d0b3      	beq.n	800c09c <rcl_init_options_init+0x18>
 800c134:	9921      	ldr	r1, [sp, #132]	@ 0x84
 800c136:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800c138:	6828      	ldr	r0, [r5, #0]
 800c13a:	4798      	blx	r3
 800c13c:	4620      	mov	r0, r4
 800c13e:	f005 ff11 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 800c142:	4604      	mov	r4, r0
 800c144:	e7aa      	b.n	800c09c <rcl_init_options_init+0x18>
 800c146:	240b      	movs	r4, #11
 800c148:	e7a8      	b.n	800c09c <rcl_init_options_init+0x18>
 800c14a:	240a      	movs	r4, #10
 800c14c:	e7a6      	b.n	800c09c <rcl_init_options_init+0x18>
 800c14e:	bf00      	nop

0800c150 <rcl_init_options_fini>:
 800c150:	b530      	push	{r4, r5, lr}
 800c152:	b087      	sub	sp, #28
 800c154:	b1f0      	cbz	r0, 800c194 <rcl_init_options_fini+0x44>
 800c156:	6803      	ldr	r3, [r0, #0]
 800c158:	4604      	mov	r4, r0
 800c15a:	b1db      	cbz	r3, 800c194 <rcl_init_options_fini+0x44>
 800c15c:	469c      	mov	ip, r3
 800c15e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c162:	f10d 0e04 	add.w	lr, sp, #4
 800c166:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c16a:	f8dc 3000 	ldr.w	r3, [ip]
 800c16e:	f8ce 3000 	str.w	r3, [lr]
 800c172:	a801      	add	r0, sp, #4
 800c174:	f001 f8c2 	bl	800d2fc <rcutils_allocator_is_valid>
 800c178:	b160      	cbz	r0, 800c194 <rcl_init_options_fini+0x44>
 800c17a:	6820      	ldr	r0, [r4, #0]
 800c17c:	3018      	adds	r0, #24
 800c17e:	f001 fa2d 	bl	800d5dc <rmw_init_options_fini>
 800c182:	4605      	mov	r5, r0
 800c184:	b950      	cbnz	r0, 800c19c <rcl_init_options_fini+0x4c>
 800c186:	6820      	ldr	r0, [r4, #0]
 800c188:	9b02      	ldr	r3, [sp, #8]
 800c18a:	9905      	ldr	r1, [sp, #20]
 800c18c:	4798      	blx	r3
 800c18e:	4628      	mov	r0, r5
 800c190:	b007      	add	sp, #28
 800c192:	bd30      	pop	{r4, r5, pc}
 800c194:	250b      	movs	r5, #11
 800c196:	4628      	mov	r0, r5
 800c198:	b007      	add	sp, #28
 800c19a:	bd30      	pop	{r4, r5, pc}
 800c19c:	f005 fee2 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 800c1a0:	4605      	mov	r5, r0
 800c1a2:	e7f8      	b.n	800c196 <rcl_init_options_fini+0x46>

0800c1a4 <rcl_init_options_copy>:
 800c1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1a8:	b094      	sub	sp, #80	@ 0x50
 800c1aa:	2800      	cmp	r0, #0
 800c1ac:	d058      	beq.n	800c260 <rcl_init_options_copy+0xbc>
 800c1ae:	4604      	mov	r4, r0
 800c1b0:	6800      	ldr	r0, [r0, #0]
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d054      	beq.n	800c260 <rcl_init_options_copy+0xbc>
 800c1b6:	460e      	mov	r6, r1
 800c1b8:	f001 f8a0 	bl	800d2fc <rcutils_allocator_is_valid>
 800c1bc:	2800      	cmp	r0, #0
 800c1be:	d04f      	beq.n	800c260 <rcl_init_options_copy+0xbc>
 800c1c0:	2e00      	cmp	r6, #0
 800c1c2:	d04d      	beq.n	800c260 <rcl_init_options_copy+0xbc>
 800c1c4:	6833      	ldr	r3, [r6, #0]
 800c1c6:	b123      	cbz	r3, 800c1d2 <rcl_init_options_copy+0x2e>
 800c1c8:	2464      	movs	r4, #100	@ 0x64
 800c1ca:	4620      	mov	r0, r4
 800c1cc:	b014      	add	sp, #80	@ 0x50
 800c1ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c1d2:	6827      	ldr	r7, [r4, #0]
 800c1d4:	46bc      	mov	ip, r7
 800c1d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c1da:	ad0f      	add	r5, sp, #60	@ 0x3c
 800c1dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800c1de:	f8dc 3000 	ldr.w	r3, [ip]
 800c1e2:	f8d7 8000 	ldr.w	r8, [r7]
 800c1e6:	602b      	str	r3, [r5, #0]
 800c1e8:	4619      	mov	r1, r3
 800c1ea:	2050      	movs	r0, #80	@ 0x50
 800c1ec:	47c0      	blx	r8
 800c1ee:	4605      	mov	r5, r0
 800c1f0:	6030      	str	r0, [r6, #0]
 800c1f2:	b3d0      	cbz	r0, 800c26a <rcl_init_options_copy+0xc6>
 800c1f4:	f10d 0c3c 	add.w	ip, sp, #60	@ 0x3c
 800c1f8:	4686      	mov	lr, r0
 800c1fa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c1fe:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c202:	f8dc 3000 	ldr.w	r3, [ip]
 800c206:	f8ce 3000 	str.w	r3, [lr]
 800c20a:	4668      	mov	r0, sp
 800c20c:	f001 f908 	bl	800d420 <rmw_get_zero_initialized_init_options>
 800c210:	46ee      	mov	lr, sp
 800c212:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c216:	f105 0c18 	add.w	ip, r5, #24
 800c21a:	6824      	ldr	r4, [r4, #0]
 800c21c:	6835      	ldr	r5, [r6, #0]
 800c21e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c222:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c226:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c22a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800c22e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800c232:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800c236:	e88c 0003 	stmia.w	ip, {r0, r1}
 800c23a:	f104 0018 	add.w	r0, r4, #24
 800c23e:	f105 0118 	add.w	r1, r5, #24
 800c242:	f001 f983 	bl	800d54c <rmw_init_options_copy>
 800c246:	4604      	mov	r4, r0
 800c248:	2800      	cmp	r0, #0
 800c24a:	d0be      	beq.n	800c1ca <rcl_init_options_copy+0x26>
 800c24c:	f001 f864 	bl	800d318 <rcutils_get_error_string>
 800c250:	f001 f87a 	bl	800d348 <rcutils_reset_error>
 800c254:	4630      	mov	r0, r6
 800c256:	f7ff ff7b 	bl	800c150 <rcl_init_options_fini>
 800c25a:	b140      	cbz	r0, 800c26e <rcl_init_options_copy+0xca>
 800c25c:	4604      	mov	r4, r0
 800c25e:	e7b4      	b.n	800c1ca <rcl_init_options_copy+0x26>
 800c260:	240b      	movs	r4, #11
 800c262:	4620      	mov	r0, r4
 800c264:	b014      	add	sp, #80	@ 0x50
 800c266:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c26a:	240a      	movs	r4, #10
 800c26c:	e7ad      	b.n	800c1ca <rcl_init_options_copy+0x26>
 800c26e:	4620      	mov	r0, r4
 800c270:	b014      	add	sp, #80	@ 0x50
 800c272:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c276:	f005 be75 	b.w	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 800c27a:	bf00      	nop

0800c27c <rcl_init_options_set_domain_id>:
 800c27c:	b120      	cbz	r0, 800c288 <rcl_init_options_set_domain_id+0xc>
 800c27e:	6803      	ldr	r3, [r0, #0]
 800c280:	b113      	cbz	r3, 800c288 <rcl_init_options_set_domain_id+0xc>
 800c282:	6259      	str	r1, [r3, #36]	@ 0x24
 800c284:	2000      	movs	r0, #0
 800c286:	4770      	bx	lr
 800c288:	200b      	movs	r0, #11
 800c28a:	4770      	bx	lr

0800c28c <rcl_get_zero_initialized_publisher>:
 800c28c:	4b01      	ldr	r3, [pc, #4]	@ (800c294 <rcl_get_zero_initialized_publisher+0x8>)
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	08018e44 	.word	0x08018e44

0800c298 <rcl_publisher_init>:
 800c298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c29c:	b088      	sub	sp, #32
 800c29e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 800c2a0:	2d00      	cmp	r5, #0
 800c2a2:	d069      	beq.n	800c378 <rcl_publisher_init+0xe0>
 800c2a4:	f105 0950 	add.w	r9, r5, #80	@ 0x50
 800c2a8:	4604      	mov	r4, r0
 800c2aa:	4648      	mov	r0, r9
 800c2ac:	460e      	mov	r6, r1
 800c2ae:	4690      	mov	r8, r2
 800c2b0:	461f      	mov	r7, r3
 800c2b2:	f001 f823 	bl	800d2fc <rcutils_allocator_is_valid>
 800c2b6:	2800      	cmp	r0, #0
 800c2b8:	d05e      	beq.n	800c378 <rcl_publisher_init+0xe0>
 800c2ba:	2c00      	cmp	r4, #0
 800c2bc:	d05c      	beq.n	800c378 <rcl_publisher_init+0xe0>
 800c2be:	f8d4 a000 	ldr.w	sl, [r4]
 800c2c2:	f1ba 0f00 	cmp.w	sl, #0
 800c2c6:	d004      	beq.n	800c2d2 <rcl_publisher_init+0x3a>
 800c2c8:	2764      	movs	r7, #100	@ 0x64
 800c2ca:	4638      	mov	r0, r7
 800c2cc:	b008      	add	sp, #32
 800c2ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c2d2:	4630      	mov	r0, r6
 800c2d4:	f006 f940 	bl	8012558 <rcl_node_is_valid>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	d052      	beq.n	800c382 <rcl_publisher_init+0xea>
 800c2dc:	f1b8 0f00 	cmp.w	r8, #0
 800c2e0:	d04a      	beq.n	800c378 <rcl_publisher_init+0xe0>
 800c2e2:	2f00      	cmp	r7, #0
 800c2e4:	d048      	beq.n	800c378 <rcl_publisher_init+0xe0>
 800c2e6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800c2ea:	aa07      	add	r2, sp, #28
 800c2ec:	9205      	str	r2, [sp, #20]
 800c2ee:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 800c2f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c2f6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800c2fa:	f8cd a01c 	str.w	sl, [sp, #28]
 800c2fe:	4639      	mov	r1, r7
 800c300:	e899 000c 	ldmia.w	r9, {r2, r3}
 800c304:	4630      	mov	r0, r6
 800c306:	f006 f97b 	bl	8012600 <rcl_node_resolve_name>
 800c30a:	4607      	mov	r7, r0
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d14f      	bne.n	800c3b0 <rcl_publisher_init+0x118>
 800c310:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800c312:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c314:	20c8      	movs	r0, #200	@ 0xc8
 800c316:	4798      	blx	r3
 800c318:	6020      	str	r0, [r4, #0]
 800c31a:	2800      	cmp	r0, #0
 800c31c:	d04e      	beq.n	800c3bc <rcl_publisher_init+0x124>
 800c31e:	4630      	mov	r0, r6
 800c320:	f006 f93c 	bl	801259c <rcl_node_get_rmw_handle>
 800c324:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	9a07      	ldr	r2, [sp, #28]
 800c32c:	6827      	ldr	r7, [r4, #0]
 800c32e:	462b      	mov	r3, r5
 800c330:	4641      	mov	r1, r8
 800c332:	f001 fc7b 	bl	800dc2c <rmw_create_publisher>
 800c336:	6823      	ldr	r3, [r4, #0]
 800c338:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4
 800c33c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c340:	b370      	cbz	r0, 800c3a0 <rcl_publisher_init+0x108>
 800c342:	f103 0170 	add.w	r1, r3, #112	@ 0x70
 800c346:	f001 fd4f 	bl	800dde8 <rmw_publisher_get_actual_qos>
 800c34a:	6823      	ldr	r3, [r4, #0]
 800c34c:	4607      	mov	r7, r0
 800c34e:	b9d0      	cbnz	r0, 800c386 <rcl_publisher_init+0xee>
 800c350:	f895 2048 	ldrb.w	r2, [r5, #72]	@ 0x48
 800c354:	f883 20b8 	strb.w	r2, [r3, #184]	@ 0xb8
 800c358:	4629      	mov	r1, r5
 800c35a:	2270      	movs	r2, #112	@ 0x70
 800c35c:	4618      	mov	r0, r3
 800c35e:	f00b fcd4 	bl	8017d0a <memcpy>
 800c362:	6832      	ldr	r2, [r6, #0]
 800c364:	f8c0 20c0 	str.w	r2, [r0, #192]	@ 0xc0
 800c368:	9807      	ldr	r0, [sp, #28]
 800c36a:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c36c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c36e:	4798      	blx	r3
 800c370:	4638      	mov	r0, r7
 800c372:	b008      	add	sp, #32
 800c374:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c378:	270b      	movs	r7, #11
 800c37a:	4638      	mov	r0, r7
 800c37c:	b008      	add	sp, #32
 800c37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c382:	27c8      	movs	r7, #200	@ 0xc8
 800c384:	e7a1      	b.n	800c2ca <rcl_publisher_init+0x32>
 800c386:	b18b      	cbz	r3, 800c3ac <rcl_publisher_init+0x114>
 800c388:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c38c:	b142      	cbz	r2, 800c3a0 <rcl_publisher_init+0x108>
 800c38e:	4630      	mov	r0, r6
 800c390:	f006 f904 	bl	801259c <rcl_node_get_rmw_handle>
 800c394:	6823      	ldr	r3, [r4, #0]
 800c396:	f8d3 10c4 	ldr.w	r1, [r3, #196]	@ 0xc4
 800c39a:	f001 fd35 	bl	800de08 <rmw_destroy_publisher>
 800c39e:	6823      	ldr	r3, [r4, #0]
 800c3a0:	6d6a      	ldr	r2, [r5, #84]	@ 0x54
 800c3a2:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800c3a4:	4618      	mov	r0, r3
 800c3a6:	4790      	blx	r2
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	6023      	str	r3, [r4, #0]
 800c3ac:	2701      	movs	r7, #1
 800c3ae:	e7db      	b.n	800c368 <rcl_publisher_init+0xd0>
 800c3b0:	2867      	cmp	r0, #103	@ 0x67
 800c3b2:	d0d9      	beq.n	800c368 <rcl_publisher_init+0xd0>
 800c3b4:	2869      	cmp	r0, #105	@ 0x69
 800c3b6:	d003      	beq.n	800c3c0 <rcl_publisher_init+0x128>
 800c3b8:	280a      	cmp	r0, #10
 800c3ba:	d1f7      	bne.n	800c3ac <rcl_publisher_init+0x114>
 800c3bc:	270a      	movs	r7, #10
 800c3be:	e7d3      	b.n	800c368 <rcl_publisher_init+0xd0>
 800c3c0:	2767      	movs	r7, #103	@ 0x67
 800c3c2:	e7d1      	b.n	800c368 <rcl_publisher_init+0xd0>

0800c3c4 <rcl_publisher_get_default_options>:
 800c3c4:	b570      	push	{r4, r5, r6, lr}
 800c3c6:	4d14      	ldr	r5, [pc, #80]	@ (800c418 <rcl_publisher_get_default_options+0x54>)
 800c3c8:	4914      	ldr	r1, [pc, #80]	@ (800c41c <rcl_publisher_get_default_options+0x58>)
 800c3ca:	b088      	sub	sp, #32
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	2250      	movs	r2, #80	@ 0x50
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	f00b fc9a 	bl	8017d0a <memcpy>
 800c3d6:	a802      	add	r0, sp, #8
 800c3d8:	f000 ff82 	bl	800d2e0 <rcutils_get_default_allocator>
 800c3dc:	f10d 0c08 	add.w	ip, sp, #8
 800c3e0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800c3e4:	f105 0e50 	add.w	lr, r5, #80	@ 0x50
 800c3e8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800c3ec:	466e      	mov	r6, sp
 800c3ee:	f8dc 3000 	ldr.w	r3, [ip]
 800c3f2:	f8ce 3000 	str.w	r3, [lr]
 800c3f6:	4630      	mov	r0, r6
 800c3f8:	f001 f822 	bl	800d440 <rmw_get_default_publisher_options>
 800c3fc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c400:	f105 0364 	add.w	r3, r5, #100	@ 0x64
 800c404:	e883 0003 	stmia.w	r3, {r0, r1}
 800c408:	2270      	movs	r2, #112	@ 0x70
 800c40a:	4629      	mov	r1, r5
 800c40c:	4620      	mov	r0, r4
 800c40e:	f00b fc7c 	bl	8017d0a <memcpy>
 800c412:	4620      	mov	r0, r4
 800c414:	b008      	add	sp, #32
 800c416:	bd70      	pop	{r4, r5, r6, pc}
 800c418:	200065f0 	.word	0x200065f0
 800c41c:	08018e48 	.word	0x08018e48

0800c420 <rcl_publish>:
 800c420:	b1f8      	cbz	r0, 800c462 <rcl_publish+0x42>
 800c422:	6803      	ldr	r3, [r0, #0]
 800c424:	b570      	push	{r4, r5, r6, lr}
 800c426:	4604      	mov	r4, r0
 800c428:	b1b3      	cbz	r3, 800c458 <rcl_publish+0x38>
 800c42a:	4616      	mov	r6, r2
 800c42c:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c430:	b192      	cbz	r2, 800c458 <rcl_publish+0x38>
 800c432:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c436:	460d      	mov	r5, r1
 800c438:	f005 fdb2 	bl	8011fa0 <rcl_context_is_valid>
 800c43c:	b160      	cbz	r0, 800c458 <rcl_publish+0x38>
 800c43e:	6823      	ldr	r3, [r4, #0]
 800c440:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c444:	b140      	cbz	r0, 800c458 <rcl_publish+0x38>
 800c446:	b155      	cbz	r5, 800c45e <rcl_publish+0x3e>
 800c448:	4632      	mov	r2, r6
 800c44a:	4629      	mov	r1, r5
 800c44c:	f001 fb8e 	bl	800db6c <rmw_publish>
 800c450:	3800      	subs	r0, #0
 800c452:	bf18      	it	ne
 800c454:	2001      	movne	r0, #1
 800c456:	bd70      	pop	{r4, r5, r6, pc}
 800c458:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c45c:	bd70      	pop	{r4, r5, r6, pc}
 800c45e:	200b      	movs	r0, #11
 800c460:	bd70      	pop	{r4, r5, r6, pc}
 800c462:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800c466:	4770      	bx	lr

0800c468 <rcl_publisher_is_valid>:
 800c468:	b1a0      	cbz	r0, 800c494 <rcl_publisher_is_valid+0x2c>
 800c46a:	6803      	ldr	r3, [r0, #0]
 800c46c:	b510      	push	{r4, lr}
 800c46e:	4604      	mov	r4, r0
 800c470:	b173      	cbz	r3, 800c490 <rcl_publisher_is_valid+0x28>
 800c472:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
 800c476:	b15a      	cbz	r2, 800c490 <rcl_publisher_is_valid+0x28>
 800c478:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 800c47c:	f005 fd90 	bl	8011fa0 <rcl_context_is_valid>
 800c480:	b130      	cbz	r0, 800c490 <rcl_publisher_is_valid+0x28>
 800c482:	6823      	ldr	r3, [r4, #0]
 800c484:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 800c488:	3800      	subs	r0, #0
 800c48a:	bf18      	it	ne
 800c48c:	2001      	movne	r0, #1
 800c48e:	bd10      	pop	{r4, pc}
 800c490:	2000      	movs	r0, #0
 800c492:	bd10      	pop	{r4, pc}
 800c494:	2000      	movs	r0, #0
 800c496:	4770      	bx	lr

0800c498 <rcl_publisher_is_valid_except_context>:
 800c498:	b130      	cbz	r0, 800c4a8 <rcl_publisher_is_valid_except_context+0x10>
 800c49a:	6800      	ldr	r0, [r0, #0]
 800c49c:	b120      	cbz	r0, 800c4a8 <rcl_publisher_is_valid_except_context+0x10>
 800c49e:	f8d0 00c4 	ldr.w	r0, [r0, #196]	@ 0xc4
 800c4a2:	3800      	subs	r0, #0
 800c4a4:	bf18      	it	ne
 800c4a6:	2001      	movne	r0, #1
 800c4a8:	4770      	bx	lr
 800c4aa:	bf00      	nop

0800c4ac <_rclc_check_for_new_data>:
 800c4ac:	2800      	cmp	r0, #0
 800c4ae:	d046      	beq.n	800c53e <_rclc_check_for_new_data+0x92>
 800c4b0:	b510      	push	{r4, lr}
 800c4b2:	7802      	ldrb	r2, [r0, #0]
 800c4b4:	b084      	sub	sp, #16
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2a0a      	cmp	r2, #10
 800c4ba:	d842      	bhi.n	800c542 <_rclc_check_for_new_data+0x96>
 800c4bc:	e8df f002 	tbb	[pc, r2]
 800c4c0:	14181212 	.word	0x14181212
 800c4c4:	06060614 	.word	0x06060614
 800c4c8:	2e1a      	.short	0x2e1a
 800c4ca:	16          	.byte	0x16
 800c4cb:	00          	.byte	0x00
 800c4cc:	6a0a      	ldr	r2, [r1, #32]
 800c4ce:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800c4d0:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800c4d4:	2000      	movs	r0, #0
 800c4d6:	1a12      	subs	r2, r2, r0
 800c4d8:	bf18      	it	ne
 800c4da:	2201      	movne	r2, #1
 800c4dc:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 800c4e0:	b004      	add	sp, #16
 800c4e2:	bd10      	pop	{r4, pc}
 800c4e4:	680a      	ldr	r2, [r1, #0]
 800c4e6:	e7f2      	b.n	800c4ce <_rclc_check_for_new_data+0x22>
 800c4e8:	698a      	ldr	r2, [r1, #24]
 800c4ea:	e7f0      	b.n	800c4ce <_rclc_check_for_new_data+0x22>
 800c4ec:	688a      	ldr	r2, [r1, #8]
 800c4ee:	e7ee      	b.n	800c4ce <_rclc_check_for_new_data+0x22>
 800c4f0:	690a      	ldr	r2, [r1, #16]
 800c4f2:	e7ec      	b.n	800c4ce <_rclc_check_for_new_data+0x22>
 800c4f4:	685c      	ldr	r4, [r3, #4]
 800c4f6:	4608      	mov	r0, r1
 800c4f8:	f104 0244 	add.w	r2, r4, #68	@ 0x44
 800c4fc:	f104 0143 	add.w	r1, r4, #67	@ 0x43
 800c500:	f104 0342 	add.w	r3, r4, #66	@ 0x42
 800c504:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800c508:	9300      	str	r3, [sp, #0]
 800c50a:	f104 0240 	add.w	r2, r4, #64	@ 0x40
 800c50e:	f104 0341 	add.w	r3, r4, #65	@ 0x41
 800c512:	f104 0110 	add.w	r1, r4, #16
 800c516:	f007 fe6f 	bl	80141f8 <rcl_action_client_wait_set_get_entities_ready>
 800c51a:	e7e1      	b.n	800c4e0 <_rclc_check_for_new_data+0x34>
 800c51c:	685c      	ldr	r4, [r3, #4]
 800c51e:	f104 0223 	add.w	r2, r4, #35	@ 0x23
 800c522:	f104 0322 	add.w	r3, r4, #34	@ 0x22
 800c526:	e9cd 3200 	strd	r3, r2, [sp]
 800c52a:	4608      	mov	r0, r1
 800c52c:	f104 0321 	add.w	r3, r4, #33	@ 0x21
 800c530:	f104 0220 	add.w	r2, r4, #32
 800c534:	f104 0110 	add.w	r1, r4, #16
 800c538:	f008 f876 	bl	8014628 <rcl_action_server_wait_set_get_entities_ready>
 800c53c:	e7d0      	b.n	800c4e0 <_rclc_check_for_new_data+0x34>
 800c53e:	200b      	movs	r0, #11
 800c540:	4770      	bx	lr
 800c542:	2001      	movs	r0, #1
 800c544:	e7cc      	b.n	800c4e0 <_rclc_check_for_new_data+0x34>
 800c546:	bf00      	nop

0800c548 <_rclc_take_new_data>:
 800c548:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c54a:	b09b      	sub	sp, #108	@ 0x6c
 800c54c:	2800      	cmp	r0, #0
 800c54e:	f000 8088 	beq.w	800c662 <_rclc_take_new_data+0x11a>
 800c552:	7803      	ldrb	r3, [r0, #0]
 800c554:	4604      	mov	r4, r0
 800c556:	2b0a      	cmp	r3, #10
 800c558:	f200 8167 	bhi.w	800c82a <_rclc_take_new_data+0x2e2>
 800c55c:	e8df f003 	tbb	[pc, r3]
 800c560:	44152d2d 	.word	0x44152d2d
 800c564:	19191944 	.word	0x19191944
 800c568:	065a      	.short	0x065a
 800c56a:	15          	.byte	0x15
 800c56b:	00          	.byte	0x00
 800c56c:	6840      	ldr	r0, [r0, #4]
 800c56e:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c572:	2b00      	cmp	r3, #0
 800c574:	f040 80b2 	bne.w	800c6dc <_rclc_take_new_data+0x194>
 800c578:	f890 3022 	ldrb.w	r3, [r0, #34]	@ 0x22
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	f040 80e4 	bne.w	800c74a <_rclc_take_new_data+0x202>
 800c582:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800c586:	2b00      	cmp	r3, #0
 800c588:	d16f      	bne.n	800c66a <_rclc_take_new_data+0x122>
 800c58a:	2500      	movs	r5, #0
 800c58c:	4628      	mov	r0, r5
 800c58e:	b01b      	add	sp, #108	@ 0x6c
 800c590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c592:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c594:	6a0b      	ldr	r3, [r1, #32]
 800c596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d0f5      	beq.n	800c58a <_rclc_take_new_data+0x42>
 800c59e:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c5a2:	f104 0110 	add.w	r1, r4, #16
 800c5a6:	f006 f9d5 	bl	8012954 <rcl_take_request>
 800c5aa:	4605      	mov	r5, r0
 800c5ac:	2800      	cmp	r0, #0
 800c5ae:	d0ec      	beq.n	800c58a <_rclc_take_new_data+0x42>
 800c5b0:	f240 2359 	movw	r3, #601	@ 0x259
 800c5b4:	4298      	cmp	r0, r3
 800c5b6:	d013      	beq.n	800c5e0 <_rclc_take_new_data+0x98>
 800c5b8:	e029      	b.n	800c60e <_rclc_take_new_data+0xc6>
 800c5ba:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c5bc:	680b      	ldr	r3, [r1, #0]
 800c5be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	d0e1      	beq.n	800c58a <_rclc_take_new_data+0x42>
 800c5c6:	e9d0 0101 	ldrd	r0, r1, [r0, #4]
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	aa0a      	add	r2, sp, #40	@ 0x28
 800c5ce:	f006 fa23 	bl	8012a18 <rcl_take>
 800c5d2:	4605      	mov	r5, r0
 800c5d4:	2800      	cmp	r0, #0
 800c5d6:	d0d9      	beq.n	800c58c <_rclc_take_new_data+0x44>
 800c5d8:	f240 1391 	movw	r3, #401	@ 0x191
 800c5dc:	4298      	cmp	r0, r3
 800c5de:	d116      	bne.n	800c60e <_rclc_take_new_data+0xc6>
 800c5e0:	2300      	movs	r3, #0
 800c5e2:	f884 3039 	strb.w	r3, [r4, #57]	@ 0x39
 800c5e6:	e7d1      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c5e8:	6b42      	ldr	r2, [r0, #52]	@ 0x34
 800c5ea:	698b      	ldr	r3, [r1, #24]
 800c5ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0ca      	beq.n	800c58a <_rclc_take_new_data+0x42>
 800c5f4:	e9d0 0201 	ldrd	r0, r2, [r0, #4]
 800c5f8:	f104 0110 	add.w	r1, r4, #16
 800c5fc:	f005 fc60 	bl	8011ec0 <rcl_take_response>
 800c600:	4605      	mov	r5, r0
 800c602:	2800      	cmp	r0, #0
 800c604:	d0c1      	beq.n	800c58a <_rclc_take_new_data+0x42>
 800c606:	f240 13f5 	movw	r3, #501	@ 0x1f5
 800c60a:	4298      	cmp	r0, r3
 800c60c:	d0be      	beq.n	800c58c <_rclc_take_new_data+0x44>
 800c60e:	f000 fe9b 	bl	800d348 <rcutils_reset_error>
 800c612:	e7bb      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c614:	6840      	ldr	r0, [r0, #4]
 800c616:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d17d      	bne.n	800c71a <_rclc_take_new_data+0x1d2>
 800c61e:	69c3      	ldr	r3, [r0, #28]
 800c620:	b11b      	cbz	r3, 800c62a <_rclc_take_new_data+0xe2>
 800c622:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c626:	2b00      	cmp	r3, #0
 800c628:	d144      	bne.n	800c6b4 <_rclc_take_new_data+0x16c>
 800c62a:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c62e:	2b00      	cmp	r3, #0
 800c630:	f040 80ac 	bne.w	800c78c <_rclc_take_new_data+0x244>
 800c634:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d0a6      	beq.n	800c58a <_rclc_take_new_data+0x42>
 800c63c:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800c63e:	a90a      	add	r1, sp, #40	@ 0x28
 800c640:	3010      	adds	r0, #16
 800c642:	f007 fcb1 	bl	8013fa8 <rcl_action_take_result_response>
 800c646:	4605      	mov	r5, r0
 800c648:	2800      	cmp	r0, #0
 800c64a:	d1e0      	bne.n	800c60e <_rclc_take_new_data+0xc6>
 800c64c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c650:	6860      	ldr	r0, [r4, #4]
 800c652:	f008 f90d 	bl	8014870 <rclc_action_find_handle_by_result_request_sequence_number>
 800c656:	2800      	cmp	r0, #0
 800c658:	d098      	beq.n	800c58c <_rclc_take_new_data+0x44>
 800c65a:	2301      	movs	r3, #1
 800c65c:	f880 3023 	strb.w	r3, [r0, #35]	@ 0x23
 800c660:	e794      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c662:	250b      	movs	r5, #11
 800c664:	4628      	mov	r0, r5
 800c666:	b01b      	add	sp, #108	@ 0x6c
 800c668:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c66a:	ae04      	add	r6, sp, #16
 800c66c:	aa0a      	add	r2, sp, #40	@ 0x28
 800c66e:	3010      	adds	r0, #16
 800c670:	4631      	mov	r1, r6
 800c672:	f007 ff0d 	bl	8014490 <rcl_action_take_cancel_request>
 800c676:	4605      	mov	r5, r0
 800c678:	2800      	cmp	r0, #0
 800c67a:	d1c8      	bne.n	800c60e <_rclc_take_new_data+0xc6>
 800c67c:	6860      	ldr	r0, [r4, #4]
 800c67e:	a90a      	add	r1, sp, #40	@ 0x28
 800c680:	f008 f8b4 	bl	80147ec <rclc_action_find_goal_handle_by_uuid>
 800c684:	4607      	mov	r7, r0
 800c686:	2800      	cmp	r0, #0
 800c688:	f000 80bb 	beq.w	800c802 <_rclc_take_new_data+0x2ba>
 800c68c:	f990 0008 	ldrsb.w	r0, [r0, #8]
 800c690:	2101      	movs	r1, #1
 800c692:	f008 f835 	bl	8014700 <rcl_action_transition_goal_state>
 800c696:	2803      	cmp	r0, #3
 800c698:	4684      	mov	ip, r0
 800c69a:	f040 80a7 	bne.w	800c7ec <_rclc_take_new_data+0x2a4>
 800c69e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 800c6a0:	f107 0458 	add.w	r4, r7, #88	@ 0x58
 800c6a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c6a6:	e896 0003 	ldmia.w	r6, {r0, r1}
 800c6aa:	e884 0003 	stmia.w	r4, {r0, r1}
 800c6ae:	f887 c008 	strb.w	ip, [r7, #8]
 800c6b2:	e76b      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c6b4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6b6:	3010      	adds	r0, #16
 800c6b8:	f007 fcf6 	bl	80140a8 <rcl_action_take_feedback>
 800c6bc:	4605      	mov	r5, r0
 800c6be:	2800      	cmp	r0, #0
 800c6c0:	d1a5      	bne.n	800c60e <_rclc_take_new_data+0xc6>
 800c6c2:	6860      	ldr	r0, [r4, #4]
 800c6c4:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c6c6:	f008 f891 	bl	80147ec <rclc_action_find_goal_handle_by_uuid>
 800c6ca:	4603      	mov	r3, r0
 800c6cc:	2800      	cmp	r0, #0
 800c6ce:	f000 80a3 	beq.w	800c818 <_rclc_take_new_data+0x2d0>
 800c6d2:	2201      	movs	r2, #1
 800c6d4:	6860      	ldr	r0, [r4, #4]
 800c6d6:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 800c6da:	e7a6      	b.n	800c62a <_rclc_take_new_data+0xe2>
 800c6dc:	f008 f860 	bl	80147a0 <rclc_action_take_goal_handle>
 800c6e0:	4606      	mov	r6, r0
 800c6e2:	6860      	ldr	r0, [r4, #4]
 800c6e4:	2e00      	cmp	r6, #0
 800c6e6:	f43f af47 	beq.w	800c578 <_rclc_take_new_data+0x30>
 800c6ea:	6070      	str	r0, [r6, #4]
 800c6ec:	69f2      	ldr	r2, [r6, #28]
 800c6ee:	f106 0128 	add.w	r1, r6, #40	@ 0x28
 800c6f2:	3010      	adds	r0, #16
 800c6f4:	f007 fe14 	bl	8014320 <rcl_action_take_goal_request>
 800c6f8:	4605      	mov	r5, r0
 800c6fa:	2800      	cmp	r0, #0
 800c6fc:	f040 808e 	bne.w	800c81c <_rclc_take_new_data+0x2d4>
 800c700:	69f7      	ldr	r7, [r6, #28]
 800c702:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800c704:	7235      	strb	r5, [r6, #8]
 800c706:	f8c6 0009 	str.w	r0, [r6, #9]
 800c70a:	f8c6 100d 	str.w	r1, [r6, #13]
 800c70e:	6860      	ldr	r0, [r4, #4]
 800c710:	f8c6 2011 	str.w	r2, [r6, #17]
 800c714:	f8c6 3015 	str.w	r3, [r6, #21]
 800c718:	e72e      	b.n	800c578 <_rclc_take_new_data+0x30>
 800c71a:	aa04      	add	r2, sp, #16
 800c71c:	a90a      	add	r1, sp, #40	@ 0x28
 800c71e:	3010      	adds	r0, #16
 800c720:	f007 fbca 	bl	8013eb8 <rcl_action_take_goal_response>
 800c724:	4605      	mov	r5, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	f47f af71 	bne.w	800c60e <_rclc_take_new_data+0xc6>
 800c72c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c730:	6860      	ldr	r0, [r4, #4]
 800c732:	f008 f88b 	bl	801484c <rclc_action_find_handle_by_goal_request_sequence_number>
 800c736:	b130      	cbz	r0, 800c746 <_rclc_take_new_data+0x1fe>
 800c738:	f89d 3010 	ldrb.w	r3, [sp, #16]
 800c73c:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800c740:	2201      	movs	r2, #1
 800c742:	f880 2020 	strb.w	r2, [r0, #32]
 800c746:	6860      	ldr	r0, [r4, #4]
 800c748:	e769      	b.n	800c61e <_rclc_take_new_data+0xd6>
 800c74a:	aa04      	add	r2, sp, #16
 800c74c:	3010      	adds	r0, #16
 800c74e:	a90a      	add	r1, sp, #40	@ 0x28
 800c750:	f007 fe5e 	bl	8014410 <rcl_action_take_result_request>
 800c754:	4605      	mov	r5, r0
 800c756:	2800      	cmp	r0, #0
 800c758:	f47f af59 	bne.w	800c60e <_rclc_take_new_data+0xc6>
 800c75c:	6860      	ldr	r0, [r4, #4]
 800c75e:	a904      	add	r1, sp, #16
 800c760:	f008 f844 	bl	80147ec <rclc_action_find_goal_handle_by_uuid>
 800c764:	4607      	mov	r7, r0
 800c766:	b160      	cbz	r0, 800c782 <_rclc_take_new_data+0x23a>
 800c768:	ad0a      	add	r5, sp, #40	@ 0x28
 800c76a:	f100 0640 	add.w	r6, r0, #64	@ 0x40
 800c76e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c770:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800c772:	e895 0003 	ldmia.w	r5, {r0, r1}
 800c776:	f04f 0c02 	mov.w	ip, #2
 800c77a:	e886 0003 	stmia.w	r6, {r0, r1}
 800c77e:	f887 c008 	strb.w	ip, [r7, #8]
 800c782:	6860      	ldr	r0, [r4, #4]
 800c784:	2300      	movs	r3, #0
 800c786:	f880 3022 	strb.w	r3, [r0, #34]	@ 0x22
 800c78a:	e6fa      	b.n	800c582 <_rclc_take_new_data+0x3a>
 800c78c:	f100 0230 	add.w	r2, r0, #48	@ 0x30
 800c790:	a90a      	add	r1, sp, #40	@ 0x28
 800c792:	3010      	adds	r0, #16
 800c794:	f007 fc48 	bl	8014028 <rcl_action_take_cancel_response>
 800c798:	4605      	mov	r5, r0
 800c79a:	2800      	cmp	r0, #0
 800c79c:	f47f af37 	bne.w	800c60e <_rclc_take_new_data+0xc6>
 800c7a0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800c7a4:	6860      	ldr	r0, [r4, #4]
 800c7a6:	f008 f875 	bl	8014894 <rclc_action_find_handle_by_cancel_request_sequence_number>
 800c7aa:	4606      	mov	r6, r0
 800c7ac:	6860      	ldr	r0, [r4, #4]
 800c7ae:	2e00      	cmp	r6, #0
 800c7b0:	f43f af40 	beq.w	800c634 <_rclc_take_new_data+0xec>
 800c7b4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c7b6:	2701      	movs	r7, #1
 800c7b8:	84b7      	strh	r7, [r6, #36]	@ 0x24
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	f43f af3a 	beq.w	800c634 <_rclc_take_new_data+0xec>
 800c7c0:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800c7c2:	eb05 0145 	add.w	r1, r5, r5, lsl #1
 800c7c6:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 800c7ca:	f008 f80f 	bl	80147ec <rclc_action_find_goal_handle_by_uuid>
 800c7ce:	b138      	cbz	r0, 800c7e0 <_rclc_take_new_data+0x298>
 800c7d0:	6860      	ldr	r0, [r4, #4]
 800c7d2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c7d4:	f886 7025 	strb.w	r7, [r6, #37]	@ 0x25
 800c7d8:	3501      	adds	r5, #1
 800c7da:	42ab      	cmp	r3, r5
 800c7dc:	d8f0      	bhi.n	800c7c0 <_rclc_take_new_data+0x278>
 800c7de:	e729      	b.n	800c634 <_rclc_take_new_data+0xec>
 800c7e0:	6860      	ldr	r0, [r4, #4]
 800c7e2:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800c7e4:	3501      	adds	r5, #1
 800c7e6:	42ab      	cmp	r3, r5
 800c7e8:	d8ea      	bhi.n	800c7c0 <_rclc_take_new_data+0x278>
 800c7ea:	e723      	b.n	800c634 <_rclc_take_new_data+0xec>
 800c7ec:	ab06      	add	r3, sp, #24
 800c7ee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c7f0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c7f4:	2103      	movs	r1, #3
 800c7f6:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c7fa:	6860      	ldr	r0, [r4, #4]
 800c7fc:	f008 f8c0 	bl	8014980 <rclc_action_server_goal_cancel_reject>
 800c800:	e6c4      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c802:	ab06      	add	r3, sp, #24
 800c804:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800c806:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800c80a:	2102      	movs	r1, #2
 800c80c:	e896 000c 	ldmia.w	r6, {r2, r3}
 800c810:	6860      	ldr	r0, [r4, #4]
 800c812:	f008 f8b5 	bl	8014980 <rclc_action_server_goal_cancel_reject>
 800c816:	e6b9      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c818:	6860      	ldr	r0, [r4, #4]
 800c81a:	e706      	b.n	800c62a <_rclc_take_new_data+0xe2>
 800c81c:	6860      	ldr	r0, [r4, #4]
 800c81e:	4631      	mov	r1, r6
 800c820:	f007 ffce 	bl	80147c0 <rclc_action_remove_used_goal_handle>
 800c824:	f000 fd90 	bl	800d348 <rcutils_reset_error>
 800c828:	e6b0      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c82a:	2501      	movs	r5, #1
 800c82c:	e6ae      	b.n	800c58c <_rclc_take_new_data+0x44>
 800c82e:	bf00      	nop

0800c830 <_rclc_execute.part.0>:
 800c830:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c832:	7803      	ldrb	r3, [r0, #0]
 800c834:	b087      	sub	sp, #28
 800c836:	4604      	mov	r4, r0
 800c838:	2b0a      	cmp	r3, #10
 800c83a:	f200 8136 	bhi.w	800caaa <_rclc_execute.part.0+0x27a>
 800c83e:	e8df f003 	tbb	[pc, r3]
 800c842:	435e      	.short	0x435e
 800c844:	06a1664f 	.word	0x06a1664f
 800c848:	6c1e0606 	.word	0x6c1e0606
 800c84c:	59          	.byte	0x59
 800c84d:	00          	.byte	0x00
 800c84e:	2b06      	cmp	r3, #6
 800c850:	f000 8122 	beq.w	800ca98 <_rclc_execute.part.0+0x268>
 800c854:	2b07      	cmp	r3, #7
 800c856:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c858:	f040 8118 	bne.w	800ca8c <_rclc_execute.part.0+0x25c>
 800c85c:	e9d0 120a 	ldrd	r1, r2, [r0, #40]	@ 0x28
 800c860:	6880      	ldr	r0, [r0, #8]
 800c862:	4798      	blx	r3
 800c864:	f104 0110 	add.w	r1, r4, #16
 800c868:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800c86a:	6860      	ldr	r0, [r4, #4]
 800c86c:	f006 f8b2 	bl	80129d4 <rcl_send_response>
 800c870:	2800      	cmp	r0, #0
 800c872:	d033      	beq.n	800c8dc <_rclc_execute.part.0+0xac>
 800c874:	9005      	str	r0, [sp, #20]
 800c876:	f000 fd67 	bl	800d348 <rcutils_reset_error>
 800c87a:	9805      	ldr	r0, [sp, #20]
 800c87c:	e02e      	b.n	800c8dc <_rclc_execute.part.0+0xac>
 800c87e:	6840      	ldr	r0, [r0, #4]
 800c880:	f890 3042 	ldrb.w	r3, [r0, #66]	@ 0x42
 800c884:	2b00      	cmp	r3, #0
 800c886:	f000 8086 	beq.w	800c996 <_rclc_execute.part.0+0x166>
 800c88a:	2600      	movs	r6, #0
 800c88c:	2701      	movs	r7, #1
 800c88e:	e004      	b.n	800c89a <_rclc_execute.part.0+0x6a>
 800c890:	f007 ff60 	bl	8014754 <rclc_action_send_result_request>
 800c894:	b998      	cbnz	r0, 800c8be <_rclc_execute.part.0+0x8e>
 800c896:	722f      	strb	r7, [r5, #8]
 800c898:	6860      	ldr	r0, [r4, #4]
 800c89a:	f008 f80d 	bl	80148b8 <rclc_action_find_first_handle_with_goal_response>
 800c89e:	4605      	mov	r5, r0
 800c8a0:	2800      	cmp	r0, #0
 800c8a2:	d077      	beq.n	800c994 <_rclc_execute.part.0+0x164>
 800c8a4:	6863      	ldr	r3, [r4, #4]
 800c8a6:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c8a8:	699b      	ldr	r3, [r3, #24]
 800c8aa:	f895 1021 	ldrb.w	r1, [r5, #33]	@ 0x21
 800c8ae:	f885 6020 	strb.w	r6, [r5, #32]
 800c8b2:	4798      	blx	r3
 800c8b4:	f895 3021 	ldrb.w	r3, [r5, #33]	@ 0x21
 800c8b8:	4628      	mov	r0, r5
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1e8      	bne.n	800c890 <_rclc_execute.part.0+0x60>
 800c8be:	6860      	ldr	r0, [r4, #4]
 800c8c0:	4629      	mov	r1, r5
 800c8c2:	f007 ff7d 	bl	80147c0 <rclc_action_remove_used_goal_handle>
 800c8c6:	e7e7      	b.n	800c898 <_rclc_execute.part.0+0x68>
 800c8c8:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c8cc:	e9d0 130b 	ldrd	r1, r3, [r0, #44]	@ 0x2c
 800c8d0:	2d00      	cmp	r5, #0
 800c8d2:	f000 80c9 	beq.w	800ca68 <_rclc_execute.part.0+0x238>
 800c8d6:	6880      	ldr	r0, [r0, #8]
 800c8d8:	4798      	blx	r3
 800c8da:	2000      	movs	r0, #0
 800c8dc:	b007      	add	sp, #28
 800c8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8e0:	6840      	ldr	r0, [r0, #4]
 800c8e2:	f006 fba7 	bl	8013034 <rcl_timer_call>
 800c8e6:	f240 3321 	movw	r3, #801	@ 0x321
 800c8ea:	4298      	cmp	r0, r3
 800c8ec:	d004      	beq.n	800c8f8 <_rclc_execute.part.0+0xc8>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d0f4      	beq.n	800c8dc <_rclc_execute.part.0+0xac>
 800c8f2:	e7bf      	b.n	800c874 <_rclc_execute.part.0+0x44>
 800c8f4:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c8f6:	4798      	blx	r3
 800c8f8:	2000      	movs	r0, #0
 800c8fa:	b007      	add	sp, #28
 800c8fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c8fe:	f890 5039 	ldrb.w	r5, [r0, #57]	@ 0x39
 800c902:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c904:	b925      	cbnz	r5, 800c910 <_rclc_execute.part.0+0xe0>
 800c906:	4628      	mov	r0, r5
 800c908:	4798      	blx	r3
 800c90a:	4628      	mov	r0, r5
 800c90c:	e7e6      	b.n	800c8dc <_rclc_execute.part.0+0xac>
 800c90e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c910:	68a0      	ldr	r0, [r4, #8]
 800c912:	4798      	blx	r3
 800c914:	2000      	movs	r0, #0
 800c916:	b007      	add	sp, #28
 800c918:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c91a:	6840      	ldr	r0, [r0, #4]
 800c91c:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800c920:	bb3b      	cbnz	r3, 800c972 <_rclc_execute.part.0+0x142>
 800c922:	f890 3020 	ldrb.w	r3, [r0, #32]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d07b      	beq.n	800ca22 <_rclc_execute.part.0+0x1f2>
 800c92a:	f640 0634 	movw	r6, #2100	@ 0x834
 800c92e:	2701      	movs	r7, #1
 800c930:	e007      	b.n	800c942 <_rclc_execute.part.0+0x112>
 800c932:	4628      	mov	r0, r5
 800c934:	f007 ffd8 	bl	80148e8 <rclc_action_server_response_goal_request>
 800c938:	6860      	ldr	r0, [r4, #4]
 800c93a:	4629      	mov	r1, r5
 800c93c:	f007 ff40 	bl	80147c0 <rclc_action_remove_used_goal_handle>
 800c940:	6860      	ldr	r0, [r4, #4]
 800c942:	2100      	movs	r1, #0
 800c944:	f007 ff6a 	bl	801481c <rclc_action_find_first_handle_by_status>
 800c948:	4605      	mov	r5, r0
 800c94a:	2800      	cmp	r0, #0
 800c94c:	d066      	beq.n	800ca1c <_rclc_execute.part.0+0x1ec>
 800c94e:	6863      	ldr	r3, [r4, #4]
 800c950:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800c952:	699b      	ldr	r3, [r3, #24]
 800c954:	4798      	blx	r3
 800c956:	42b0      	cmp	r0, r6
 800c958:	f04f 0100 	mov.w	r1, #0
 800c95c:	d1e9      	bne.n	800c932 <_rclc_execute.part.0+0x102>
 800c95e:	2101      	movs	r1, #1
 800c960:	4628      	mov	r0, r5
 800c962:	f007 ffc1 	bl	80148e8 <rclc_action_server_response_goal_request>
 800c966:	722f      	strb	r7, [r5, #8]
 800c968:	e7ea      	b.n	800c940 <_rclc_execute.part.0+0x110>
 800c96a:	6848      	ldr	r0, [r1, #4]
 800c96c:	f007 ff28 	bl	80147c0 <rclc_action_remove_used_goal_handle>
 800c970:	6860      	ldr	r0, [r4, #4]
 800c972:	f007 ff5f 	bl	8014834 <rclc_action_find_first_terminated_handle>
 800c976:	4601      	mov	r1, r0
 800c978:	2800      	cmp	r0, #0
 800c97a:	d1f6      	bne.n	800c96a <_rclc_execute.part.0+0x13a>
 800c97c:	6860      	ldr	r0, [r4, #4]
 800c97e:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 800c982:	e7ce      	b.n	800c922 <_rclc_execute.part.0+0xf2>
 800c984:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800c986:	6880      	ldr	r0, [r0, #8]
 800c988:	f104 0110 	add.w	r1, r4, #16
 800c98c:	4798      	blx	r3
 800c98e:	2000      	movs	r0, #0
 800c990:	b007      	add	sp, #28
 800c992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c994:	6860      	ldr	r0, [r4, #4]
 800c996:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 800c99a:	b18b      	cbz	r3, 800c9c0 <_rclc_execute.part.0+0x190>
 800c99c:	68c5      	ldr	r5, [r0, #12]
 800c99e:	b32d      	cbz	r5, 800c9ec <_rclc_execute.part.0+0x1bc>
 800c9a0:	2600      	movs	r6, #0
 800c9a2:	f895 3022 	ldrb.w	r3, [r5, #34]	@ 0x22
 800c9a6:	b143      	cbz	r3, 800c9ba <_rclc_execute.part.0+0x18a>
 800c9a8:	69c3      	ldr	r3, [r0, #28]
 800c9aa:	f885 6022 	strb.w	r6, [r5, #34]	@ 0x22
 800c9ae:	b123      	cbz	r3, 800c9ba <_rclc_execute.part.0+0x18a>
 800c9b0:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800c9b2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c9b4:	4628      	mov	r0, r5
 800c9b6:	4798      	blx	r3
 800c9b8:	6860      	ldr	r0, [r4, #4]
 800c9ba:	682d      	ldr	r5, [r5, #0]
 800c9bc:	2d00      	cmp	r5, #0
 800c9be:	d1f0      	bne.n	800c9a2 <_rclc_execute.part.0+0x172>
 800c9c0:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 800c9c4:	b193      	cbz	r3, 800c9ec <_rclc_execute.part.0+0x1bc>
 800c9c6:	68c5      	ldr	r5, [r0, #12]
 800c9c8:	b185      	cbz	r5, 800c9ec <_rclc_execute.part.0+0x1bc>
 800c9ca:	2600      	movs	r6, #0
 800c9cc:	f895 3024 	ldrb.w	r3, [r5, #36]	@ 0x24
 800c9d0:	b14b      	cbz	r3, 800c9e6 <_rclc_execute.part.0+0x1b6>
 800c9d2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 800c9d4:	f885 6024 	strb.w	r6, [r5, #36]	@ 0x24
 800c9d8:	b12b      	cbz	r3, 800c9e6 <_rclc_execute.part.0+0x1b6>
 800c9da:	4628      	mov	r0, r5
 800c9dc:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800c9e0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c9e2:	4798      	blx	r3
 800c9e4:	6860      	ldr	r0, [r4, #4]
 800c9e6:	682d      	ldr	r5, [r5, #0]
 800c9e8:	2d00      	cmp	r5, #0
 800c9ea:	d1ef      	bne.n	800c9cc <_rclc_execute.part.0+0x19c>
 800c9ec:	f890 3043 	ldrb.w	r3, [r0, #67]	@ 0x43
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d081      	beq.n	800c8f8 <_rclc_execute.part.0+0xc8>
 800c9f4:	2700      	movs	r7, #0
 800c9f6:	e00b      	b.n	800ca10 <_rclc_execute.part.0+0x1e0>
 800c9f8:	6863      	ldr	r3, [r4, #4]
 800c9fa:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800c9fc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800c9fe:	6a1e      	ldr	r6, [r3, #32]
 800ca00:	f885 7023 	strb.w	r7, [r5, #35]	@ 0x23
 800ca04:	47b0      	blx	r6
 800ca06:	6860      	ldr	r0, [r4, #4]
 800ca08:	4629      	mov	r1, r5
 800ca0a:	f007 fed9 	bl	80147c0 <rclc_action_remove_used_goal_handle>
 800ca0e:	6860      	ldr	r0, [r4, #4]
 800ca10:	f007 ff5e 	bl	80148d0 <rclc_action_find_first_handle_with_result_response>
 800ca14:	4605      	mov	r5, r0
 800ca16:	2800      	cmp	r0, #0
 800ca18:	d1ee      	bne.n	800c9f8 <_rclc_execute.part.0+0x1c8>
 800ca1a:	e76d      	b.n	800c8f8 <_rclc_execute.part.0+0xc8>
 800ca1c:	6860      	ldr	r0, [r4, #4]
 800ca1e:	f880 5020 	strb.w	r5, [r0, #32]
 800ca22:	f890 3021 	ldrb.w	r3, [r0, #33]	@ 0x21
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	f43f af66 	beq.w	800c8f8 <_rclc_execute.part.0+0xc8>
 800ca2c:	68c5      	ldr	r5, [r0, #12]
 800ca2e:	b1b5      	cbz	r5, 800ca5e <_rclc_execute.part.0+0x22e>
 800ca30:	2602      	movs	r6, #2
 800ca32:	e001      	b.n	800ca38 <_rclc_execute.part.0+0x208>
 800ca34:	682d      	ldr	r5, [r5, #0]
 800ca36:	b195      	cbz	r5, 800ca5e <_rclc_execute.part.0+0x22e>
 800ca38:	f995 3008 	ldrsb.w	r3, [r5, #8]
 800ca3c:	2b03      	cmp	r3, #3
 800ca3e:	d1f9      	bne.n	800ca34 <_rclc_execute.part.0+0x204>
 800ca40:	69c3      	ldr	r3, [r0, #28]
 800ca42:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800ca44:	4628      	mov	r0, r5
 800ca46:	4798      	blx	r3
 800ca48:	4603      	mov	r3, r0
 800ca4a:	f105 0260 	add.w	r2, r5, #96	@ 0x60
 800ca4e:	4628      	mov	r0, r5
 800ca50:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800ca54:	b163      	cbz	r3, 800ca70 <_rclc_execute.part.0+0x240>
 800ca56:	f007 ff67 	bl	8014928 <rclc_action_server_goal_cancel_accept>
 800ca5a:	6860      	ldr	r0, [r4, #4]
 800ca5c:	e7ea      	b.n	800ca34 <_rclc_execute.part.0+0x204>
 800ca5e:	2300      	movs	r3, #0
 800ca60:	f880 3021 	strb.w	r3, [r0, #33]	@ 0x21
 800ca64:	4618      	mov	r0, r3
 800ca66:	e739      	b.n	800c8dc <_rclc_execute.part.0+0xac>
 800ca68:	4628      	mov	r0, r5
 800ca6a:	4798      	blx	r3
 800ca6c:	4628      	mov	r0, r5
 800ca6e:	e735      	b.n	800c8dc <_rclc_execute.part.0+0xac>
 800ca70:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800ca72:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ca76:	f105 0758 	add.w	r7, r5, #88	@ 0x58
 800ca7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca7e:	6860      	ldr	r0, [r4, #4]
 800ca80:	2101      	movs	r1, #1
 800ca82:	f007 ff7d 	bl	8014980 <rclc_action_server_goal_cancel_reject>
 800ca86:	722e      	strb	r6, [r5, #8]
 800ca88:	6860      	ldr	r0, [r4, #4]
 800ca8a:	e7d3      	b.n	800ca34 <_rclc_execute.part.0+0x204>
 800ca8c:	6a81      	ldr	r1, [r0, #40]	@ 0x28
 800ca8e:	6880      	ldr	r0, [r0, #8]
 800ca90:	4798      	blx	r3
 800ca92:	f104 0110 	add.w	r1, r4, #16
 800ca96:	e6e7      	b.n	800c868 <_rclc_execute.part.0+0x38>
 800ca98:	f100 0110 	add.w	r1, r0, #16
 800ca9c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800ca9e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
 800caa0:	6880      	ldr	r0, [r0, #8]
 800caa2:	9105      	str	r1, [sp, #20]
 800caa4:	4798      	blx	r3
 800caa6:	9905      	ldr	r1, [sp, #20]
 800caa8:	e6de      	b.n	800c868 <_rclc_execute.part.0+0x38>
 800caaa:	2001      	movs	r0, #1
 800caac:	e716      	b.n	800c8dc <_rclc_execute.part.0+0xac>
 800caae:	bf00      	nop

0800cab0 <rclc_executor_trigger_any>:
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d03f      	beq.n	800cb34 <rclc_executor_trigger_any+0x84>
 800cab4:	2900      	cmp	r1, #0
 800cab6:	d03e      	beq.n	800cb36 <rclc_executor_trigger_any+0x86>
 800cab8:	4603      	mov	r3, r0
 800caba:	f890 0038 	ldrb.w	r0, [r0, #56]	@ 0x38
 800cabe:	2200      	movs	r2, #0
 800cac0:	2800      	cmp	r0, #0
 800cac2:	d037      	beq.n	800cb34 <rclc_executor_trigger_any+0x84>
 800cac4:	b430      	push	{r4, r5}
 800cac6:	f893 c000 	ldrb.w	ip, [r3]
 800caca:	f1bc 0f08 	cmp.w	ip, #8
 800cace:	d11e      	bne.n	800cb0e <rclc_executor_trigger_any+0x5e>
 800cad0:	685c      	ldr	r4, [r3, #4]
 800cad2:	6c25      	ldr	r5, [r4, #64]	@ 0x40
 800cad4:	f035 457f 	bics.w	r5, r5, #4278190080	@ 0xff000000
 800cad8:	d105      	bne.n	800cae6 <rclc_executor_trigger_any+0x36>
 800cada:	f894 0044 	ldrb.w	r0, [r4, #68]	@ 0x44
 800cade:	b910      	cbnz	r0, 800cae6 <rclc_executor_trigger_any+0x36>
 800cae0:	f894 0043 	ldrb.w	r0, [r4, #67]	@ 0x43
 800cae4:	b128      	cbz	r0, 800caf2 <rclc_executor_trigger_any+0x42>
 800cae6:	bc30      	pop	{r4, r5}
 800cae8:	4770      	bx	lr
 800caea:	f893 0039 	ldrb.w	r0, [r3, #57]	@ 0x39
 800caee:	2800      	cmp	r0, #0
 800caf0:	d1f9      	bne.n	800cae6 <rclc_executor_trigger_any+0x36>
 800caf2:	3201      	adds	r2, #1
 800caf4:	4291      	cmp	r1, r2
 800caf6:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cafa:	d018      	beq.n	800cb2e <rclc_executor_trigger_any+0x7e>
 800cafc:	f893 0038 	ldrb.w	r0, [r3, #56]	@ 0x38
 800cb00:	2800      	cmp	r0, #0
 800cb02:	d0f0      	beq.n	800cae6 <rclc_executor_trigger_any+0x36>
 800cb04:	f893 c000 	ldrb.w	ip, [r3]
 800cb08:	f1bc 0f08 	cmp.w	ip, #8
 800cb0c:	d0e0      	beq.n	800cad0 <rclc_executor_trigger_any+0x20>
 800cb0e:	f1bc 0f09 	cmp.w	ip, #9
 800cb12:	d1ea      	bne.n	800caea <rclc_executor_trigger_any+0x3a>
 800cb14:	685c      	ldr	r4, [r3, #4]
 800cb16:	6a25      	ldr	r5, [r4, #32]
 800cb18:	2d00      	cmp	r5, #0
 800cb1a:	d1e4      	bne.n	800cae6 <rclc_executor_trigger_any+0x36>
 800cb1c:	f894 0024 	ldrb.w	r0, [r4, #36]	@ 0x24
 800cb20:	2800      	cmp	r0, #0
 800cb22:	d1e0      	bne.n	800cae6 <rclc_executor_trigger_any+0x36>
 800cb24:	3201      	adds	r2, #1
 800cb26:	4291      	cmp	r1, r2
 800cb28:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 800cb2c:	d1e6      	bne.n	800cafc <rclc_executor_trigger_any+0x4c>
 800cb2e:	2000      	movs	r0, #0
 800cb30:	bc30      	pop	{r4, r5}
 800cb32:	4770      	bx	lr
 800cb34:	4770      	bx	lr
 800cb36:	4608      	mov	r0, r1
 800cb38:	4770      	bx	lr
 800cb3a:	bf00      	nop

0800cb3c <rclc_executor_get_zero_initialized_executor>:
 800cb3c:	b510      	push	{r4, lr}
 800cb3e:	4903      	ldr	r1, [pc, #12]	@ (800cb4c <rclc_executor_get_zero_initialized_executor+0x10>)
 800cb40:	4604      	mov	r4, r0
 800cb42:	2288      	movs	r2, #136	@ 0x88
 800cb44:	f00b f8e1 	bl	8017d0a <memcpy>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	bd10      	pop	{r4, pc}
 800cb4c:	08018e98 	.word	0x08018e98

0800cb50 <rclc_executor_init>:
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d05f      	beq.n	800cc14 <rclc_executor_init+0xc4>
 800cb54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb58:	460c      	mov	r4, r1
 800cb5a:	b0b0      	sub	sp, #192	@ 0xc0
 800cb5c:	2900      	cmp	r1, #0
 800cb5e:	d051      	beq.n	800cc04 <rclc_executor_init+0xb4>
 800cb60:	4605      	mov	r5, r0
 800cb62:	4618      	mov	r0, r3
 800cb64:	4616      	mov	r6, r2
 800cb66:	461f      	mov	r7, r3
 800cb68:	f000 fbc8 	bl	800d2fc <rcutils_allocator_is_valid>
 800cb6c:	2800      	cmp	r0, #0
 800cb6e:	d049      	beq.n	800cc04 <rclc_executor_init+0xb4>
 800cb70:	2e00      	cmp	r6, #0
 800cb72:	d047      	beq.n	800cc04 <rclc_executor_init+0xb4>
 800cb74:	492c      	ldr	r1, [pc, #176]	@ (800cc28 <rclc_executor_init+0xd8>)
 800cb76:	2288      	movs	r2, #136	@ 0x88
 800cb78:	a80e      	add	r0, sp, #56	@ 0x38
 800cb7a:	f00b f8c6 	bl	8017d0a <memcpy>
 800cb7e:	a90e      	add	r1, sp, #56	@ 0x38
 800cb80:	2288      	movs	r2, #136	@ 0x88
 800cb82:	4628      	mov	r0, r5
 800cb84:	f00b f8c1 	bl	8017d0a <memcpy>
 800cb88:	602c      	str	r4, [r5, #0]
 800cb8a:	4668      	mov	r0, sp
 800cb8c:	60ae      	str	r6, [r5, #8]
 800cb8e:	466c      	mov	r4, sp
 800cb90:	f006 fbc2 	bl	8013318 <rcl_get_zero_initialized_wait_set>
 800cb94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cb96:	f105 0c14 	add.w	ip, r5, #20
 800cb9a:	f8d7 8000 	ldr.w	r8, [r7]
 800cb9e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cba2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cba4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cba8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800cbaa:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800cbae:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800cc20 <rclc_executor_init+0xd0>
 800cbb2:	6823      	ldr	r3, [r4, #0]
 800cbb4:	f8cc 3000 	str.w	r3, [ip]
 800cbb8:	6939      	ldr	r1, [r7, #16]
 800cbba:	612f      	str	r7, [r5, #16]
 800cbbc:	ed85 7b1a 	vstr	d7, [r5, #104]	@ 0x68
 800cbc0:	01b0      	lsls	r0, r6, #6
 800cbc2:	47c0      	blx	r8
 800cbc4:	6068      	str	r0, [r5, #4]
 800cbc6:	b338      	cbz	r0, 800cc18 <rclc_executor_init+0xc8>
 800cbc8:	2400      	movs	r4, #0
 800cbca:	e000      	b.n	800cbce <rclc_executor_init+0x7e>
 800cbcc:	6868      	ldr	r0, [r5, #4]
 800cbce:	eb00 1084 	add.w	r0, r0, r4, lsl #6
 800cbd2:	4631      	mov	r1, r6
 800cbd4:	3401      	adds	r4, #1
 800cbd6:	f000 fa63 	bl	800d0a0 <rclc_executor_handle_init>
 800cbda:	42a6      	cmp	r6, r4
 800cbdc:	d1f6      	bne.n	800cbcc <rclc_executor_init+0x7c>
 800cbde:	f105 0048 	add.w	r0, r5, #72	@ 0x48
 800cbe2:	f000 fa51 	bl	800d088 <rclc_executor_handle_counters_zero_init>
 800cbe6:	4a11      	ldr	r2, [pc, #68]	@ (800cc2c <rclc_executor_init+0xdc>)
 800cbe8:	686b      	ldr	r3, [r5, #4]
 800cbea:	2000      	movs	r0, #0
 800cbec:	e9c5 201e 	strd	r2, r0, [r5, #120]	@ 0x78
 800cbf0:	b163      	cbz	r3, 800cc0c <rclc_executor_init+0xbc>
 800cbf2:	692b      	ldr	r3, [r5, #16]
 800cbf4:	b153      	cbz	r3, 800cc0c <rclc_executor_init+0xbc>
 800cbf6:	68ab      	ldr	r3, [r5, #8]
 800cbf8:	b143      	cbz	r3, 800cc0c <rclc_executor_init+0xbc>
 800cbfa:	f885 0080 	strb.w	r0, [r5, #128]	@ 0x80
 800cbfe:	b030      	add	sp, #192	@ 0xc0
 800cc00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc04:	200b      	movs	r0, #11
 800cc06:	b030      	add	sp, #192	@ 0xc0
 800cc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	b030      	add	sp, #192	@ 0xc0
 800cc10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc14:	200b      	movs	r0, #11
 800cc16:	4770      	bx	lr
 800cc18:	200a      	movs	r0, #10
 800cc1a:	e7f4      	b.n	800cc06 <rclc_executor_init+0xb6>
 800cc1c:	f3af 8000 	nop.w
 800cc20:	3b9aca00 	.word	0x3b9aca00
 800cc24:	00000000 	.word	0x00000000
 800cc28:	08018e98 	.word	0x08018e98
 800cc2c:	0800cab1 	.word	0x0800cab1

0800cc30 <rclc_executor_add_timer>:
 800cc30:	b300      	cbz	r0, 800cc74 <rclc_executor_add_timer+0x44>
 800cc32:	b1f9      	cbz	r1, 800cc74 <rclc_executor_add_timer+0x44>
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800cc3a:	4293      	cmp	r3, r2
 800cc3c:	4604      	mov	r4, r0
 800cc3e:	d301      	bcc.n	800cc44 <rclc_executor_add_timer+0x14>
 800cc40:	2001      	movs	r0, #1
 800cc42:	bd38      	pop	{r3, r4, r5, pc}
 800cc44:	6840      	ldr	r0, [r0, #4]
 800cc46:	eb00 1283 	add.w	r2, r0, r3, lsl #6
 800cc4a:	019d      	lsls	r5, r3, #6
 800cc4c:	6051      	str	r1, [r2, #4]
 800cc4e:	2102      	movs	r1, #2
 800cc50:	5341      	strh	r1, [r0, r5]
 800cc52:	3301      	adds	r3, #1
 800cc54:	2000      	movs	r0, #0
 800cc56:	2101      	movs	r1, #1
 800cc58:	f104 0514 	add.w	r5, r4, #20
 800cc5c:	62d0      	str	r0, [r2, #44]	@ 0x2c
 800cc5e:	8711      	strh	r1, [r2, #56]	@ 0x38
 800cc60:	4628      	mov	r0, r5
 800cc62:	60e3      	str	r3, [r4, #12]
 800cc64:	f006 fb6c 	bl	8013340 <rcl_wait_set_is_valid>
 800cc68:	b930      	cbnz	r0, 800cc78 <rclc_executor_add_timer+0x48>
 800cc6a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800cc6c:	3301      	adds	r3, #1
 800cc6e:	2000      	movs	r0, #0
 800cc70:	64e3      	str	r3, [r4, #76]	@ 0x4c
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	200b      	movs	r0, #11
 800cc76:	4770      	bx	lr
 800cc78:	4628      	mov	r0, r5
 800cc7a:	f006 fb67 	bl	801334c <rcl_wait_set_fini>
 800cc7e:	2800      	cmp	r0, #0
 800cc80:	d0f3      	beq.n	800cc6a <rclc_executor_add_timer+0x3a>
 800cc82:	bd38      	pop	{r3, r4, r5, pc}

0800cc84 <rclc_executor_prepare>:
 800cc84:	2800      	cmp	r0, #0
 800cc86:	d044      	beq.n	800cd12 <rclc_executor_prepare+0x8e>
 800cc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc8a:	f100 0514 	add.w	r5, r0, #20
 800cc8e:	b09b      	sub	sp, #108	@ 0x6c
 800cc90:	4604      	mov	r4, r0
 800cc92:	4628      	mov	r0, r5
 800cc94:	f006 fb54 	bl	8013340 <rcl_wait_set_is_valid>
 800cc98:	b110      	cbz	r0, 800cca0 <rclc_executor_prepare+0x1c>
 800cc9a:	2000      	movs	r0, #0
 800cc9c:	b01b      	add	sp, #108	@ 0x6c
 800cc9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cca0:	4628      	mov	r0, r5
 800cca2:	f006 fb53 	bl	801334c <rcl_wait_set_fini>
 800cca6:	2800      	cmp	r0, #0
 800cca8:	d130      	bne.n	800cd0c <rclc_executor_prepare+0x88>
 800ccaa:	a80c      	add	r0, sp, #48	@ 0x30
 800ccac:	f006 fb34 	bl	8013318 <rcl_get_zero_initialized_wait_set>
 800ccb0:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 800ccb4:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccb8:	46ae      	mov	lr, r5
 800ccba:	6927      	ldr	r7, [r4, #16]
 800ccbc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccc0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ccc4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccc8:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800cccc:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ccd0:	f8dc 3000 	ldr.w	r3, [ip]
 800ccd4:	f8ce 3000 	str.w	r3, [lr]
 800ccd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ccda:	ae04      	add	r6, sp, #16
 800ccdc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ccde:	683b      	ldr	r3, [r7, #0]
 800cce0:	6822      	ldr	r2, [r4, #0]
 800cce2:	6033      	str	r3, [r6, #0]
 800cce4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cce6:	6d61      	ldr	r1, [r4, #84]	@ 0x54
 800cce8:	e9cd 3202 	strd	r3, r2, [sp, #8]
 800ccec:	e9d4 3213 	ldrd	r3, r2, [r4, #76]	@ 0x4c
 800ccf0:	e9cd 2100 	strd	r2, r1, [sp]
 800ccf4:	4628      	mov	r0, r5
 800ccf6:	6e22      	ldr	r2, [r4, #96]	@ 0x60
 800ccf8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ccfa:	f006 fe25 	bl	8013948 <rcl_wait_set_init>
 800ccfe:	2800      	cmp	r0, #0
 800cd00:	d0cc      	beq.n	800cc9c <rclc_executor_prepare+0x18>
 800cd02:	900b      	str	r0, [sp, #44]	@ 0x2c
 800cd04:	f000 fb20 	bl	800d348 <rcutils_reset_error>
 800cd08:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800cd0a:	e7c7      	b.n	800cc9c <rclc_executor_prepare+0x18>
 800cd0c:	f000 fb1c 	bl	800d348 <rcutils_reset_error>
 800cd10:	e7cb      	b.n	800ccaa <rclc_executor_prepare+0x26>
 800cd12:	200b      	movs	r0, #11
 800cd14:	4770      	bx	lr
 800cd16:	bf00      	nop

0800cd18 <rclc_executor_spin_some.part.0>:
 800cd18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd1c:	f100 0614 	add.w	r6, r0, #20
 800cd20:	b083      	sub	sp, #12
 800cd22:	4691      	mov	r9, r2
 800cd24:	4698      	mov	r8, r3
 800cd26:	4605      	mov	r5, r0
 800cd28:	f7ff ffac 	bl	800cc84 <rclc_executor_prepare>
 800cd2c:	4630      	mov	r0, r6
 800cd2e:	f006 fbd9 	bl	80134e4 <rcl_wait_set_clear>
 800cd32:	4607      	mov	r7, r0
 800cd34:	2800      	cmp	r0, #0
 800cd36:	f040 80ed 	bne.w	800cf14 <rclc_executor_spin_some.part.0+0x1fc>
 800cd3a:	68ab      	ldr	r3, [r5, #8]
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	b303      	cbz	r3, 800cd82 <rclc_executor_spin_some.part.0+0x6a>
 800cd40:	6869      	ldr	r1, [r5, #4]
 800cd42:	eb01 1c84 	add.w	ip, r1, r4, lsl #6
 800cd46:	01a2      	lsls	r2, r4, #6
 800cd48:	f89c 3038 	ldrb.w	r3, [ip, #56]	@ 0x38
 800cd4c:	b1cb      	cbz	r3, 800cd82 <rclc_executor_spin_some.part.0+0x6a>
 800cd4e:	5c8b      	ldrb	r3, [r1, r2]
 800cd50:	2b0a      	cmp	r3, #10
 800cd52:	f200 80d8 	bhi.w	800cf06 <rclc_executor_spin_some.part.0+0x1ee>
 800cd56:	e8df f003 	tbb	[pc, r3]
 800cd5a:	9c9c      	.short	0x9c9c
 800cd5c:	068c8ca7 	.word	0x068c8ca7
 800cd60:	bdc90606 	.word	0xbdc90606
 800cd64:	b2          	.byte	0xb2
 800cd65:	00          	.byte	0x00
 800cd66:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cd6a:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cd6e:	4630      	mov	r0, r6
 800cd70:	f006 ff00 	bl	8013b74 <rcl_wait_set_add_service>
 800cd74:	2800      	cmp	r0, #0
 800cd76:	f040 8086 	bne.w	800ce86 <rclc_executor_spin_some.part.0+0x16e>
 800cd7a:	68ab      	ldr	r3, [r5, #8]
 800cd7c:	3401      	adds	r4, #1
 800cd7e:	429c      	cmp	r4, r3
 800cd80:	d3de      	bcc.n	800cd40 <rclc_executor_spin_some.part.0+0x28>
 800cd82:	4643      	mov	r3, r8
 800cd84:	464a      	mov	r2, r9
 800cd86:	4630      	mov	r0, r6
 800cd88:	f006 ff22 	bl	8013bd0 <rcl_wait>
 800cd8c:	f895 3080 	ldrb.w	r3, [r5, #128]	@ 0x80
 800cd90:	2b00      	cmp	r3, #0
 800cd92:	f000 80c7 	beq.w	800cf24 <rclc_executor_spin_some.part.0+0x20c>
 800cd96:	2b01      	cmp	r3, #1
 800cd98:	f040 80b5 	bne.w	800cf06 <rclc_executor_spin_some.part.0+0x1ee>
 800cd9c:	68ab      	ldr	r3, [r5, #8]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	f000 8159 	beq.w	800d056 <rclc_executor_spin_some.part.0+0x33e>
 800cda4:	2400      	movs	r4, #0
 800cda6:	46a0      	mov	r8, r4
 800cda8:	f240 1991 	movw	r9, #401	@ 0x191
 800cdac:	e00a      	b.n	800cdc4 <rclc_executor_spin_some.part.0+0xac>
 800cdae:	f7ff fb7d 	bl	800c4ac <_rclc_check_for_new_data>
 800cdb2:	4604      	mov	r4, r0
 800cdb4:	b110      	cbz	r0, 800cdbc <rclc_executor_spin_some.part.0+0xa4>
 800cdb6:	4548      	cmp	r0, r9
 800cdb8:	f040 80b2 	bne.w	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cdbc:	68ab      	ldr	r3, [r5, #8]
 800cdbe:	4598      	cmp	r8, r3
 800cdc0:	f080 8126 	bcs.w	800d010 <rclc_executor_spin_some.part.0+0x2f8>
 800cdc4:	686a      	ldr	r2, [r5, #4]
 800cdc6:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cdca:	4631      	mov	r1, r6
 800cdcc:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cdd0:	f108 0801 	add.w	r8, r8, #1
 800cdd4:	f1bc 0f00 	cmp.w	ip, #0
 800cdd8:	d1e9      	bne.n	800cdae <rclc_executor_spin_some.part.0+0x96>
 800cdda:	4619      	mov	r1, r3
 800cddc:	4610      	mov	r0, r2
 800cdde:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cde2:	4798      	blx	r3
 800cde4:	2800      	cmp	r0, #0
 800cde6:	f000 809b 	beq.w	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cdea:	68ab      	ldr	r3, [r5, #8]
 800cdec:	2b00      	cmp	r3, #0
 800cdee:	f000 8097 	beq.w	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cdf2:	f04f 0800 	mov.w	r8, #0
 800cdf6:	f240 1991 	movw	r9, #401	@ 0x191
 800cdfa:	e009      	b.n	800ce10 <rclc_executor_spin_some.part.0+0xf8>
 800cdfc:	f7ff fba4 	bl	800c548 <_rclc_take_new_data>
 800ce00:	4604      	mov	r4, r0
 800ce02:	b110      	cbz	r0, 800ce0a <rclc_executor_spin_some.part.0+0xf2>
 800ce04:	4548      	cmp	r0, r9
 800ce06:	f040 808b 	bne.w	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800ce0a:	68ab      	ldr	r3, [r5, #8]
 800ce0c:	4598      	cmp	r8, r3
 800ce0e:	d209      	bcs.n	800ce24 <rclc_executor_spin_some.part.0+0x10c>
 800ce10:	6868      	ldr	r0, [r5, #4]
 800ce12:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800ce16:	4631      	mov	r1, r6
 800ce18:	f890 2038 	ldrb.w	r2, [r0, #56]	@ 0x38
 800ce1c:	f108 0801 	add.w	r8, r8, #1
 800ce20:	2a00      	cmp	r2, #0
 800ce22:	d1eb      	bne.n	800cdfc <rclc_executor_spin_some.part.0+0xe4>
 800ce24:	2600      	movs	r6, #0
 800ce26:	b97b      	cbnz	r3, 800ce48 <rclc_executor_spin_some.part.0+0x130>
 800ce28:	e07a      	b.n	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800ce2a:	f812 200c 	ldrb.w	r2, [r2, ip]
 800ce2e:	2a08      	cmp	r2, #8
 800ce30:	f000 80fd 	beq.w	800d02e <rclc_executor_spin_some.part.0+0x316>
 800ce34:	2a09      	cmp	r2, #9
 800ce36:	f000 80ef 	beq.w	800d018 <rclc_executor_spin_some.part.0+0x300>
 800ce3a:	f890 2039 	ldrb.w	r2, [r0, #57]	@ 0x39
 800ce3e:	b98a      	cbnz	r2, 800ce64 <rclc_executor_spin_some.part.0+0x14c>
 800ce40:	3601      	adds	r6, #1
 800ce42:	429e      	cmp	r6, r3
 800ce44:	d262      	bcs.n	800cf0c <rclc_executor_spin_some.part.0+0x1f4>
 800ce46:	2400      	movs	r4, #0
 800ce48:	686a      	ldr	r2, [r5, #4]
 800ce4a:	eb02 1086 	add.w	r0, r2, r6, lsl #6
 800ce4e:	ea4f 1c86 	mov.w	ip, r6, lsl #6
 800ce52:	f890 1038 	ldrb.w	r1, [r0, #56]	@ 0x38
 800ce56:	2900      	cmp	r1, #0
 800ce58:	d062      	beq.n	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800ce5a:	7841      	ldrb	r1, [r0, #1]
 800ce5c:	2900      	cmp	r1, #0
 800ce5e:	d0e4      	beq.n	800ce2a <rclc_executor_spin_some.part.0+0x112>
 800ce60:	2901      	cmp	r1, #1
 800ce62:	d1ed      	bne.n	800ce40 <rclc_executor_spin_some.part.0+0x128>
 800ce64:	f7ff fce4 	bl	800c830 <_rclc_execute.part.0>
 800ce68:	2800      	cmp	r0, #0
 800ce6a:	f040 80b6 	bne.w	800cfda <rclc_executor_spin_some.part.0+0x2c2>
 800ce6e:	68ab      	ldr	r3, [r5, #8]
 800ce70:	e7e6      	b.n	800ce40 <rclc_executor_spin_some.part.0+0x128>
 800ce72:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce76:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce7a:	4630      	mov	r0, r6
 800ce7c:	f006 fe4e 	bl	8013b1c <rcl_wait_set_add_client>
 800ce80:	2800      	cmp	r0, #0
 800ce82:	f43f af7a 	beq.w	800cd7a <rclc_executor_spin_some.part.0+0x62>
 800ce86:	9001      	str	r0, [sp, #4]
 800ce88:	f000 fa5e 	bl	800d348 <rcutils_reset_error>
 800ce8c:	9801      	ldr	r0, [sp, #4]
 800ce8e:	4607      	mov	r7, r0
 800ce90:	e03c      	b.n	800cf0c <rclc_executor_spin_some.part.0+0x1f4>
 800ce92:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ce96:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ce9a:	4630      	mov	r0, r6
 800ce9c:	f006 faf6 	bl	801348c <rcl_wait_set_add_subscription>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	f43f af6a 	beq.w	800cd7a <rclc_executor_spin_some.part.0+0x62>
 800cea6:	e7ee      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x16e>
 800cea8:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ceac:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800ceb0:	4630      	mov	r0, r6
 800ceb2:	f006 fe03 	bl	8013abc <rcl_wait_set_add_timer>
 800ceb6:	2800      	cmp	r0, #0
 800ceb8:	f43f af5f 	beq.w	800cd7a <rclc_executor_spin_some.part.0+0x62>
 800cebc:	e7e3      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x16e>
 800cebe:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cec2:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cec6:	4630      	mov	r0, r6
 800cec8:	f006 fdcc 	bl	8013a64 <rcl_wait_set_add_guard_condition>
 800cecc:	2800      	cmp	r0, #0
 800cece:	f43f af54 	beq.w	800cd7a <rclc_executor_spin_some.part.0+0x62>
 800ced2:	e7d8      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x16e>
 800ced4:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800ced8:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cedc:	3110      	adds	r1, #16
 800cede:	4630      	mov	r0, r6
 800cee0:	f007 fb4e 	bl	8014580 <rcl_action_wait_set_add_action_server>
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f43f af48 	beq.w	800cd7a <rclc_executor_spin_some.part.0+0x62>
 800ceea:	e7cc      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x16e>
 800ceec:	f8dc 1004 	ldr.w	r1, [ip, #4]
 800cef0:	f10c 0234 	add.w	r2, ip, #52	@ 0x34
 800cef4:	3110      	adds	r1, #16
 800cef6:	2300      	movs	r3, #0
 800cef8:	4630      	mov	r0, r6
 800cefa:	f007 f919 	bl	8014130 <rcl_action_wait_set_add_action_client>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	f43f af3b 	beq.w	800cd7a <rclc_executor_spin_some.part.0+0x62>
 800cf04:	e7bf      	b.n	800ce86 <rclc_executor_spin_some.part.0+0x16e>
 800cf06:	f000 fa1f 	bl	800d348 <rcutils_reset_error>
 800cf0a:	2701      	movs	r7, #1
 800cf0c:	4638      	mov	r0, r7
 800cf0e:	b003      	add	sp, #12
 800cf10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf14:	f000 fa18 	bl	800d348 <rcutils_reset_error>
 800cf18:	4638      	mov	r0, r7
 800cf1a:	b003      	add	sp, #12
 800cf1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf20:	4627      	mov	r7, r4
 800cf22:	e7f3      	b.n	800cf0c <rclc_executor_spin_some.part.0+0x1f4>
 800cf24:	68ab      	ldr	r3, [r5, #8]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 8092 	beq.w	800d050 <rclc_executor_spin_some.part.0+0x338>
 800cf2c:	2400      	movs	r4, #0
 800cf2e:	46a0      	mov	r8, r4
 800cf30:	f240 1991 	movw	r9, #401	@ 0x191
 800cf34:	e008      	b.n	800cf48 <rclc_executor_spin_some.part.0+0x230>
 800cf36:	f7ff fab9 	bl	800c4ac <_rclc_check_for_new_data>
 800cf3a:	4604      	mov	r4, r0
 800cf3c:	b108      	cbz	r0, 800cf42 <rclc_executor_spin_some.part.0+0x22a>
 800cf3e:	4548      	cmp	r0, r9
 800cf40:	d1ee      	bne.n	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cf42:	68ab      	ldr	r3, [r5, #8]
 800cf44:	4598      	cmp	r8, r3
 800cf46:	d265      	bcs.n	800d014 <rclc_executor_spin_some.part.0+0x2fc>
 800cf48:	686a      	ldr	r2, [r5, #4]
 800cf4a:	eb02 1088 	add.w	r0, r2, r8, lsl #6
 800cf4e:	4631      	mov	r1, r6
 800cf50:	f890 c038 	ldrb.w	ip, [r0, #56]	@ 0x38
 800cf54:	f108 0801 	add.w	r8, r8, #1
 800cf58:	f1bc 0f00 	cmp.w	ip, #0
 800cf5c:	d1eb      	bne.n	800cf36 <rclc_executor_spin_some.part.0+0x21e>
 800cf5e:	4619      	mov	r1, r3
 800cf60:	4610      	mov	r0, r2
 800cf62:	e9d5 321e 	ldrd	r3, r2, [r5, #120]	@ 0x78
 800cf66:	4798      	blx	r3
 800cf68:	2800      	cmp	r0, #0
 800cf6a:	d0d9      	beq.n	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cf6c:	68ab      	ldr	r3, [r5, #8]
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d0d6      	beq.n	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cf72:	f04f 0800 	mov.w	r8, #0
 800cf76:	f240 1991 	movw	r9, #401	@ 0x191
 800cf7a:	f240 2a59 	movw	sl, #601	@ 0x259
 800cf7e:	e00e      	b.n	800cf9e <rclc_executor_spin_some.part.0+0x286>
 800cf80:	f813 300b 	ldrb.w	r3, [r3, fp]
 800cf84:	2b08      	cmp	r3, #8
 800cf86:	d033      	beq.n	800cff0 <rclc_executor_spin_some.part.0+0x2d8>
 800cf88:	2b09      	cmp	r3, #9
 800cf8a:	d028      	beq.n	800cfde <rclc_executor_spin_some.part.0+0x2c6>
 800cf8c:	f890 3039 	ldrb.w	r3, [r0, #57]	@ 0x39
 800cf90:	b9fb      	cbnz	r3, 800cfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800cf92:	68ab      	ldr	r3, [r5, #8]
 800cf94:	f108 0801 	add.w	r8, r8, #1
 800cf98:	4598      	cmp	r8, r3
 800cf9a:	d2b7      	bcs.n	800cf0c <rclc_executor_spin_some.part.0+0x1f4>
 800cf9c:	2400      	movs	r4, #0
 800cf9e:	6868      	ldr	r0, [r5, #4]
 800cfa0:	eb00 1088 	add.w	r0, r0, r8, lsl #6
 800cfa4:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 800cfa8:	f890 3038 	ldrb.w	r3, [r0, #56]	@ 0x38
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d0b7      	beq.n	800cf20 <rclc_executor_spin_some.part.0+0x208>
 800cfb0:	4631      	mov	r1, r6
 800cfb2:	f7ff fac9 	bl	800c548 <_rclc_take_new_data>
 800cfb6:	b118      	cbz	r0, 800cfc0 <rclc_executor_spin_some.part.0+0x2a8>
 800cfb8:	4548      	cmp	r0, r9
 800cfba:	d001      	beq.n	800cfc0 <rclc_executor_spin_some.part.0+0x2a8>
 800cfbc:	4550      	cmp	r0, sl
 800cfbe:	d10c      	bne.n	800cfda <rclc_executor_spin_some.part.0+0x2c2>
 800cfc0:	686b      	ldr	r3, [r5, #4]
 800cfc2:	eb13 000b 	adds.w	r0, r3, fp
 800cfc6:	d021      	beq.n	800d00c <rclc_executor_spin_some.part.0+0x2f4>
 800cfc8:	7842      	ldrb	r2, [r0, #1]
 800cfca:	2a00      	cmp	r2, #0
 800cfcc:	d0d8      	beq.n	800cf80 <rclc_executor_spin_some.part.0+0x268>
 800cfce:	2a01      	cmp	r2, #1
 800cfd0:	d1df      	bne.n	800cf92 <rclc_executor_spin_some.part.0+0x27a>
 800cfd2:	f7ff fc2d 	bl	800c830 <_rclc_execute.part.0>
 800cfd6:	2800      	cmp	r0, #0
 800cfd8:	d0db      	beq.n	800cf92 <rclc_executor_spin_some.part.0+0x27a>
 800cfda:	4607      	mov	r7, r0
 800cfdc:	e796      	b.n	800cf0c <rclc_executor_spin_some.part.0+0x1f4>
 800cfde:	6843      	ldr	r3, [r0, #4]
 800cfe0:	6a1a      	ldr	r2, [r3, #32]
 800cfe2:	2a00      	cmp	r2, #0
 800cfe4:	d1f5      	bne.n	800cfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800cfe6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	d0d1      	beq.n	800cf92 <rclc_executor_spin_some.part.0+0x27a>
 800cfee:	e7f0      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800cff0:	6843      	ldr	r3, [r0, #4]
 800cff2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800cff4:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800cff8:	d1eb      	bne.n	800cfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800cffa:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800cffe:	2a00      	cmp	r2, #0
 800d000:	d1e7      	bne.n	800cfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800d002:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800d006:	2b00      	cmp	r3, #0
 800d008:	d0c3      	beq.n	800cf92 <rclc_executor_spin_some.part.0+0x27a>
 800d00a:	e7e2      	b.n	800cfd2 <rclc_executor_spin_some.part.0+0x2ba>
 800d00c:	270b      	movs	r7, #11
 800d00e:	e77d      	b.n	800cf0c <rclc_executor_spin_some.part.0+0x1f4>
 800d010:	686a      	ldr	r2, [r5, #4]
 800d012:	e6e2      	b.n	800cdda <rclc_executor_spin_some.part.0+0xc2>
 800d014:	686a      	ldr	r2, [r5, #4]
 800d016:	e7a2      	b.n	800cf5e <rclc_executor_spin_some.part.0+0x246>
 800d018:	6842      	ldr	r2, [r0, #4]
 800d01a:	6a11      	ldr	r1, [r2, #32]
 800d01c:	2900      	cmp	r1, #0
 800d01e:	f47f af21 	bne.w	800ce64 <rclc_executor_spin_some.part.0+0x14c>
 800d022:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 800d026:	2a00      	cmp	r2, #0
 800d028:	f43f af0a 	beq.w	800ce40 <rclc_executor_spin_some.part.0+0x128>
 800d02c:	e71a      	b.n	800ce64 <rclc_executor_spin_some.part.0+0x14c>
 800d02e:	6842      	ldr	r2, [r0, #4]
 800d030:	6c11      	ldr	r1, [r2, #64]	@ 0x40
 800d032:	f031 417f 	bics.w	r1, r1, #4278190080	@ 0xff000000
 800d036:	f47f af15 	bne.w	800ce64 <rclc_executor_spin_some.part.0+0x14c>
 800d03a:	f892 1044 	ldrb.w	r1, [r2, #68]	@ 0x44
 800d03e:	2900      	cmp	r1, #0
 800d040:	f47f af10 	bne.w	800ce64 <rclc_executor_spin_some.part.0+0x14c>
 800d044:	f892 2043 	ldrb.w	r2, [r2, #67]	@ 0x43
 800d048:	2a00      	cmp	r2, #0
 800d04a:	f43f aef9 	beq.w	800ce40 <rclc_executor_spin_some.part.0+0x128>
 800d04e:	e709      	b.n	800ce64 <rclc_executor_spin_some.part.0+0x14c>
 800d050:	686a      	ldr	r2, [r5, #4]
 800d052:	461c      	mov	r4, r3
 800d054:	e783      	b.n	800cf5e <rclc_executor_spin_some.part.0+0x246>
 800d056:	686a      	ldr	r2, [r5, #4]
 800d058:	461c      	mov	r4, r3
 800d05a:	e6be      	b.n	800cdda <rclc_executor_spin_some.part.0+0xc2>

0800d05c <rclc_executor_spin_some>:
 800d05c:	b190      	cbz	r0, 800d084 <rclc_executor_spin_some+0x28>
 800d05e:	b570      	push	{r4, r5, r6, lr}
 800d060:	4604      	mov	r4, r0
 800d062:	6800      	ldr	r0, [r0, #0]
 800d064:	4616      	mov	r6, r2
 800d066:	461d      	mov	r5, r3
 800d068:	f004 ff9a 	bl	8011fa0 <rcl_context_is_valid>
 800d06c:	b130      	cbz	r0, 800d07c <rclc_executor_spin_some+0x20>
 800d06e:	4632      	mov	r2, r6
 800d070:	462b      	mov	r3, r5
 800d072:	4620      	mov	r0, r4
 800d074:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d078:	f7ff be4e 	b.w	800cd18 <rclc_executor_spin_some.part.0>
 800d07c:	f000 f964 	bl	800d348 <rcutils_reset_error>
 800d080:	2001      	movs	r0, #1
 800d082:	bd70      	pop	{r4, r5, r6, pc}
 800d084:	200b      	movs	r0, #11
 800d086:	4770      	bx	lr

0800d088 <rclc_executor_handle_counters_zero_init>:
 800d088:	b130      	cbz	r0, 800d098 <rclc_executor_handle_counters_zero_init+0x10>
 800d08a:	b508      	push	{r3, lr}
 800d08c:	2220      	movs	r2, #32
 800d08e:	2100      	movs	r1, #0
 800d090:	f00a fd72 	bl	8017b78 <memset>
 800d094:	2000      	movs	r0, #0
 800d096:	bd08      	pop	{r3, pc}
 800d098:	200b      	movs	r0, #11
 800d09a:	4770      	bx	lr
 800d09c:	0000      	movs	r0, r0
	...

0800d0a0 <rclc_executor_handle_init>:
 800d0a0:	b168      	cbz	r0, 800d0be <rclc_executor_handle_init+0x1e>
 800d0a2:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800d0c8 <rclc_executor_handle_init+0x28>
 800d0a6:	2300      	movs	r3, #0
 800d0a8:	220b      	movs	r2, #11
 800d0aa:	ed80 7b0a 	vstr	d7, [r0, #40]	@ 0x28
 800d0ae:	e9c0 3301 	strd	r3, r3, [r0, #4]
 800d0b2:	e9c0 310c 	strd	r3, r1, [r0, #48]	@ 0x30
 800d0b6:	8002      	strh	r2, [r0, #0]
 800d0b8:	8703      	strh	r3, [r0, #56]	@ 0x38
 800d0ba:	4618      	mov	r0, r3
 800d0bc:	4770      	bx	lr
 800d0be:	200b      	movs	r0, #11
 800d0c0:	4770      	bx	lr
 800d0c2:	bf00      	nop
 800d0c4:	f3af 8000 	nop.w
	...

0800d0d0 <rclc_support_init_with_options>:
 800d0d0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d0d4:	b083      	sub	sp, #12
 800d0d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d0d8:	b340      	cbz	r0, 800d12c <rclc_support_init_with_options+0x5c>
 800d0da:	461d      	mov	r5, r3
 800d0dc:	b333      	cbz	r3, 800d12c <rclc_support_init_with_options+0x5c>
 800d0de:	b32e      	cbz	r6, 800d12c <rclc_support_init_with_options+0x5c>
 800d0e0:	46e9      	mov	r9, sp
 800d0e2:	4604      	mov	r4, r0
 800d0e4:	4648      	mov	r0, r9
 800d0e6:	460f      	mov	r7, r1
 800d0e8:	4690      	mov	r8, r2
 800d0ea:	f004 ff4f 	bl	8011f8c <rcl_get_zero_initialized_context>
 800d0ee:	e899 0003 	ldmia.w	r9, {r0, r1}
 800d0f2:	462a      	mov	r2, r5
 800d0f4:	e884 0003 	stmia.w	r4, {r0, r1}
 800d0f8:	4623      	mov	r3, r4
 800d0fa:	4641      	mov	r1, r8
 800d0fc:	4638      	mov	r0, r7
 800d0fe:	f004 ffb5 	bl	801206c <rcl_init>
 800d102:	4605      	mov	r5, r0
 800d104:	b960      	cbnz	r0, 800d120 <rclc_support_init_with_options+0x50>
 800d106:	60a6      	str	r6, [r4, #8]
 800d108:	4632      	mov	r2, r6
 800d10a:	f104 010c 	add.w	r1, r4, #12
 800d10e:	2003      	movs	r0, #3
 800d110:	f005 fd02 	bl	8012b18 <rcl_clock_init>
 800d114:	4605      	mov	r5, r0
 800d116:	b918      	cbnz	r0, 800d120 <rclc_support_init_with_options+0x50>
 800d118:	4628      	mov	r0, r5
 800d11a:	b003      	add	sp, #12
 800d11c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d120:	f000 f912 	bl	800d348 <rcutils_reset_error>
 800d124:	4628      	mov	r0, r5
 800d126:	b003      	add	sp, #12
 800d128:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d12c:	250b      	movs	r5, #11
 800d12e:	4628      	mov	r0, r5
 800d130:	b003      	add	sp, #12
 800d132:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d136:	bf00      	nop

0800d138 <rclc_node_init_default>:
 800d138:	b3b8      	cbz	r0, 800d1aa <rclc_node_init_default+0x72>
 800d13a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d13e:	460d      	mov	r5, r1
 800d140:	b0a1      	sub	sp, #132	@ 0x84
 800d142:	b329      	cbz	r1, 800d190 <rclc_node_init_default+0x58>
 800d144:	4616      	mov	r6, r2
 800d146:	b31a      	cbz	r2, 800d190 <rclc_node_init_default+0x58>
 800d148:	461f      	mov	r7, r3
 800d14a:	b30b      	cbz	r3, 800d190 <rclc_node_init_default+0x58>
 800d14c:	f10d 0810 	add.w	r8, sp, #16
 800d150:	4604      	mov	r4, r0
 800d152:	4640      	mov	r0, r8
 800d154:	f005 f8b0 	bl	80122b8 <rcl_get_zero_initialized_node>
 800d158:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d15c:	f10d 0918 	add.w	r9, sp, #24
 800d160:	e884 0003 	stmia.w	r4, {r0, r1}
 800d164:	4648      	mov	r0, r9
 800d166:	f005 fa1f 	bl	80125a8 <rcl_node_get_default_options>
 800d16a:	4640      	mov	r0, r8
 800d16c:	f005 f8a4 	bl	80122b8 <rcl_get_zero_initialized_node>
 800d170:	f8cd 9000 	str.w	r9, [sp]
 800d174:	e898 0003 	ldmia.w	r8, {r0, r1}
 800d178:	463b      	mov	r3, r7
 800d17a:	e884 0003 	stmia.w	r4, {r0, r1}
 800d17e:	4632      	mov	r2, r6
 800d180:	4629      	mov	r1, r5
 800d182:	4620      	mov	r0, r4
 800d184:	f005 f8a2 	bl	80122cc <rcl_node_init>
 800d188:	b930      	cbnz	r0, 800d198 <rclc_node_init_default+0x60>
 800d18a:	b021      	add	sp, #132	@ 0x84
 800d18c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d190:	200b      	movs	r0, #11
 800d192:	b021      	add	sp, #132	@ 0x84
 800d194:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d198:	9003      	str	r0, [sp, #12]
 800d19a:	f000 f8d5 	bl	800d348 <rcutils_reset_error>
 800d19e:	f000 f8d3 	bl	800d348 <rcutils_reset_error>
 800d1a2:	9803      	ldr	r0, [sp, #12]
 800d1a4:	b021      	add	sp, #132	@ 0x84
 800d1a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d1aa:	200b      	movs	r0, #11
 800d1ac:	4770      	bx	lr
 800d1ae:	bf00      	nop

0800d1b0 <rclc_publisher_init_default>:
 800d1b0:	b368      	cbz	r0, 800d20e <rclc_publisher_init_default+0x5e>
 800d1b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	b0a0      	sub	sp, #128	@ 0x80
 800d1ba:	b321      	cbz	r1, 800d206 <rclc_publisher_init_default+0x56>
 800d1bc:	4616      	mov	r6, r2
 800d1be:	b312      	cbz	r2, 800d206 <rclc_publisher_init_default+0x56>
 800d1c0:	461f      	mov	r7, r3
 800d1c2:	b303      	cbz	r3, 800d206 <rclc_publisher_init_default+0x56>
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	f7ff f861 	bl	800c28c <rcl_get_zero_initialized_publisher>
 800d1ca:	f10d 0810 	add.w	r8, sp, #16
 800d1ce:	6020      	str	r0, [r4, #0]
 800d1d0:	4640      	mov	r0, r8
 800d1d2:	f7ff f8f7 	bl	800c3c4 <rcl_publisher_get_default_options>
 800d1d6:	490f      	ldr	r1, [pc, #60]	@ (800d214 <rclc_publisher_init_default+0x64>)
 800d1d8:	2250      	movs	r2, #80	@ 0x50
 800d1da:	4640      	mov	r0, r8
 800d1dc:	f00a fd95 	bl	8017d0a <memcpy>
 800d1e0:	f8cd 8000 	str.w	r8, [sp]
 800d1e4:	463b      	mov	r3, r7
 800d1e6:	4632      	mov	r2, r6
 800d1e8:	4629      	mov	r1, r5
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f7ff f854 	bl	800c298 <rcl_publisher_init>
 800d1f0:	b910      	cbnz	r0, 800d1f8 <rclc_publisher_init_default+0x48>
 800d1f2:	b020      	add	sp, #128	@ 0x80
 800d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f8:	9003      	str	r0, [sp, #12]
 800d1fa:	f000 f8a5 	bl	800d348 <rcutils_reset_error>
 800d1fe:	9803      	ldr	r0, [sp, #12]
 800d200:	b020      	add	sp, #128	@ 0x80
 800d202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d206:	200b      	movs	r0, #11
 800d208:	b020      	add	sp, #128	@ 0x80
 800d20a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d20e:	200b      	movs	r0, #11
 800d210:	4770      	bx	lr
 800d212:	bf00      	nop
 800d214:	08018f20 	.word	0x08018f20

0800d218 <rclc_timer_init_default>:
 800d218:	b360      	cbz	r0, 800d274 <rclc_timer_init_default+0x5c>
 800d21a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d21e:	460e      	mov	r6, r1
 800d220:	b08a      	sub	sp, #40	@ 0x28
 800d222:	b319      	cbz	r1, 800d26c <rclc_timer_init_default+0x54>
 800d224:	4690      	mov	r8, r2
 800d226:	461f      	mov	r7, r3
 800d228:	4605      	mov	r5, r0
 800d22a:	f005 fe53 	bl	8012ed4 <rcl_get_zero_initialized_timer>
 800d22e:	68b4      	ldr	r4, [r6, #8]
 800d230:	6028      	str	r0, [r5, #0]
 800d232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d234:	f10d 0c0c 	add.w	ip, sp, #12
 800d238:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d23c:	6823      	ldr	r3, [r4, #0]
 800d23e:	f8cc 3000 	str.w	r3, [ip]
 800d242:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d244:	9302      	str	r3, [sp, #8]
 800d246:	e9cd 8700 	strd	r8, r7, [sp]
 800d24a:	4628      	mov	r0, r5
 800d24c:	4632      	mov	r2, r6
 800d24e:	f106 010c 	add.w	r1, r6, #12
 800d252:	f005 fe45 	bl	8012ee0 <rcl_timer_init>
 800d256:	b910      	cbnz	r0, 800d25e <rclc_timer_init_default+0x46>
 800d258:	b00a      	add	sp, #40	@ 0x28
 800d25a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d25e:	9009      	str	r0, [sp, #36]	@ 0x24
 800d260:	f000 f872 	bl	800d348 <rcutils_reset_error>
 800d264:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d266:	b00a      	add	sp, #40	@ 0x28
 800d268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d26c:	200b      	movs	r0, #11
 800d26e:	b00a      	add	sp, #40	@ 0x28
 800d270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d274:	200b      	movs	r0, #11
 800d276:	4770      	bx	lr

0800d278 <__default_zero_allocate>:
 800d278:	f00a b894 	b.w	80173a4 <calloc>

0800d27c <__default_reallocate>:
 800d27c:	f00a ba20 	b.w	80176c0 <realloc>

0800d280 <__default_deallocate>:
 800d280:	f00a b8fc 	b.w	801747c <free>

0800d284 <__default_allocate>:
 800d284:	f00a b8f2 	b.w	801746c <malloc>

0800d288 <rcutils_get_zero_initialized_allocator>:
 800d288:	b510      	push	{r4, lr}
 800d28a:	4c05      	ldr	r4, [pc, #20]	@ (800d2a0 <rcutils_get_zero_initialized_allocator+0x18>)
 800d28c:	4686      	mov	lr, r0
 800d28e:	4684      	mov	ip, r0
 800d290:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d292:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d296:	6823      	ldr	r3, [r4, #0]
 800d298:	f8cc 3000 	str.w	r3, [ip]
 800d29c:	4670      	mov	r0, lr
 800d29e:	bd10      	pop	{r4, pc}
 800d2a0:	08018f70 	.word	0x08018f70

0800d2a4 <rcutils_set_default_allocator>:
 800d2a4:	b1a8      	cbz	r0, 800d2d2 <rcutils_set_default_allocator+0x2e>
 800d2a6:	6802      	ldr	r2, [r0, #0]
 800d2a8:	b1a2      	cbz	r2, 800d2d4 <rcutils_set_default_allocator+0x30>
 800d2aa:	6841      	ldr	r1, [r0, #4]
 800d2ac:	b1a1      	cbz	r1, 800d2d8 <rcutils_set_default_allocator+0x34>
 800d2ae:	b410      	push	{r4}
 800d2b0:	68c4      	ldr	r4, [r0, #12]
 800d2b2:	b164      	cbz	r4, 800d2ce <rcutils_set_default_allocator+0x2a>
 800d2b4:	6880      	ldr	r0, [r0, #8]
 800d2b6:	b138      	cbz	r0, 800d2c8 <rcutils_set_default_allocator+0x24>
 800d2b8:	4b08      	ldr	r3, [pc, #32]	@ (800d2dc <rcutils_set_default_allocator+0x38>)
 800d2ba:	601a      	str	r2, [r3, #0]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800d2c2:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800d2c6:	2001      	movs	r0, #1
 800d2c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2cc:	4770      	bx	lr
 800d2ce:	4620      	mov	r0, r4
 800d2d0:	e7fa      	b.n	800d2c8 <rcutils_set_default_allocator+0x24>
 800d2d2:	4770      	bx	lr
 800d2d4:	4610      	mov	r0, r2
 800d2d6:	4770      	bx	lr
 800d2d8:	4608      	mov	r0, r1
 800d2da:	4770      	bx	lr
 800d2dc:	200001bc 	.word	0x200001bc

0800d2e0 <rcutils_get_default_allocator>:
 800d2e0:	b510      	push	{r4, lr}
 800d2e2:	4c05      	ldr	r4, [pc, #20]	@ (800d2f8 <rcutils_get_default_allocator+0x18>)
 800d2e4:	4686      	mov	lr, r0
 800d2e6:	4684      	mov	ip, r0
 800d2e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800d2ea:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d2ee:	6823      	ldr	r3, [r4, #0]
 800d2f0:	f8cc 3000 	str.w	r3, [ip]
 800d2f4:	4670      	mov	r0, lr
 800d2f6:	bd10      	pop	{r4, pc}
 800d2f8:	200001bc 	.word	0x200001bc

0800d2fc <rcutils_allocator_is_valid>:
 800d2fc:	b158      	cbz	r0, 800d316 <rcutils_allocator_is_valid+0x1a>
 800d2fe:	6803      	ldr	r3, [r0, #0]
 800d300:	b143      	cbz	r3, 800d314 <rcutils_allocator_is_valid+0x18>
 800d302:	6843      	ldr	r3, [r0, #4]
 800d304:	b133      	cbz	r3, 800d314 <rcutils_allocator_is_valid+0x18>
 800d306:	68c3      	ldr	r3, [r0, #12]
 800d308:	b123      	cbz	r3, 800d314 <rcutils_allocator_is_valid+0x18>
 800d30a:	6880      	ldr	r0, [r0, #8]
 800d30c:	3800      	subs	r0, #0
 800d30e:	bf18      	it	ne
 800d310:	2001      	movne	r0, #1
 800d312:	4770      	bx	lr
 800d314:	4618      	mov	r0, r3
 800d316:	4770      	bx	lr

0800d318 <rcutils_get_error_string>:
 800d318:	4b06      	ldr	r3, [pc, #24]	@ (800d334 <rcutils_get_error_string+0x1c>)
 800d31a:	781b      	ldrb	r3, [r3, #0]
 800d31c:	b13b      	cbz	r3, 800d32e <rcutils_get_error_string+0x16>
 800d31e:	4b06      	ldr	r3, [pc, #24]	@ (800d338 <rcutils_get_error_string+0x20>)
 800d320:	781a      	ldrb	r2, [r3, #0]
 800d322:	b90a      	cbnz	r2, 800d328 <rcutils_get_error_string+0x10>
 800d324:	2201      	movs	r2, #1
 800d326:	701a      	strb	r2, [r3, #0]
 800d328:	4b04      	ldr	r3, [pc, #16]	@ (800d33c <rcutils_get_error_string+0x24>)
 800d32a:	7818      	ldrb	r0, [r3, #0]
 800d32c:	4770      	bx	lr
 800d32e:	4b04      	ldr	r3, [pc, #16]	@ (800d340 <rcutils_get_error_string+0x28>)
 800d330:	7818      	ldrb	r0, [r3, #0]
 800d332:	4770      	bx	lr
 800d334:	20006660 	.word	0x20006660
 800d338:	20006679 	.word	0x20006679
 800d33c:	20006678 	.word	0x20006678
 800d340:	08018f84 	.word	0x08018f84
 800d344:	00000000 	.word	0x00000000

0800d348 <rcutils_reset_error>:
 800d348:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d368 <rcutils_reset_error+0x20>
 800d34c:	4a08      	ldr	r2, [pc, #32]	@ (800d370 <rcutils_reset_error+0x28>)
 800d34e:	4809      	ldr	r0, [pc, #36]	@ (800d374 <rcutils_reset_error+0x2c>)
 800d350:	4909      	ldr	r1, [pc, #36]	@ (800d378 <rcutils_reset_error+0x30>)
 800d352:	2300      	movs	r3, #0
 800d354:	8013      	strh	r3, [r2, #0]
 800d356:	ed82 7b02 	vstr	d7, [r2, #8]
 800d35a:	4a08      	ldr	r2, [pc, #32]	@ (800d37c <rcutils_reset_error+0x34>)
 800d35c:	7003      	strb	r3, [r0, #0]
 800d35e:	700b      	strb	r3, [r1, #0]
 800d360:	7013      	strb	r3, [r2, #0]
 800d362:	4770      	bx	lr
 800d364:	f3af 8000 	nop.w
	...
 800d370:	20006668 	.word	0x20006668
 800d374:	20006679 	.word	0x20006679
 800d378:	20006678 	.word	0x20006678
 800d37c:	20006660 	.word	0x20006660

0800d380 <rcutils_system_time_now>:
 800d380:	b308      	cbz	r0, 800d3c6 <rcutils_system_time_now+0x46>
 800d382:	b570      	push	{r4, r5, r6, lr}
 800d384:	b084      	sub	sp, #16
 800d386:	4604      	mov	r4, r0
 800d388:	4669      	mov	r1, sp
 800d38a:	2001      	movs	r0, #1
 800d38c:	f7f4 fe38 	bl	8002000 <clock_gettime>
 800d390:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d394:	2d00      	cmp	r5, #0
 800d396:	db13      	blt.n	800d3c0 <rcutils_system_time_now+0x40>
 800d398:	9902      	ldr	r1, [sp, #8]
 800d39a:	2900      	cmp	r1, #0
 800d39c:	db0d      	blt.n	800d3ba <rcutils_system_time_now+0x3a>
 800d39e:	4e0b      	ldr	r6, [pc, #44]	@ (800d3cc <rcutils_system_time_now+0x4c>)
 800d3a0:	fba3 3206 	umull	r3, r2, r3, r6
 800d3a4:	185b      	adds	r3, r3, r1
 800d3a6:	fb06 2205 	mla	r2, r6, r5, r2
 800d3aa:	f04f 0000 	mov.w	r0, #0
 800d3ae:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d3b2:	e9c4 3200 	strd	r3, r2, [r4]
 800d3b6:	b004      	add	sp, #16
 800d3b8:	bd70      	pop	{r4, r5, r6, pc}
 800d3ba:	ea53 0205 	orrs.w	r2, r3, r5
 800d3be:	d1ee      	bne.n	800d39e <rcutils_system_time_now+0x1e>
 800d3c0:	2002      	movs	r0, #2
 800d3c2:	b004      	add	sp, #16
 800d3c4:	bd70      	pop	{r4, r5, r6, pc}
 800d3c6:	200b      	movs	r0, #11
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	3b9aca00 	.word	0x3b9aca00

0800d3d0 <rcutils_steady_time_now>:
 800d3d0:	b308      	cbz	r0, 800d416 <rcutils_steady_time_now+0x46>
 800d3d2:	b570      	push	{r4, r5, r6, lr}
 800d3d4:	b084      	sub	sp, #16
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	4669      	mov	r1, sp
 800d3da:	2000      	movs	r0, #0
 800d3dc:	f7f4 fe10 	bl	8002000 <clock_gettime>
 800d3e0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800d3e4:	2d00      	cmp	r5, #0
 800d3e6:	db13      	blt.n	800d410 <rcutils_steady_time_now+0x40>
 800d3e8:	9902      	ldr	r1, [sp, #8]
 800d3ea:	2900      	cmp	r1, #0
 800d3ec:	db0d      	blt.n	800d40a <rcutils_steady_time_now+0x3a>
 800d3ee:	4e0b      	ldr	r6, [pc, #44]	@ (800d41c <rcutils_steady_time_now+0x4c>)
 800d3f0:	fba3 3206 	umull	r3, r2, r3, r6
 800d3f4:	185b      	adds	r3, r3, r1
 800d3f6:	fb06 2205 	mla	r2, r6, r5, r2
 800d3fa:	f04f 0000 	mov.w	r0, #0
 800d3fe:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800d402:	e9c4 3200 	strd	r3, r2, [r4]
 800d406:	b004      	add	sp, #16
 800d408:	bd70      	pop	{r4, r5, r6, pc}
 800d40a:	ea53 0205 	orrs.w	r2, r3, r5
 800d40e:	d1ee      	bne.n	800d3ee <rcutils_steady_time_now+0x1e>
 800d410:	2002      	movs	r0, #2
 800d412:	b004      	add	sp, #16
 800d414:	bd70      	pop	{r4, r5, r6, pc}
 800d416:	200b      	movs	r0, #11
 800d418:	4770      	bx	lr
 800d41a:	bf00      	nop
 800d41c:	3b9aca00 	.word	0x3b9aca00

0800d420 <rmw_get_zero_initialized_init_options>:
 800d420:	b510      	push	{r4, lr}
 800d422:	2238      	movs	r2, #56	@ 0x38
 800d424:	4604      	mov	r4, r0
 800d426:	2100      	movs	r1, #0
 800d428:	f00a fba6 	bl	8017b78 <memset>
 800d42c:	f104 0010 	add.w	r0, r4, #16
 800d430:	f000 f80a 	bl	800d448 <rmw_get_default_security_options>
 800d434:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d438:	60e3      	str	r3, [r4, #12]
 800d43a:	4620      	mov	r0, r4
 800d43c:	bd10      	pop	{r4, pc}
 800d43e:	bf00      	nop

0800d440 <rmw_get_default_publisher_options>:
 800d440:	2200      	movs	r2, #0
 800d442:	6002      	str	r2, [r0, #0]
 800d444:	7102      	strb	r2, [r0, #4]
 800d446:	4770      	bx	lr

0800d448 <rmw_get_default_security_options>:
 800d448:	2200      	movs	r2, #0
 800d44a:	7002      	strb	r2, [r0, #0]
 800d44c:	6042      	str	r2, [r0, #4]
 800d44e:	4770      	bx	lr

0800d450 <rmw_uros_set_custom_transport>:
 800d450:	b470      	push	{r4, r5, r6}
 800d452:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800d456:	b162      	cbz	r2, 800d472 <rmw_uros_set_custom_transport+0x22>
 800d458:	b15b      	cbz	r3, 800d472 <rmw_uros_set_custom_transport+0x22>
 800d45a:	b155      	cbz	r5, 800d472 <rmw_uros_set_custom_transport+0x22>
 800d45c:	b14e      	cbz	r6, 800d472 <rmw_uros_set_custom_transport+0x22>
 800d45e:	4c06      	ldr	r4, [pc, #24]	@ (800d478 <rmw_uros_set_custom_transport+0x28>)
 800d460:	7020      	strb	r0, [r4, #0]
 800d462:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800d466:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d46a:	6166      	str	r6, [r4, #20]
 800d46c:	2000      	movs	r0, #0
 800d46e:	bc70      	pop	{r4, r5, r6}
 800d470:	4770      	bx	lr
 800d472:	200b      	movs	r0, #11
 800d474:	bc70      	pop	{r4, r5, r6}
 800d476:	4770      	bx	lr
 800d478:	2000667c 	.word	0x2000667c

0800d47c <rmw_init_options_init>:
 800d47c:	b084      	sub	sp, #16
 800d47e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d480:	b083      	sub	sp, #12
 800d482:	ad09      	add	r5, sp, #36	@ 0x24
 800d484:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800d488:	b130      	cbz	r0, 800d498 <rmw_init_options_init+0x1c>
 800d48a:	4604      	mov	r4, r0
 800d48c:	4628      	mov	r0, r5
 800d48e:	f7ff ff35 	bl	800d2fc <rcutils_allocator_is_valid>
 800d492:	b108      	cbz	r0, 800d498 <rmw_init_options_init+0x1c>
 800d494:	68a6      	ldr	r6, [r4, #8]
 800d496:	b12e      	cbz	r6, 800d4a4 <rmw_init_options_init+0x28>
 800d498:	200b      	movs	r0, #11
 800d49a:	b003      	add	sp, #12
 800d49c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d4a0:	b004      	add	sp, #16
 800d4a2:	4770      	bx	lr
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	e9c4 2300 	strd	r2, r3, [r4]
 800d4ac:	4b22      	ldr	r3, [pc, #136]	@ (800d538 <rmw_init_options_init+0xbc>)
 800d4ae:	f8df e098 	ldr.w	lr, [pc, #152]	@ 800d548 <rmw_init_options_init+0xcc>
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	60a3      	str	r3, [r4, #8]
 800d4b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800d4b8:	f104 0c20 	add.w	ip, r4, #32
 800d4bc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d4c0:	466f      	mov	r7, sp
 800d4c2:	682b      	ldr	r3, [r5, #0]
 800d4c4:	f8cc 3000 	str.w	r3, [ip]
 800d4c8:	4638      	mov	r0, r7
 800d4ca:	f8c4 e01c 	str.w	lr, [r4, #28]
 800d4ce:	60e6      	str	r6, [r4, #12]
 800d4d0:	f7ff ffba 	bl	800d448 <rmw_get_default_security_options>
 800d4d4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800d4d8:	f104 0310 	add.w	r3, r4, #16
 800d4dc:	e883 0003 	stmia.w	r3, {r0, r1}
 800d4e0:	2203      	movs	r2, #3
 800d4e2:	4816      	ldr	r0, [pc, #88]	@ (800d53c <rmw_init_options_init+0xc0>)
 800d4e4:	4916      	ldr	r1, [pc, #88]	@ (800d540 <rmw_init_options_init+0xc4>)
 800d4e6:	7626      	strb	r6, [r4, #24]
 800d4e8:	f000 fe9c 	bl	800e224 <rmw_uxrce_init_init_options_impl_memory>
 800d4ec:	4813      	ldr	r0, [pc, #76]	@ (800d53c <rmw_init_options_init+0xc0>)
 800d4ee:	f008 f87b 	bl	80155e8 <get_memory>
 800d4f2:	b1f0      	cbz	r0, 800d532 <rmw_init_options_init+0xb6>
 800d4f4:	4a13      	ldr	r2, [pc, #76]	@ (800d544 <rmw_init_options_init+0xc8>)
 800d4f6:	6883      	ldr	r3, [r0, #8]
 800d4f8:	6851      	ldr	r1, [r2, #4]
 800d4fa:	7810      	ldrb	r0, [r2, #0]
 800d4fc:	6363      	str	r3, [r4, #52]	@ 0x34
 800d4fe:	7418      	strb	r0, [r3, #16]
 800d500:	6159      	str	r1, [r3, #20]
 800d502:	68d1      	ldr	r1, [r2, #12]
 800d504:	61d9      	str	r1, [r3, #28]
 800d506:	6911      	ldr	r1, [r2, #16]
 800d508:	6219      	str	r1, [r3, #32]
 800d50a:	6951      	ldr	r1, [r2, #20]
 800d50c:	6892      	ldr	r2, [r2, #8]
 800d50e:	619a      	str	r2, [r3, #24]
 800d510:	6259      	str	r1, [r3, #36]	@ 0x24
 800d512:	f003 fb5b 	bl	8010bcc <uxr_nanos>
 800d516:	f00a f867 	bl	80175e8 <srand>
 800d51a:	f00a f893 	bl	8017644 <rand>
 800d51e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d520:	6298      	str	r0, [r3, #40]	@ 0x28
 800d522:	2800      	cmp	r0, #0
 800d524:	d0f9      	beq.n	800d51a <rmw_init_options_init+0x9e>
 800d526:	2000      	movs	r0, #0
 800d528:	b003      	add	sp, #12
 800d52a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d52e:	b004      	add	sp, #16
 800d530:	4770      	bx	lr
 800d532:	2001      	movs	r0, #1
 800d534:	e7b1      	b.n	800d49a <rmw_init_options_init+0x1e>
 800d536:	bf00      	nop
 800d538:	08019730 	.word	0x08019730
 800d53c:	2000b1ec 	.word	0x2000b1ec
 800d540:	20006a88 	.word	0x20006a88
 800d544:	2000667c 	.word	0x2000667c
 800d548:	08018f88 	.word	0x08018f88

0800d54c <rmw_init_options_copy>:
 800d54c:	b570      	push	{r4, r5, r6, lr}
 800d54e:	b158      	cbz	r0, 800d568 <rmw_init_options_copy+0x1c>
 800d550:	460d      	mov	r5, r1
 800d552:	b149      	cbz	r1, 800d568 <rmw_init_options_copy+0x1c>
 800d554:	4604      	mov	r4, r0
 800d556:	6880      	ldr	r0, [r0, #8]
 800d558:	b120      	cbz	r0, 800d564 <rmw_init_options_copy+0x18>
 800d55a:	4b1e      	ldr	r3, [pc, #120]	@ (800d5d4 <rmw_init_options_copy+0x88>)
 800d55c:	6819      	ldr	r1, [r3, #0]
 800d55e:	f7f2 fe5f 	bl	8000220 <strcmp>
 800d562:	bb90      	cbnz	r0, 800d5ca <rmw_init_options_copy+0x7e>
 800d564:	68ab      	ldr	r3, [r5, #8]
 800d566:	b113      	cbz	r3, 800d56e <rmw_init_options_copy+0x22>
 800d568:	250b      	movs	r5, #11
 800d56a:	4628      	mov	r0, r5
 800d56c:	bd70      	pop	{r4, r5, r6, pc}
 800d56e:	4623      	mov	r3, r4
 800d570:	462a      	mov	r2, r5
 800d572:	f104 0630 	add.w	r6, r4, #48	@ 0x30
 800d576:	f8d3 c000 	ldr.w	ip, [r3]
 800d57a:	6858      	ldr	r0, [r3, #4]
 800d57c:	6899      	ldr	r1, [r3, #8]
 800d57e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 800d582:	f8c2 e00c 	str.w	lr, [r2, #12]
 800d586:	3310      	adds	r3, #16
 800d588:	42b3      	cmp	r3, r6
 800d58a:	f8c2 c000 	str.w	ip, [r2]
 800d58e:	6050      	str	r0, [r2, #4]
 800d590:	6091      	str	r1, [r2, #8]
 800d592:	f102 0210 	add.w	r2, r2, #16
 800d596:	d1ee      	bne.n	800d576 <rmw_init_options_copy+0x2a>
 800d598:	6819      	ldr	r1, [r3, #0]
 800d59a:	685b      	ldr	r3, [r3, #4]
 800d59c:	480e      	ldr	r0, [pc, #56]	@ (800d5d8 <rmw_init_options_copy+0x8c>)
 800d59e:	6053      	str	r3, [r2, #4]
 800d5a0:	6011      	str	r1, [r2, #0]
 800d5a2:	f008 f821 	bl	80155e8 <get_memory>
 800d5a6:	b198      	cbz	r0, 800d5d0 <rmw_init_options_copy+0x84>
 800d5a8:	6883      	ldr	r3, [r0, #8]
 800d5aa:	636b      	str	r3, [r5, #52]	@ 0x34
 800d5ac:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d5ae:	f102 0c10 	add.w	ip, r2, #16
 800d5b2:	f103 0410 	add.w	r4, r3, #16
 800d5b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800d5ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800d5bc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 800d5c0:	2500      	movs	r5, #0
 800d5c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800d5c6:	4628      	mov	r0, r5
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	250c      	movs	r5, #12
 800d5cc:	4628      	mov	r0, r5
 800d5ce:	bd70      	pop	{r4, r5, r6, pc}
 800d5d0:	2501      	movs	r5, #1
 800d5d2:	e7ca      	b.n	800d56a <rmw_init_options_copy+0x1e>
 800d5d4:	08019730 	.word	0x08019730
 800d5d8:	2000b1ec 	.word	0x2000b1ec

0800d5dc <rmw_init_options_fini>:
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	d03d      	beq.n	800d65c <rmw_init_options_fini+0x80>
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	b08e      	sub	sp, #56	@ 0x38
 800d5e6:	3020      	adds	r0, #32
 800d5e8:	f7ff fe88 	bl	800d2fc <rcutils_allocator_is_valid>
 800d5ec:	b360      	cbz	r0, 800d648 <rmw_init_options_fini+0x6c>
 800d5ee:	68a0      	ldr	r0, [r4, #8]
 800d5f0:	b120      	cbz	r0, 800d5fc <rmw_init_options_fini+0x20>
 800d5f2:	4b1c      	ldr	r3, [pc, #112]	@ (800d664 <rmw_init_options_fini+0x88>)
 800d5f4:	6819      	ldr	r1, [r3, #0]
 800d5f6:	f7f2 fe13 	bl	8000220 <strcmp>
 800d5fa:	bb68      	cbnz	r0, 800d658 <rmw_init_options_fini+0x7c>
 800d5fc:	4b1a      	ldr	r3, [pc, #104]	@ (800d668 <rmw_init_options_fini+0x8c>)
 800d5fe:	6819      	ldr	r1, [r3, #0]
 800d600:	b331      	cbz	r1, 800d650 <rmw_init_options_fini+0x74>
 800d602:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800d604:	e001      	b.n	800d60a <rmw_init_options_fini+0x2e>
 800d606:	6849      	ldr	r1, [r1, #4]
 800d608:	b311      	cbz	r1, 800d650 <rmw_init_options_fini+0x74>
 800d60a:	688b      	ldr	r3, [r1, #8]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d1fa      	bne.n	800d606 <rmw_init_options_fini+0x2a>
 800d610:	4815      	ldr	r0, [pc, #84]	@ (800d668 <rmw_init_options_fini+0x8c>)
 800d612:	f007 fff9 	bl	8015608 <put_memory>
 800d616:	4668      	mov	r0, sp
 800d618:	f7ff ff02 	bl	800d420 <rmw_get_zero_initialized_init_options>
 800d61c:	46ee      	mov	lr, sp
 800d61e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d622:	46a4      	mov	ip, r4
 800d624:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d628:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d62c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d630:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800d634:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800d638:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800d63c:	e88c 0003 	stmia.w	ip, {r0, r1}
 800d640:	2300      	movs	r3, #0
 800d642:	4618      	mov	r0, r3
 800d644:	b00e      	add	sp, #56	@ 0x38
 800d646:	bd10      	pop	{r4, pc}
 800d648:	230b      	movs	r3, #11
 800d64a:	4618      	mov	r0, r3
 800d64c:	b00e      	add	sp, #56	@ 0x38
 800d64e:	bd10      	pop	{r4, pc}
 800d650:	2301      	movs	r3, #1
 800d652:	4618      	mov	r0, r3
 800d654:	b00e      	add	sp, #56	@ 0x38
 800d656:	bd10      	pop	{r4, pc}
 800d658:	230c      	movs	r3, #12
 800d65a:	e7f2      	b.n	800d642 <rmw_init_options_fini+0x66>
 800d65c:	230b      	movs	r3, #11
 800d65e:	4618      	mov	r0, r3
 800d660:	4770      	bx	lr
 800d662:	bf00      	nop
 800d664:	08019730 	.word	0x08019730
 800d668:	2000b1ec 	.word	0x2000b1ec

0800d66c <rmw_init>:
 800d66c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d670:	b083      	sub	sp, #12
 800d672:	2800      	cmp	r0, #0
 800d674:	f000 80d3 	beq.w	800d81e <rmw_init+0x1b2>
 800d678:	460e      	mov	r6, r1
 800d67a:	2900      	cmp	r1, #0
 800d67c:	f000 80cf 	beq.w	800d81e <rmw_init+0x1b2>
 800d680:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800d682:	4605      	mov	r5, r0
 800d684:	2b00      	cmp	r3, #0
 800d686:	f000 80ca 	beq.w	800d81e <rmw_init+0x1b2>
 800d68a:	4b78      	ldr	r3, [pc, #480]	@ (800d86c <rmw_init+0x200>)
 800d68c:	6880      	ldr	r0, [r0, #8]
 800d68e:	681f      	ldr	r7, [r3, #0]
 800d690:	b128      	cbz	r0, 800d69e <rmw_init+0x32>
 800d692:	4639      	mov	r1, r7
 800d694:	f7f2 fdc4 	bl	8000220 <strcmp>
 800d698:	2800      	cmp	r0, #0
 800d69a:	f040 80ca 	bne.w	800d832 <rmw_init+0x1c6>
 800d69e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d6a2:	4c73      	ldr	r4, [pc, #460]	@ (800d870 <rmw_init+0x204>)
 800d6a4:	4973      	ldr	r1, [pc, #460]	@ (800d874 <rmw_init+0x208>)
 800d6a6:	4874      	ldr	r0, [pc, #464]	@ (800d878 <rmw_init+0x20c>)
 800d6a8:	60b7      	str	r7, [r6, #8]
 800d6aa:	e9c6 2300 	strd	r2, r3, [r6]
 800d6ae:	68eb      	ldr	r3, [r5, #12]
 800d6b0:	64b3      	str	r3, [r6, #72]	@ 0x48
 800d6b2:	2201      	movs	r2, #1
 800d6b4:	f000 fd56 	bl	800e164 <rmw_uxrce_init_session_memory>
 800d6b8:	4620      	mov	r0, r4
 800d6ba:	4970      	ldr	r1, [pc, #448]	@ (800d87c <rmw_init+0x210>)
 800d6bc:	2204      	movs	r2, #4
 800d6be:	f000 fd91 	bl	800e1e4 <rmw_uxrce_init_static_input_buffer_memory>
 800d6c2:	f04f 0800 	mov.w	r8, #0
 800d6c6:	486c      	ldr	r0, [pc, #432]	@ (800d878 <rmw_init+0x20c>)
 800d6c8:	f884 800d 	strb.w	r8, [r4, #13]
 800d6cc:	f007 ff8c 	bl	80155e8 <get_memory>
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	f000 80a9 	beq.w	800d828 <rmw_init+0x1bc>
 800d6d6:	6884      	ldr	r4, [r0, #8]
 800d6d8:	6b68      	ldr	r0, [r5, #52]	@ 0x34
 800d6da:	6a41      	ldr	r1, [r0, #36]	@ 0x24
 800d6dc:	f890 c010 	ldrb.w	ip, [r0, #16]
 800d6e0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 800d6e4:	9101      	str	r1, [sp, #4]
 800d6e6:	6a00      	ldr	r0, [r0, #32]
 800d6e8:	9000      	str	r0, [sp, #0]
 800d6ea:	f104 0910 	add.w	r9, r4, #16
 800d6ee:	4661      	mov	r1, ip
 800d6f0:	4648      	mov	r0, r9
 800d6f2:	f001 fa43 	bl	800eb7c <uxr_set_custom_transport_callbacks>
 800d6f6:	f504 5380 	add.w	r3, r4, #4096	@ 0x1000
 800d6fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800d6fe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	@ 0x38c
 800d702:	f504 725e 	add.w	r2, r4, #888	@ 0x378
 800d706:	e9c4 22e1 	strd	r2, r2, [r4, #900]	@ 0x384
 800d70a:	495d      	ldr	r1, [pc, #372]	@ (800d880 <rmw_init+0x214>)
 800d70c:	f8c3 8594 	str.w	r8, [r3, #1428]	@ 0x594
 800d710:	f8c3 8598 	str.w	r8, [r3, #1432]	@ 0x598
 800d714:	f8c3 859c 	str.w	r8, [r3, #1436]	@ 0x59c
 800d718:	f8c3 85a0 	str.w	r8, [r3, #1440]	@ 0x5a0
 800d71c:	4859      	ldr	r0, [pc, #356]	@ (800d884 <rmw_init+0x218>)
 800d71e:	e9c4 78da 	strd	r7, r8, [r4, #872]	@ 0x368
 800d722:	2201      	movs	r2, #1
 800d724:	64f4      	str	r4, [r6, #76]	@ 0x4c
 800d726:	f000 fcfd 	bl	800e124 <rmw_uxrce_init_node_memory>
 800d72a:	4957      	ldr	r1, [pc, #348]	@ (800d888 <rmw_init+0x21c>)
 800d72c:	4857      	ldr	r0, [pc, #348]	@ (800d88c <rmw_init+0x220>)
 800d72e:	2205      	movs	r2, #5
 800d730:	f000 fcd8 	bl	800e0e4 <rmw_uxrce_init_subscription_memory>
 800d734:	4956      	ldr	r1, [pc, #344]	@ (800d890 <rmw_init+0x224>)
 800d736:	4857      	ldr	r0, [pc, #348]	@ (800d894 <rmw_init+0x228>)
 800d738:	220a      	movs	r2, #10
 800d73a:	f000 fcb3 	bl	800e0a4 <rmw_uxrce_init_publisher_memory>
 800d73e:	4956      	ldr	r1, [pc, #344]	@ (800d898 <rmw_init+0x22c>)
 800d740:	4856      	ldr	r0, [pc, #344]	@ (800d89c <rmw_init+0x230>)
 800d742:	2201      	movs	r2, #1
 800d744:	f000 fc6e 	bl	800e024 <rmw_uxrce_init_service_memory>
 800d748:	4955      	ldr	r1, [pc, #340]	@ (800d8a0 <rmw_init+0x234>)
 800d74a:	4856      	ldr	r0, [pc, #344]	@ (800d8a4 <rmw_init+0x238>)
 800d74c:	2204      	movs	r2, #4
 800d74e:	f000 fc89 	bl	800e064 <rmw_uxrce_init_client_memory>
 800d752:	4955      	ldr	r1, [pc, #340]	@ (800d8a8 <rmw_init+0x23c>)
 800d754:	4855      	ldr	r0, [pc, #340]	@ (800d8ac <rmw_init+0x240>)
 800d756:	220f      	movs	r2, #15
 800d758:	f000 fd24 	bl	800e1a4 <rmw_uxrce_init_topic_memory>
 800d75c:	4954      	ldr	r1, [pc, #336]	@ (800d8b0 <rmw_init+0x244>)
 800d75e:	4855      	ldr	r0, [pc, #340]	@ (800d8b4 <rmw_init+0x248>)
 800d760:	2203      	movs	r2, #3
 800d762:	f000 fd5f 	bl	800e224 <rmw_uxrce_init_init_options_impl_memory>
 800d766:	4954      	ldr	r1, [pc, #336]	@ (800d8b8 <rmw_init+0x24c>)
 800d768:	4854      	ldr	r0, [pc, #336]	@ (800d8bc <rmw_init+0x250>)
 800d76a:	2204      	movs	r2, #4
 800d76c:	f000 fd7a 	bl	800e264 <rmw_uxrce_init_wait_set_memory>
 800d770:	4953      	ldr	r1, [pc, #332]	@ (800d8c0 <rmw_init+0x254>)
 800d772:	4854      	ldr	r0, [pc, #336]	@ (800d8c4 <rmw_init+0x258>)
 800d774:	2204      	movs	r2, #4
 800d776:	f000 fd95 	bl	800e2a4 <rmw_uxrce_init_guard_condition_memory>
 800d77a:	6b69      	ldr	r1, [r5, #52]	@ 0x34
 800d77c:	6cf0      	ldr	r0, [r6, #76]	@ 0x4c
 800d77e:	4642      	mov	r2, r8
 800d780:	f000 fc38 	bl	800dff4 <rmw_uxrce_transport_init>
 800d784:	4607      	mov	r7, r0
 800d786:	2800      	cmp	r0, #0
 800d788:	d158      	bne.n	800d83c <rmw_init+0x1d0>
 800d78a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800d78c:	f504 7528 	add.w	r5, r4, #672	@ 0x2a0
 800d790:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d792:	f504 7122 	add.w	r1, r4, #648	@ 0x288
 800d796:	4628      	mov	r0, r5
 800d798:	f001 fbea 	bl	800ef70 <uxr_init_session>
 800d79c:	494a      	ldr	r1, [pc, #296]	@ (800d8c8 <rmw_init+0x25c>)
 800d79e:	4622      	mov	r2, r4
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	f001 fc09 	bl	800efb8 <uxr_set_topic_callback>
 800d7a6:	4949      	ldr	r1, [pc, #292]	@ (800d8cc <rmw_init+0x260>)
 800d7a8:	463a      	mov	r2, r7
 800d7aa:	4628      	mov	r0, r5
 800d7ac:	f001 fc00 	bl	800efb0 <uxr_set_status_callback>
 800d7b0:	4947      	ldr	r1, [pc, #284]	@ (800d8d0 <rmw_init+0x264>)
 800d7b2:	463a      	mov	r2, r7
 800d7b4:	4628      	mov	r0, r5
 800d7b6:	f001 fc03 	bl	800efc0 <uxr_set_request_callback>
 800d7ba:	4946      	ldr	r1, [pc, #280]	@ (800d8d4 <rmw_init+0x268>)
 800d7bc:	463a      	mov	r2, r7
 800d7be:	4628      	mov	r0, r5
 800d7c0:	f001 fc02 	bl	800efc8 <uxr_set_reply_callback>
 800d7c4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d7c8:	2304      	movs	r3, #4
 800d7ca:	0092      	lsls	r2, r2, #2
 800d7cc:	f504 7165 	add.w	r1, r4, #916	@ 0x394
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f001 fc37 	bl	800f044 <uxr_create_input_reliable_stream>
 800d7d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d7da:	f8c4 0374 	str.w	r0, [r4, #884]	@ 0x374
 800d7de:	0092      	lsls	r2, r2, #2
 800d7e0:	2304      	movs	r3, #4
 800d7e2:	f604 3194 	addw	r1, r4, #2964	@ 0xb94
 800d7e6:	4628      	mov	r0, r5
 800d7e8:	f001 fc04 	bl	800eff4 <uxr_create_output_reliable_stream>
 800d7ec:	f8c4 0378 	str.w	r0, [r4, #888]	@ 0x378
 800d7f0:	4628      	mov	r0, r5
 800d7f2:	f001 fc21 	bl	800f038 <uxr_create_input_best_effort_stream>
 800d7f6:	f504 519c 	add.w	r1, r4, #4992	@ 0x1380
 800d7fa:	f8c4 0380 	str.w	r0, [r4, #896]	@ 0x380
 800d7fe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	@ 0x298
 800d802:	3114      	adds	r1, #20
 800d804:	4628      	mov	r0, r5
 800d806:	f001 fbe3 	bl	800efd0 <uxr_create_output_best_effort_stream>
 800d80a:	f8c4 037c 	str.w	r0, [r4, #892]	@ 0x37c
 800d80e:	4628      	mov	r0, r5
 800d810:	f002 f96e 	bl	800faf0 <uxr_create_session>
 800d814:	b1f8      	cbz	r0, 800d856 <rmw_init+0x1ea>
 800d816:	4638      	mov	r0, r7
 800d818:	b003      	add	sp, #12
 800d81a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d81e:	270b      	movs	r7, #11
 800d820:	4638      	mov	r0, r7
 800d822:	b003      	add	sp, #12
 800d824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d828:	2701      	movs	r7, #1
 800d82a:	4638      	mov	r0, r7
 800d82c:	b003      	add	sp, #12
 800d82e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d832:	270c      	movs	r7, #12
 800d834:	4638      	mov	r0, r7
 800d836:	b003      	add	sp, #12
 800d838:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d83c:	4648      	mov	r0, r9
 800d83e:	f001 f9df 	bl	800ec00 <uxr_close_custom_transport>
 800d842:	480d      	ldr	r0, [pc, #52]	@ (800d878 <rmw_init+0x20c>)
 800d844:	4621      	mov	r1, r4
 800d846:	f007 fedf 	bl	8015608 <put_memory>
 800d84a:	4638      	mov	r0, r7
 800d84c:	f8c6 804c 	str.w	r8, [r6, #76]	@ 0x4c
 800d850:	b003      	add	sp, #12
 800d852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d856:	4648      	mov	r0, r9
 800d858:	f001 f9d2 	bl	800ec00 <uxr_close_custom_transport>
 800d85c:	4806      	ldr	r0, [pc, #24]	@ (800d878 <rmw_init+0x20c>)
 800d85e:	4621      	mov	r1, r4
 800d860:	f007 fed2 	bl	8015608 <put_memory>
 800d864:	64f7      	str	r7, [r6, #76]	@ 0x4c
 800d866:	2701      	movs	r7, #1
 800d868:	e7d5      	b.n	800d816 <rmw_init+0x1aa>
 800d86a:	bf00      	nop
 800d86c:	08019730 	.word	0x08019730
 800d870:	2000b23c 	.word	0x2000b23c
 800d874:	200074e8 	.word	0x200074e8
 800d878:	2000b22c 	.word	0x2000b22c
 800d87c:	20008a90 	.word	0x20008a90
 800d880:	20006b0c 	.word	0x20006b0c
 800d884:	2000b1fc 	.word	0x2000b1fc
 800d888:	2000ab90 	.word	0x2000ab90
 800d88c:	2000b24c 	.word	0x2000b24c
 800d890:	20006bb0 	.word	0x20006bb0
 800d894:	2000b20c 	.word	0x2000b20c
 800d898:	20007420 	.word	0x20007420
 800d89c:	2000b21c 	.word	0x2000b21c
 800d8a0:	200066e8 	.word	0x200066e8
 800d8a4:	200066d4 	.word	0x200066d4
 800d8a8:	2000afc8 	.word	0x2000afc8
 800d8ac:	2000b25c 	.word	0x2000b25c
 800d8b0:	20006a88 	.word	0x20006a88
 800d8b4:	2000b1ec 	.word	0x2000b1ec
 800d8b8:	2000b16c 	.word	0x2000b16c
 800d8bc:	2000b26c 	.word	0x2000b26c
 800d8c0:	20006a08 	.word	0x20006a08
 800d8c4:	2000b1dc 	.word	0x2000b1dc
 800d8c8:	08015421 	.word	0x08015421
 800d8cc:	08015419 	.word	0x08015419
 800d8d0:	080154b9 	.word	0x080154b9
 800d8d4:	08015555 	.word	0x08015555

0800d8d8 <rmw_context_fini>:
 800d8d8:	4b17      	ldr	r3, [pc, #92]	@ (800d938 <rmw_context_fini+0x60>)
 800d8da:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d8dc:	b570      	push	{r4, r5, r6, lr}
 800d8de:	681c      	ldr	r4, [r3, #0]
 800d8e0:	4605      	mov	r5, r0
 800d8e2:	b334      	cbz	r4, 800d932 <rmw_context_fini+0x5a>
 800d8e4:	2600      	movs	r6, #0
 800d8e6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 800d8ea:	6902      	ldr	r2, [r0, #16]
 800d8ec:	428a      	cmp	r2, r1
 800d8ee:	d018      	beq.n	800d922 <rmw_context_fini+0x4a>
 800d8f0:	2c00      	cmp	r4, #0
 800d8f2:	d1f8      	bne.n	800d8e6 <rmw_context_fini+0xe>
 800d8f4:	b189      	cbz	r1, 800d91a <rmw_context_fini+0x42>
 800d8f6:	f8d1 3388 	ldr.w	r3, [r1, #904]	@ 0x388
 800d8fa:	789b      	ldrb	r3, [r3, #2]
 800d8fc:	2b01      	cmp	r3, #1
 800d8fe:	f501 7028 	add.w	r0, r1, #672	@ 0x2a0
 800d902:	bf14      	ite	ne
 800d904:	210a      	movne	r1, #10
 800d906:	2100      	moveq	r1, #0
 800d908:	f002 f8ca 	bl	800faa0 <uxr_delete_session_retries>
 800d90c:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d90e:	f000 fce9 	bl	800e2e4 <rmw_uxrce_fini_session_memory>
 800d912:	6ce8      	ldr	r0, [r5, #76]	@ 0x4c
 800d914:	3010      	adds	r0, #16
 800d916:	f001 f973 	bl	800ec00 <uxr_close_custom_transport>
 800d91a:	2300      	movs	r3, #0
 800d91c:	64eb      	str	r3, [r5, #76]	@ 0x4c
 800d91e:	4630      	mov	r0, r6
 800d920:	bd70      	pop	{r4, r5, r6, pc}
 800d922:	3018      	adds	r0, #24
 800d924:	f000 f89c 	bl	800da60 <rmw_destroy_node>
 800d928:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800d92a:	4606      	mov	r6, r0
 800d92c:	2c00      	cmp	r4, #0
 800d92e:	d1da      	bne.n	800d8e6 <rmw_context_fini+0xe>
 800d930:	e7e0      	b.n	800d8f4 <rmw_context_fini+0x1c>
 800d932:	4626      	mov	r6, r4
 800d934:	e7de      	b.n	800d8f4 <rmw_context_fini+0x1c>
 800d936:	bf00      	nop
 800d938:	2000b1fc 	.word	0x2000b1fc

0800d93c <create_node>:
 800d93c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d940:	b083      	sub	sp, #12
 800d942:	2b00      	cmp	r3, #0
 800d944:	d05f      	beq.n	800da06 <create_node+0xca>
 800d946:	4606      	mov	r6, r0
 800d948:	4835      	ldr	r0, [pc, #212]	@ (800da20 <create_node+0xe4>)
 800d94a:	460f      	mov	r7, r1
 800d94c:	4690      	mov	r8, r2
 800d94e:	461d      	mov	r5, r3
 800d950:	f007 fe4a 	bl	80155e8 <get_memory>
 800d954:	2800      	cmp	r0, #0
 800d956:	d056      	beq.n	800da06 <create_node+0xca>
 800d958:	6884      	ldr	r4, [r0, #8]
 800d95a:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800d95c:	6123      	str	r3, [r4, #16]
 800d95e:	f007 feab 	bl	80156b8 <rmw_get_implementation_identifier>
 800d962:	f104 092c 	add.w	r9, r4, #44	@ 0x2c
 800d966:	e9c4 0406 	strd	r0, r4, [r4, #24]
 800d96a:	f8c4 9020 	str.w	r9, [r4, #32]
 800d96e:	4630      	mov	r0, r6
 800d970:	f7f2 fc60 	bl	8000234 <strlen>
 800d974:	1c42      	adds	r2, r0, #1
 800d976:	2a3c      	cmp	r2, #60	@ 0x3c
 800d978:	f104 0518 	add.w	r5, r4, #24
 800d97c:	d840      	bhi.n	800da00 <create_node+0xc4>
 800d97e:	4648      	mov	r0, r9
 800d980:	4631      	mov	r1, r6
 800d982:	f104 0968 	add.w	r9, r4, #104	@ 0x68
 800d986:	f00a f9c0 	bl	8017d0a <memcpy>
 800d98a:	f8c4 9024 	str.w	r9, [r4, #36]	@ 0x24
 800d98e:	4638      	mov	r0, r7
 800d990:	f7f2 fc50 	bl	8000234 <strlen>
 800d994:	1c42      	adds	r2, r0, #1
 800d996:	2a3c      	cmp	r2, #60	@ 0x3c
 800d998:	d832      	bhi.n	800da00 <create_node+0xc4>
 800d99a:	4639      	mov	r1, r7
 800d99c:	4648      	mov	r0, r9
 800d99e:	f00a f9b4 	bl	8017d0a <memcpy>
 800d9a2:	6923      	ldr	r3, [r4, #16]
 800d9a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800d9a8:	2101      	movs	r1, #1
 800d9aa:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	@ 0x594
 800d9ae:	1842      	adds	r2, r0, r1
 800d9b0:	f8a3 2594 	strh.w	r2, [r3, #1428]	@ 0x594
 800d9b4:	f001 f928 	bl	800ec08 <uxr_object_id>
 800d9b8:	6160      	str	r0, [r4, #20]
 800d9ba:	783b      	ldrb	r3, [r7, #0]
 800d9bc:	2b2f      	cmp	r3, #47	@ 0x2f
 800d9be:	d127      	bne.n	800da10 <create_node+0xd4>
 800d9c0:	787b      	ldrb	r3, [r7, #1]
 800d9c2:	bb2b      	cbnz	r3, 800da10 <create_node+0xd4>
 800d9c4:	4a17      	ldr	r2, [pc, #92]	@ (800da24 <create_node+0xe8>)
 800d9c6:	4818      	ldr	r0, [pc, #96]	@ (800da28 <create_node+0xec>)
 800d9c8:	4633      	mov	r3, r6
 800d9ca:	213c      	movs	r1, #60	@ 0x3c
 800d9cc:	f009 fffa 	bl	80179c4 <sniprintf>
 800d9d0:	6920      	ldr	r0, [r4, #16]
 800d9d2:	4915      	ldr	r1, [pc, #84]	@ (800da28 <create_node+0xec>)
 800d9d4:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 800d9d8:	9100      	str	r1, [sp, #0]
 800d9da:	2106      	movs	r1, #6
 800d9dc:	9101      	str	r1, [sp, #4]
 800d9de:	6811      	ldr	r1, [r2, #0]
 800d9e0:	6962      	ldr	r2, [r4, #20]
 800d9e2:	fa1f f388 	uxth.w	r3, r8
 800d9e6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800d9ea:	f000 ff3d 	bl	800e868 <uxr_buffer_create_participant_bin>
 800d9ee:	4602      	mov	r2, r0
 800d9f0:	6920      	ldr	r0, [r4, #16]
 800d9f2:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800d9f6:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800d9fa:	f000 fdeb 	bl	800e5d4 <run_xrce_session>
 800d9fe:	b918      	cbnz	r0, 800da08 <create_node+0xcc>
 800da00:	4628      	mov	r0, r5
 800da02:	f000 fc75 	bl	800e2f0 <rmw_uxrce_fini_node_memory>
 800da06:	2500      	movs	r5, #0
 800da08:	4628      	mov	r0, r5
 800da0a:	b003      	add	sp, #12
 800da0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800da10:	4a06      	ldr	r2, [pc, #24]	@ (800da2c <create_node+0xf0>)
 800da12:	9600      	str	r6, [sp, #0]
 800da14:	463b      	mov	r3, r7
 800da16:	213c      	movs	r1, #60	@ 0x3c
 800da18:	4803      	ldr	r0, [pc, #12]	@ (800da28 <create_node+0xec>)
 800da1a:	f009 ffd3 	bl	80179c4 <sniprintf>
 800da1e:	e7d7      	b.n	800d9d0 <create_node+0x94>
 800da20:	2000b1fc 	.word	0x2000b1fc
 800da24:	08018fa4 	.word	0x08018fa4
 800da28:	20006698 	.word	0x20006698
 800da2c:	08018f8c 	.word	0x08018f8c

0800da30 <rmw_create_node>:
 800da30:	b199      	cbz	r1, 800da5a <rmw_create_node+0x2a>
 800da32:	780b      	ldrb	r3, [r1, #0]
 800da34:	468c      	mov	ip, r1
 800da36:	b183      	cbz	r3, 800da5a <rmw_create_node+0x2a>
 800da38:	b410      	push	{r4}
 800da3a:	4614      	mov	r4, r2
 800da3c:	b14a      	cbz	r2, 800da52 <rmw_create_node+0x22>
 800da3e:	7813      	ldrb	r3, [r2, #0]
 800da40:	b13b      	cbz	r3, 800da52 <rmw_create_node+0x22>
 800da42:	6c82      	ldr	r2, [r0, #72]	@ 0x48
 800da44:	4603      	mov	r3, r0
 800da46:	4621      	mov	r1, r4
 800da48:	4660      	mov	r0, ip
 800da4a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da4e:	f7ff bf75 	b.w	800d93c <create_node>
 800da52:	2000      	movs	r0, #0
 800da54:	f85d 4b04 	ldr.w	r4, [sp], #4
 800da58:	4770      	bx	lr
 800da5a:	2000      	movs	r0, #0
 800da5c:	4770      	bx	lr
 800da5e:	bf00      	nop

0800da60 <rmw_destroy_node>:
 800da60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da62:	b328      	cbz	r0, 800dab0 <rmw_destroy_node+0x50>
 800da64:	4607      	mov	r7, r0
 800da66:	6800      	ldr	r0, [r0, #0]
 800da68:	b120      	cbz	r0, 800da74 <rmw_destroy_node+0x14>
 800da6a:	4b36      	ldr	r3, [pc, #216]	@ (800db44 <rmw_destroy_node+0xe4>)
 800da6c:	6819      	ldr	r1, [r3, #0]
 800da6e:	f7f2 fbd7 	bl	8000220 <strcmp>
 800da72:	b9e8      	cbnz	r0, 800dab0 <rmw_destroy_node+0x50>
 800da74:	687d      	ldr	r5, [r7, #4]
 800da76:	b1dd      	cbz	r5, 800dab0 <rmw_destroy_node+0x50>
 800da78:	4b33      	ldr	r3, [pc, #204]	@ (800db48 <rmw_destroy_node+0xe8>)
 800da7a:	681c      	ldr	r4, [r3, #0]
 800da7c:	2c00      	cmp	r4, #0
 800da7e:	d05f      	beq.n	800db40 <rmw_destroy_node+0xe0>
 800da80:	2600      	movs	r6, #0
 800da82:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da86:	f8d1 3080 	ldr.w	r3, [r1, #128]	@ 0x80
 800da8a:	429d      	cmp	r5, r3
 800da8c:	d013      	beq.n	800dab6 <rmw_destroy_node+0x56>
 800da8e:	2c00      	cmp	r4, #0
 800da90:	d1f7      	bne.n	800da82 <rmw_destroy_node+0x22>
 800da92:	4b2e      	ldr	r3, [pc, #184]	@ (800db4c <rmw_destroy_node+0xec>)
 800da94:	681c      	ldr	r4, [r3, #0]
 800da96:	b1c4      	cbz	r4, 800daca <rmw_destroy_node+0x6a>
 800da98:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800da9c:	6a0b      	ldr	r3, [r1, #32]
 800da9e:	429d      	cmp	r5, r3
 800daa0:	d1f9      	bne.n	800da96 <rmw_destroy_node+0x36>
 800daa2:	317c      	adds	r1, #124	@ 0x7c
 800daa4:	4638      	mov	r0, r7
 800daa6:	f000 fa45 	bl	800df34 <rmw_destroy_subscription>
 800daaa:	2801      	cmp	r0, #1
 800daac:	4606      	mov	r6, r0
 800daae:	d1f2      	bne.n	800da96 <rmw_destroy_node+0x36>
 800dab0:	2601      	movs	r6, #1
 800dab2:	4630      	mov	r0, r6
 800dab4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dab6:	3184      	adds	r1, #132	@ 0x84
 800dab8:	4638      	mov	r0, r7
 800daba:	f000 f9a5 	bl	800de08 <rmw_destroy_publisher>
 800dabe:	2801      	cmp	r0, #1
 800dac0:	4606      	mov	r6, r0
 800dac2:	d0f5      	beq.n	800dab0 <rmw_destroy_node+0x50>
 800dac4:	2c00      	cmp	r4, #0
 800dac6:	d1dc      	bne.n	800da82 <rmw_destroy_node+0x22>
 800dac8:	e7e3      	b.n	800da92 <rmw_destroy_node+0x32>
 800daca:	4b21      	ldr	r3, [pc, #132]	@ (800db50 <rmw_destroy_node+0xf0>)
 800dacc:	681c      	ldr	r4, [r3, #0]
 800dace:	b16c      	cbz	r4, 800daec <rmw_destroy_node+0x8c>
 800dad0:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800dad4:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800dad6:	429d      	cmp	r5, r3
 800dad8:	d1f9      	bne.n	800dace <rmw_destroy_node+0x6e>
 800dada:	317c      	adds	r1, #124	@ 0x7c
 800dadc:	4638      	mov	r0, r7
 800dade:	f000 f9e5 	bl	800deac <rmw_destroy_service>
 800dae2:	2801      	cmp	r0, #1
 800dae4:	4606      	mov	r6, r0
 800dae6:	d0e3      	beq.n	800dab0 <rmw_destroy_node+0x50>
 800dae8:	2c00      	cmp	r4, #0
 800daea:	d1f1      	bne.n	800dad0 <rmw_destroy_node+0x70>
 800daec:	4b19      	ldr	r3, [pc, #100]	@ (800db54 <rmw_destroy_node+0xf4>)
 800daee:	681c      	ldr	r4, [r3, #0]
 800daf0:	b16c      	cbz	r4, 800db0e <rmw_destroy_node+0xae>
 800daf2:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 800daf6:	6f8b      	ldr	r3, [r1, #120]	@ 0x78
 800daf8:	429d      	cmp	r5, r3
 800dafa:	d1f9      	bne.n	800daf0 <rmw_destroy_node+0x90>
 800dafc:	317c      	adds	r1, #124	@ 0x7c
 800dafe:	4638      	mov	r0, r7
 800db00:	f007 fd96 	bl	8015630 <rmw_destroy_client>
 800db04:	2801      	cmp	r0, #1
 800db06:	4606      	mov	r6, r0
 800db08:	d0d2      	beq.n	800dab0 <rmw_destroy_node+0x50>
 800db0a:	2c00      	cmp	r4, #0
 800db0c:	d1f1      	bne.n	800daf2 <rmw_destroy_node+0x92>
 800db0e:	6928      	ldr	r0, [r5, #16]
 800db10:	696a      	ldr	r2, [r5, #20]
 800db12:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800db16:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800db1a:	6819      	ldr	r1, [r3, #0]
 800db1c:	f000 fe58 	bl	800e7d0 <uxr_buffer_delete_entity>
 800db20:	4602      	mov	r2, r0
 800db22:	6928      	ldr	r0, [r5, #16]
 800db24:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800db28:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800db2c:	f000 fd52 	bl	800e5d4 <run_xrce_session>
 800db30:	2800      	cmp	r0, #0
 800db32:	bf08      	it	eq
 800db34:	2602      	moveq	r6, #2
 800db36:	4638      	mov	r0, r7
 800db38:	f000 fbda 	bl	800e2f0 <rmw_uxrce_fini_node_memory>
 800db3c:	4630      	mov	r0, r6
 800db3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db40:	4626      	mov	r6, r4
 800db42:	e7a6      	b.n	800da92 <rmw_destroy_node+0x32>
 800db44:	08019730 	.word	0x08019730
 800db48:	2000b20c 	.word	0x2000b20c
 800db4c:	2000b24c 	.word	0x2000b24c
 800db50:	2000b21c 	.word	0x2000b21c
 800db54:	200066d4 	.word	0x200066d4

0800db58 <rmw_node_get_graph_guard_condition>:
 800db58:	6843      	ldr	r3, [r0, #4]
 800db5a:	6918      	ldr	r0, [r3, #16]
 800db5c:	f500 705a 	add.w	r0, r0, #872	@ 0x368
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop

0800db64 <flush_session>:
 800db64:	6fc9      	ldr	r1, [r1, #124]	@ 0x7c
 800db66:	f001 be53 	b.w	800f810 <uxr_run_session_until_confirm_delivery>
 800db6a:	bf00      	nop

0800db6c <rmw_publish>:
 800db6c:	2800      	cmp	r0, #0
 800db6e:	d053      	beq.n	800dc18 <rmw_publish+0xac>
 800db70:	b570      	push	{r4, r5, r6, lr}
 800db72:	460d      	mov	r5, r1
 800db74:	b08e      	sub	sp, #56	@ 0x38
 800db76:	2900      	cmp	r1, #0
 800db78:	d04b      	beq.n	800dc12 <rmw_publish+0xa6>
 800db7a:	4604      	mov	r4, r0
 800db7c:	6800      	ldr	r0, [r0, #0]
 800db7e:	f000 fda9 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800db82:	2800      	cmp	r0, #0
 800db84:	d045      	beq.n	800dc12 <rmw_publish+0xa6>
 800db86:	6866      	ldr	r6, [r4, #4]
 800db88:	2e00      	cmp	r6, #0
 800db8a:	d042      	beq.n	800dc12 <rmw_publish+0xa6>
 800db8c:	69b4      	ldr	r4, [r6, #24]
 800db8e:	4628      	mov	r0, r5
 800db90:	6923      	ldr	r3, [r4, #16]
 800db92:	4798      	blx	r3
 800db94:	69f3      	ldr	r3, [r6, #28]
 800db96:	9005      	str	r0, [sp, #20]
 800db98:	b113      	cbz	r3, 800dba0 <rmw_publish+0x34>
 800db9a:	a805      	add	r0, sp, #20
 800db9c:	4798      	blx	r3
 800db9e:	9805      	ldr	r0, [sp, #20]
 800dba0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dba4:	691b      	ldr	r3, [r3, #16]
 800dba6:	9000      	str	r0, [sp, #0]
 800dba8:	6972      	ldr	r2, [r6, #20]
 800dbaa:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dbac:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dbb0:	ab06      	add	r3, sp, #24
 800dbb2:	f003 f8ab 	bl	8010d0c <uxr_prepare_output_stream>
 800dbb6:	b1d8      	cbz	r0, 800dbf0 <rmw_publish+0x84>
 800dbb8:	68a3      	ldr	r3, [r4, #8]
 800dbba:	a906      	add	r1, sp, #24
 800dbbc:	4628      	mov	r0, r5
 800dbbe:	4798      	blx	r3
 800dbc0:	6a33      	ldr	r3, [r6, #32]
 800dbc2:	4604      	mov	r4, r0
 800dbc4:	b10b      	cbz	r3, 800dbca <rmw_publish+0x5e>
 800dbc6:	a806      	add	r0, sp, #24
 800dbc8:	4798      	blx	r3
 800dbca:	f896 307a 	ldrb.w	r3, [r6, #122]	@ 0x7a
 800dbce:	2b01      	cmp	r3, #1
 800dbd0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dbd4:	d022      	beq.n	800dc1c <rmw_publish+0xb0>
 800dbd6:	6918      	ldr	r0, [r3, #16]
 800dbd8:	6ff1      	ldr	r1, [r6, #124]	@ 0x7c
 800dbda:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dbde:	f001 fe17 	bl	800f810 <uxr_run_session_until_confirm_delivery>
 800dbe2:	4020      	ands	r0, r4
 800dbe4:	b2c4      	uxtb	r4, r0
 800dbe6:	f084 0001 	eor.w	r0, r4, #1
 800dbea:	b2c0      	uxtb	r0, r0
 800dbec:	b00e      	add	sp, #56	@ 0x38
 800dbee:	bd70      	pop	{r4, r5, r6, pc}
 800dbf0:	f8d6 3080 	ldr.w	r3, [r6, #128]	@ 0x80
 800dbf4:	6918      	ldr	r0, [r3, #16]
 800dbf6:	9b05      	ldr	r3, [sp, #20]
 800dbf8:	9300      	str	r3, [sp, #0]
 800dbfa:	4b0b      	ldr	r3, [pc, #44]	@ (800dc28 <rmw_publish+0xbc>)
 800dbfc:	9301      	str	r3, [sp, #4]
 800dbfe:	9602      	str	r6, [sp, #8]
 800dc00:	6972      	ldr	r2, [r6, #20]
 800dc02:	6fb1      	ldr	r1, [r6, #120]	@ 0x78
 800dc04:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc08:	ab06      	add	r3, sp, #24
 800dc0a:	f003 f8af 	bl	8010d6c <uxr_prepare_output_stream_fragmented>
 800dc0e:	2800      	cmp	r0, #0
 800dc10:	d1d2      	bne.n	800dbb8 <rmw_publish+0x4c>
 800dc12:	2001      	movs	r0, #1
 800dc14:	b00e      	add	sp, #56	@ 0x38
 800dc16:	bd70      	pop	{r4, r5, r6, pc}
 800dc18:	2001      	movs	r0, #1
 800dc1a:	4770      	bx	lr
 800dc1c:	6918      	ldr	r0, [r3, #16]
 800dc1e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dc22:	f001 fa35 	bl	800f090 <uxr_flash_output_streams>
 800dc26:	e7de      	b.n	800dbe6 <rmw_publish+0x7a>
 800dc28:	0800db65 	.word	0x0800db65

0800dc2c <rmw_create_publisher>:
 800dc2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	b087      	sub	sp, #28
 800dc32:	2800      	cmp	r0, #0
 800dc34:	f000 80cc 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc38:	460e      	mov	r6, r1
 800dc3a:	2900      	cmp	r1, #0
 800dc3c:	f000 80c8 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc40:	4604      	mov	r4, r0
 800dc42:	6800      	ldr	r0, [r0, #0]
 800dc44:	4615      	mov	r5, r2
 800dc46:	4698      	mov	r8, r3
 800dc48:	f000 fd44 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800dc4c:	2800      	cmp	r0, #0
 800dc4e:	f000 80bf 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc52:	2d00      	cmp	r5, #0
 800dc54:	f000 80bc 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc58:	782b      	ldrb	r3, [r5, #0]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	f000 80b8 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc60:	f1b8 0f00 	cmp.w	r8, #0
 800dc64:	f000 80b4 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc68:	485c      	ldr	r0, [pc, #368]	@ (800dddc <rmw_create_publisher+0x1b0>)
 800dc6a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800dc6e:	f007 fcbb 	bl	80155e8 <get_memory>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	f000 80ac 	beq.w	800ddd0 <rmw_create_publisher+0x1a4>
 800dc78:	6884      	ldr	r4, [r0, #8]
 800dc7a:	f8c4 4088 	str.w	r4, [r4, #136]	@ 0x88
 800dc7e:	f007 fd1b 	bl	80156b8 <rmw_get_implementation_identifier>
 800dc82:	f104 0a9c 	add.w	sl, r4, #156	@ 0x9c
 800dc86:	f8c4 0084 	str.w	r0, [r4, #132]	@ 0x84
 800dc8a:	f8c4 a08c 	str.w	sl, [r4, #140]	@ 0x8c
 800dc8e:	4628      	mov	r0, r5
 800dc90:	f7f2 fad0 	bl	8000234 <strlen>
 800dc94:	3001      	adds	r0, #1
 800dc96:	283c      	cmp	r0, #60	@ 0x3c
 800dc98:	f104 0784 	add.w	r7, r4, #132	@ 0x84
 800dc9c:	f200 8091 	bhi.w	800ddc2 <rmw_create_publisher+0x196>
 800dca0:	4a4f      	ldr	r2, [pc, #316]	@ (800dde0 <rmw_create_publisher+0x1b4>)
 800dca2:	462b      	mov	r3, r5
 800dca4:	213c      	movs	r1, #60	@ 0x3c
 800dca6:	4650      	mov	r0, sl
 800dca8:	f009 fe8c 	bl	80179c4 <sniprintf>
 800dcac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800dcb0:	67e3      	str	r3, [r4, #124]	@ 0x7c
 800dcb2:	4641      	mov	r1, r8
 800dcb4:	f8c4 9080 	str.w	r9, [r4, #128]	@ 0x80
 800dcb8:	2250      	movs	r2, #80	@ 0x50
 800dcba:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 800dcbe:	f00a f824 	bl	8017d0a <memcpy>
 800dcc2:	f898 3008 	ldrb.w	r3, [r8, #8]
 800dcc6:	4947      	ldr	r1, [pc, #284]	@ (800dde4 <rmw_create_publisher+0x1b8>)
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dcce:	bf0c      	ite	eq
 800dcd0:	f8d3 337c 	ldreq.w	r3, [r3, #892]	@ 0x37c
 800dcd4:	f8d3 3378 	ldrne.w	r3, [r3, #888]	@ 0x378
 800dcd8:	67a3      	str	r3, [r4, #120]	@ 0x78
 800dcda:	2300      	movs	r3, #0
 800dcdc:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800dce0:	4630      	mov	r0, r6
 800dce2:	f000 fd05 	bl	800e6f0 <get_message_typesupport_handle>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	d06b      	beq.n	800ddc2 <rmw_create_publisher+0x196>
 800dcea:	6842      	ldr	r2, [r0, #4]
 800dcec:	61a2      	str	r2, [r4, #24]
 800dcee:	2a00      	cmp	r2, #0
 800dcf0:	d067      	beq.n	800ddc2 <rmw_create_publisher+0x196>
 800dcf2:	4629      	mov	r1, r5
 800dcf4:	4643      	mov	r3, r8
 800dcf6:	4648      	mov	r0, r9
 800dcf8:	f007 fce4 	bl	80156c4 <create_topic>
 800dcfc:	6260      	str	r0, [r4, #36]	@ 0x24
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d063      	beq.n	800ddca <rmw_create_publisher+0x19e>
 800dd02:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd0a:	2103      	movs	r1, #3
 800dd0c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	@ 0x598
 800dd10:	1c42      	adds	r2, r0, #1
 800dd12:	f8a3 2598 	strh.w	r2, [r3, #1432]	@ 0x598
 800dd16:	f000 ff77 	bl	800ec08 <uxr_object_id>
 800dd1a:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
 800dd1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd22:	6120      	str	r0, [r4, #16]
 800dd24:	f8d3 3384 	ldr.w	r3, [r3, #900]	@ 0x384
 800dd28:	6910      	ldr	r0, [r2, #16]
 800dd2a:	2506      	movs	r5, #6
 800dd2c:	9500      	str	r5, [sp, #0]
 800dd2e:	6819      	ldr	r1, [r3, #0]
 800dd30:	6922      	ldr	r2, [r4, #16]
 800dd32:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800dd36:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800dd3a:	f000 fdfd 	bl	800e938 <uxr_buffer_create_publisher_bin>
 800dd3e:	4602      	mov	r2, r0
 800dd40:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800dd44:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800dd48:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800dd4c:	f000 fc42 	bl	800e5d4 <run_xrce_session>
 800dd50:	b3b8      	cbz	r0, 800ddc2 <rmw_create_publisher+0x196>
 800dd52:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd56:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800dd5a:	2105      	movs	r1, #5
 800dd5c:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	@ 0x59a
 800dd60:	1c42      	adds	r2, r0, #1
 800dd62:	f8a3 259a 	strh.w	r2, [r3, #1434]	@ 0x59a
 800dd66:	f000 ff4f 	bl	800ec08 <uxr_object_id>
 800dd6a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800dd6e:	6160      	str	r0, [r4, #20]
 800dd70:	691e      	ldr	r6, [r3, #16]
 800dd72:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dd76:	f8d4 b024 	ldr.w	fp, [r4, #36]	@ 0x24
 800dd7a:	f10d 0a10 	add.w	sl, sp, #16
 800dd7e:	4641      	mov	r1, r8
 800dd80:	4650      	mov	r0, sl
 800dd82:	f8d3 8384 	ldr.w	r8, [r3, #900]	@ 0x384
 800dd86:	f000 fc41 	bl	800e60c <convert_qos_profile>
 800dd8a:	9503      	str	r5, [sp, #12]
 800dd8c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800dd90:	9001      	str	r0, [sp, #4]
 800dd92:	f8ad 1008 	strh.w	r1, [sp, #8]
 800dd96:	f8db 3010 	ldr.w	r3, [fp, #16]
 800dd9a:	9300      	str	r3, [sp, #0]
 800dd9c:	f506 7628 	add.w	r6, r6, #672	@ 0x2a0
 800dda0:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800dda4:	f8d8 1000 	ldr.w	r1, [r8]
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f000 fdf5 	bl	800e998 <uxr_buffer_create_datawriter_bin>
 800ddae:	4602      	mov	r2, r0
 800ddb0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800ddb4:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 800ddb8:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 800ddbc:	f000 fc0a 	bl	800e5d4 <run_xrce_session>
 800ddc0:	b938      	cbnz	r0, 800ddd2 <rmw_create_publisher+0x1a6>
 800ddc2:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800ddc4:	b108      	cbz	r0, 800ddca <rmw_create_publisher+0x19e>
 800ddc6:	f000 fb03 	bl	800e3d0 <rmw_uxrce_fini_topic_memory>
 800ddca:	4638      	mov	r0, r7
 800ddcc:	f000 faa8 	bl	800e320 <rmw_uxrce_fini_publisher_memory>
 800ddd0:	2700      	movs	r7, #0
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	b007      	add	sp, #28
 800ddd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddda:	bf00      	nop
 800dddc:	2000b20c 	.word	0x2000b20c
 800dde0:	08018fa4 	.word	0x08018fa4
 800dde4:	08018d78 	.word	0x08018d78

0800dde8 <rmw_publisher_get_actual_qos>:
 800dde8:	b150      	cbz	r0, 800de00 <rmw_publisher_get_actual_qos+0x18>
 800ddea:	b508      	push	{r3, lr}
 800ddec:	460b      	mov	r3, r1
 800ddee:	b149      	cbz	r1, 800de04 <rmw_publisher_get_actual_qos+0x1c>
 800ddf0:	6841      	ldr	r1, [r0, #4]
 800ddf2:	2250      	movs	r2, #80	@ 0x50
 800ddf4:	3128      	adds	r1, #40	@ 0x28
 800ddf6:	4618      	mov	r0, r3
 800ddf8:	f009 ff87 	bl	8017d0a <memcpy>
 800ddfc:	2000      	movs	r0, #0
 800ddfe:	bd08      	pop	{r3, pc}
 800de00:	200b      	movs	r0, #11
 800de02:	4770      	bx	lr
 800de04:	200b      	movs	r0, #11
 800de06:	bd08      	pop	{r3, pc}

0800de08 <rmw_destroy_publisher>:
 800de08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de0a:	b128      	cbz	r0, 800de18 <rmw_destroy_publisher+0x10>
 800de0c:	4604      	mov	r4, r0
 800de0e:	6800      	ldr	r0, [r0, #0]
 800de10:	460d      	mov	r5, r1
 800de12:	f000 fc5f 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800de16:	b910      	cbnz	r0, 800de1e <rmw_destroy_publisher+0x16>
 800de18:	2401      	movs	r4, #1
 800de1a:	4620      	mov	r0, r4
 800de1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de1e:	6863      	ldr	r3, [r4, #4]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d0f9      	beq.n	800de18 <rmw_destroy_publisher+0x10>
 800de24:	2d00      	cmp	r5, #0
 800de26:	d0f7      	beq.n	800de18 <rmw_destroy_publisher+0x10>
 800de28:	6828      	ldr	r0, [r5, #0]
 800de2a:	f000 fc53 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d0f2      	beq.n	800de18 <rmw_destroy_publisher+0x10>
 800de32:	686c      	ldr	r4, [r5, #4]
 800de34:	2c00      	cmp	r4, #0
 800de36:	d0ef      	beq.n	800de18 <rmw_destroy_publisher+0x10>
 800de38:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 800de3a:	f8d4 7080 	ldr.w	r7, [r4, #128]	@ 0x80
 800de3e:	f007 fc91 	bl	8015764 <destroy_topic>
 800de42:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de46:	6962      	ldr	r2, [r4, #20]
 800de48:	6918      	ldr	r0, [r3, #16]
 800de4a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800de4e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800de52:	6819      	ldr	r1, [r3, #0]
 800de54:	f000 fcbc 	bl	800e7d0 <uxr_buffer_delete_entity>
 800de58:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 800de5c:	6922      	ldr	r2, [r4, #16]
 800de5e:	691b      	ldr	r3, [r3, #16]
 800de60:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800de64:	4604      	mov	r4, r0
 800de66:	6809      	ldr	r1, [r1, #0]
 800de68:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800de6c:	f000 fcb0 	bl	800e7d0 <uxr_buffer_delete_entity>
 800de70:	693e      	ldr	r6, [r7, #16]
 800de72:	4622      	mov	r2, r4
 800de74:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de78:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de7c:	4604      	mov	r4, r0
 800de7e:	4630      	mov	r0, r6
 800de80:	f000 fba8 	bl	800e5d4 <run_xrce_session>
 800de84:	693e      	ldr	r6, [r7, #16]
 800de86:	4622      	mov	r2, r4
 800de88:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800de8c:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800de90:	4604      	mov	r4, r0
 800de92:	4630      	mov	r0, r6
 800de94:	f000 fb9e 	bl	800e5d4 <run_xrce_session>
 800de98:	b12c      	cbz	r4, 800dea6 <rmw_destroy_publisher+0x9e>
 800de9a:	b120      	cbz	r0, 800dea6 <rmw_destroy_publisher+0x9e>
 800de9c:	2400      	movs	r4, #0
 800de9e:	4628      	mov	r0, r5
 800dea0:	f000 fa3e 	bl	800e320 <rmw_uxrce_fini_publisher_memory>
 800dea4:	e7b9      	b.n	800de1a <rmw_destroy_publisher+0x12>
 800dea6:	2402      	movs	r4, #2
 800dea8:	e7f9      	b.n	800de9e <rmw_destroy_publisher+0x96>
 800deaa:	bf00      	nop

0800deac <rmw_destroy_service>:
 800deac:	b570      	push	{r4, r5, r6, lr}
 800deae:	b128      	cbz	r0, 800debc <rmw_destroy_service+0x10>
 800deb0:	4604      	mov	r4, r0
 800deb2:	6800      	ldr	r0, [r0, #0]
 800deb4:	460d      	mov	r5, r1
 800deb6:	f000 fc0d 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800deba:	b910      	cbnz	r0, 800dec2 <rmw_destroy_service+0x16>
 800debc:	2401      	movs	r4, #1
 800debe:	4620      	mov	r0, r4
 800dec0:	bd70      	pop	{r4, r5, r6, pc}
 800dec2:	6863      	ldr	r3, [r4, #4]
 800dec4:	2b00      	cmp	r3, #0
 800dec6:	d0f9      	beq.n	800debc <rmw_destroy_service+0x10>
 800dec8:	2d00      	cmp	r5, #0
 800deca:	d0f7      	beq.n	800debc <rmw_destroy_service+0x10>
 800decc:	6828      	ldr	r0, [r5, #0]
 800dece:	f000 fc01 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800ded2:	2800      	cmp	r0, #0
 800ded4:	d0f2      	beq.n	800debc <rmw_destroy_service+0x10>
 800ded6:	686e      	ldr	r6, [r5, #4]
 800ded8:	2e00      	cmp	r6, #0
 800deda:	d0ef      	beq.n	800debc <rmw_destroy_service+0x10>
 800dedc:	6864      	ldr	r4, [r4, #4]
 800dede:	6932      	ldr	r2, [r6, #16]
 800dee0:	6920      	ldr	r0, [r4, #16]
 800dee2:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800dee6:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800deea:	6819      	ldr	r1, [r3, #0]
 800deec:	f000 febc 	bl	800ec68 <uxr_buffer_cancel_data>
 800def0:	4602      	mov	r2, r0
 800def2:	6920      	ldr	r0, [r4, #16]
 800def4:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800def8:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800defc:	f000 fb6a 	bl	800e5d4 <run_xrce_session>
 800df00:	6920      	ldr	r0, [r4, #16]
 800df02:	6932      	ldr	r2, [r6, #16]
 800df04:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df08:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df0c:	6819      	ldr	r1, [r3, #0]
 800df0e:	f000 fc5f 	bl	800e7d0 <uxr_buffer_delete_entity>
 800df12:	4602      	mov	r2, r0
 800df14:	6920      	ldr	r0, [r4, #16]
 800df16:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df1a:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df1e:	f000 fb59 	bl	800e5d4 <run_xrce_session>
 800df22:	2800      	cmp	r0, #0
 800df24:	4628      	mov	r0, r5
 800df26:	bf14      	ite	ne
 800df28:	2400      	movne	r4, #0
 800df2a:	2402      	moveq	r4, #2
 800df2c:	f000 fa24 	bl	800e378 <rmw_uxrce_fini_service_memory>
 800df30:	e7c5      	b.n	800debe <rmw_destroy_service+0x12>
 800df32:	bf00      	nop

0800df34 <rmw_destroy_subscription>:
 800df34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800df36:	b128      	cbz	r0, 800df44 <rmw_destroy_subscription+0x10>
 800df38:	4604      	mov	r4, r0
 800df3a:	6800      	ldr	r0, [r0, #0]
 800df3c:	460d      	mov	r5, r1
 800df3e:	f000 fbc9 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800df42:	b910      	cbnz	r0, 800df4a <rmw_destroy_subscription+0x16>
 800df44:	2401      	movs	r4, #1
 800df46:	4620      	mov	r0, r4
 800df48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800df4a:	6863      	ldr	r3, [r4, #4]
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d0f9      	beq.n	800df44 <rmw_destroy_subscription+0x10>
 800df50:	2d00      	cmp	r5, #0
 800df52:	d0f7      	beq.n	800df44 <rmw_destroy_subscription+0x10>
 800df54:	6828      	ldr	r0, [r5, #0]
 800df56:	f000 fbbd 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 800df5a:	2800      	cmp	r0, #0
 800df5c:	d0f2      	beq.n	800df44 <rmw_destroy_subscription+0x10>
 800df5e:	686c      	ldr	r4, [r5, #4]
 800df60:	2c00      	cmp	r4, #0
 800df62:	d0ef      	beq.n	800df44 <rmw_destroy_subscription+0x10>
 800df64:	6a26      	ldr	r6, [r4, #32]
 800df66:	6962      	ldr	r2, [r4, #20]
 800df68:	6930      	ldr	r0, [r6, #16]
 800df6a:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df6e:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df72:	6819      	ldr	r1, [r3, #0]
 800df74:	f000 fe78 	bl	800ec68 <uxr_buffer_cancel_data>
 800df78:	4602      	mov	r2, r0
 800df7a:	6930      	ldr	r0, [r6, #16]
 800df7c:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 800df80:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 800df84:	f000 fb26 	bl	800e5d4 <run_xrce_session>
 800df88:	69e0      	ldr	r0, [r4, #28]
 800df8a:	f007 fbeb 	bl	8015764 <destroy_topic>
 800df8e:	6a23      	ldr	r3, [r4, #32]
 800df90:	6962      	ldr	r2, [r4, #20]
 800df92:	6918      	ldr	r0, [r3, #16]
 800df94:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 800df98:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800df9c:	6819      	ldr	r1, [r3, #0]
 800df9e:	f000 fc17 	bl	800e7d0 <uxr_buffer_delete_entity>
 800dfa2:	6a23      	ldr	r3, [r4, #32]
 800dfa4:	6922      	ldr	r2, [r4, #16]
 800dfa6:	691b      	ldr	r3, [r3, #16]
 800dfa8:	f8d3 1388 	ldr.w	r1, [r3, #904]	@ 0x388
 800dfac:	4604      	mov	r4, r0
 800dfae:	6809      	ldr	r1, [r1, #0]
 800dfb0:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 800dfb4:	f000 fc0c 	bl	800e7d0 <uxr_buffer_delete_entity>
 800dfb8:	6937      	ldr	r7, [r6, #16]
 800dfba:	4622      	mov	r2, r4
 800dfbc:	f8d7 3390 	ldr.w	r3, [r7, #912]	@ 0x390
 800dfc0:	f8d7 1388 	ldr.w	r1, [r7, #904]	@ 0x388
 800dfc4:	4604      	mov	r4, r0
 800dfc6:	4638      	mov	r0, r7
 800dfc8:	f000 fb04 	bl	800e5d4 <run_xrce_session>
 800dfcc:	6936      	ldr	r6, [r6, #16]
 800dfce:	4622      	mov	r2, r4
 800dfd0:	f8d6 3390 	ldr.w	r3, [r6, #912]	@ 0x390
 800dfd4:	f8d6 1388 	ldr.w	r1, [r6, #904]	@ 0x388
 800dfd8:	4604      	mov	r4, r0
 800dfda:	4630      	mov	r0, r6
 800dfdc:	f000 fafa 	bl	800e5d4 <run_xrce_session>
 800dfe0:	b12c      	cbz	r4, 800dfee <rmw_destroy_subscription+0xba>
 800dfe2:	b120      	cbz	r0, 800dfee <rmw_destroy_subscription+0xba>
 800dfe4:	2400      	movs	r4, #0
 800dfe6:	4628      	mov	r0, r5
 800dfe8:	f000 f9b0 	bl	800e34c <rmw_uxrce_fini_subscription_memory>
 800dfec:	e7ab      	b.n	800df46 <rmw_destroy_subscription+0x12>
 800dfee:	2402      	movs	r4, #2
 800dff0:	e7f9      	b.n	800dfe6 <rmw_destroy_subscription+0xb2>
 800dff2:	bf00      	nop

0800dff4 <rmw_uxrce_transport_init>:
 800dff4:	b508      	push	{r3, lr}
 800dff6:	b108      	cbz	r0, 800dffc <rmw_uxrce_transport_init+0x8>
 800dff8:	f100 0210 	add.w	r2, r0, #16
 800dffc:	b139      	cbz	r1, 800e00e <rmw_uxrce_transport_init+0x1a>
 800dffe:	6949      	ldr	r1, [r1, #20]
 800e000:	4610      	mov	r0, r2
 800e002:	f000 fdc9 	bl	800eb98 <uxr_init_custom_transport>
 800e006:	f080 0001 	eor.w	r0, r0, #1
 800e00a:	b2c0      	uxtb	r0, r0
 800e00c:	bd08      	pop	{r3, pc}
 800e00e:	4b04      	ldr	r3, [pc, #16]	@ (800e020 <rmw_uxrce_transport_init+0x2c>)
 800e010:	4610      	mov	r0, r2
 800e012:	6859      	ldr	r1, [r3, #4]
 800e014:	f000 fdc0 	bl	800eb98 <uxr_init_custom_transport>
 800e018:	f080 0001 	eor.w	r0, r0, #1
 800e01c:	b2c0      	uxtb	r0, r0
 800e01e:	bd08      	pop	{r3, pc}
 800e020:	2000667c 	.word	0x2000667c

0800e024 <rmw_uxrce_init_service_memory>:
 800e024:	b1e2      	cbz	r2, 800e060 <rmw_uxrce_init_service_memory+0x3c>
 800e026:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e02a:	7b05      	ldrb	r5, [r0, #12]
 800e02c:	4606      	mov	r6, r0
 800e02e:	b9ad      	cbnz	r5, 800e05c <rmw_uxrce_init_service_memory+0x38>
 800e030:	23c8      	movs	r3, #200	@ 0xc8
 800e032:	e9c0 5500 	strd	r5, r5, [r0]
 800e036:	6083      	str	r3, [r0, #8]
 800e038:	f240 1301 	movw	r3, #257	@ 0x101
 800e03c:	4617      	mov	r7, r2
 800e03e:	8183      	strh	r3, [r0, #12]
 800e040:	460c      	mov	r4, r1
 800e042:	46a8      	mov	r8, r5
 800e044:	4621      	mov	r1, r4
 800e046:	4630      	mov	r0, r6
 800e048:	3501      	adds	r5, #1
 800e04a:	f007 fadd 	bl	8015608 <put_memory>
 800e04e:	42af      	cmp	r7, r5
 800e050:	60a4      	str	r4, [r4, #8]
 800e052:	f884 800c 	strb.w	r8, [r4, #12]
 800e056:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e05a:	d1f3      	bne.n	800e044 <rmw_uxrce_init_service_memory+0x20>
 800e05c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e060:	4770      	bx	lr
 800e062:	bf00      	nop

0800e064 <rmw_uxrce_init_client_memory>:
 800e064:	b1e2      	cbz	r2, 800e0a0 <rmw_uxrce_init_client_memory+0x3c>
 800e066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e06a:	7b05      	ldrb	r5, [r0, #12]
 800e06c:	4606      	mov	r6, r0
 800e06e:	b9ad      	cbnz	r5, 800e09c <rmw_uxrce_init_client_memory+0x38>
 800e070:	23c8      	movs	r3, #200	@ 0xc8
 800e072:	e9c0 5500 	strd	r5, r5, [r0]
 800e076:	6083      	str	r3, [r0, #8]
 800e078:	f240 1301 	movw	r3, #257	@ 0x101
 800e07c:	4617      	mov	r7, r2
 800e07e:	8183      	strh	r3, [r0, #12]
 800e080:	460c      	mov	r4, r1
 800e082:	46a8      	mov	r8, r5
 800e084:	4621      	mov	r1, r4
 800e086:	4630      	mov	r0, r6
 800e088:	3501      	adds	r5, #1
 800e08a:	f007 fabd 	bl	8015608 <put_memory>
 800e08e:	42af      	cmp	r7, r5
 800e090:	60a4      	str	r4, [r4, #8]
 800e092:	f884 800c 	strb.w	r8, [r4, #12]
 800e096:	f104 04c8 	add.w	r4, r4, #200	@ 0xc8
 800e09a:	d1f3      	bne.n	800e084 <rmw_uxrce_init_client_memory+0x20>
 800e09c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0a0:	4770      	bx	lr
 800e0a2:	bf00      	nop

0800e0a4 <rmw_uxrce_init_publisher_memory>:
 800e0a4:	b1e2      	cbz	r2, 800e0e0 <rmw_uxrce_init_publisher_memory+0x3c>
 800e0a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0aa:	7b05      	ldrb	r5, [r0, #12]
 800e0ac:	4606      	mov	r6, r0
 800e0ae:	b9ad      	cbnz	r5, 800e0dc <rmw_uxrce_init_publisher_memory+0x38>
 800e0b0:	23d8      	movs	r3, #216	@ 0xd8
 800e0b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e0b6:	6083      	str	r3, [r0, #8]
 800e0b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e0bc:	4617      	mov	r7, r2
 800e0be:	8183      	strh	r3, [r0, #12]
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	46a8      	mov	r8, r5
 800e0c4:	4621      	mov	r1, r4
 800e0c6:	4630      	mov	r0, r6
 800e0c8:	3501      	adds	r5, #1
 800e0ca:	f007 fa9d 	bl	8015608 <put_memory>
 800e0ce:	42af      	cmp	r7, r5
 800e0d0:	60a4      	str	r4, [r4, #8]
 800e0d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e0d6:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e0da:	d1f3      	bne.n	800e0c4 <rmw_uxrce_init_publisher_memory+0x20>
 800e0dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e0e0:	4770      	bx	lr
 800e0e2:	bf00      	nop

0800e0e4 <rmw_uxrce_init_subscription_memory>:
 800e0e4:	b1e2      	cbz	r2, 800e120 <rmw_uxrce_init_subscription_memory+0x3c>
 800e0e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0ea:	7b05      	ldrb	r5, [r0, #12]
 800e0ec:	4606      	mov	r6, r0
 800e0ee:	b9ad      	cbnz	r5, 800e11c <rmw_uxrce_init_subscription_memory+0x38>
 800e0f0:	23d8      	movs	r3, #216	@ 0xd8
 800e0f2:	e9c0 5500 	strd	r5, r5, [r0]
 800e0f6:	6083      	str	r3, [r0, #8]
 800e0f8:	f240 1301 	movw	r3, #257	@ 0x101
 800e0fc:	4617      	mov	r7, r2
 800e0fe:	8183      	strh	r3, [r0, #12]
 800e100:	460c      	mov	r4, r1
 800e102:	46a8      	mov	r8, r5
 800e104:	4621      	mov	r1, r4
 800e106:	4630      	mov	r0, r6
 800e108:	3501      	adds	r5, #1
 800e10a:	f007 fa7d 	bl	8015608 <put_memory>
 800e10e:	42af      	cmp	r7, r5
 800e110:	60a4      	str	r4, [r4, #8]
 800e112:	f884 800c 	strb.w	r8, [r4, #12]
 800e116:	f104 04d8 	add.w	r4, r4, #216	@ 0xd8
 800e11a:	d1f3      	bne.n	800e104 <rmw_uxrce_init_subscription_memory+0x20>
 800e11c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e120:	4770      	bx	lr
 800e122:	bf00      	nop

0800e124 <rmw_uxrce_init_node_memory>:
 800e124:	b1e2      	cbz	r2, 800e160 <rmw_uxrce_init_node_memory+0x3c>
 800e126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e12a:	7b05      	ldrb	r5, [r0, #12]
 800e12c:	4606      	mov	r6, r0
 800e12e:	b9ad      	cbnz	r5, 800e15c <rmw_uxrce_init_node_memory+0x38>
 800e130:	23a4      	movs	r3, #164	@ 0xa4
 800e132:	e9c0 5500 	strd	r5, r5, [r0]
 800e136:	6083      	str	r3, [r0, #8]
 800e138:	f240 1301 	movw	r3, #257	@ 0x101
 800e13c:	4617      	mov	r7, r2
 800e13e:	8183      	strh	r3, [r0, #12]
 800e140:	460c      	mov	r4, r1
 800e142:	46a8      	mov	r8, r5
 800e144:	4621      	mov	r1, r4
 800e146:	4630      	mov	r0, r6
 800e148:	3501      	adds	r5, #1
 800e14a:	f007 fa5d 	bl	8015608 <put_memory>
 800e14e:	42af      	cmp	r7, r5
 800e150:	60a4      	str	r4, [r4, #8]
 800e152:	f884 800c 	strb.w	r8, [r4, #12]
 800e156:	f104 04a4 	add.w	r4, r4, #164	@ 0xa4
 800e15a:	d1f3      	bne.n	800e144 <rmw_uxrce_init_node_memory+0x20>
 800e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e160:	4770      	bx	lr
 800e162:	bf00      	nop

0800e164 <rmw_uxrce_init_session_memory>:
 800e164:	b1ea      	cbz	r2, 800e1a2 <rmw_uxrce_init_session_memory+0x3e>
 800e166:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e16a:	7b05      	ldrb	r5, [r0, #12]
 800e16c:	4606      	mov	r6, r0
 800e16e:	b9b5      	cbnz	r5, 800e19e <rmw_uxrce_init_session_memory+0x3a>
 800e170:	e9c0 5500 	strd	r5, r5, [r0]
 800e174:	f241 58a8 	movw	r8, #5544	@ 0x15a8
 800e178:	f240 1301 	movw	r3, #257	@ 0x101
 800e17c:	4617      	mov	r7, r2
 800e17e:	f8c0 8008 	str.w	r8, [r0, #8]
 800e182:	460c      	mov	r4, r1
 800e184:	8183      	strh	r3, [r0, #12]
 800e186:	46a9      	mov	r9, r5
 800e188:	4621      	mov	r1, r4
 800e18a:	4630      	mov	r0, r6
 800e18c:	3501      	adds	r5, #1
 800e18e:	f007 fa3b 	bl	8015608 <put_memory>
 800e192:	42af      	cmp	r7, r5
 800e194:	60a4      	str	r4, [r4, #8]
 800e196:	f884 900c 	strb.w	r9, [r4, #12]
 800e19a:	4444      	add	r4, r8
 800e19c:	d1f4      	bne.n	800e188 <rmw_uxrce_init_session_memory+0x24>
 800e19e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1a2:	4770      	bx	lr

0800e1a4 <rmw_uxrce_init_topic_memory>:
 800e1a4:	b1e2      	cbz	r2, 800e1e0 <rmw_uxrce_init_topic_memory+0x3c>
 800e1a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1aa:	7b05      	ldrb	r5, [r0, #12]
 800e1ac:	4606      	mov	r6, r0
 800e1ae:	b9ad      	cbnz	r5, 800e1dc <rmw_uxrce_init_topic_memory+0x38>
 800e1b0:	231c      	movs	r3, #28
 800e1b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e1b6:	6083      	str	r3, [r0, #8]
 800e1b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e1bc:	4617      	mov	r7, r2
 800e1be:	8183      	strh	r3, [r0, #12]
 800e1c0:	460c      	mov	r4, r1
 800e1c2:	46a8      	mov	r8, r5
 800e1c4:	4621      	mov	r1, r4
 800e1c6:	4630      	mov	r0, r6
 800e1c8:	3501      	adds	r5, #1
 800e1ca:	f007 fa1d 	bl	8015608 <put_memory>
 800e1ce:	42af      	cmp	r7, r5
 800e1d0:	60a4      	str	r4, [r4, #8]
 800e1d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e1d6:	f104 041c 	add.w	r4, r4, #28
 800e1da:	d1f3      	bne.n	800e1c4 <rmw_uxrce_init_topic_memory+0x20>
 800e1dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1e0:	4770      	bx	lr
 800e1e2:	bf00      	nop

0800e1e4 <rmw_uxrce_init_static_input_buffer_memory>:
 800e1e4:	b1ea      	cbz	r2, 800e222 <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800e1e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1ea:	7b05      	ldrb	r5, [r0, #12]
 800e1ec:	4606      	mov	r6, r0
 800e1ee:	b9b5      	cbnz	r5, 800e21e <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800e1f0:	f44f 6304 	mov.w	r3, #2112	@ 0x840
 800e1f4:	e9c0 5500 	strd	r5, r5, [r0]
 800e1f8:	6083      	str	r3, [r0, #8]
 800e1fa:	f240 1301 	movw	r3, #257	@ 0x101
 800e1fe:	4617      	mov	r7, r2
 800e200:	8183      	strh	r3, [r0, #12]
 800e202:	460c      	mov	r4, r1
 800e204:	46a8      	mov	r8, r5
 800e206:	4621      	mov	r1, r4
 800e208:	4630      	mov	r0, r6
 800e20a:	3501      	adds	r5, #1
 800e20c:	f007 f9fc 	bl	8015608 <put_memory>
 800e210:	42af      	cmp	r7, r5
 800e212:	60a4      	str	r4, [r4, #8]
 800e214:	f884 800c 	strb.w	r8, [r4, #12]
 800e218:	f504 6404 	add.w	r4, r4, #2112	@ 0x840
 800e21c:	d1f3      	bne.n	800e206 <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800e21e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e222:	4770      	bx	lr

0800e224 <rmw_uxrce_init_init_options_impl_memory>:
 800e224:	b1e2      	cbz	r2, 800e260 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800e226:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e22a:	7b05      	ldrb	r5, [r0, #12]
 800e22c:	4606      	mov	r6, r0
 800e22e:	b9ad      	cbnz	r5, 800e25c <rmw_uxrce_init_init_options_impl_memory+0x38>
 800e230:	232c      	movs	r3, #44	@ 0x2c
 800e232:	e9c0 5500 	strd	r5, r5, [r0]
 800e236:	6083      	str	r3, [r0, #8]
 800e238:	f240 1301 	movw	r3, #257	@ 0x101
 800e23c:	4617      	mov	r7, r2
 800e23e:	8183      	strh	r3, [r0, #12]
 800e240:	460c      	mov	r4, r1
 800e242:	46a8      	mov	r8, r5
 800e244:	4621      	mov	r1, r4
 800e246:	4630      	mov	r0, r6
 800e248:	3501      	adds	r5, #1
 800e24a:	f007 f9dd 	bl	8015608 <put_memory>
 800e24e:	42af      	cmp	r7, r5
 800e250:	60a4      	str	r4, [r4, #8]
 800e252:	f884 800c 	strb.w	r8, [r4, #12]
 800e256:	f104 042c 	add.w	r4, r4, #44	@ 0x2c
 800e25a:	d1f3      	bne.n	800e244 <rmw_uxrce_init_init_options_impl_memory+0x20>
 800e25c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e260:	4770      	bx	lr
 800e262:	bf00      	nop

0800e264 <rmw_uxrce_init_wait_set_memory>:
 800e264:	b1e2      	cbz	r2, 800e2a0 <rmw_uxrce_init_wait_set_memory+0x3c>
 800e266:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e26a:	7b05      	ldrb	r5, [r0, #12]
 800e26c:	4606      	mov	r6, r0
 800e26e:	b9ad      	cbnz	r5, 800e29c <rmw_uxrce_init_wait_set_memory+0x38>
 800e270:	231c      	movs	r3, #28
 800e272:	e9c0 5500 	strd	r5, r5, [r0]
 800e276:	6083      	str	r3, [r0, #8]
 800e278:	f240 1301 	movw	r3, #257	@ 0x101
 800e27c:	4617      	mov	r7, r2
 800e27e:	8183      	strh	r3, [r0, #12]
 800e280:	460c      	mov	r4, r1
 800e282:	46a8      	mov	r8, r5
 800e284:	4621      	mov	r1, r4
 800e286:	4630      	mov	r0, r6
 800e288:	3501      	adds	r5, #1
 800e28a:	f007 f9bd 	bl	8015608 <put_memory>
 800e28e:	42af      	cmp	r7, r5
 800e290:	60a4      	str	r4, [r4, #8]
 800e292:	f884 800c 	strb.w	r8, [r4, #12]
 800e296:	f104 041c 	add.w	r4, r4, #28
 800e29a:	d1f3      	bne.n	800e284 <rmw_uxrce_init_wait_set_memory+0x20>
 800e29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop

0800e2a4 <rmw_uxrce_init_guard_condition_memory>:
 800e2a4:	b1e2      	cbz	r2, 800e2e0 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800e2a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2aa:	7b05      	ldrb	r5, [r0, #12]
 800e2ac:	4606      	mov	r6, r0
 800e2ae:	b9ad      	cbnz	r5, 800e2dc <rmw_uxrce_init_guard_condition_memory+0x38>
 800e2b0:	2320      	movs	r3, #32
 800e2b2:	e9c0 5500 	strd	r5, r5, [r0]
 800e2b6:	6083      	str	r3, [r0, #8]
 800e2b8:	f240 1301 	movw	r3, #257	@ 0x101
 800e2bc:	4617      	mov	r7, r2
 800e2be:	8183      	strh	r3, [r0, #12]
 800e2c0:	460c      	mov	r4, r1
 800e2c2:	46a8      	mov	r8, r5
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4630      	mov	r0, r6
 800e2c8:	3501      	adds	r5, #1
 800e2ca:	f007 f99d 	bl	8015608 <put_memory>
 800e2ce:	42af      	cmp	r7, r5
 800e2d0:	60a4      	str	r4, [r4, #8]
 800e2d2:	f884 800c 	strb.w	r8, [r4, #12]
 800e2d6:	f104 0420 	add.w	r4, r4, #32
 800e2da:	d1f3      	bne.n	800e2c4 <rmw_uxrce_init_guard_condition_memory+0x20>
 800e2dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop

0800e2e4 <rmw_uxrce_fini_session_memory>:
 800e2e4:	4601      	mov	r1, r0
 800e2e6:	4801      	ldr	r0, [pc, #4]	@ (800e2ec <rmw_uxrce_fini_session_memory+0x8>)
 800e2e8:	f007 b98e 	b.w	8015608 <put_memory>
 800e2ec:	2000b22c 	.word	0x2000b22c

0800e2f0 <rmw_uxrce_fini_node_memory>:
 800e2f0:	b538      	push	{r3, r4, r5, lr}
 800e2f2:	4604      	mov	r4, r0
 800e2f4:	6800      	ldr	r0, [r0, #0]
 800e2f6:	b128      	cbz	r0, 800e304 <rmw_uxrce_fini_node_memory+0x14>
 800e2f8:	4b07      	ldr	r3, [pc, #28]	@ (800e318 <rmw_uxrce_fini_node_memory+0x28>)
 800e2fa:	6819      	ldr	r1, [r3, #0]
 800e2fc:	f7f1 ff90 	bl	8000220 <strcmp>
 800e300:	b940      	cbnz	r0, 800e314 <rmw_uxrce_fini_node_memory+0x24>
 800e302:	6020      	str	r0, [r4, #0]
 800e304:	6861      	ldr	r1, [r4, #4]
 800e306:	b129      	cbz	r1, 800e314 <rmw_uxrce_fini_node_memory+0x24>
 800e308:	2500      	movs	r5, #0
 800e30a:	4804      	ldr	r0, [pc, #16]	@ (800e31c <rmw_uxrce_fini_node_memory+0x2c>)
 800e30c:	610d      	str	r5, [r1, #16]
 800e30e:	f007 f97b 	bl	8015608 <put_memory>
 800e312:	6065      	str	r5, [r4, #4]
 800e314:	bd38      	pop	{r3, r4, r5, pc}
 800e316:	bf00      	nop
 800e318:	08019730 	.word	0x08019730
 800e31c:	2000b1fc 	.word	0x2000b1fc

0800e320 <rmw_uxrce_fini_publisher_memory>:
 800e320:	b510      	push	{r4, lr}
 800e322:	4604      	mov	r4, r0
 800e324:	6800      	ldr	r0, [r0, #0]
 800e326:	b128      	cbz	r0, 800e334 <rmw_uxrce_fini_publisher_memory+0x14>
 800e328:	4b06      	ldr	r3, [pc, #24]	@ (800e344 <rmw_uxrce_fini_publisher_memory+0x24>)
 800e32a:	6819      	ldr	r1, [r3, #0]
 800e32c:	f7f1 ff78 	bl	8000220 <strcmp>
 800e330:	b938      	cbnz	r0, 800e342 <rmw_uxrce_fini_publisher_memory+0x22>
 800e332:	6020      	str	r0, [r4, #0]
 800e334:	6861      	ldr	r1, [r4, #4]
 800e336:	b121      	cbz	r1, 800e342 <rmw_uxrce_fini_publisher_memory+0x22>
 800e338:	4803      	ldr	r0, [pc, #12]	@ (800e348 <rmw_uxrce_fini_publisher_memory+0x28>)
 800e33a:	f007 f965 	bl	8015608 <put_memory>
 800e33e:	2300      	movs	r3, #0
 800e340:	6063      	str	r3, [r4, #4]
 800e342:	bd10      	pop	{r4, pc}
 800e344:	08019730 	.word	0x08019730
 800e348:	2000b20c 	.word	0x2000b20c

0800e34c <rmw_uxrce_fini_subscription_memory>:
 800e34c:	b510      	push	{r4, lr}
 800e34e:	4604      	mov	r4, r0
 800e350:	6800      	ldr	r0, [r0, #0]
 800e352:	b128      	cbz	r0, 800e360 <rmw_uxrce_fini_subscription_memory+0x14>
 800e354:	4b06      	ldr	r3, [pc, #24]	@ (800e370 <rmw_uxrce_fini_subscription_memory+0x24>)
 800e356:	6819      	ldr	r1, [r3, #0]
 800e358:	f7f1 ff62 	bl	8000220 <strcmp>
 800e35c:	b938      	cbnz	r0, 800e36e <rmw_uxrce_fini_subscription_memory+0x22>
 800e35e:	6020      	str	r0, [r4, #0]
 800e360:	6861      	ldr	r1, [r4, #4]
 800e362:	b121      	cbz	r1, 800e36e <rmw_uxrce_fini_subscription_memory+0x22>
 800e364:	4803      	ldr	r0, [pc, #12]	@ (800e374 <rmw_uxrce_fini_subscription_memory+0x28>)
 800e366:	f007 f94f 	bl	8015608 <put_memory>
 800e36a:	2300      	movs	r3, #0
 800e36c:	6063      	str	r3, [r4, #4]
 800e36e:	bd10      	pop	{r4, pc}
 800e370:	08019730 	.word	0x08019730
 800e374:	2000b24c 	.word	0x2000b24c

0800e378 <rmw_uxrce_fini_service_memory>:
 800e378:	b510      	push	{r4, lr}
 800e37a:	4604      	mov	r4, r0
 800e37c:	6800      	ldr	r0, [r0, #0]
 800e37e:	b128      	cbz	r0, 800e38c <rmw_uxrce_fini_service_memory+0x14>
 800e380:	4b06      	ldr	r3, [pc, #24]	@ (800e39c <rmw_uxrce_fini_service_memory+0x24>)
 800e382:	6819      	ldr	r1, [r3, #0]
 800e384:	f7f1 ff4c 	bl	8000220 <strcmp>
 800e388:	b938      	cbnz	r0, 800e39a <rmw_uxrce_fini_service_memory+0x22>
 800e38a:	6020      	str	r0, [r4, #0]
 800e38c:	6861      	ldr	r1, [r4, #4]
 800e38e:	b121      	cbz	r1, 800e39a <rmw_uxrce_fini_service_memory+0x22>
 800e390:	4803      	ldr	r0, [pc, #12]	@ (800e3a0 <rmw_uxrce_fini_service_memory+0x28>)
 800e392:	f007 f939 	bl	8015608 <put_memory>
 800e396:	2300      	movs	r3, #0
 800e398:	6063      	str	r3, [r4, #4]
 800e39a:	bd10      	pop	{r4, pc}
 800e39c:	08019730 	.word	0x08019730
 800e3a0:	2000b21c 	.word	0x2000b21c

0800e3a4 <rmw_uxrce_fini_client_memory>:
 800e3a4:	b510      	push	{r4, lr}
 800e3a6:	4604      	mov	r4, r0
 800e3a8:	6800      	ldr	r0, [r0, #0]
 800e3aa:	b128      	cbz	r0, 800e3b8 <rmw_uxrce_fini_client_memory+0x14>
 800e3ac:	4b06      	ldr	r3, [pc, #24]	@ (800e3c8 <rmw_uxrce_fini_client_memory+0x24>)
 800e3ae:	6819      	ldr	r1, [r3, #0]
 800e3b0:	f7f1 ff36 	bl	8000220 <strcmp>
 800e3b4:	b938      	cbnz	r0, 800e3c6 <rmw_uxrce_fini_client_memory+0x22>
 800e3b6:	6020      	str	r0, [r4, #0]
 800e3b8:	6861      	ldr	r1, [r4, #4]
 800e3ba:	b121      	cbz	r1, 800e3c6 <rmw_uxrce_fini_client_memory+0x22>
 800e3bc:	4803      	ldr	r0, [pc, #12]	@ (800e3cc <rmw_uxrce_fini_client_memory+0x28>)
 800e3be:	f007 f923 	bl	8015608 <put_memory>
 800e3c2:	2300      	movs	r3, #0
 800e3c4:	6063      	str	r3, [r4, #4]
 800e3c6:	bd10      	pop	{r4, pc}
 800e3c8:	08019730 	.word	0x08019730
 800e3cc:	200066d4 	.word	0x200066d4

0800e3d0 <rmw_uxrce_fini_topic_memory>:
 800e3d0:	b510      	push	{r4, lr}
 800e3d2:	4604      	mov	r4, r0
 800e3d4:	4621      	mov	r1, r4
 800e3d6:	4803      	ldr	r0, [pc, #12]	@ (800e3e4 <rmw_uxrce_fini_topic_memory+0x14>)
 800e3d8:	f007 f916 	bl	8015608 <put_memory>
 800e3dc:	2300      	movs	r3, #0
 800e3de:	61a3      	str	r3, [r4, #24]
 800e3e0:	bd10      	pop	{r4, pc}
 800e3e2:	bf00      	nop
 800e3e4:	2000b25c 	.word	0x2000b25c

0800e3e8 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800e3e8:	b082      	sub	sp, #8
 800e3ea:	b530      	push	{r4, r5, lr}
 800e3ec:	4925      	ldr	r1, [pc, #148]	@ (800e484 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e3ee:	680d      	ldr	r5, [r1, #0]
 800e3f0:	ac03      	add	r4, sp, #12
 800e3f2:	e884 000c 	stmia.w	r4, {r2, r3}
 800e3f6:	461c      	mov	r4, r3
 800e3f8:	2d00      	cmp	r5, #0
 800e3fa:	d041      	beq.n	800e480 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800e3fc:	462b      	mov	r3, r5
 800e3fe:	2100      	movs	r1, #0
 800e400:	689a      	ldr	r2, [r3, #8]
 800e402:	685b      	ldr	r3, [r3, #4]
 800e404:	f8d2 2814 	ldr.w	r2, [r2, #2068]	@ 0x814
 800e408:	4290      	cmp	r0, r2
 800e40a:	bf08      	it	eq
 800e40c:	3101      	addeq	r1, #1
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d1f6      	bne.n	800e400 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800e412:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800e416:	2b02      	cmp	r3, #2
 800e418:	d029      	beq.n	800e46e <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800e41a:	d907      	bls.n	800e42c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e41c:	2b03      	cmp	r3, #3
 800e41e:	d005      	beq.n	800e42c <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800e420:	2100      	movs	r1, #0
 800e422:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e426:	4608      	mov	r0, r1
 800e428:	b002      	add	sp, #8
 800e42a:	4770      	bx	lr
 800e42c:	b314      	cbz	r4, 800e474 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e42e:	428c      	cmp	r4, r1
 800e430:	d820      	bhi.n	800e474 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e432:	2d00      	cmp	r5, #0
 800e434:	d0f4      	beq.n	800e420 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e436:	2100      	movs	r1, #0
 800e438:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800e43c:	f06f 4400 	mvn.w	r4, #2147483648	@ 0x80000000
 800e440:	e002      	b.n	800e448 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800e442:	686d      	ldr	r5, [r5, #4]
 800e444:	2d00      	cmp	r5, #0
 800e446:	d0ec      	beq.n	800e422 <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800e448:	68ab      	ldr	r3, [r5, #8]
 800e44a:	f8d3 2814 	ldr.w	r2, [r3, #2068]	@ 0x814
 800e44e:	4290      	cmp	r0, r2
 800e450:	d1f7      	bne.n	800e442 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e452:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800e456:	f503 6302 	add.w	r3, r3, #2080	@ 0x820
 800e45a:	4562      	cmp	r2, ip
 800e45c:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800e460:	eb73 0e04 	sbcs.w	lr, r3, r4
 800e464:	daed      	bge.n	800e442 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e466:	4694      	mov	ip, r2
 800e468:	461c      	mov	r4, r3
 800e46a:	4629      	mov	r1, r5
 800e46c:	e7e9      	b.n	800e442 <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800e46e:	b10c      	cbz	r4, 800e474 <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800e470:	428c      	cmp	r4, r1
 800e472:	d9d5      	bls.n	800e420 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800e474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e478:	4802      	ldr	r0, [pc, #8]	@ (800e484 <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800e47a:	b002      	add	sp, #8
 800e47c:	f007 b8b4 	b.w	80155e8 <get_memory>
 800e480:	4629      	mov	r1, r5
 800e482:	e7c6      	b.n	800e412 <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800e484:	2000b23c 	.word	0x2000b23c

0800e488 <rmw_uxrce_find_static_input_buffer_by_owner>:
 800e488:	4b11      	ldr	r3, [pc, #68]	@ (800e4d0 <rmw_uxrce_find_static_input_buffer_by_owner+0x48>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	b530      	push	{r4, r5, lr}
 800e48e:	b1e3      	cbz	r3, 800e4ca <rmw_uxrce_find_static_input_buffer_by_owner+0x42>
 800e490:	f04f 3eff 	mov.w	lr, #4294967295	@ 0xffffffff
 800e494:	f06f 4c00 	mvn.w	ip, #2147483648	@ 0x80000000
 800e498:	2400      	movs	r4, #0
 800e49a:	e001      	b.n	800e4a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e49c:	685b      	ldr	r3, [r3, #4]
 800e49e:	b193      	cbz	r3, 800e4c6 <rmw_uxrce_find_static_input_buffer_by_owner+0x3e>
 800e4a0:	689a      	ldr	r2, [r3, #8]
 800e4a2:	f8d2 1814 	ldr.w	r1, [r2, #2068]	@ 0x814
 800e4a6:	4288      	cmp	r0, r1
 800e4a8:	d1f8      	bne.n	800e49c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e4aa:	f8d2 1818 	ldr.w	r1, [r2, #2072]	@ 0x818
 800e4ae:	f8d2 281c 	ldr.w	r2, [r2, #2076]	@ 0x81c
 800e4b2:	4571      	cmp	r1, lr
 800e4b4:	eb72 050c 	sbcs.w	r5, r2, ip
 800e4b8:	daf0      	bge.n	800e49c <rmw_uxrce_find_static_input_buffer_by_owner+0x14>
 800e4ba:	461c      	mov	r4, r3
 800e4bc:	685b      	ldr	r3, [r3, #4]
 800e4be:	468e      	mov	lr, r1
 800e4c0:	4694      	mov	ip, r2
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d1ec      	bne.n	800e4a0 <rmw_uxrce_find_static_input_buffer_by_owner+0x18>
 800e4c6:	4620      	mov	r0, r4
 800e4c8:	bd30      	pop	{r4, r5, pc}
 800e4ca:	461c      	mov	r4, r3
 800e4cc:	4620      	mov	r0, r4
 800e4ce:	bd30      	pop	{r4, r5, pc}
 800e4d0:	2000b23c 	.word	0x2000b23c
 800e4d4:	00000000 	.word	0x00000000

0800e4d8 <rmw_uxrce_clean_expired_static_input_buffer>:
 800e4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4dc:	4b3c      	ldr	r3, [pc, #240]	@ (800e5d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e4de:	ed2d 8b06 	vpush	{d8-d10}
 800e4e2:	681f      	ldr	r7, [r3, #0]
 800e4e4:	b08d      	sub	sp, #52	@ 0x34
 800e4e6:	f007 fc9b 	bl	8015e20 <rmw_uros_epoch_nanos>
 800e4ea:	2f00      	cmp	r7, #0
 800e4ec:	d05d      	beq.n	800e5aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e4ee:	46b8      	mov	r8, r7
 800e4f0:	ed9f 8b31 	vldr	d8, [pc, #196]	@ 800e5b8 <rmw_uxrce_clean_expired_static_input_buffer+0xe0>
 800e4f4:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e4f8:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	ed9f ab30 	vldr	d10, [pc, #192]	@ 800e5c0 <rmw_uxrce_clean_expired_static_input_buffer+0xe8>
 800e502:	ed9f 9b31 	vldr	d9, [pc, #196]	@ 800e5c8 <rmw_uxrce_clean_expired_static_input_buffer+0xf0>
 800e506:	4681      	mov	r9, r0
 800e508:	468a      	mov	sl, r1
 800e50a:	ac04      	add	r4, sp, #16
 800e50c:	d03f      	beq.n	800e58e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e50e:	2b05      	cmp	r3, #5
 800e510:	d044      	beq.n	800e59c <rmw_uxrce_clean_expired_static_input_buffer+0xc4>
 800e512:	2b03      	cmp	r3, #3
 800e514:	d03b      	beq.n	800e58e <rmw_uxrce_clean_expired_static_input_buffer+0xb6>
 800e516:	ed8d 8b04 	vstr	d8, [sp, #16]
 800e51a:	ed8d ab06 	vstr	d10, [sp, #24]
 800e51e:	ed8d 8b08 	vstr	d8, [sp, #32]
 800e522:	ed8d 8b0a 	vstr	d8, [sp, #40]	@ 0x28
 800e526:	ab08      	add	r3, sp, #32
 800e528:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e52a:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800e52e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e532:	f006 fda5 	bl	8015080 <rmw_time_equal>
 800e536:	b118      	cbz	r0, 800e540 <rmw_uxrce_clean_expired_static_input_buffer+0x68>
 800e538:	ed8d 9b04 	vstr	d9, [sp, #16]
 800e53c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800e540:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800e544:	f8d5 6818 	ldr.w	r6, [r5, #2072]	@ 0x818
 800e548:	f8d5 781c 	ldr.w	r7, [r5, #2076]	@ 0x81c
 800e54c:	f8d8 b004 	ldr.w	fp, [r8, #4]
 800e550:	f006 fdea 	bl	8015128 <rmw_time_total_nsec>
 800e554:	1830      	adds	r0, r6, r0
 800e556:	eb47 0101 	adc.w	r1, r7, r1
 800e55a:	4548      	cmp	r0, r9
 800e55c:	eb71 030a 	sbcs.w	r3, r1, sl
 800e560:	f505 6502 	add.w	r5, r5, #2080	@ 0x820
 800e564:	db05      	blt.n	800e572 <rmw_uxrce_clean_expired_static_input_buffer+0x9a>
 800e566:	e955 2302 	ldrd	r2, r3, [r5, #-8]
 800e56a:	4591      	cmp	r9, r2
 800e56c:	eb7a 0303 	sbcs.w	r3, sl, r3
 800e570:	da03      	bge.n	800e57a <rmw_uxrce_clean_expired_static_input_buffer+0xa2>
 800e572:	4817      	ldr	r0, [pc, #92]	@ (800e5d0 <rmw_uxrce_clean_expired_static_input_buffer+0xf8>)
 800e574:	4641      	mov	r1, r8
 800e576:	f007 f847 	bl	8015608 <put_memory>
 800e57a:	f1bb 0f00 	cmp.w	fp, #0
 800e57e:	d014      	beq.n	800e5aa <rmw_uxrce_clean_expired_static_input_buffer+0xd2>
 800e580:	46d8      	mov	r8, fp
 800e582:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e586:	f895 3820 	ldrb.w	r3, [r5, #2080]	@ 0x820
 800e58a:	2b04      	cmp	r3, #4
 800e58c:	d1bf      	bne.n	800e50e <rmw_uxrce_clean_expired_static_input_buffer+0x36>
 800e58e:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e592:	3340      	adds	r3, #64	@ 0x40
 800e594:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e596:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e59a:	e7c0      	b.n	800e51e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e59c:	f8d5 3814 	ldr.w	r3, [r5, #2068]	@ 0x814
 800e5a0:	3348      	adds	r3, #72	@ 0x48
 800e5a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e5a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800e5a8:	e7b9      	b.n	800e51e <rmw_uxrce_clean_expired_static_input_buffer+0x46>
 800e5aa:	b00d      	add	sp, #52	@ 0x34
 800e5ac:	ecbd 8b06 	vpop	{d8-d10}
 800e5b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5b4:	f3af 8000 	nop.w
	...
 800e5c0:	00000001 	.word	0x00000001
 800e5c4:	00000000 	.word	0x00000000
 800e5c8:	0000001e 	.word	0x0000001e
 800e5cc:	00000000 	.word	0x00000000
 800e5d0:	2000b23c 	.word	0x2000b23c

0800e5d4 <run_xrce_session>:
 800e5d4:	b510      	push	{r4, lr}
 800e5d6:	788c      	ldrb	r4, [r1, #2]
 800e5d8:	b086      	sub	sp, #24
 800e5da:	2c01      	cmp	r4, #1
 800e5dc:	f8ad 200e 	strh.w	r2, [sp, #14]
 800e5e0:	d00c      	beq.n	800e5fc <run_xrce_session+0x28>
 800e5e2:	4619      	mov	r1, r3
 800e5e4:	2301      	movs	r3, #1
 800e5e6:	9300      	str	r3, [sp, #0]
 800e5e8:	f10d 020e 	add.w	r2, sp, #14
 800e5ec:	f10d 0317 	add.w	r3, sp, #23
 800e5f0:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e5f4:	f001 f932 	bl	800f85c <uxr_run_session_until_all_status>
 800e5f8:	b006      	add	sp, #24
 800e5fa:	bd10      	pop	{r4, pc}
 800e5fc:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 800e600:	f000 fd46 	bl	800f090 <uxr_flash_output_streams>
 800e604:	4620      	mov	r0, r4
 800e606:	b006      	add	sp, #24
 800e608:	bd10      	pop	{r4, pc}
 800e60a:	bf00      	nop

0800e60c <convert_qos_profile>:
 800e60c:	7a4a      	ldrb	r2, [r1, #9]
 800e60e:	f891 c008 	ldrb.w	ip, [r1, #8]
 800e612:	2a02      	cmp	r2, #2
 800e614:	bf18      	it	ne
 800e616:	2200      	movne	r2, #0
 800e618:	7002      	strb	r2, [r0, #0]
 800e61a:	780a      	ldrb	r2, [r1, #0]
 800e61c:	8889      	ldrh	r1, [r1, #4]
 800e61e:	8081      	strh	r1, [r0, #4]
 800e620:	f1ac 0c02 	sub.w	ip, ip, #2
 800e624:	f1a2 0202 	sub.w	r2, r2, #2
 800e628:	fabc fc8c 	clz	ip, ip
 800e62c:	fab2 f282 	clz	r2, r2
 800e630:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800e634:	0952      	lsrs	r2, r2, #5
 800e636:	f880 c001 	strb.w	ip, [r0, #1]
 800e63a:	7082      	strb	r2, [r0, #2]
 800e63c:	4770      	bx	lr
 800e63e:	bf00      	nop

0800e640 <generate_type_name>:
 800e640:	b530      	push	{r4, r5, lr}
 800e642:	2300      	movs	r3, #0
 800e644:	700b      	strb	r3, [r1, #0]
 800e646:	6803      	ldr	r3, [r0, #0]
 800e648:	b087      	sub	sp, #28
 800e64a:	4614      	mov	r4, r2
 800e64c:	b1d3      	cbz	r3, 800e684 <generate_type_name+0x44>
 800e64e:	4a0f      	ldr	r2, [pc, #60]	@ (800e68c <generate_type_name+0x4c>)
 800e650:	4615      	mov	r5, r2
 800e652:	9203      	str	r2, [sp, #12]
 800e654:	9500      	str	r5, [sp, #0]
 800e656:	6842      	ldr	r2, [r0, #4]
 800e658:	480d      	ldr	r0, [pc, #52]	@ (800e690 <generate_type_name+0x50>)
 800e65a:	9001      	str	r0, [sp, #4]
 800e65c:	4608      	mov	r0, r1
 800e65e:	490d      	ldr	r1, [pc, #52]	@ (800e694 <generate_type_name+0x54>)
 800e660:	9204      	str	r2, [sp, #16]
 800e662:	9105      	str	r1, [sp, #20]
 800e664:	9102      	str	r1, [sp, #8]
 800e666:	4a0c      	ldr	r2, [pc, #48]	@ (800e698 <generate_type_name+0x58>)
 800e668:	4621      	mov	r1, r4
 800e66a:	f009 f9ab 	bl	80179c4 <sniprintf>
 800e66e:	2800      	cmp	r0, #0
 800e670:	db05      	blt.n	800e67e <generate_type_name+0x3e>
 800e672:	4284      	cmp	r4, r0
 800e674:	bfd4      	ite	le
 800e676:	2000      	movle	r0, #0
 800e678:	2001      	movgt	r0, #1
 800e67a:	b007      	add	sp, #28
 800e67c:	bd30      	pop	{r4, r5, pc}
 800e67e:	2000      	movs	r0, #0
 800e680:	b007      	add	sp, #28
 800e682:	bd30      	pop	{r4, r5, pc}
 800e684:	4b05      	ldr	r3, [pc, #20]	@ (800e69c <generate_type_name+0x5c>)
 800e686:	4a01      	ldr	r2, [pc, #4]	@ (800e68c <generate_type_name+0x4c>)
 800e688:	461d      	mov	r5, r3
 800e68a:	e7e2      	b.n	800e652 <generate_type_name+0x12>
 800e68c:	08018f94 	.word	0x08018f94
 800e690:	08018fac 	.word	0x08018fac
 800e694:	08018fa8 	.word	0x08018fa8
 800e698:	08018f98 	.word	0x08018f98
 800e69c:	08019508 	.word	0x08019508

0800e6a0 <generate_topic_name>:
 800e6a0:	b510      	push	{r4, lr}
 800e6a2:	b082      	sub	sp, #8
 800e6a4:	4614      	mov	r4, r2
 800e6a6:	9000      	str	r0, [sp, #0]
 800e6a8:	4b08      	ldr	r3, [pc, #32]	@ (800e6cc <generate_topic_name+0x2c>)
 800e6aa:	4a09      	ldr	r2, [pc, #36]	@ (800e6d0 <generate_topic_name+0x30>)
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	4621      	mov	r1, r4
 800e6b0:	f009 f988 	bl	80179c4 <sniprintf>
 800e6b4:	2800      	cmp	r0, #0
 800e6b6:	db05      	blt.n	800e6c4 <generate_topic_name+0x24>
 800e6b8:	4284      	cmp	r4, r0
 800e6ba:	bfd4      	ite	le
 800e6bc:	2000      	movle	r0, #0
 800e6be:	2001      	movgt	r0, #1
 800e6c0:	b002      	add	sp, #8
 800e6c2:	bd10      	pop	{r4, pc}
 800e6c4:	2000      	movs	r0, #0
 800e6c6:	b002      	add	sp, #8
 800e6c8:	bd10      	pop	{r4, pc}
 800e6ca:	bf00      	nop
 800e6cc:	08018fb8 	.word	0x08018fb8
 800e6d0:	08018fb0 	.word	0x08018fb0

0800e6d4 <is_uxrce_rmw_identifier_valid>:
 800e6d4:	b510      	push	{r4, lr}
 800e6d6:	4604      	mov	r4, r0
 800e6d8:	b140      	cbz	r0, 800e6ec <is_uxrce_rmw_identifier_valid+0x18>
 800e6da:	f006 ffed 	bl	80156b8 <rmw_get_implementation_identifier>
 800e6de:	4601      	mov	r1, r0
 800e6e0:	4620      	mov	r0, r4
 800e6e2:	f7f1 fd9d 	bl	8000220 <strcmp>
 800e6e6:	fab0 f080 	clz	r0, r0
 800e6ea:	0940      	lsrs	r0, r0, #5
 800e6ec:	bd10      	pop	{r4, pc}
 800e6ee:	bf00      	nop

0800e6f0 <get_message_typesupport_handle>:
 800e6f0:	6883      	ldr	r3, [r0, #8]
 800e6f2:	4718      	bx	r3

0800e6f4 <get_message_typesupport_handle_function>:
 800e6f4:	b510      	push	{r4, lr}
 800e6f6:	4604      	mov	r4, r0
 800e6f8:	6800      	ldr	r0, [r0, #0]
 800e6fa:	f7f1 fd91 	bl	8000220 <strcmp>
 800e6fe:	2800      	cmp	r0, #0
 800e700:	bf0c      	ite	eq
 800e702:	4620      	moveq	r0, r4
 800e704:	2000      	movne	r0, #0
 800e706:	bd10      	pop	{r4, pc}

0800e708 <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 800e708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e70c:	6805      	ldr	r5, [r0, #0]
 800e70e:	4604      	mov	r4, r0
 800e710:	4628      	mov	r0, r5
 800e712:	460e      	mov	r6, r1
 800e714:	f7f1 fd84 	bl	8000220 <strcmp>
 800e718:	b1c8      	cbz	r0, 800e74e <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 800e71a:	4b11      	ldr	r3, [pc, #68]	@ (800e760 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	429d      	cmp	r5, r3
 800e720:	d112      	bne.n	800e748 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e722:	f8d4 8004 	ldr.w	r8, [r4, #4]
 800e726:	f8d8 4000 	ldr.w	r4, [r8]
 800e72a:	b16c      	cbz	r4, 800e748 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 800e72c:	f8d8 5008 	ldr.w	r5, [r8, #8]
 800e730:	2700      	movs	r7, #0
 800e732:	3d04      	subs	r5, #4
 800e734:	f855 0f04 	ldr.w	r0, [r5, #4]!
 800e738:	4631      	mov	r1, r6
 800e73a:	f7f1 fd71 	bl	8000220 <strcmp>
 800e73e:	00bb      	lsls	r3, r7, #2
 800e740:	b140      	cbz	r0, 800e754 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 800e742:	3701      	adds	r7, #1
 800e744:	42bc      	cmp	r4, r7
 800e746:	d1f5      	bne.n	800e734 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 800e748:	2000      	movs	r0, #0
 800e74a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e74e:	4620      	mov	r0, r4
 800e750:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e754:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e758:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e75c:	58d3      	ldr	r3, [r2, r3]
 800e75e:	4718      	bx	r3
 800e760:	200001d0 	.word	0x200001d0

0800e764 <geometry_msgs__msg__Twist__init>:
 800e764:	b570      	push	{r4, r5, r6, lr}
 800e766:	4605      	mov	r5, r0
 800e768:	b1a8      	cbz	r0, 800e796 <geometry_msgs__msg__Twist__init+0x32>
 800e76a:	f000 f82b 	bl	800e7c4 <geometry_msgs__msg__Vector3__init>
 800e76e:	4604      	mov	r4, r0
 800e770:	b140      	cbz	r0, 800e784 <geometry_msgs__msg__Twist__init+0x20>
 800e772:	f105 0618 	add.w	r6, r5, #24
 800e776:	4630      	mov	r0, r6
 800e778:	f000 f824 	bl	800e7c4 <geometry_msgs__msg__Vector3__init>
 800e77c:	4604      	mov	r4, r0
 800e77e:	b168      	cbz	r0, 800e79c <geometry_msgs__msg__Twist__init+0x38>
 800e780:	4620      	mov	r0, r4
 800e782:	bd70      	pop	{r4, r5, r6, pc}
 800e784:	4628      	mov	r0, r5
 800e786:	f000 f821 	bl	800e7cc <geometry_msgs__msg__Vector3__fini>
 800e78a:	f105 0018 	add.w	r0, r5, #24
 800e78e:	f000 f81d 	bl	800e7cc <geometry_msgs__msg__Vector3__fini>
 800e792:	4620      	mov	r0, r4
 800e794:	bd70      	pop	{r4, r5, r6, pc}
 800e796:	4604      	mov	r4, r0
 800e798:	4620      	mov	r0, r4
 800e79a:	bd70      	pop	{r4, r5, r6, pc}
 800e79c:	4628      	mov	r0, r5
 800e79e:	f000 f815 	bl	800e7cc <geometry_msgs__msg__Vector3__fini>
 800e7a2:	4630      	mov	r0, r6
 800e7a4:	f000 f812 	bl	800e7cc <geometry_msgs__msg__Vector3__fini>
 800e7a8:	e7ea      	b.n	800e780 <geometry_msgs__msg__Twist__init+0x1c>
 800e7aa:	bf00      	nop

0800e7ac <geometry_msgs__msg__Twist__fini>:
 800e7ac:	b148      	cbz	r0, 800e7c2 <geometry_msgs__msg__Twist__fini+0x16>
 800e7ae:	b510      	push	{r4, lr}
 800e7b0:	4604      	mov	r4, r0
 800e7b2:	f000 f80b 	bl	800e7cc <geometry_msgs__msg__Vector3__fini>
 800e7b6:	f104 0018 	add.w	r0, r4, #24
 800e7ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e7be:	f000 b805 	b.w	800e7cc <geometry_msgs__msg__Vector3__fini>
 800e7c2:	4770      	bx	lr

0800e7c4 <geometry_msgs__msg__Vector3__init>:
 800e7c4:	3800      	subs	r0, #0
 800e7c6:	bf18      	it	ne
 800e7c8:	2001      	movne	r0, #1
 800e7ca:	4770      	bx	lr

0800e7cc <geometry_msgs__msg__Vector3__fini>:
 800e7cc:	4770      	bx	lr
 800e7ce:	bf00      	nop

0800e7d0 <uxr_buffer_delete_entity>:
 800e7d0:	b510      	push	{r4, lr}
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	b08e      	sub	sp, #56	@ 0x38
 800e7d6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800e7da:	2303      	movs	r3, #3
 800e7dc:	9300      	str	r3, [sp, #0]
 800e7de:	2204      	movs	r2, #4
 800e7e0:	ab06      	add	r3, sp, #24
 800e7e2:	4604      	mov	r4, r0
 800e7e4:	9103      	str	r1, [sp, #12]
 800e7e6:	f001 fa61 	bl	800fcac <uxr_prepare_stream_to_write_submessage>
 800e7ea:	b918      	cbnz	r0, 800e7f4 <uxr_buffer_delete_entity+0x24>
 800e7ec:	4604      	mov	r4, r0
 800e7ee:	4620      	mov	r0, r4
 800e7f0:	b00e      	add	sp, #56	@ 0x38
 800e7f2:	bd10      	pop	{r4, pc}
 800e7f4:	9902      	ldr	r1, [sp, #8]
 800e7f6:	aa05      	add	r2, sp, #20
 800e7f8:	4620      	mov	r0, r4
 800e7fa:	f001 fb8d 	bl	800ff18 <uxr_init_base_object_request>
 800e7fe:	a905      	add	r1, sp, #20
 800e800:	4604      	mov	r4, r0
 800e802:	a806      	add	r0, sp, #24
 800e804:	f003 f984 	bl	8011b10 <uxr_serialize_DELETE_Payload>
 800e808:	4620      	mov	r0, r4
 800e80a:	b00e      	add	sp, #56	@ 0x38
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	bf00      	nop

0800e810 <uxr_common_create_entity>:
 800e810:	b510      	push	{r4, lr}
 800e812:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800e816:	b08c      	sub	sp, #48	@ 0x30
 800e818:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e81c:	f1bc 0f01 	cmp.w	ip, #1
 800e820:	bf0c      	ite	eq
 800e822:	f003 0201 	andeq.w	r2, r3, #1
 800e826:	2200      	movne	r2, #0
 800e828:	330e      	adds	r3, #14
 800e82a:	f89d 1038 	ldrb.w	r1, [sp, #56]	@ 0x38
 800e82e:	9101      	str	r1, [sp, #4]
 800e830:	441a      	add	r2, r3
 800e832:	2301      	movs	r3, #1
 800e834:	9300      	str	r3, [sp, #0]
 800e836:	9903      	ldr	r1, [sp, #12]
 800e838:	ab04      	add	r3, sp, #16
 800e83a:	b292      	uxth	r2, r2
 800e83c:	4604      	mov	r4, r0
 800e83e:	f001 fa35 	bl	800fcac <uxr_prepare_stream_to_write_submessage>
 800e842:	b918      	cbnz	r0, 800e84c <uxr_common_create_entity+0x3c>
 800e844:	4604      	mov	r4, r0
 800e846:	4620      	mov	r0, r4
 800e848:	b00c      	add	sp, #48	@ 0x30
 800e84a:	bd10      	pop	{r4, pc}
 800e84c:	9902      	ldr	r1, [sp, #8]
 800e84e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800e850:	4620      	mov	r0, r4
 800e852:	f001 fb61 	bl	800ff18 <uxr_init_base_object_request>
 800e856:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800e858:	4604      	mov	r4, r0
 800e85a:	a804      	add	r0, sp, #16
 800e85c:	f003 f8b4 	bl	80119c8 <uxr_serialize_CREATE_Payload>
 800e860:	4620      	mov	r0, r4
 800e862:	b00c      	add	sp, #48	@ 0x30
 800e864:	bd10      	pop	{r4, pc}
 800e866:	bf00      	nop

0800e868 <uxr_buffer_create_participant_bin>:
 800e868:	b570      	push	{r4, r5, r6, lr}
 800e86a:	f5ad 7d16 	sub.w	sp, sp, #600	@ 0x258
 800e86e:	ac11      	add	r4, sp, #68	@ 0x44
 800e870:	f8ad 3254 	strh.w	r3, [sp, #596]	@ 0x254
 800e874:	2303      	movs	r3, #3
 800e876:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800e87a:	7223      	strb	r3, [r4, #8]
 800e87c:	9b9a      	ldr	r3, [sp, #616]	@ 0x268
 800e87e:	f89d 626c 	ldrb.w	r6, [sp, #620]	@ 0x26c
 800e882:	2201      	movs	r2, #1
 800e884:	2100      	movs	r1, #0
 800e886:	4605      	mov	r5, r0
 800e888:	7122      	strb	r2, [r4, #4]
 800e88a:	f88d 1014 	strb.w	r1, [sp, #20]
 800e88e:	b1cb      	cbz	r3, 800e8c4 <uxr_buffer_create_participant_bin+0x5c>
 800e890:	f88d 201c 	strb.w	r2, [sp, #28]
 800e894:	9308      	str	r3, [sp, #32]
 800e896:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e89a:	a915      	add	r1, sp, #84	@ 0x54
 800e89c:	a809      	add	r0, sp, #36	@ 0x24
 800e89e:	f7fd fb7f 	bl	800bfa0 <ucdr_init_buffer>
 800e8a2:	a905      	add	r1, sp, #20
 800e8a4:	a809      	add	r0, sp, #36	@ 0x24
 800e8a6:	f002 fd5d 	bl	8011364 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800e8aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e8ac:	9600      	str	r6, [sp, #0]
 800e8ae:	9401      	str	r4, [sp, #4]
 800e8b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800e8b4:	60e3      	str	r3, [r4, #12]
 800e8b6:	4628      	mov	r0, r5
 800e8b8:	b29b      	uxth	r3, r3
 800e8ba:	f7ff ffa9 	bl	800e810 <uxr_common_create_entity>
 800e8be:	f50d 7d16 	add.w	sp, sp, #600	@ 0x258
 800e8c2:	bd70      	pop	{r4, r5, r6, pc}
 800e8c4:	f88d 301c 	strb.w	r3, [sp, #28]
 800e8c8:	e7e5      	b.n	800e896 <uxr_buffer_create_participant_bin+0x2e>
 800e8ca:	bf00      	nop

0800e8cc <uxr_buffer_create_topic_bin>:
 800e8cc:	b570      	push	{r4, r5, r6, lr}
 800e8ce:	f5ad 7d18 	sub.w	sp, sp, #608	@ 0x260
 800e8d2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e8d6:	9105      	str	r1, [sp, #20]
 800e8d8:	4605      	mov	r5, r0
 800e8da:	a997      	add	r1, sp, #604	@ 0x25c
 800e8dc:	4618      	mov	r0, r3
 800e8de:	2302      	movs	r3, #2
 800e8e0:	f89d 6278 	ldrb.w	r6, [sp, #632]	@ 0x278
 800e8e4:	f88d 3050 	strb.w	r3, [sp, #80]	@ 0x50
 800e8e8:	f000 f9b0 	bl	800ec4c <uxr_object_id_to_raw>
 800e8ec:	9b9c      	ldr	r3, [sp, #624]	@ 0x270
 800e8ee:	9306      	str	r3, [sp, #24]
 800e8f0:	9b9d      	ldr	r3, [sp, #628]	@ 0x274
 800e8f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8f4:	2303      	movs	r3, #3
 800e8f6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e8fa:	2301      	movs	r3, #1
 800e8fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e900:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800e904:	a917      	add	r1, sp, #92	@ 0x5c
 800e906:	2300      	movs	r3, #0
 800e908:	a80b      	add	r0, sp, #44	@ 0x2c
 800e90a:	f88d 301c 	strb.w	r3, [sp, #28]
 800e90e:	f7fd fb47 	bl	800bfa0 <ucdr_init_buffer>
 800e912:	a906      	add	r1, sp, #24
 800e914:	a80b      	add	r0, sp, #44	@ 0x2c
 800e916:	f002 fd47 	bl	80113a8 <uxr_serialize_OBJK_Topic_Binary>
 800e91a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e91c:	9316      	str	r3, [sp, #88]	@ 0x58
 800e91e:	ac13      	add	r4, sp, #76	@ 0x4c
 800e920:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e924:	9600      	str	r6, [sp, #0]
 800e926:	9401      	str	r4, [sp, #4]
 800e928:	b29b      	uxth	r3, r3
 800e92a:	4628      	mov	r0, r5
 800e92c:	f7ff ff70 	bl	800e810 <uxr_common_create_entity>
 800e930:	f50d 7d18 	add.w	sp, sp, #608	@ 0x260
 800e934:	bd70      	pop	{r4, r5, r6, pc}
 800e936:	bf00      	nop

0800e938 <uxr_buffer_create_publisher_bin>:
 800e938:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e93a:	f2ad 4d8c 	subw	sp, sp, #1164	@ 0x48c
 800e93e:	4605      	mov	r5, r0
 800e940:	9105      	str	r1, [sp, #20]
 800e942:	4618      	mov	r0, r3
 800e944:	2603      	movs	r6, #3
 800e946:	a992      	add	r1, sp, #584	@ 0x248
 800e948:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e94c:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	@ 0x4a0
 800e950:	f88d 603c 	strb.w	r6, [sp, #60]	@ 0x3c
 800e954:	f000 f97a 	bl	800ec4c <uxr_object_id_to_raw>
 800e958:	2300      	movs	r3, #0
 800e95a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e95e:	a912      	add	r1, sp, #72	@ 0x48
 800e960:	a806      	add	r0, sp, #24
 800e962:	f88d 324c 	strb.w	r3, [sp, #588]	@ 0x24c
 800e966:	f88d 3254 	strb.w	r3, [sp, #596]	@ 0x254
 800e96a:	f88d 6040 	strb.w	r6, [sp, #64]	@ 0x40
 800e96e:	f7fd fb17 	bl	800bfa0 <ucdr_init_buffer>
 800e972:	a993      	add	r1, sp, #588	@ 0x24c
 800e974:	a806      	add	r0, sp, #24
 800e976:	f002 fdcb 	bl	8011510 <uxr_serialize_OBJK_Publisher_Binary>
 800e97a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e97c:	9311      	str	r3, [sp, #68]	@ 0x44
 800e97e:	ac0e      	add	r4, sp, #56	@ 0x38
 800e980:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800e984:	9700      	str	r7, [sp, #0]
 800e986:	9401      	str	r4, [sp, #4]
 800e988:	b29b      	uxth	r3, r3
 800e98a:	4628      	mov	r0, r5
 800e98c:	f7ff ff40 	bl	800e810 <uxr_common_create_entity>
 800e990:	f20d 4d8c 	addw	sp, sp, #1164	@ 0x48c
 800e994:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e996:	bf00      	nop

0800e998 <uxr_buffer_create_datawriter_bin>:
 800e998:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e99c:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800e9a0:	ac1d      	add	r4, sp, #116	@ 0x74
 800e9a2:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800e9a6:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	@ 0x2a8
 800e9aa:	9105      	str	r1, [sp, #20]
 800e9ac:	4606      	mov	r6, r0
 800e9ae:	a9a1      	add	r1, sp, #644	@ 0x284
 800e9b0:	4618      	mov	r0, r3
 800e9b2:	2305      	movs	r3, #5
 800e9b4:	7123      	strb	r3, [r4, #4]
 800e9b6:	f89d 82ac 	ldrb.w	r8, [sp, #684]	@ 0x2ac
 800e9ba:	2703      	movs	r7, #3
 800e9bc:	f000 f946 	bl	800ec4c <uxr_object_id_to_raw>
 800e9c0:	98a8      	ldr	r0, [sp, #672]	@ 0x2a0
 800e9c2:	7227      	strb	r7, [r4, #8]
 800e9c4:	a90e      	add	r1, sp, #56	@ 0x38
 800e9c6:	f000 f941 	bl	800ec4c <uxr_object_id_to_raw>
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	f8ad 5044 	strh.w	r5, [sp, #68]	@ 0x44
 800e9d0:	f89d 22a5 	ldrb.w	r2, [sp, #677]	@ 0x2a5
 800e9d4:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800e9d8:	3d00      	subs	r5, #0
 800e9da:	bf18      	it	ne
 800e9dc:	2501      	movne	r5, #1
 800e9de:	f88d 3046 	strb.w	r3, [sp, #70]	@ 0x46
 800e9e2:	f88d 304c 	strb.w	r3, [sp, #76]	@ 0x4c
 800e9e6:	f88d 3054 	strb.w	r3, [sp, #84]	@ 0x54
 800e9ea:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e9ee:	2301      	movs	r3, #1
 800e9f0:	f88d 5042 	strb.w	r5, [sp, #66]	@ 0x42
 800e9f4:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 800e9f8:	bb8a      	cbnz	r2, 800ea5e <uxr_buffer_create_datawriter_bin+0xc6>
 800e9fa:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800e9fe:	f04f 0e23 	mov.w	lr, #35	@ 0x23
 800ea02:	f04f 0c13 	mov.w	ip, #19
 800ea06:	250b      	movs	r5, #11
 800ea08:	2221      	movs	r2, #33	@ 0x21
 800ea0a:	2111      	movs	r1, #17
 800ea0c:	2009      	movs	r0, #9
 800ea0e:	f89d 32a6 	ldrb.w	r3, [sp, #678]	@ 0x2a6
 800ea12:	b923      	cbnz	r3, 800ea1e <uxr_buffer_create_datawriter_bin+0x86>
 800ea14:	f8ad 7040 	strh.w	r7, [sp, #64]	@ 0x40
 800ea18:	4672      	mov	r2, lr
 800ea1a:	4661      	mov	r1, ip
 800ea1c:	4628      	mov	r0, r5
 800ea1e:	f89d 32a4 	ldrb.w	r3, [sp, #676]	@ 0x2a4
 800ea22:	2b01      	cmp	r3, #1
 800ea24:	d025      	beq.n	800ea72 <uxr_buffer_create_datawriter_bin+0xda>
 800ea26:	2b03      	cmp	r3, #3
 800ea28:	d029      	beq.n	800ea7e <uxr_buffer_create_datawriter_bin+0xe6>
 800ea2a:	b32b      	cbz	r3, 800ea78 <uxr_buffer_create_datawriter_bin+0xe0>
 800ea2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ea30:	a921      	add	r1, sp, #132	@ 0x84
 800ea32:	a806      	add	r0, sp, #24
 800ea34:	f7fd fab4 	bl	800bfa0 <ucdr_init_buffer>
 800ea38:	a90e      	add	r1, sp, #56	@ 0x38
 800ea3a:	a806      	add	r0, sp, #24
 800ea3c:	f002 fdde 	bl	80115fc <uxr_serialize_OBJK_DataWriter_Binary>
 800ea40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea42:	f8cd 8000 	str.w	r8, [sp]
 800ea46:	9401      	str	r4, [sp, #4]
 800ea48:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800ea4c:	60e3      	str	r3, [r4, #12]
 800ea4e:	4630      	mov	r0, r6
 800ea50:	b29b      	uxth	r3, r3
 800ea52:	f7ff fedd 	bl	800e810 <uxr_common_create_entity>
 800ea56:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800ea5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea5e:	f04f 0e22 	mov.w	lr, #34	@ 0x22
 800ea62:	f04f 0c12 	mov.w	ip, #18
 800ea66:	250a      	movs	r5, #10
 800ea68:	2220      	movs	r2, #32
 800ea6a:	2110      	movs	r1, #16
 800ea6c:	2008      	movs	r0, #8
 800ea6e:	2702      	movs	r7, #2
 800ea70:	e7cd      	b.n	800ea0e <uxr_buffer_create_datawriter_bin+0x76>
 800ea72:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 800ea76:	e7d9      	b.n	800ea2c <uxr_buffer_create_datawriter_bin+0x94>
 800ea78:	f8ad 0040 	strh.w	r0, [sp, #64]	@ 0x40
 800ea7c:	e7d6      	b.n	800ea2c <uxr_buffer_create_datawriter_bin+0x94>
 800ea7e:	f8ad 2040 	strh.w	r2, [sp, #64]	@ 0x40
 800ea82:	e7d3      	b.n	800ea2c <uxr_buffer_create_datawriter_bin+0x94>

0800ea84 <get_custom_error>:
 800ea84:	4b01      	ldr	r3, [pc, #4]	@ (800ea8c <get_custom_error+0x8>)
 800ea86:	7818      	ldrb	r0, [r3, #0]
 800ea88:	4770      	bx	lr
 800ea8a:	bf00      	nop
 800ea8c:	2000b27c 	.word	0x2000b27c

0800ea90 <recv_custom_msg>:
 800ea90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea94:	4693      	mov	fp, r2
 800ea96:	b089      	sub	sp, #36	@ 0x24
 800ea98:	f890 2200 	ldrb.w	r2, [r0, #512]	@ 0x200
 800ea9c:	9305      	str	r3, [sp, #20]
 800ea9e:	468a      	mov	sl, r1
 800eaa0:	2100      	movs	r1, #0
 800eaa2:	4604      	mov	r4, r0
 800eaa4:	f88d 101e 	strb.w	r1, [sp, #30]
 800eaa8:	b322      	cbz	r2, 800eaf4 <recv_custom_msg+0x64>
 800eaaa:	f200 2902 	addw	r9, r0, #514	@ 0x202
 800eaae:	f10d 081f 	add.w	r8, sp, #31
 800eab2:	af05      	add	r7, sp, #20
 800eab4:	f10d 061e 	add.w	r6, sp, #30
 800eab8:	f44f 7500 	mov.w	r5, #512	@ 0x200
 800eabc:	e002      	b.n	800eac4 <recv_custom_msg+0x34>
 800eabe:	9b05      	ldr	r3, [sp, #20]
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	dd0f      	ble.n	800eae4 <recv_custom_msg+0x54>
 800eac4:	f8d4 1274 	ldr.w	r1, [r4, #628]	@ 0x274
 800eac8:	4623      	mov	r3, r4
 800eaca:	e9cd 7802 	strd	r7, r8, [sp, #8]
 800eace:	e9cd 5600 	strd	r5, r6, [sp]
 800ead2:	4622      	mov	r2, r4
 800ead4:	4648      	mov	r0, r9
 800ead6:	f001 fc4d 	bl	8010374 <uxr_read_framed_msg>
 800eada:	2800      	cmp	r0, #0
 800eadc:	d0ef      	beq.n	800eabe <recv_custom_msg+0x2e>
 800eade:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eae2:	b1b3      	cbz	r3, 800eb12 <recv_custom_msg+0x82>
 800eae4:	4b0f      	ldr	r3, [pc, #60]	@ (800eb24 <recv_custom_msg+0x94>)
 800eae6:	f89d 201f 	ldrb.w	r2, [sp, #31]
 800eaea:	701a      	strb	r2, [r3, #0]
 800eaec:	2000      	movs	r0, #0
 800eaee:	b009      	add	sp, #36	@ 0x24
 800eaf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaf4:	f10d 021f 	add.w	r2, sp, #31
 800eaf8:	9200      	str	r2, [sp, #0]
 800eafa:	f8d0 5274 	ldr.w	r5, [r0, #628]	@ 0x274
 800eafe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800eb02:	4601      	mov	r1, r0
 800eb04:	47a8      	blx	r5
 800eb06:	2800      	cmp	r0, #0
 800eb08:	d0ec      	beq.n	800eae4 <recv_custom_msg+0x54>
 800eb0a:	f89d 301e 	ldrb.w	r3, [sp, #30]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1e8      	bne.n	800eae4 <recv_custom_msg+0x54>
 800eb12:	f8cb 0000 	str.w	r0, [fp]
 800eb16:	2001      	movs	r0, #1
 800eb18:	f8ca 4000 	str.w	r4, [sl]
 800eb1c:	b009      	add	sp, #36	@ 0x24
 800eb1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb22:	bf00      	nop
 800eb24:	2000b27c 	.word	0x2000b27c

0800eb28 <send_custom_msg>:
 800eb28:	b530      	push	{r4, r5, lr}
 800eb2a:	f890 4200 	ldrb.w	r4, [r0, #512]	@ 0x200
 800eb2e:	b087      	sub	sp, #28
 800eb30:	4615      	mov	r5, r2
 800eb32:	b974      	cbnz	r4, 800eb52 <send_custom_msg+0x2a>
 800eb34:	f8d0 4270 	ldr.w	r4, [r0, #624]	@ 0x270
 800eb38:	f10d 0317 	add.w	r3, sp, #23
 800eb3c:	47a0      	blx	r4
 800eb3e:	b108      	cbz	r0, 800eb44 <send_custom_msg+0x1c>
 800eb40:	42a8      	cmp	r0, r5
 800eb42:	d015      	beq.n	800eb70 <send_custom_msg+0x48>
 800eb44:	4b0c      	ldr	r3, [pc, #48]	@ (800eb78 <send_custom_msg+0x50>)
 800eb46:	f89d 2017 	ldrb.w	r2, [sp, #23]
 800eb4a:	701a      	strb	r2, [r3, #0]
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	b007      	add	sp, #28
 800eb50:	bd30      	pop	{r4, r5, pc}
 800eb52:	460b      	mov	r3, r1
 800eb54:	2200      	movs	r2, #0
 800eb56:	f10d 0117 	add.w	r1, sp, #23
 800eb5a:	e9cd 2101 	strd	r2, r1, [sp, #4]
 800eb5e:	4602      	mov	r2, r0
 800eb60:	f8d0 1270 	ldr.w	r1, [r0, #624]	@ 0x270
 800eb64:	9500      	str	r5, [sp, #0]
 800eb66:	f200 2002 	addw	r0, r0, #514	@ 0x202
 800eb6a:	f001 fa0b 	bl	800ff84 <uxr_write_framed_msg>
 800eb6e:	e7e6      	b.n	800eb3e <send_custom_msg+0x16>
 800eb70:	2001      	movs	r0, #1
 800eb72:	b007      	add	sp, #28
 800eb74:	bd30      	pop	{r4, r5, pc}
 800eb76:	bf00      	nop
 800eb78:	2000b27c 	.word	0x2000b27c

0800eb7c <uxr_set_custom_transport_callbacks>:
 800eb7c:	b410      	push	{r4}
 800eb7e:	9c01      	ldr	r4, [sp, #4]
 800eb80:	f8c0 4270 	str.w	r4, [r0, #624]	@ 0x270
 800eb84:	e9c0 239a 	strd	r2, r3, [r0, #616]	@ 0x268
 800eb88:	9b02      	ldr	r3, [sp, #8]
 800eb8a:	f880 1200 	strb.w	r1, [r0, #512]	@ 0x200
 800eb8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb92:	f8c0 3274 	str.w	r3, [r0, #628]	@ 0x274
 800eb96:	4770      	bx	lr

0800eb98 <uxr_init_custom_transport>:
 800eb98:	b538      	push	{r3, r4, r5, lr}
 800eb9a:	f8d0 3268 	ldr.w	r3, [r0, #616]	@ 0x268
 800eb9e:	b303      	cbz	r3, 800ebe2 <uxr_init_custom_transport+0x4a>
 800eba0:	f8d0 226c 	ldr.w	r2, [r0, #620]	@ 0x26c
 800eba4:	4604      	mov	r4, r0
 800eba6:	b1e2      	cbz	r2, 800ebe2 <uxr_init_custom_transport+0x4a>
 800eba8:	f8d0 2270 	ldr.w	r2, [r0, #624]	@ 0x270
 800ebac:	b1ca      	cbz	r2, 800ebe2 <uxr_init_custom_transport+0x4a>
 800ebae:	f8d0 2274 	ldr.w	r2, [r0, #628]	@ 0x274
 800ebb2:	b1b2      	cbz	r2, 800ebe2 <uxr_init_custom_transport+0x4a>
 800ebb4:	f8c0 128c 	str.w	r1, [r0, #652]	@ 0x28c
 800ebb8:	4798      	blx	r3
 800ebba:	4605      	mov	r5, r0
 800ebbc:	b188      	cbz	r0, 800ebe2 <uxr_init_custom_transport+0x4a>
 800ebbe:	f894 3200 	ldrb.w	r3, [r4, #512]	@ 0x200
 800ebc2:	b98b      	cbnz	r3, 800ebe8 <uxr_init_custom_transport+0x50>
 800ebc4:	490b      	ldr	r1, [pc, #44]	@ (800ebf4 <uxr_init_custom_transport+0x5c>)
 800ebc6:	4b0c      	ldr	r3, [pc, #48]	@ (800ebf8 <uxr_init_custom_transport+0x60>)
 800ebc8:	4a0c      	ldr	r2, [pc, #48]	@ (800ebfc <uxr_init_custom_transport+0x64>)
 800ebca:	f8c4 3280 	str.w	r3, [r4, #640]	@ 0x280
 800ebce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ebd2:	e9c4 419e 	strd	r4, r1, [r4, #632]	@ 0x278
 800ebd6:	f8c4 2284 	str.w	r2, [r4, #644]	@ 0x284
 800ebda:	f8a4 3288 	strh.w	r3, [r4, #648]	@ 0x288
 800ebde:	4628      	mov	r0, r5
 800ebe0:	bd38      	pop	{r3, r4, r5, pc}
 800ebe2:	2500      	movs	r5, #0
 800ebe4:	4628      	mov	r0, r5
 800ebe6:	bd38      	pop	{r3, r4, r5, pc}
 800ebe8:	2100      	movs	r1, #0
 800ebea:	f204 2002 	addw	r0, r4, #514	@ 0x202
 800ebee:	f001 f9c3 	bl	800ff78 <uxr_init_framing_io>
 800ebf2:	e7e7      	b.n	800ebc4 <uxr_init_custom_transport+0x2c>
 800ebf4:	0800eb29 	.word	0x0800eb29
 800ebf8:	0800ea91 	.word	0x0800ea91
 800ebfc:	0800ea85 	.word	0x0800ea85

0800ec00 <uxr_close_custom_transport>:
 800ec00:	f8d0 326c 	ldr.w	r3, [r0, #620]	@ 0x26c
 800ec04:	4718      	bx	r3
 800ec06:	bf00      	nop

0800ec08 <uxr_object_id>:
 800ec08:	b082      	sub	sp, #8
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	f88d 1006 	strb.w	r1, [sp, #6]
 800ec10:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec14:	f360 030f 	bfi	r3, r0, #0, #16
 800ec18:	f362 431f 	bfi	r3, r2, #16, #16
 800ec1c:	4618      	mov	r0, r3
 800ec1e:	b002      	add	sp, #8
 800ec20:	4770      	bx	lr
 800ec22:	bf00      	nop

0800ec24 <uxr_object_id_from_raw>:
 800ec24:	7843      	ldrb	r3, [r0, #1]
 800ec26:	7801      	ldrb	r1, [r0, #0]
 800ec28:	b082      	sub	sp, #8
 800ec2a:	f003 020f 	and.w	r2, r3, #15
 800ec2e:	f88d 2006 	strb.w	r2, [sp, #6]
 800ec32:	091b      	lsrs	r3, r3, #4
 800ec34:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ec38:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	f363 000f 	bfi	r0, r3, #0, #16
 800ec42:	f362 401f 	bfi	r0, r2, #16, #16
 800ec46:	b002      	add	sp, #8
 800ec48:	4770      	bx	lr
 800ec4a:	bf00      	nop

0800ec4c <uxr_object_id_to_raw>:
 800ec4c:	4602      	mov	r2, r0
 800ec4e:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800ec52:	b082      	sub	sp, #8
 800ec54:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800ec58:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800ec5c:	f881 c000 	strb.w	ip, [r1]
 800ec60:	7048      	strb	r0, [r1, #1]
 800ec62:	b002      	add	sp, #8
 800ec64:	4770      	bx	lr
 800ec66:	bf00      	nop

0800ec68 <uxr_buffer_cancel_data>:
 800ec68:	b510      	push	{r4, lr}
 800ec6a:	b094      	sub	sp, #80	@ 0x50
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	9202      	str	r2, [sp, #8]
 800ec70:	9205      	str	r2, [sp, #20]
 800ec72:	9301      	str	r3, [sp, #4]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ec7a:	f88d 301e 	strb.w	r3, [sp, #30]
 800ec7e:	f8cd 3026 	str.w	r3, [sp, #38]	@ 0x26
 800ec82:	f8cd 302a 	str.w	r3, [sp, #42]	@ 0x2a
 800ec86:	2308      	movs	r3, #8
 800ec88:	f88d 2024 	strb.w	r2, [sp, #36]	@ 0x24
 800ec8c:	9300      	str	r3, [sp, #0]
 800ec8e:	2210      	movs	r2, #16
 800ec90:	ab0c      	add	r3, sp, #48	@ 0x30
 800ec92:	4604      	mov	r4, r0
 800ec94:	9103      	str	r1, [sp, #12]
 800ec96:	f001 f809 	bl	800fcac <uxr_prepare_stream_to_write_submessage>
 800ec9a:	b918      	cbnz	r0, 800eca4 <uxr_buffer_cancel_data+0x3c>
 800ec9c:	4604      	mov	r4, r0
 800ec9e:	4620      	mov	r0, r4
 800eca0:	b014      	add	sp, #80	@ 0x50
 800eca2:	bd10      	pop	{r4, pc}
 800eca4:	9905      	ldr	r1, [sp, #20]
 800eca6:	aa06      	add	r2, sp, #24
 800eca8:	4620      	mov	r0, r4
 800ecaa:	f001 f935 	bl	800ff18 <uxr_init_base_object_request>
 800ecae:	a906      	add	r1, sp, #24
 800ecb0:	4604      	mov	r4, r0
 800ecb2:	a80c      	add	r0, sp, #48	@ 0x30
 800ecb4:	f002 ffd6 	bl	8011c64 <uxr_serialize_READ_DATA_Payload>
 800ecb8:	4620      	mov	r0, r4
 800ecba:	b014      	add	sp, #80	@ 0x50
 800ecbc:	bd10      	pop	{r4, pc}
 800ecbe:	bf00      	nop

0800ecc0 <read_submessage_format>:
 800ecc0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ecc4:	b095      	sub	sp, #84	@ 0x54
 800ecc6:	f8bd 6078 	ldrh.w	r6, [sp, #120]	@ 0x78
 800ecca:	b113      	cbz	r3, 800ecd2 <read_submessage_format+0x12>
 800eccc:	b015      	add	sp, #84	@ 0x54
 800ecce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	4615      	mov	r5, r2
 800ecd6:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 800ecda:	4607      	mov	r7, r0
 800ecdc:	981c      	ldr	r0, [sp, #112]	@ 0x70
 800ecde:	9004      	str	r0, [sp, #16]
 800ece0:	981d      	ldr	r0, [sp, #116]	@ 0x74
 800ece2:	9005      	str	r0, [sp, #20]
 800ece4:	1a52      	subs	r2, r2, r1
 800ece6:	a80c      	add	r0, sp, #48	@ 0x30
 800ece8:	4699      	mov	r9, r3
 800ecea:	f89d 8076 	ldrb.w	r8, [sp, #118]	@ 0x76
 800ecee:	f7fd f957 	bl	800bfa0 <ucdr_init_buffer>
 800ecf2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ecf6:	a80c      	add	r0, sp, #48	@ 0x30
 800ecf8:	f7fd f926 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 800ecfc:	69e2      	ldr	r2, [r4, #28]
 800ecfe:	b19a      	cbz	r2, 800ed28 <read_submessage_format+0x68>
 800ed00:	f1b8 0f07 	cmp.w	r8, #7
 800ed04:	f882 9014 	strb.w	r9, [r2, #20]
 800ed08:	d040      	beq.n	800ed8c <read_submessage_format+0xcc>
 800ed0a:	f1b8 0f08 	cmp.w	r8, #8
 800ed0e:	d02e      	beq.n	800ed6e <read_submessage_format+0xae>
 800ed10:	f1b8 0f06 	cmp.w	r8, #6
 800ed14:	d011      	beq.n	800ed3a <read_submessage_format+0x7a>
 800ed16:	2301      	movs	r3, #1
 800ed18:	7513      	strb	r3, [r2, #20]
 800ed1a:	4629      	mov	r1, r5
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	f7fd f98f 	bl	800c040 <ucdr_advance_buffer>
 800ed22:	b015      	add	sp, #84	@ 0x54
 800ed24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed28:	f1b8 0f07 	cmp.w	r8, #7
 800ed2c:	d02e      	beq.n	800ed8c <read_submessage_format+0xcc>
 800ed2e:	f1b8 0f08 	cmp.w	r8, #8
 800ed32:	d01c      	beq.n	800ed6e <read_submessage_format+0xae>
 800ed34:	f1b8 0f06 	cmp.w	r8, #6
 800ed38:	d1ef      	bne.n	800ed1a <read_submessage_format+0x5a>
 800ed3a:	f8d7 8088 	ldr.w	r8, [r7, #136]	@ 0x88
 800ed3e:	f1b8 0f00 	cmp.w	r8, #0
 800ed42:	d011      	beq.n	800ed68 <read_submessage_format+0xa8>
 800ed44:	ab0c      	add	r3, sp, #48	@ 0x30
 800ed46:	e9cd 3500 	strd	r3, r5, [sp]
 800ed4a:	2306      	movs	r3, #6
 800ed4c:	f88d 3016 	strb.w	r3, [sp, #22]
 800ed50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ed54:	9302      	str	r3, [sp, #8]
 800ed56:	4632      	mov	r2, r6
 800ed58:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 800ed5c:	4638      	mov	r0, r7
 800ed5e:	47c0      	blx	r8
 800ed60:	2301      	movs	r3, #1
 800ed62:	69e2      	ldr	r2, [r4, #28]
 800ed64:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ed68:	2a00      	cmp	r2, #0
 800ed6a:	d1d4      	bne.n	800ed16 <read_submessage_format+0x56>
 800ed6c:	e7d5      	b.n	800ed1a <read_submessage_format+0x5a>
 800ed6e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d0f8      	beq.n	800ed68 <read_submessage_format+0xa8>
 800ed76:	a906      	add	r1, sp, #24
 800ed78:	a80c      	add	r0, sp, #48	@ 0x30
 800ed7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ed7e:	f003 f837 	bl	8011df0 <uxr_deserialize_SampleIdentity>
 800ed82:	b9a0      	cbnz	r0, 800edae <read_submessage_format+0xee>
 800ed84:	69e2      	ldr	r2, [r4, #28]
 800ed86:	2a00      	cmp	r2, #0
 800ed88:	d1c5      	bne.n	800ed16 <read_submessage_format+0x56>
 800ed8a:	e7c6      	b.n	800ed1a <read_submessage_format+0x5a>
 800ed8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ed90:	b13b      	cbz	r3, 800eda2 <read_submessage_format+0xe2>
 800ed92:	a906      	add	r1, sp, #24
 800ed94:	a80c      	add	r0, sp, #48	@ 0x30
 800ed96:	f8dd 8040 	ldr.w	r8, [sp, #64]	@ 0x40
 800ed9a:	f002 fcfd 	bl	8011798 <uxr_deserialize_BaseObjectRequest>
 800ed9e:	bb60      	cbnz	r0, 800edfa <read_submessage_format+0x13a>
 800eda0:	69e2      	ldr	r2, [r4, #28]
 800eda2:	68a3      	ldr	r3, [r4, #8]
 800eda4:	442b      	add	r3, r5
 800eda6:	60a3      	str	r3, [r4, #8]
 800eda8:	2a00      	cmp	r2, #0
 800edaa:	d1b4      	bne.n	800ed16 <read_submessage_format+0x56>
 800edac:	e7b5      	b.n	800ed1a <read_submessage_format+0x5a>
 800edae:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800edb2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800edb4:	1a52      	subs	r2, r2, r1
 800edb6:	eba8 0803 	sub.w	r8, r8, r3
 800edba:	a80c      	add	r0, sp, #48	@ 0x30
 800edbc:	f7fd f8f0 	bl	800bfa0 <ucdr_init_buffer>
 800edc0:	44a8      	add	r8, r5
 800edc2:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800edc6:	a80c      	add	r0, sp, #48	@ 0x30
 800edc8:	f7fd f8be 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 800edcc:	fa1f f888 	uxth.w	r8, r8
 800edd0:	ab0c      	add	r3, sp, #48	@ 0x30
 800edd2:	9300      	str	r3, [sp, #0]
 800edd4:	f8cd 8004 	str.w	r8, [sp, #4]
 800edd8:	2108      	movs	r1, #8
 800edda:	f88d 1016 	strb.w	r1, [sp, #22]
 800edde:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800ede2:	9102      	str	r1, [sp, #8]
 800ede4:	ab06      	add	r3, sp, #24
 800ede6:	4632      	mov	r2, r6
 800ede8:	9905      	ldr	r1, [sp, #20]
 800edea:	f8d7 60a4 	ldr.w	r6, [r7, #164]	@ 0xa4
 800edee:	4638      	mov	r0, r7
 800edf0:	47b0      	blx	r6
 800edf2:	2301      	movs	r3, #1
 800edf4:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800edf8:	e7c4      	b.n	800ed84 <read_submessage_format+0xc4>
 800edfa:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	@ 0x34
 800edfe:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ee00:	1a52      	subs	r2, r2, r1
 800ee02:	a80c      	add	r0, sp, #48	@ 0x30
 800ee04:	eba8 0803 	sub.w	r8, r8, r3
 800ee08:	f7fd f8ca 	bl	800bfa0 <ucdr_init_buffer>
 800ee0c:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 800ee10:	a80c      	add	r0, sp, #48	@ 0x30
 800ee12:	f7fd f899 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 800ee16:	ab0c      	add	r3, sp, #48	@ 0x30
 800ee18:	9300      	str	r3, [sp, #0]
 800ee1a:	f89d 1018 	ldrb.w	r1, [sp, #24]
 800ee1e:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800ee22:	44a8      	add	r8, r5
 800ee24:	fa1f f888 	uxth.w	r8, r8
 800ee28:	f8cd 8004 	str.w	r8, [sp, #4]
 800ee2c:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 800ee30:	2107      	movs	r1, #7
 800ee32:	f88d 1016 	strb.w	r1, [sp, #22]
 800ee36:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 800ee3a:	9102      	str	r1, [sp, #8]
 800ee3c:	4632      	mov	r2, r6
 800ee3e:	b29b      	uxth	r3, r3
 800ee40:	f8d7 60ac 	ldr.w	r6, [r7, #172]	@ 0xac
 800ee44:	9905      	ldr	r1, [sp, #20]
 800ee46:	4638      	mov	r0, r7
 800ee48:	47b0      	blx	r6
 800ee4a:	2301      	movs	r3, #1
 800ee4c:	f887 30b4 	strb.w	r3, [r7, #180]	@ 0xb4
 800ee50:	e7a6      	b.n	800eda0 <read_submessage_format+0xe0>
 800ee52:	bf00      	nop

0800ee54 <on_get_fragmentation_info>:
 800ee54:	b500      	push	{lr}
 800ee56:	b08b      	sub	sp, #44	@ 0x2c
 800ee58:	4601      	mov	r1, r0
 800ee5a:	2204      	movs	r2, #4
 800ee5c:	a802      	add	r0, sp, #8
 800ee5e:	f7fd f89f 	bl	800bfa0 <ucdr_init_buffer>
 800ee62:	f10d 0305 	add.w	r3, sp, #5
 800ee66:	f10d 0206 	add.w	r2, sp, #6
 800ee6a:	a901      	add	r1, sp, #4
 800ee6c:	a802      	add	r0, sp, #8
 800ee6e:	f001 fe67 	bl	8010b40 <uxr_read_submessage_header>
 800ee72:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800ee76:	2b0d      	cmp	r3, #13
 800ee78:	d003      	beq.n	800ee82 <on_get_fragmentation_info+0x2e>
 800ee7a:	2000      	movs	r0, #0
 800ee7c:	b00b      	add	sp, #44	@ 0x2c
 800ee7e:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee82:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800ee86:	f013 0f02 	tst.w	r3, #2
 800ee8a:	bf14      	ite	ne
 800ee8c:	2002      	movne	r0, #2
 800ee8e:	2001      	moveq	r0, #1
 800ee90:	b00b      	add	sp, #44	@ 0x2c
 800ee92:	f85d fb04 	ldr.w	pc, [sp], #4
 800ee96:	bf00      	nop

0800ee98 <read_submessage_get_info>:
 800ee98:	b570      	push	{r4, r5, r6, lr}
 800ee9a:	2500      	movs	r5, #0
 800ee9c:	f5ad 7d34 	sub.w	sp, sp, #720	@ 0x2d0
 800eea0:	4604      	mov	r4, r0
 800eea2:	f44f 7224 	mov.w	r2, #656	@ 0x290
 800eea6:	460e      	mov	r6, r1
 800eea8:	a810      	add	r0, sp, #64	@ 0x40
 800eeaa:	4629      	mov	r1, r5
 800eeac:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800eeb0:	f008 fe62 	bl	8017b78 <memset>
 800eeb4:	a903      	add	r1, sp, #12
 800eeb6:	4630      	mov	r0, r6
 800eeb8:	f002 fe16 	bl	8011ae8 <uxr_deserialize_GET_INFO_Payload>
 800eebc:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800eec0:	f8ad 3040 	strh.w	r3, [sp, #64]	@ 0x40
 800eec4:	4620      	mov	r0, r4
 800eec6:	f001 f81f 	bl	800ff08 <uxr_session_header_offset>
 800eeca:	462b      	mov	r3, r5
 800eecc:	9000      	str	r0, [sp, #0]
 800eece:	220c      	movs	r2, #12
 800eed0:	a905      	add	r1, sp, #20
 800eed2:	a808      	add	r0, sp, #32
 800eed4:	f7fd f852 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 800eed8:	a910      	add	r1, sp, #64	@ 0x40
 800eeda:	a808      	add	r0, sp, #32
 800eedc:	f002 fe76 	bl	8011bcc <uxr_serialize_INFO_Payload>
 800eee0:	9b08      	ldr	r3, [sp, #32]
 800eee2:	462a      	mov	r2, r5
 800eee4:	4629      	mov	r1, r5
 800eee6:	4620      	mov	r0, r4
 800eee8:	f000 ffb8 	bl	800fe5c <uxr_stamp_session_header>
 800eeec:	a808      	add	r0, sp, #32
 800eeee:	f7fd f883 	bl	800bff8 <ucdr_buffer_length>
 800eef2:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800eef4:	4602      	mov	r2, r0
 800eef6:	a905      	add	r1, sp, #20
 800eef8:	e9d3 0400 	ldrd	r0, r4, [r3]
 800eefc:	47a0      	blx	r4
 800eefe:	f50d 7d34 	add.w	sp, sp, #720	@ 0x2d0
 800ef02:	bd70      	pop	{r4, r5, r6, pc}

0800ef04 <write_submessage_acknack.isra.0>:
 800ef04:	b570      	push	{r4, r5, r6, lr}
 800ef06:	b092      	sub	sp, #72	@ 0x48
 800ef08:	4605      	mov	r5, r0
 800ef0a:	460e      	mov	r6, r1
 800ef0c:	4614      	mov	r4, r2
 800ef0e:	f000 fffb 	bl	800ff08 <uxr_session_header_offset>
 800ef12:	a905      	add	r1, sp, #20
 800ef14:	9000      	str	r0, [sp, #0]
 800ef16:	2300      	movs	r3, #0
 800ef18:	a80a      	add	r0, sp, #40	@ 0x28
 800ef1a:	2211      	movs	r2, #17
 800ef1c:	f7fd f82e 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 800ef20:	2218      	movs	r2, #24
 800ef22:	fb02 5404 	mla	r4, r2, r4, r5
 800ef26:	2300      	movs	r3, #0
 800ef28:	2205      	movs	r2, #5
 800ef2a:	3450      	adds	r4, #80	@ 0x50
 800ef2c:	210a      	movs	r1, #10
 800ef2e:	a80a      	add	r0, sp, #40	@ 0x28
 800ef30:	f001 fdec 	bl	8010b0c <uxr_buffer_submessage_header>
 800ef34:	a903      	add	r1, sp, #12
 800ef36:	4620      	mov	r0, r4
 800ef38:	f007 fabe 	bl	80164b8 <uxr_compute_acknack>
 800ef3c:	ba40      	rev16	r0, r0
 800ef3e:	f8ad 000e 	strh.w	r0, [sp, #14]
 800ef42:	a903      	add	r1, sp, #12
 800ef44:	a80a      	add	r0, sp, #40	@ 0x28
 800ef46:	f88d 6010 	strb.w	r6, [sp, #16]
 800ef4a:	f002 feaf 	bl	8011cac <uxr_serialize_ACKNACK_Payload>
 800ef4e:	2200      	movs	r2, #0
 800ef50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef52:	4611      	mov	r1, r2
 800ef54:	4628      	mov	r0, r5
 800ef56:	f000 ff81 	bl	800fe5c <uxr_stamp_session_header>
 800ef5a:	a80a      	add	r0, sp, #40	@ 0x28
 800ef5c:	f7fd f84c 	bl	800bff8 <ucdr_buffer_length>
 800ef60:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800ef62:	4602      	mov	r2, r0
 800ef64:	a905      	add	r1, sp, #20
 800ef66:	e9d3 0400 	ldrd	r0, r4, [r3]
 800ef6a:	47a0      	blx	r4
 800ef6c:	b012      	add	sp, #72	@ 0x48
 800ef6e:	bd70      	pop	{r4, r5, r6, pc}

0800ef70 <uxr_init_session>:
 800ef70:	b510      	push	{r4, lr}
 800ef72:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800efa8 <uxr_init_session+0x38>
 800ef76:	2300      	movs	r3, #0
 800ef78:	e9c0 131c 	strd	r1, r3, [r0, #112]	@ 0x70
 800ef7c:	4604      	mov	r4, r0
 800ef7e:	e9c0 331e 	strd	r3, r3, [r0, #120]	@ 0x78
 800ef82:	e9c0 3320 	strd	r3, r3, [r0, #128]	@ 0x80
 800ef86:	e9c0 3322 	strd	r3, r3, [r0, #136]	@ 0x88
 800ef8a:	e9c0 3324 	strd	r3, r3, [r0, #144]	@ 0x90
 800ef8e:	ed80 7b26 	vstr	d7, [r0, #152]	@ 0x98
 800ef92:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
 800ef96:	2181      	movs	r1, #129	@ 0x81
 800ef98:	f000 fecc 	bl	800fd34 <uxr_init_session_info>
 800ef9c:	f104 0008 	add.w	r0, r4, #8
 800efa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efa4:	f001 bcce 	b.w	8010944 <uxr_init_stream_storage>
	...

0800efb0 <uxr_set_status_callback>:
 800efb0:	e9c0 1220 	strd	r1, r2, [r0, #128]	@ 0x80
 800efb4:	4770      	bx	lr
 800efb6:	bf00      	nop

0800efb8 <uxr_set_topic_callback>:
 800efb8:	e9c0 1222 	strd	r1, r2, [r0, #136]	@ 0x88
 800efbc:	4770      	bx	lr
 800efbe:	bf00      	nop

0800efc0 <uxr_set_request_callback>:
 800efc0:	e9c0 1229 	strd	r1, r2, [r0, #164]	@ 0xa4
 800efc4:	4770      	bx	lr
 800efc6:	bf00      	nop

0800efc8 <uxr_set_reply_callback>:
 800efc8:	e9c0 122b 	strd	r1, r2, [r0, #172]	@ 0xac
 800efcc:	4770      	bx	lr
 800efce:	bf00      	nop

0800efd0 <uxr_create_output_best_effort_stream>:
 800efd0:	b510      	push	{r4, lr}
 800efd2:	b084      	sub	sp, #16
 800efd4:	e9cd 2100 	strd	r2, r1, [sp]
 800efd8:	4604      	mov	r4, r0
 800efda:	f000 ff95 	bl	800ff08 <uxr_session_header_offset>
 800efde:	e9dd 2100 	ldrd	r2, r1, [sp]
 800efe2:	4603      	mov	r3, r0
 800efe4:	f104 0008 	add.w	r0, r4, #8
 800efe8:	b004      	add	sp, #16
 800efea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800efee:	f001 bcf3 	b.w	80109d8 <uxr_add_output_best_effort_buffer>
 800eff2:	bf00      	nop

0800eff4 <uxr_create_output_reliable_stream>:
 800eff4:	b510      	push	{r4, lr}
 800eff6:	b088      	sub	sp, #32
 800eff8:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800effc:	4604      	mov	r4, r0
 800effe:	9303      	str	r3, [sp, #12]
 800f000:	f000 ff82 	bl	800ff08 <uxr_session_header_offset>
 800f004:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f008:	9000      	str	r0, [sp, #0]
 800f00a:	9905      	ldr	r1, [sp, #20]
 800f00c:	f104 0008 	add.w	r0, r4, #8
 800f010:	f001 fcf6 	bl	8010a00 <uxr_add_output_reliable_buffer>
 800f014:	2200      	movs	r2, #0
 800f016:	b2c3      	uxtb	r3, r0
 800f018:	f363 0207 	bfi	r2, r3, #0, #8
 800f01c:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f020:	f363 220f 	bfi	r2, r3, #8, #8
 800f024:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f028:	f363 4217 	bfi	r2, r3, #16, #8
 800f02c:	0e03      	lsrs	r3, r0, #24
 800f02e:	f363 621f 	bfi	r2, r3, #24, #8
 800f032:	4610      	mov	r0, r2
 800f034:	b008      	add	sp, #32
 800f036:	bd10      	pop	{r4, pc}

0800f038 <uxr_create_input_best_effort_stream>:
 800f038:	b082      	sub	sp, #8
 800f03a:	3008      	adds	r0, #8
 800f03c:	b002      	add	sp, #8
 800f03e:	f001 bcf9 	b.w	8010a34 <uxr_add_input_best_effort_buffer>
 800f042:	bf00      	nop

0800f044 <uxr_create_input_reliable_stream>:
 800f044:	b510      	push	{r4, lr}
 800f046:	b084      	sub	sp, #16
 800f048:	4c0b      	ldr	r4, [pc, #44]	@ (800f078 <uxr_create_input_reliable_stream+0x34>)
 800f04a:	9400      	str	r4, [sp, #0]
 800f04c:	3008      	adds	r0, #8
 800f04e:	f001 fd07 	bl	8010a60 <uxr_add_input_reliable_buffer>
 800f052:	2200      	movs	r2, #0
 800f054:	b2c3      	uxtb	r3, r0
 800f056:	f363 0207 	bfi	r2, r3, #0, #8
 800f05a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800f05e:	f363 220f 	bfi	r2, r3, #8, #8
 800f062:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800f066:	f363 4217 	bfi	r2, r3, #16, #8
 800f06a:	0e03      	lsrs	r3, r0, #24
 800f06c:	f363 621f 	bfi	r2, r3, #24, #8
 800f070:	4610      	mov	r0, r2
 800f072:	b004      	add	sp, #16
 800f074:	bd10      	pop	{r4, pc}
 800f076:	bf00      	nop
 800f078:	0800ee55 	.word	0x0800ee55

0800f07c <uxr_epoch_nanos>:
 800f07c:	b510      	push	{r4, lr}
 800f07e:	4604      	mov	r4, r0
 800f080:	f001 fda4 	bl	8010bcc <uxr_nanos>
 800f084:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	@ 0x98
 800f088:	1ac0      	subs	r0, r0, r3
 800f08a:	eb61 0102 	sbc.w	r1, r1, r2
 800f08e:	bd10      	pop	{r4, pc}

0800f090 <uxr_flash_output_streams>:
 800f090:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f094:	7e03      	ldrb	r3, [r0, #24]
 800f096:	b084      	sub	sp, #16
 800f098:	4604      	mov	r4, r0
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d035      	beq.n	800f10a <uxr_flash_output_streams+0x7a>
 800f09e:	f04f 0900 	mov.w	r9, #0
 800f0a2:	4648      	mov	r0, r9
 800f0a4:	f10d 0802 	add.w	r8, sp, #2
 800f0a8:	af03      	add	r7, sp, #12
 800f0aa:	ae02      	add	r6, sp, #8
 800f0ac:	e006      	b.n	800f0bc <uxr_flash_output_streams+0x2c>
 800f0ae:	7e23      	ldrb	r3, [r4, #24]
 800f0b0:	f109 0901 	add.w	r9, r9, #1
 800f0b4:	fa5f f089 	uxtb.w	r0, r9
 800f0b8:	4283      	cmp	r3, r0
 800f0ba:	d926      	bls.n	800f10a <uxr_flash_output_streams+0x7a>
 800f0bc:	2201      	movs	r2, #1
 800f0be:	4611      	mov	r1, r2
 800f0c0:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800f0c4:	f001 fbea 	bl	801089c <uxr_stream_id>
 800f0c8:	3508      	adds	r5, #8
 800f0ca:	4684      	mov	ip, r0
 800f0cc:	4643      	mov	r3, r8
 800f0ce:	463a      	mov	r2, r7
 800f0d0:	4631      	mov	r1, r6
 800f0d2:	4628      	mov	r0, r5
 800f0d4:	f8cd c004 	str.w	ip, [sp, #4]
 800f0d8:	f007 fa74 	bl	80165c4 <uxr_prepare_best_effort_buffer_to_send>
 800f0dc:	2800      	cmp	r0, #0
 800f0de:	d0e6      	beq.n	800f0ae <uxr_flash_output_streams+0x1e>
 800f0e0:	9b02      	ldr	r3, [sp, #8]
 800f0e2:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f0e6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f0ea:	4620      	mov	r0, r4
 800f0ec:	f000 feb6 	bl	800fe5c <uxr_stamp_session_header>
 800f0f0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f0f2:	9a03      	ldr	r2, [sp, #12]
 800f0f4:	685d      	ldr	r5, [r3, #4]
 800f0f6:	6818      	ldr	r0, [r3, #0]
 800f0f8:	9902      	ldr	r1, [sp, #8]
 800f0fa:	47a8      	blx	r5
 800f0fc:	f109 0901 	add.w	r9, r9, #1
 800f100:	7e23      	ldrb	r3, [r4, #24]
 800f102:	fa5f f089 	uxtb.w	r0, r9
 800f106:	4283      	cmp	r3, r0
 800f108:	d8d8      	bhi.n	800f0bc <uxr_flash_output_streams+0x2c>
 800f10a:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f10e:	b38b      	cbz	r3, 800f174 <uxr_flash_output_streams+0xe4>
 800f110:	f04f 0900 	mov.w	r9, #0
 800f114:	f10d 0802 	add.w	r8, sp, #2
 800f118:	af03      	add	r7, sp, #12
 800f11a:	ae02      	add	r6, sp, #8
 800f11c:	4648      	mov	r0, r9
 800f11e:	2201      	movs	r2, #1
 800f120:	2102      	movs	r1, #2
 800f122:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800f126:	f001 fbb9 	bl	801089c <uxr_stream_id>
 800f12a:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800f12e:	3520      	adds	r5, #32
 800f130:	9001      	str	r0, [sp, #4]
 800f132:	e00d      	b.n	800f150 <uxr_flash_output_streams+0xc0>
 800f134:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800f138:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800f13c:	9b02      	ldr	r3, [sp, #8]
 800f13e:	f000 fe8d 	bl	800fe5c <uxr_stamp_session_header>
 800f142:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f144:	9a03      	ldr	r2, [sp, #12]
 800f146:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800f14a:	9902      	ldr	r1, [sp, #8]
 800f14c:	6818      	ldr	r0, [r3, #0]
 800f14e:	47d0      	blx	sl
 800f150:	4643      	mov	r3, r8
 800f152:	463a      	mov	r2, r7
 800f154:	4631      	mov	r1, r6
 800f156:	4628      	mov	r0, r5
 800f158:	f007 fc52 	bl	8016a00 <uxr_prepare_next_reliable_buffer_to_send>
 800f15c:	4603      	mov	r3, r0
 800f15e:	4620      	mov	r0, r4
 800f160:	2b00      	cmp	r3, #0
 800f162:	d1e7      	bne.n	800f134 <uxr_flash_output_streams+0xa4>
 800f164:	f894 3048 	ldrb.w	r3, [r4, #72]	@ 0x48
 800f168:	f109 0901 	add.w	r9, r9, #1
 800f16c:	fa5f f089 	uxtb.w	r0, r9
 800f170:	4283      	cmp	r3, r0
 800f172:	d8d4      	bhi.n	800f11e <uxr_flash_output_streams+0x8e>
 800f174:	b004      	add	sp, #16
 800f176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f17a:	bf00      	nop

0800f17c <read_submessage_info>:
 800f17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f180:	460d      	mov	r5, r1
 800f182:	f5ad 7d24 	sub.w	sp, sp, #656	@ 0x290
 800f186:	4669      	mov	r1, sp
 800f188:	4607      	mov	r7, r0
 800f18a:	4628      	mov	r0, r5
 800f18c:	f002 fbba 	bl	8011904 <uxr_deserialize_BaseObjectReply>
 800f190:	a902      	add	r1, sp, #8
 800f192:	4604      	mov	r4, r0
 800f194:	4628      	mov	r0, r5
 800f196:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800f19a:	f7fb fda7 	bl	800acec <ucdr_deserialize_bool>
 800f19e:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800f1a2:	4004      	ands	r4, r0
 800f1a4:	b2e4      	uxtb	r4, r4
 800f1a6:	b95b      	cbnz	r3, 800f1c0 <read_submessage_info+0x44>
 800f1a8:	a987      	add	r1, sp, #540	@ 0x21c
 800f1aa:	4628      	mov	r0, r5
 800f1ac:	f7fb fd9e 	bl	800acec <ucdr_deserialize_bool>
 800f1b0:	f89d 321c 	ldrb.w	r3, [sp, #540]	@ 0x21c
 800f1b4:	4606      	mov	r6, r0
 800f1b6:	b94b      	cbnz	r3, 800f1cc <read_submessage_info+0x50>
 800f1b8:	f50d 7d24 	add.w	sp, sp, #656	@ 0x290
 800f1bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f1c0:	a903      	add	r1, sp, #12
 800f1c2:	4628      	mov	r0, r5
 800f1c4:	f002 fa46 	bl	8011654 <uxr_deserialize_ObjectVariant>
 800f1c8:	4004      	ands	r4, r0
 800f1ca:	e7ed      	b.n	800f1a8 <read_submessage_info+0x2c>
 800f1cc:	a988      	add	r1, sp, #544	@ 0x220
 800f1ce:	4628      	mov	r0, r5
 800f1d0:	f7fb fdba 	bl	800ad48 <ucdr_deserialize_uint8_t>
 800f1d4:	4234      	tst	r4, r6
 800f1d6:	d0ef      	beq.n	800f1b8 <read_submessage_info+0x3c>
 800f1d8:	2800      	cmp	r0, #0
 800f1da:	d0ed      	beq.n	800f1b8 <read_submessage_info+0x3c>
 800f1dc:	f89d 3220 	ldrb.w	r3, [sp, #544]	@ 0x220
 800f1e0:	2b0d      	cmp	r3, #13
 800f1e2:	d1e9      	bne.n	800f1b8 <read_submessage_info+0x3c>
 800f1e4:	a98a      	add	r1, sp, #552	@ 0x228
 800f1e6:	4628      	mov	r0, r5
 800f1e8:	f7fc fb54 	bl	800b894 <ucdr_deserialize_int16_t>
 800f1ec:	b140      	cbz	r0, 800f200 <read_submessage_info+0x84>
 800f1ee:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	@ 0x228
 800f1f2:	2b00      	cmp	r3, #0
 800f1f4:	dd07      	ble.n	800f206 <read_submessage_info+0x8a>
 800f1f6:	f1b8 0f00 	cmp.w	r8, #0
 800f1fa:	bf14      	ite	ne
 800f1fc:	2001      	movne	r0, #1
 800f1fe:	2002      	moveq	r0, #2
 800f200:	f887 00b5 	strb.w	r0, [r7, #181]	@ 0xb5
 800f204:	e7d8      	b.n	800f1b8 <read_submessage_info+0x3c>
 800f206:	2000      	movs	r0, #0
 800f208:	e7fa      	b.n	800f200 <read_submessage_info+0x84>
 800f20a:	bf00      	nop

0800f20c <read_submessage_list>:
 800f20c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f210:	b097      	sub	sp, #92	@ 0x5c
 800f212:	4ec1      	ldr	r6, [pc, #772]	@ (800f518 <read_submessage_list+0x30c>)
 800f214:	9209      	str	r2, [sp, #36]	@ 0x24
 800f216:	4604      	mov	r4, r0
 800f218:	460d      	mov	r5, r1
 800f21a:	f04f 0801 	mov.w	r8, #1
 800f21e:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 800f222:	aa0c      	add	r2, sp, #48	@ 0x30
 800f224:	f10d 012e 	add.w	r1, sp, #46	@ 0x2e
 800f228:	4628      	mov	r0, r5
 800f22a:	f001 fc89 	bl	8010b40 <uxr_read_submessage_header>
 800f22e:	2800      	cmp	r0, #0
 800f230:	f000 813e 	beq.w	800f4b0 <read_submessage_list+0x2a4>
 800f234:	f89d 302e 	ldrb.w	r3, [sp, #46]	@ 0x2e
 800f238:	f89d 2026 	ldrb.w	r2, [sp, #38]	@ 0x26
 800f23c:	3b02      	subs	r3, #2
 800f23e:	2b0d      	cmp	r3, #13
 800f240:	d8ed      	bhi.n	800f21e <read_submessage_list+0x12>
 800f242:	a101      	add	r1, pc, #4	@ (adr r1, 800f248 <read_submessage_list+0x3c>)
 800f244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f248:	0800f4a7 	.word	0x0800f4a7
 800f24c:	0800f21f 	.word	0x0800f21f
 800f250:	0800f497 	.word	0x0800f497
 800f254:	0800f435 	.word	0x0800f435
 800f258:	0800f42b 	.word	0x0800f42b
 800f25c:	0800f21f 	.word	0x0800f21f
 800f260:	0800f21f 	.word	0x0800f21f
 800f264:	0800f38b 	.word	0x0800f38b
 800f268:	0800f31b 	.word	0x0800f31b
 800f26c:	0800f2db 	.word	0x0800f2db
 800f270:	0800f21f 	.word	0x0800f21f
 800f274:	0800f21f 	.word	0x0800f21f
 800f278:	0800f21f 	.word	0x0800f21f
 800f27c:	0800f281 	.word	0x0800f281
 800f280:	a910      	add	r1, sp, #64	@ 0x40
 800f282:	4628      	mov	r0, r5
 800f284:	f002 fd62 	bl	8011d4c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800f288:	f8d4 9090 	ldr.w	r9, [r4, #144]	@ 0x90
 800f28c:	f1b9 0f00 	cmp.w	r9, #0
 800f290:	f000 8116 	beq.w	800f4c0 <read_submessage_list+0x2b4>
 800f294:	f001 fc9a 	bl	8010bcc <uxr_nanos>
 800f298:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 800f29a:	4602      	mov	r2, r0
 800f29c:	460b      	mov	r3, r1
 800f29e:	9814      	ldr	r0, [sp, #80]	@ 0x50
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	468c      	mov	ip, r1
 800f2a4:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f2a8:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800f2ac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f2ae:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 800f2b0:	468c      	mov	ip, r1
 800f2b2:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800f2b6:	46e2      	mov	sl, ip
 800f2b8:	46bc      	mov	ip, r7
 800f2ba:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	@ 0x48
 800f2be:	fbc0 7106 	smlal	r7, r1, r0, r6
 800f2c2:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800f2c6:	e9cd 7100 	strd	r7, r1, [sp]
 800f2ca:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
 800f2ce:	9106      	str	r1, [sp, #24]
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	47c8      	blx	r9
 800f2d4:	f884 80a0 	strb.w	r8, [r4, #160]	@ 0xa0
 800f2d8:	e7a1      	b.n	800f21e <read_submessage_list+0x12>
 800f2da:	a910      	add	r1, sp, #64	@ 0x40
 800f2dc:	4628      	mov	r0, r5
 800f2de:	f002 fd23 	bl	8011d28 <uxr_deserialize_HEARTBEAT_Payload>
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f2e8:	f001 fb02 	bl	80108f0 <uxr_stream_id_from_raw>
 800f2ec:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800f2f0:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f2f2:	4639      	mov	r1, r7
 800f2f4:	f104 0008 	add.w	r0, r4, #8
 800f2f8:	f001 fbe8 	bl	8010acc <uxr_get_input_reliable_stream>
 800f2fc:	2800      	cmp	r0, #0
 800f2fe:	d08e      	beq.n	800f21e <read_submessage_list+0x12>
 800f300:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 800f304:	f8bd 2042 	ldrh.w	r2, [sp, #66]	@ 0x42
 800f308:	f007 f8ca 	bl	80164a0 <uxr_process_heartbeat>
 800f30c:	f89d 103c 	ldrb.w	r1, [sp, #60]	@ 0x3c
 800f310:	463a      	mov	r2, r7
 800f312:	4620      	mov	r0, r4
 800f314:	f7ff fdf6 	bl	800ef04 <write_submessage_acknack.isra.0>
 800f318:	e781      	b.n	800f21e <read_submessage_list+0x12>
 800f31a:	a910      	add	r1, sp, #64	@ 0x40
 800f31c:	4628      	mov	r0, r5
 800f31e:	f002 fcdb 	bl	8011cd8 <uxr_deserialize_ACKNACK_Payload>
 800f322:	2100      	movs	r1, #0
 800f324:	f89d 0044 	ldrb.w	r0, [sp, #68]	@ 0x44
 800f328:	f001 fae2 	bl	80108f0 <uxr_stream_id_from_raw>
 800f32c:	900d      	str	r0, [sp, #52]	@ 0x34
 800f32e:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800f332:	f104 0008 	add.w	r0, r4, #8
 800f336:	f001 fbb5 	bl	8010aa4 <uxr_get_output_reliable_stream>
 800f33a:	4607      	mov	r7, r0
 800f33c:	2800      	cmp	r0, #0
 800f33e:	f43f af6e 	beq.w	800f21e <read_submessage_list+0x12>
 800f342:	f89d 3042 	ldrb.w	r3, [sp, #66]	@ 0x42
 800f346:	f89d 1043 	ldrb.w	r1, [sp, #67]	@ 0x43
 800f34a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f34e:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800f352:	b289      	uxth	r1, r1
 800f354:	f007 fbfe 	bl	8016b54 <uxr_process_acknack>
 800f358:	4638      	mov	r0, r7
 800f35a:	f007 fbbb 	bl	8016ad4 <uxr_begin_output_nack_buffer_it>
 800f35e:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f362:	f8ad 0032 	strh.w	r0, [sp, #50]	@ 0x32
 800f366:	e006      	b.n	800f376 <read_submessage_list+0x16a>
 800f368:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f36a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800f36c:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800f370:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f372:	6818      	ldr	r0, [r3, #0]
 800f374:	47c8      	blx	r9
 800f376:	f10d 0332 	add.w	r3, sp, #50	@ 0x32
 800f37a:	aa0f      	add	r2, sp, #60	@ 0x3c
 800f37c:	4651      	mov	r1, sl
 800f37e:	4638      	mov	r0, r7
 800f380:	f007 fbaa 	bl	8016ad8 <uxr_next_reliable_nack_buffer_to_send>
 800f384:	2800      	cmp	r0, #0
 800f386:	d1ef      	bne.n	800f368 <read_submessage_list+0x15c>
 800f388:	e749      	b.n	800f21e <read_submessage_list+0x12>
 800f38a:	f89d 3025 	ldrb.w	r3, [sp, #37]	@ 0x25
 800f38e:	f88d 3035 	strb.w	r3, [sp, #53]	@ 0x35
 800f392:	f10d 0a38 	add.w	sl, sp, #56	@ 0x38
 800f396:	f89d 3027 	ldrb.w	r3, [sp, #39]	@ 0x27
 800f39a:	f88d 3037 	strb.w	r3, [sp, #55]	@ 0x37
 800f39e:	4651      	mov	r1, sl
 800f3a0:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f3a4:	f8bd 7030 	ldrh.w	r7, [sp, #48]	@ 0x30
 800f3a8:	f89d 902f 	ldrb.w	r9, [sp, #47]	@ 0x2f
 800f3ac:	f88d 2036 	strb.w	r2, [sp, #54]	@ 0x36
 800f3b0:	4628      	mov	r0, r5
 800f3b2:	f88d 3034 	strb.w	r3, [sp, #52]	@ 0x34
 800f3b6:	f002 f9ef 	bl	8011798 <uxr_deserialize_BaseObjectRequest>
 800f3ba:	4650      	mov	r0, sl
 800f3bc:	a90f      	add	r1, sp, #60	@ 0x3c
 800f3be:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 800f3c2:	f000 fdc7 	bl	800ff54 <uxr_parse_base_object_request>
 800f3c6:	f8d4 b080 	ldr.w	fp, [r4, #128]	@ 0x80
 800f3ca:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f3cc:	f8bd a032 	ldrh.w	sl, [sp, #50]	@ 0x32
 800f3d0:	9110      	str	r1, [sp, #64]	@ 0x40
 800f3d2:	3f04      	subs	r7, #4
 800f3d4:	f009 090e 	and.w	r9, r9, #14
 800f3d8:	b2bf      	uxth	r7, r7
 800f3da:	f1bb 0f00 	cmp.w	fp, #0
 800f3de:	d006      	beq.n	800f3ee <read_submessage_list+0x1e2>
 800f3e0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f3e4:	9300      	str	r3, [sp, #0]
 800f3e6:	4652      	mov	r2, sl
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	4620      	mov	r0, r4
 800f3ec:	47d8      	blx	fp
 800f3ee:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f3f0:	b16a      	cbz	r2, 800f40e <read_submessage_list+0x202>
 800f3f2:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f3f4:	2100      	movs	r1, #0
 800f3f6:	3802      	subs	r0, #2
 800f3f8:	e002      	b.n	800f400 <read_submessage_list+0x1f4>
 800f3fa:	3101      	adds	r1, #1
 800f3fc:	4291      	cmp	r1, r2
 800f3fe:	d006      	beq.n	800f40e <read_submessage_list+0x202>
 800f400:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f404:	4553      	cmp	r3, sl
 800f406:	d1f8      	bne.n	800f3fa <read_submessage_list+0x1ee>
 800f408:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f40a:	2200      	movs	r2, #0
 800f40c:	545a      	strb	r2, [r3, r1]
 800f40e:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 800f412:	9102      	str	r1, [sp, #8]
 800f414:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800f416:	9101      	str	r1, [sp, #4]
 800f418:	990d      	ldr	r1, [sp, #52]	@ 0x34
 800f41a:	9100      	str	r1, [sp, #0]
 800f41c:	464b      	mov	r3, r9
 800f41e:	463a      	mov	r2, r7
 800f420:	4629      	mov	r1, r5
 800f422:	4620      	mov	r0, r4
 800f424:	f7ff fc4c 	bl	800ecc0 <read_submessage_format>
 800f428:	e6f9      	b.n	800f21e <read_submessage_list+0x12>
 800f42a:	4629      	mov	r1, r5
 800f42c:	4620      	mov	r0, r4
 800f42e:	f7ff fea5 	bl	800f17c <read_submessage_info>
 800f432:	e6f4      	b.n	800f21e <read_submessage_list+0x12>
 800f434:	2a00      	cmp	r2, #0
 800f436:	d03e      	beq.n	800f4b6 <read_submessage_list+0x2aa>
 800f438:	a910      	add	r1, sp, #64	@ 0x40
 800f43a:	4628      	mov	r0, r5
 800f43c:	f002 fba8 	bl	8011b90 <uxr_deserialize_STATUS_Payload>
 800f440:	a90e      	add	r1, sp, #56	@ 0x38
 800f442:	aa0d      	add	r2, sp, #52	@ 0x34
 800f444:	a810      	add	r0, sp, #64	@ 0x40
 800f446:	f000 fd85 	bl	800ff54 <uxr_parse_base_object_request>
 800f44a:	f8d4 a080 	ldr.w	sl, [r4, #128]	@ 0x80
 800f44e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f450:	f89d 9044 	ldrb.w	r9, [sp, #68]	@ 0x44
 800f454:	f8bd 7034 	ldrh.w	r7, [sp, #52]	@ 0x34
 800f458:	910f      	str	r1, [sp, #60]	@ 0x3c
 800f45a:	f1ba 0f00 	cmp.w	sl, #0
 800f45e:	d006      	beq.n	800f46e <read_submessage_list+0x262>
 800f460:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 800f464:	9300      	str	r3, [sp, #0]
 800f466:	463a      	mov	r2, r7
 800f468:	464b      	mov	r3, r9
 800f46a:	4620      	mov	r0, r4
 800f46c:	47d0      	blx	sl
 800f46e:	6fe2      	ldr	r2, [r4, #124]	@ 0x7c
 800f470:	2a00      	cmp	r2, #0
 800f472:	f43f aed4 	beq.w	800f21e <read_submessage_list+0x12>
 800f476:	6f60      	ldr	r0, [r4, #116]	@ 0x74
 800f478:	2100      	movs	r1, #0
 800f47a:	3802      	subs	r0, #2
 800f47c:	e003      	b.n	800f486 <read_submessage_list+0x27a>
 800f47e:	3101      	adds	r1, #1
 800f480:	4291      	cmp	r1, r2
 800f482:	f43f aecc 	beq.w	800f21e <read_submessage_list+0x12>
 800f486:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800f48a:	42bb      	cmp	r3, r7
 800f48c:	d1f7      	bne.n	800f47e <read_submessage_list+0x272>
 800f48e:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800f490:	f803 9001 	strb.w	r9, [r3, r1]
 800f494:	e6c3      	b.n	800f21e <read_submessage_list+0x12>
 800f496:	2a00      	cmp	r2, #0
 800f498:	f47f aec1 	bne.w	800f21e <read_submessage_list+0x12>
 800f49c:	4629      	mov	r1, r5
 800f49e:	4620      	mov	r0, r4
 800f4a0:	f000 fc9e 	bl	800fde0 <uxr_read_create_session_status>
 800f4a4:	e6bb      	b.n	800f21e <read_submessage_list+0x12>
 800f4a6:	4629      	mov	r1, r5
 800f4a8:	4620      	mov	r0, r4
 800f4aa:	f7ff fcf5 	bl	800ee98 <read_submessage_get_info>
 800f4ae:	e6b6      	b.n	800f21e <read_submessage_list+0x12>
 800f4b0:	b017      	add	sp, #92	@ 0x5c
 800f4b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f4b6:	4629      	mov	r1, r5
 800f4b8:	4620      	mov	r0, r4
 800f4ba:	f000 fc9d 	bl	800fdf8 <uxr_read_delete_session_status>
 800f4be:	e6ae      	b.n	800f21e <read_submessage_list+0x12>
 800f4c0:	f001 fb84 	bl	8010bcc <uxr_nanos>
 800f4c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f4c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f4c8:	464f      	mov	r7, r9
 800f4ca:	fbc3 2706 	smlal	r2, r7, r3, r6
 800f4ce:	1812      	adds	r2, r2, r0
 800f4d0:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800f4d2:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 800f4d4:	eb47 0101 	adc.w	r1, r7, r1
 800f4d8:	464f      	mov	r7, r9
 800f4da:	fbc3 0706 	smlal	r0, r7, r3, r6
 800f4de:	463b      	mov	r3, r7
 800f4e0:	4684      	mov	ip, r0
 800f4e2:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	@ 0x40
 800f4e6:	fbc7 0906 	smlal	r0, r9, r7, r6
 800f4ea:	eb1c 0c00 	adds.w	ip, ip, r0
 800f4ee:	464f      	mov	r7, r9
 800f4f0:	eb43 0307 	adc.w	r3, r3, r7
 800f4f4:	ebb2 0c0c 	subs.w	ip, r2, ip
 800f4f8:	eb61 0303 	sbc.w	r3, r1, r3
 800f4fc:	0fda      	lsrs	r2, r3, #31
 800f4fe:	eb12 020c 	adds.w	r2, r2, ip
 800f502:	f143 0300 	adc.w	r3, r3, #0
 800f506:	0852      	lsrs	r2, r2, #1
 800f508:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800f50c:	105b      	asrs	r3, r3, #1
 800f50e:	f8c4 2098 	str.w	r2, [r4, #152]	@ 0x98
 800f512:	f8c4 309c 	str.w	r3, [r4, #156]	@ 0x9c
 800f516:	e6dd      	b.n	800f2d4 <read_submessage_list+0xc8>
 800f518:	3b9aca00 	.word	0x3b9aca00

0800f51c <listen_message_reliably>:
 800f51c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f520:	1e0b      	subs	r3, r1, #0
 800f522:	b09d      	sub	sp, #116	@ 0x74
 800f524:	bfb8      	it	lt
 800f526:	f06f 4300 	mvnlt.w	r3, #2147483648	@ 0x80000000
 800f52a:	4680      	mov	r8, r0
 800f52c:	9305      	str	r3, [sp, #20]
 800f52e:	f001 fb33 	bl	8010b98 <uxr_millis>
 800f532:	f898 2048 	ldrb.w	r2, [r8, #72]	@ 0x48
 800f536:	4681      	mov	r9, r0
 800f538:	2a00      	cmp	r2, #0
 800f53a:	f000 80a1 	beq.w	800f680 <listen_message_reliably+0x164>
 800f53e:	2600      	movs	r6, #0
 800f540:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f544:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800f548:	9303      	str	r3, [sp, #12]
 800f54a:	4630      	mov	r0, r6
 800f54c:	460f      	mov	r7, r1
 800f54e:	e00f      	b.n	800f570 <listen_message_reliably+0x54>
 800f550:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800f554:	9903      	ldr	r1, [sp, #12]
 800f556:	455a      	cmp	r2, fp
 800f558:	f106 0601 	add.w	r6, r6, #1
 800f55c:	eb73 0101 	sbcs.w	r1, r3, r1
 800f560:	b2f0      	uxtb	r0, r6
 800f562:	da01      	bge.n	800f568 <listen_message_reliably+0x4c>
 800f564:	4693      	mov	fp, r2
 800f566:	9303      	str	r3, [sp, #12]
 800f568:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f56c:	4283      	cmp	r3, r0
 800f56e:	d960      	bls.n	800f632 <listen_message_reliably+0x116>
 800f570:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800f574:	2102      	movs	r1, #2
 800f576:	2201      	movs	r2, #1
 800f578:	f001 f990 	bl	801089c <uxr_stream_id>
 800f57c:	00e4      	lsls	r4, r4, #3
 800f57e:	f104 0520 	add.w	r5, r4, #32
 800f582:	4445      	add	r5, r8
 800f584:	4601      	mov	r1, r0
 800f586:	463b      	mov	r3, r7
 800f588:	464a      	mov	r2, r9
 800f58a:	4628      	mov	r0, r5
 800f58c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f58e:	f007 fa77 	bl	8016a80 <uxr_update_output_stream_heartbeat_timestamp>
 800f592:	eb08 0304 	add.w	r3, r8, r4
 800f596:	2800      	cmp	r0, #0
 800f598:	d0da      	beq.n	800f550 <listen_message_reliably+0x34>
 800f59a:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800f59e:	f89d 5025 	ldrb.w	r5, [sp, #37]	@ 0x25
 800f5a2:	9304      	str	r3, [sp, #16]
 800f5a4:	4640      	mov	r0, r8
 800f5a6:	f000 fcaf 	bl	800ff08 <uxr_session_header_offset>
 800f5aa:	3501      	adds	r5, #1
 800f5ac:	f10d 0a50 	add.w	sl, sp, #80	@ 0x50
 800f5b0:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800f5b4:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	2211      	movs	r2, #17
 800f5bc:	9000      	str	r0, [sp, #0]
 800f5be:	a90c      	add	r1, sp, #48	@ 0x30
 800f5c0:	4650      	mov	r0, sl
 800f5c2:	f7fc fcdb 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	2205      	movs	r2, #5
 800f5ca:	210b      	movs	r1, #11
 800f5cc:	4650      	mov	r0, sl
 800f5ce:	f001 fa9d 	bl	8010b0c <uxr_buffer_submessage_header>
 800f5d2:	8968      	ldrh	r0, [r5, #10]
 800f5d4:	2101      	movs	r1, #1
 800f5d6:	f007 fb15 	bl	8016c04 <uxr_seq_num_add>
 800f5da:	892b      	ldrh	r3, [r5, #8]
 800f5dc:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 800f5e0:	4602      	mov	r2, r0
 800f5e2:	9b04      	ldr	r3, [sp, #16]
 800f5e4:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 800f5e8:	a90a      	add	r1, sp, #40	@ 0x28
 800f5ea:	4650      	mov	r0, sl
 800f5ec:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 800f5f0:	f002 fb86 	bl	8011d00 <uxr_serialize_HEARTBEAT_Payload>
 800f5f4:	2200      	movs	r2, #0
 800f5f6:	4611      	mov	r1, r2
 800f5f8:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f5fa:	4640      	mov	r0, r8
 800f5fc:	f000 fc2e 	bl	800fe5c <uxr_stamp_session_header>
 800f600:	4650      	mov	r0, sl
 800f602:	f7fc fcf9 	bl	800bff8 <ucdr_buffer_length>
 800f606:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800f60a:	4602      	mov	r2, r0
 800f60c:	a90c      	add	r1, sp, #48	@ 0x30
 800f60e:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f612:	4444      	add	r4, r8
 800f614:	47a8      	blx	r5
 800f616:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	@ 0x38
 800f61a:	9903      	ldr	r1, [sp, #12]
 800f61c:	455a      	cmp	r2, fp
 800f61e:	f106 0601 	add.w	r6, r6, #1
 800f622:	eb73 0101 	sbcs.w	r1, r3, r1
 800f626:	b2f0      	uxtb	r0, r6
 800f628:	db9c      	blt.n	800f564 <listen_message_reliably+0x48>
 800f62a:	f898 3048 	ldrb.w	r3, [r8, #72]	@ 0x48
 800f62e:	4283      	cmp	r3, r0
 800f630:	d89e      	bhi.n	800f570 <listen_message_reliably+0x54>
 800f632:	9a03      	ldr	r2, [sp, #12]
 800f634:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 800f638:	429a      	cmp	r2, r3
 800f63a:	bf08      	it	eq
 800f63c:	f1bb 3fff 	cmpeq.w	fp, #4294967295	@ 0xffffffff
 800f640:	d01e      	beq.n	800f680 <listen_message_reliably+0x164>
 800f642:	ebab 0309 	sub.w	r3, fp, r9
 800f646:	9905      	ldr	r1, [sp, #20]
 800f648:	f8d8 2070 	ldr.w	r2, [r8, #112]	@ 0x70
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	bf08      	it	eq
 800f650:	2301      	moveq	r3, #1
 800f652:	4299      	cmp	r1, r3
 800f654:	bfa8      	it	ge
 800f656:	4619      	movge	r1, r3
 800f658:	6894      	ldr	r4, [r2, #8]
 800f65a:	6810      	ldr	r0, [r2, #0]
 800f65c:	4689      	mov	r9, r1
 800f65e:	460b      	mov	r3, r1
 800f660:	aa08      	add	r2, sp, #32
 800f662:	a907      	add	r1, sp, #28
 800f664:	47a0      	blx	r4
 800f666:	b968      	cbnz	r0, 800f684 <listen_message_reliably+0x168>
 800f668:	9b05      	ldr	r3, [sp, #20]
 800f66a:	eba3 0309 	sub.w	r3, r3, r9
 800f66e:	2b00      	cmp	r3, #0
 800f670:	9305      	str	r3, [sp, #20]
 800f672:	f73f af5c 	bgt.w	800f52e <listen_message_reliably+0x12>
 800f676:	4604      	mov	r4, r0
 800f678:	4620      	mov	r0, r4
 800f67a:	b01d      	add	sp, #116	@ 0x74
 800f67c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f680:	9b05      	ldr	r3, [sp, #20]
 800f682:	e7e0      	b.n	800f646 <listen_message_reliably+0x12a>
 800f684:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800f688:	4604      	mov	r4, r0
 800f68a:	a80c      	add	r0, sp, #48	@ 0x30
 800f68c:	f7fc fc88 	bl	800bfa0 <ucdr_init_buffer>
 800f690:	2500      	movs	r5, #0
 800f692:	f10d 031a 	add.w	r3, sp, #26
 800f696:	aa06      	add	r2, sp, #24
 800f698:	a90c      	add	r1, sp, #48	@ 0x30
 800f69a:	4640      	mov	r0, r8
 800f69c:	f88d 5018 	strb.w	r5, [sp, #24]
 800f6a0:	f000 fbf0 	bl	800fe84 <uxr_read_session_header>
 800f6a4:	b918      	cbnz	r0, 800f6ae <listen_message_reliably+0x192>
 800f6a6:	4620      	mov	r0, r4
 800f6a8:	b01d      	add	sp, #116	@ 0x74
 800f6aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6ae:	4629      	mov	r1, r5
 800f6b0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800f6b4:	f001 f91c 	bl	80108f0 <uxr_stream_id_from_raw>
 800f6b8:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800f6bc:	2d01      	cmp	r5, #1
 800f6be:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800f6c2:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800f6c6:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f6ca:	d04b      	beq.n	800f764 <listen_message_reliably+0x248>
 800f6cc:	2d02      	cmp	r5, #2
 800f6ce:	d00f      	beq.n	800f6f0 <listen_message_reliably+0x1d4>
 800f6d0:	2d00      	cmp	r5, #0
 800f6d2:	d1e8      	bne.n	800f6a6 <listen_message_reliably+0x18a>
 800f6d4:	4629      	mov	r1, r5
 800f6d6:	4628      	mov	r0, r5
 800f6d8:	f001 f90a 	bl	80108f0 <uxr_stream_id_from_raw>
 800f6dc:	a90c      	add	r1, sp, #48	@ 0x30
 800f6de:	4602      	mov	r2, r0
 800f6e0:	4640      	mov	r0, r8
 800f6e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800f6e4:	f7ff fd92 	bl	800f20c <read_submessage_list>
 800f6e8:	4620      	mov	r0, r4
 800f6ea:	b01d      	add	sp, #116	@ 0x74
 800f6ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f6f0:	4631      	mov	r1, r6
 800f6f2:	f108 0008 	add.w	r0, r8, #8
 800f6f6:	f89d 9024 	ldrb.w	r9, [sp, #36]	@ 0x24
 800f6fa:	f001 f9e7 	bl	8010acc <uxr_get_input_reliable_stream>
 800f6fe:	4607      	mov	r7, r0
 800f700:	b338      	cbz	r0, 800f752 <listen_message_reliably+0x236>
 800f702:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f704:	9203      	str	r2, [sp, #12]
 800f706:	a80c      	add	r0, sp, #48	@ 0x30
 800f708:	f7fc fc7a 	bl	800c000 <ucdr_buffer_remaining>
 800f70c:	4603      	mov	r3, r0
 800f70e:	f10d 0019 	add.w	r0, sp, #25
 800f712:	9000      	str	r0, [sp, #0]
 800f714:	9a03      	ldr	r2, [sp, #12]
 800f716:	4651      	mov	r1, sl
 800f718:	4638      	mov	r0, r7
 800f71a:	f006 fdc7 	bl	80162ac <uxr_receive_reliable_message>
 800f71e:	b1c0      	cbz	r0, 800f752 <listen_message_reliably+0x236>
 800f720:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800f724:	b393      	cbz	r3, 800f78c <listen_message_reliably+0x270>
 800f726:	ad14      	add	r5, sp, #80	@ 0x50
 800f728:	f04f 0a02 	mov.w	sl, #2
 800f72c:	e00a      	b.n	800f744 <listen_message_reliably+0x228>
 800f72e:	f88d 9028 	strb.w	r9, [sp, #40]	@ 0x28
 800f732:	f88d 6029 	strb.w	r6, [sp, #41]	@ 0x29
 800f736:	f88d a02a 	strb.w	sl, [sp, #42]	@ 0x2a
 800f73a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f73c:	4629      	mov	r1, r5
 800f73e:	4640      	mov	r0, r8
 800f740:	f7ff fd64 	bl	800f20c <read_submessage_list>
 800f744:	2204      	movs	r2, #4
 800f746:	4629      	mov	r1, r5
 800f748:	4638      	mov	r0, r7
 800f74a:	f006 fe2f 	bl	80163ac <uxr_next_input_reliable_buffer_available>
 800f74e:	2800      	cmp	r0, #0
 800f750:	d1ed      	bne.n	800f72e <listen_message_reliably+0x212>
 800f752:	4640      	mov	r0, r8
 800f754:	4632      	mov	r2, r6
 800f756:	4649      	mov	r1, r9
 800f758:	f7ff fbd4 	bl	800ef04 <write_submessage_acknack.isra.0>
 800f75c:	4620      	mov	r0, r4
 800f75e:	b01d      	add	sp, #116	@ 0x74
 800f760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f764:	4631      	mov	r1, r6
 800f766:	f108 0008 	add.w	r0, r8, #8
 800f76a:	f001 f9a5 	bl	8010ab8 <uxr_get_input_best_effort_stream>
 800f76e:	2800      	cmp	r0, #0
 800f770:	d099      	beq.n	800f6a6 <listen_message_reliably+0x18a>
 800f772:	4651      	mov	r1, sl
 800f774:	f006 fd06 	bl	8016184 <uxr_receive_best_effort_message>
 800f778:	2800      	cmp	r0, #0
 800f77a:	d094      	beq.n	800f6a6 <listen_message_reliably+0x18a>
 800f77c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f780:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f782:	a90c      	add	r1, sp, #48	@ 0x30
 800f784:	4640      	mov	r0, r8
 800f786:	f7ff fd41 	bl	800f20c <read_submessage_list>
 800f78a:	e78c      	b.n	800f6a6 <listen_message_reliably+0x18a>
 800f78c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 800f790:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f792:	a90c      	add	r1, sp, #48	@ 0x30
 800f794:	4640      	mov	r0, r8
 800f796:	f7ff fd39 	bl	800f20c <read_submessage_list>
 800f79a:	e7c4      	b.n	800f726 <listen_message_reliably+0x20a>

0800f79c <uxr_run_session_timeout>:
 800f79c:	b570      	push	{r4, r5, r6, lr}
 800f79e:	4604      	mov	r4, r0
 800f7a0:	460d      	mov	r5, r1
 800f7a2:	f001 f9f9 	bl	8010b98 <uxr_millis>
 800f7a6:	4606      	mov	r6, r0
 800f7a8:	4620      	mov	r0, r4
 800f7aa:	f7ff fc71 	bl	800f090 <uxr_flash_output_streams>
 800f7ae:	4629      	mov	r1, r5
 800f7b0:	4620      	mov	r0, r4
 800f7b2:	f7ff feb3 	bl	800f51c <listen_message_reliably>
 800f7b6:	f001 f9ef 	bl	8010b98 <uxr_millis>
 800f7ba:	1b83      	subs	r3, r0, r6
 800f7bc:	1ae9      	subs	r1, r5, r3
 800f7be:	2900      	cmp	r1, #0
 800f7c0:	dcf6      	bgt.n	800f7b0 <uxr_run_session_timeout+0x14>
 800f7c2:	f104 0008 	add.w	r0, r4, #8
 800f7c6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f7ca:	f001 b989 	b.w	8010ae0 <uxr_output_streams_confirmed>
 800f7ce:	bf00      	nop

0800f7d0 <uxr_run_session_until_data>:
 800f7d0:	b570      	push	{r4, r5, r6, lr}
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	460d      	mov	r5, r1
 800f7d6:	f001 f9df 	bl	8010b98 <uxr_millis>
 800f7da:	4606      	mov	r6, r0
 800f7dc:	4620      	mov	r0, r4
 800f7de:	f7ff fc57 	bl	800f090 <uxr_flash_output_streams>
 800f7e2:	2300      	movs	r3, #0
 800f7e4:	f884 30b4 	strb.w	r3, [r4, #180]	@ 0xb4
 800f7e8:	4629      	mov	r1, r5
 800f7ea:	e005      	b.n	800f7f8 <uxr_run_session_until_data+0x28>
 800f7ec:	f001 f9d4 	bl	8010b98 <uxr_millis>
 800f7f0:	1b83      	subs	r3, r0, r6
 800f7f2:	1ae9      	subs	r1, r5, r3
 800f7f4:	2900      	cmp	r1, #0
 800f7f6:	dd07      	ble.n	800f808 <uxr_run_session_until_data+0x38>
 800f7f8:	4620      	mov	r0, r4
 800f7fa:	f7ff fe8f 	bl	800f51c <listen_message_reliably>
 800f7fe:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f802:	2800      	cmp	r0, #0
 800f804:	d0f2      	beq.n	800f7ec <uxr_run_session_until_data+0x1c>
 800f806:	bd70      	pop	{r4, r5, r6, pc}
 800f808:	f894 00b4 	ldrb.w	r0, [r4, #180]	@ 0xb4
 800f80c:	bd70      	pop	{r4, r5, r6, pc}
 800f80e:	bf00      	nop

0800f810 <uxr_run_session_until_confirm_delivery>:
 800f810:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f814:	4606      	mov	r6, r0
 800f816:	460d      	mov	r5, r1
 800f818:	f001 f9be 	bl	8010b98 <uxr_millis>
 800f81c:	4607      	mov	r7, r0
 800f81e:	4630      	mov	r0, r6
 800f820:	f7ff fc36 	bl	800f090 <uxr_flash_output_streams>
 800f824:	2d00      	cmp	r5, #0
 800f826:	f106 0808 	add.w	r8, r6, #8
 800f82a:	bfa8      	it	ge
 800f82c:	462c      	movge	r4, r5
 800f82e:	da07      	bge.n	800f840 <uxr_run_session_until_confirm_delivery+0x30>
 800f830:	e00e      	b.n	800f850 <uxr_run_session_until_confirm_delivery+0x40>
 800f832:	f7ff fe73 	bl	800f51c <listen_message_reliably>
 800f836:	f001 f9af 	bl	8010b98 <uxr_millis>
 800f83a:	1bc3      	subs	r3, r0, r7
 800f83c:	1aec      	subs	r4, r5, r3
 800f83e:	d407      	bmi.n	800f850 <uxr_run_session_until_confirm_delivery+0x40>
 800f840:	4640      	mov	r0, r8
 800f842:	f001 f94d 	bl	8010ae0 <uxr_output_streams_confirmed>
 800f846:	4603      	mov	r3, r0
 800f848:	4621      	mov	r1, r4
 800f84a:	4630      	mov	r0, r6
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	d0f0      	beq.n	800f832 <uxr_run_session_until_confirm_delivery+0x22>
 800f850:	4640      	mov	r0, r8
 800f852:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f856:	f001 b943 	b.w	8010ae0 <uxr_output_streams_confirmed>
 800f85a:	bf00      	nop

0800f85c <uxr_run_session_until_all_status>:
 800f85c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f860:	9c08      	ldr	r4, [sp, #32]
 800f862:	4606      	mov	r6, r0
 800f864:	460f      	mov	r7, r1
 800f866:	4691      	mov	r9, r2
 800f868:	461d      	mov	r5, r3
 800f86a:	f7ff fc11 	bl	800f090 <uxr_flash_output_streams>
 800f86e:	b124      	cbz	r4, 800f87a <uxr_run_session_until_all_status+0x1e>
 800f870:	4622      	mov	r2, r4
 800f872:	21ff      	movs	r1, #255	@ 0xff
 800f874:	4628      	mov	r0, r5
 800f876:	f008 f97f 	bl	8017b78 <memset>
 800f87a:	e9c6 951d 	strd	r9, r5, [r6, #116]	@ 0x74
 800f87e:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f880:	f001 f98a 	bl	8010b98 <uxr_millis>
 800f884:	3d01      	subs	r5, #1
 800f886:	f1a9 0902 	sub.w	r9, r9, #2
 800f88a:	4680      	mov	r8, r0
 800f88c:	4639      	mov	r1, r7
 800f88e:	4630      	mov	r0, r6
 800f890:	f7ff fe44 	bl	800f51c <listen_message_reliably>
 800f894:	f001 f980 	bl	8010b98 <uxr_millis>
 800f898:	eba0 0008 	sub.w	r0, r0, r8
 800f89c:	1a39      	subs	r1, r7, r0
 800f89e:	b344      	cbz	r4, 800f8f2 <uxr_run_session_until_all_status+0x96>
 800f8a0:	4628      	mov	r0, r5
 800f8a2:	46ac      	mov	ip, r5
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	e002      	b.n	800f8ae <uxr_run_session_until_all_status+0x52>
 800f8a8:	42a3      	cmp	r3, r4
 800f8aa:	d20d      	bcs.n	800f8c8 <uxr_run_session_until_all_status+0x6c>
 800f8ac:	3301      	adds	r3, #1
 800f8ae:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800f8b2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 800f8b6:	d1f7      	bne.n	800f8a8 <uxr_run_session_until_all_status+0x4c>
 800f8b8:	42a3      	cmp	r3, r4
 800f8ba:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800f8be:	d213      	bcs.n	800f8e8 <uxr_run_session_until_all_status+0x8c>
 800f8c0:	2a00      	cmp	r2, #0
 800f8c2:	d0f3      	beq.n	800f8ac <uxr_run_session_until_all_status+0x50>
 800f8c4:	2900      	cmp	r1, #0
 800f8c6:	dce2      	bgt.n	800f88e <uxr_run_session_until_all_status+0x32>
 800f8c8:	2300      	movs	r3, #0
 800f8ca:	67f3      	str	r3, [r6, #124]	@ 0x7c
 800f8cc:	442c      	add	r4, r5
 800f8ce:	e001      	b.n	800f8d4 <uxr_run_session_until_all_status+0x78>
 800f8d0:	2b01      	cmp	r3, #1
 800f8d2:	d812      	bhi.n	800f8fa <uxr_run_session_until_all_status+0x9e>
 800f8d4:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800f8d8:	4284      	cmp	r4, r0
 800f8da:	d1f9      	bne.n	800f8d0 <uxr_run_session_until_all_status+0x74>
 800f8dc:	2b01      	cmp	r3, #1
 800f8de:	bf8c      	ite	hi
 800f8e0:	2000      	movhi	r0, #0
 800f8e2:	2001      	movls	r0, #1
 800f8e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8e8:	2900      	cmp	r1, #0
 800f8ea:	dded      	ble.n	800f8c8 <uxr_run_session_until_all_status+0x6c>
 800f8ec:	2a00      	cmp	r2, #0
 800f8ee:	d1ce      	bne.n	800f88e <uxr_run_session_until_all_status+0x32>
 800f8f0:	e7ea      	b.n	800f8c8 <uxr_run_session_until_all_status+0x6c>
 800f8f2:	67f4      	str	r4, [r6, #124]	@ 0x7c
 800f8f4:	2001      	movs	r0, #1
 800f8f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f8fa:	2000      	movs	r0, #0
 800f8fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800f900 <wait_session_status>:
 800f900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f904:	4604      	mov	r4, r0
 800f906:	b09d      	sub	sp, #116	@ 0x74
 800f908:	20ff      	movs	r0, #255	@ 0xff
 800f90a:	7160      	strb	r0, [r4, #5]
 800f90c:	9303      	str	r3, [sp, #12]
 800f90e:	2b00      	cmp	r3, #0
 800f910:	f000 80b6 	beq.w	800fa80 <wait_session_status+0x180>
 800f914:	468a      	mov	sl, r1
 800f916:	4691      	mov	r9, r2
 800f918:	f04f 0b00 	mov.w	fp, #0
 800f91c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800f91e:	464a      	mov	r2, r9
 800f920:	e9d3 0500 	ldrd	r0, r5, [r3]
 800f924:	4651      	mov	r1, sl
 800f926:	47a8      	blx	r5
 800f928:	f001 f936 	bl	8010b98 <uxr_millis>
 800f92c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f930:	4605      	mov	r5, r0
 800f932:	e009      	b.n	800f948 <wait_session_status+0x48>
 800f934:	f001 f930 	bl	8010b98 <uxr_millis>
 800f938:	1b40      	subs	r0, r0, r5
 800f93a:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f93e:	2b00      	cmp	r3, #0
 800f940:	dd40      	ble.n	800f9c4 <wait_session_status+0xc4>
 800f942:	7960      	ldrb	r0, [r4, #5]
 800f944:	28ff      	cmp	r0, #255	@ 0xff
 800f946:	d145      	bne.n	800f9d4 <wait_session_status+0xd4>
 800f948:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800f94a:	a908      	add	r1, sp, #32
 800f94c:	6896      	ldr	r6, [r2, #8]
 800f94e:	6810      	ldr	r0, [r2, #0]
 800f950:	aa09      	add	r2, sp, #36	@ 0x24
 800f952:	47b0      	blx	r6
 800f954:	2800      	cmp	r0, #0
 800f956:	d0ed      	beq.n	800f934 <wait_session_status+0x34>
 800f958:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800f95c:	a80c      	add	r0, sp, #48	@ 0x30
 800f95e:	f7fc fb1f 	bl	800bfa0 <ucdr_init_buffer>
 800f962:	2600      	movs	r6, #0
 800f964:	f10d 031e 	add.w	r3, sp, #30
 800f968:	aa07      	add	r2, sp, #28
 800f96a:	a90c      	add	r1, sp, #48	@ 0x30
 800f96c:	4620      	mov	r0, r4
 800f96e:	f88d 601c 	strb.w	r6, [sp, #28]
 800f972:	f000 fa87 	bl	800fe84 <uxr_read_session_header>
 800f976:	2800      	cmp	r0, #0
 800f978:	d0dc      	beq.n	800f934 <wait_session_status+0x34>
 800f97a:	4631      	mov	r1, r6
 800f97c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800f980:	f000 ffb6 	bl	80108f0 <uxr_stream_id_from_raw>
 800f984:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800f988:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800f98c:	9302      	str	r3, [sp, #8]
 800f98e:	2f01      	cmp	r7, #1
 800f990:	e9cd 000a 	strd	r0, r0, [sp, #40]	@ 0x28
 800f994:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800f998:	d05c      	beq.n	800fa54 <wait_session_status+0x154>
 800f99a:	2f02      	cmp	r7, #2
 800f99c:	d020      	beq.n	800f9e0 <wait_session_status+0xe0>
 800f99e:	2f00      	cmp	r7, #0
 800f9a0:	d1c8      	bne.n	800f934 <wait_session_status+0x34>
 800f9a2:	4639      	mov	r1, r7
 800f9a4:	4638      	mov	r0, r7
 800f9a6:	f000 ffa3 	bl	80108f0 <uxr_stream_id_from_raw>
 800f9aa:	a90c      	add	r1, sp, #48	@ 0x30
 800f9ac:	4602      	mov	r2, r0
 800f9ae:	900b      	str	r0, [sp, #44]	@ 0x2c
 800f9b0:	4620      	mov	r0, r4
 800f9b2:	f7ff fc2b 	bl	800f20c <read_submessage_list>
 800f9b6:	f001 f8ef 	bl	8010b98 <uxr_millis>
 800f9ba:	1b40      	subs	r0, r0, r5
 800f9bc:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800f9c0:	2b00      	cmp	r3, #0
 800f9c2:	dcbe      	bgt.n	800f942 <wait_session_status+0x42>
 800f9c4:	9b03      	ldr	r3, [sp, #12]
 800f9c6:	7960      	ldrb	r0, [r4, #5]
 800f9c8:	f10b 0b01 	add.w	fp, fp, #1
 800f9cc:	455b      	cmp	r3, fp
 800f9ce:	d001      	beq.n	800f9d4 <wait_session_status+0xd4>
 800f9d0:	28ff      	cmp	r0, #255	@ 0xff
 800f9d2:	d0a3      	beq.n	800f91c <wait_session_status+0x1c>
 800f9d4:	38ff      	subs	r0, #255	@ 0xff
 800f9d6:	bf18      	it	ne
 800f9d8:	2001      	movne	r0, #1
 800f9da:	b01d      	add	sp, #116	@ 0x74
 800f9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9e0:	f89d 3028 	ldrb.w	r3, [sp, #40]	@ 0x28
 800f9e4:	9304      	str	r3, [sp, #16]
 800f9e6:	4631      	mov	r1, r6
 800f9e8:	f104 0008 	add.w	r0, r4, #8
 800f9ec:	f001 f86e 	bl	8010acc <uxr_get_input_reliable_stream>
 800f9f0:	4680      	mov	r8, r0
 800f9f2:	b348      	cbz	r0, 800fa48 <wait_session_status+0x148>
 800f9f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f9f6:	9205      	str	r2, [sp, #20]
 800f9f8:	a80c      	add	r0, sp, #48	@ 0x30
 800f9fa:	f7fc fb01 	bl	800c000 <ucdr_buffer_remaining>
 800f9fe:	4603      	mov	r3, r0
 800fa00:	f10d 001d 	add.w	r0, sp, #29
 800fa04:	9000      	str	r0, [sp, #0]
 800fa06:	9a05      	ldr	r2, [sp, #20]
 800fa08:	9902      	ldr	r1, [sp, #8]
 800fa0a:	4640      	mov	r0, r8
 800fa0c:	f006 fc4e 	bl	80162ac <uxr_receive_reliable_message>
 800fa10:	b1d0      	cbz	r0, 800fa48 <wait_session_status+0x148>
 800fa12:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	d03a      	beq.n	800fa90 <wait_session_status+0x190>
 800fa1a:	9f04      	ldr	r7, [sp, #16]
 800fa1c:	e00a      	b.n	800fa34 <wait_session_status+0x134>
 800fa1e:	f04f 0302 	mov.w	r3, #2
 800fa22:	f88d 702c 	strb.w	r7, [sp, #44]	@ 0x2c
 800fa26:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 800fa2a:	f88d 302e 	strb.w	r3, [sp, #46]	@ 0x2e
 800fa2e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fa30:	f7ff fbec 	bl	800f20c <read_submessage_list>
 800fa34:	a914      	add	r1, sp, #80	@ 0x50
 800fa36:	2204      	movs	r2, #4
 800fa38:	4640      	mov	r0, r8
 800fa3a:	f006 fcb7 	bl	80163ac <uxr_next_input_reliable_buffer_available>
 800fa3e:	4603      	mov	r3, r0
 800fa40:	a914      	add	r1, sp, #80	@ 0x50
 800fa42:	4620      	mov	r0, r4
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d1ea      	bne.n	800fa1e <wait_session_status+0x11e>
 800fa48:	9904      	ldr	r1, [sp, #16]
 800fa4a:	4632      	mov	r2, r6
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f7ff fa59 	bl	800ef04 <write_submessage_acknack.isra.0>
 800fa52:	e76f      	b.n	800f934 <wait_session_status+0x34>
 800fa54:	4631      	mov	r1, r6
 800fa56:	f104 0008 	add.w	r0, r4, #8
 800fa5a:	f001 f82d 	bl	8010ab8 <uxr_get_input_best_effort_stream>
 800fa5e:	2800      	cmp	r0, #0
 800fa60:	f43f af68 	beq.w	800f934 <wait_session_status+0x34>
 800fa64:	9902      	ldr	r1, [sp, #8]
 800fa66:	f006 fb8d 	bl	8016184 <uxr_receive_best_effort_message>
 800fa6a:	2800      	cmp	r0, #0
 800fa6c:	f43f af62 	beq.w	800f934 <wait_session_status+0x34>
 800fa70:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fa74:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fa76:	a90c      	add	r1, sp, #48	@ 0x30
 800fa78:	4620      	mov	r0, r4
 800fa7a:	f7ff fbc7 	bl	800f20c <read_submessage_list>
 800fa7e:	e759      	b.n	800f934 <wait_session_status+0x34>
 800fa80:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fa82:	e9d3 0400 	ldrd	r0, r4, [r3]
 800fa86:	47a0      	blx	r4
 800fa88:	2001      	movs	r0, #1
 800fa8a:	b01d      	add	sp, #116	@ 0x74
 800fa8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa90:	f88d 702e 	strb.w	r7, [sp, #46]	@ 0x2e
 800fa94:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fa96:	a90c      	add	r1, sp, #48	@ 0x30
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f7ff fbb7 	bl	800f20c <read_submessage_list>
 800fa9e:	e7bc      	b.n	800fa1a <wait_session_status+0x11a>

0800faa0 <uxr_delete_session_retries>:
 800faa0:	b530      	push	{r4, r5, lr}
 800faa2:	b08f      	sub	sp, #60	@ 0x3c
 800faa4:	4604      	mov	r4, r0
 800faa6:	460d      	mov	r5, r1
 800faa8:	f000 fa2e 	bl	800ff08 <uxr_session_header_offset>
 800faac:	2300      	movs	r3, #0
 800faae:	2210      	movs	r2, #16
 800fab0:	9000      	str	r0, [sp, #0]
 800fab2:	a902      	add	r1, sp, #8
 800fab4:	a806      	add	r0, sp, #24
 800fab6:	f7fc fa61 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 800faba:	a906      	add	r1, sp, #24
 800fabc:	4620      	mov	r0, r4
 800fabe:	f000 f973 	bl	800fda8 <uxr_buffer_delete_session>
 800fac2:	2200      	movs	r2, #0
 800fac4:	4611      	mov	r1, r2
 800fac6:	9b06      	ldr	r3, [sp, #24]
 800fac8:	4620      	mov	r0, r4
 800faca:	f000 f9c7 	bl	800fe5c <uxr_stamp_session_header>
 800face:	a806      	add	r0, sp, #24
 800fad0:	f7fc fa92 	bl	800bff8 <ucdr_buffer_length>
 800fad4:	462b      	mov	r3, r5
 800fad6:	4602      	mov	r2, r0
 800fad8:	a902      	add	r1, sp, #8
 800fada:	4620      	mov	r0, r4
 800fadc:	f7ff ff10 	bl	800f900 <wait_session_status>
 800fae0:	b118      	cbz	r0, 800faea <uxr_delete_session_retries+0x4a>
 800fae2:	7960      	ldrb	r0, [r4, #5]
 800fae4:	fab0 f080 	clz	r0, r0
 800fae8:	0940      	lsrs	r0, r0, #5
 800faea:	b00f      	add	sp, #60	@ 0x3c
 800faec:	bd30      	pop	{r4, r5, pc}
 800faee:	bf00      	nop

0800faf0 <uxr_create_session>:
 800faf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf4:	f100 0b08 	add.w	fp, r0, #8
 800faf8:	b0ab      	sub	sp, #172	@ 0xac
 800fafa:	4604      	mov	r4, r0
 800fafc:	4658      	mov	r0, fp
 800fafe:	f000 ff2b 	bl	8010958 <uxr_reset_stream_storage>
 800fb02:	4620      	mov	r0, r4
 800fb04:	f000 fa00 	bl	800ff08 <uxr_session_header_offset>
 800fb08:	2300      	movs	r3, #0
 800fb0a:	9000      	str	r0, [sp, #0]
 800fb0c:	221c      	movs	r2, #28
 800fb0e:	a90b      	add	r1, sp, #44	@ 0x2c
 800fb10:	a812      	add	r0, sp, #72	@ 0x48
 800fb12:	f7fc fa33 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 800fb16:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb18:	8a1a      	ldrh	r2, [r3, #16]
 800fb1a:	3a04      	subs	r2, #4
 800fb1c:	b292      	uxth	r2, r2
 800fb1e:	a912      	add	r1, sp, #72	@ 0x48
 800fb20:	4620      	mov	r0, r4
 800fb22:	f000 f917 	bl	800fd54 <uxr_buffer_create_session>
 800fb26:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800fb28:	4620      	mov	r0, r4
 800fb2a:	f000 f983 	bl	800fe34 <uxr_stamp_create_session_header>
 800fb2e:	a812      	add	r0, sp, #72	@ 0x48
 800fb30:	f7fc fa62 	bl	800bff8 <ucdr_buffer_length>
 800fb34:	23ff      	movs	r3, #255	@ 0xff
 800fb36:	7163      	strb	r3, [r4, #5]
 800fb38:	230a      	movs	r3, #10
 800fb3a:	46da      	mov	sl, fp
 800fb3c:	9303      	str	r3, [sp, #12]
 800fb3e:	4683      	mov	fp, r0
 800fb40:	6f23      	ldr	r3, [r4, #112]	@ 0x70
 800fb42:	465a      	mov	r2, fp
 800fb44:	e9d3 0500 	ldrd	r0, r5, [r3]
 800fb48:	a90b      	add	r1, sp, #44	@ 0x2c
 800fb4a:	47a8      	blx	r5
 800fb4c:	f001 f824 	bl	8010b98 <uxr_millis>
 800fb50:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800fb54:	4605      	mov	r5, r0
 800fb56:	e009      	b.n	800fb6c <uxr_create_session+0x7c>
 800fb58:	f001 f81e 	bl	8010b98 <uxr_millis>
 800fb5c:	1b40      	subs	r0, r0, r5
 800fb5e:	f5c0 737a 	rsb	r3, r0, #1000	@ 0x3e8
 800fb62:	2b00      	cmp	r3, #0
 800fb64:	7962      	ldrb	r2, [r4, #5]
 800fb66:	dd38      	ble.n	800fbda <uxr_create_session+0xea>
 800fb68:	2aff      	cmp	r2, #255	@ 0xff
 800fb6a:	d13c      	bne.n	800fbe6 <uxr_create_session+0xf6>
 800fb6c:	6f22      	ldr	r2, [r4, #112]	@ 0x70
 800fb6e:	a907      	add	r1, sp, #28
 800fb70:	6896      	ldr	r6, [r2, #8]
 800fb72:	6810      	ldr	r0, [r2, #0]
 800fb74:	aa08      	add	r2, sp, #32
 800fb76:	47b0      	blx	r6
 800fb78:	2800      	cmp	r0, #0
 800fb7a:	d0ed      	beq.n	800fb58 <uxr_create_session+0x68>
 800fb7c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800fb80:	a81a      	add	r0, sp, #104	@ 0x68
 800fb82:	f7fc fa0d 	bl	800bfa0 <ucdr_init_buffer>
 800fb86:	2600      	movs	r6, #0
 800fb88:	f10d 031a 	add.w	r3, sp, #26
 800fb8c:	aa06      	add	r2, sp, #24
 800fb8e:	a91a      	add	r1, sp, #104	@ 0x68
 800fb90:	4620      	mov	r0, r4
 800fb92:	f88d 6018 	strb.w	r6, [sp, #24]
 800fb96:	f000 f975 	bl	800fe84 <uxr_read_session_header>
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	d0dc      	beq.n	800fb58 <uxr_create_session+0x68>
 800fb9e:	4631      	mov	r1, r6
 800fba0:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800fba4:	f000 fea4 	bl	80108f0 <uxr_stream_id_from_raw>
 800fba8:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800fbac:	2e01      	cmp	r6, #1
 800fbae:	e9cd 0009 	strd	r0, r0, [sp, #36]	@ 0x24
 800fbb2:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800fbb6:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800fbba:	d053      	beq.n	800fc64 <uxr_create_session+0x174>
 800fbbc:	2e02      	cmp	r6, #2
 800fbbe:	d018      	beq.n	800fbf2 <uxr_create_session+0x102>
 800fbc0:	2e00      	cmp	r6, #0
 800fbc2:	d1c9      	bne.n	800fb58 <uxr_create_session+0x68>
 800fbc4:	4631      	mov	r1, r6
 800fbc6:	4630      	mov	r0, r6
 800fbc8:	f000 fe92 	bl	80108f0 <uxr_stream_id_from_raw>
 800fbcc:	a91a      	add	r1, sp, #104	@ 0x68
 800fbce:	4602      	mov	r2, r0
 800fbd0:	900a      	str	r0, [sp, #40]	@ 0x28
 800fbd2:	4620      	mov	r0, r4
 800fbd4:	f7ff fb1a 	bl	800f20c <read_submessage_list>
 800fbd8:	e7be      	b.n	800fb58 <uxr_create_session+0x68>
 800fbda:	9b03      	ldr	r3, [sp, #12]
 800fbdc:	3b01      	subs	r3, #1
 800fbde:	9303      	str	r3, [sp, #12]
 800fbe0:	d001      	beq.n	800fbe6 <uxr_create_session+0xf6>
 800fbe2:	2aff      	cmp	r2, #255	@ 0xff
 800fbe4:	d0ac      	beq.n	800fb40 <uxr_create_session+0x50>
 800fbe6:	2a00      	cmp	r2, #0
 800fbe8:	d051      	beq.n	800fc8e <uxr_create_session+0x19e>
 800fbea:	2000      	movs	r0, #0
 800fbec:	b02b      	add	sp, #172	@ 0xac
 800fbee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbf2:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 800fbf6:	9304      	str	r3, [sp, #16]
 800fbf8:	4639      	mov	r1, r7
 800fbfa:	4650      	mov	r0, sl
 800fbfc:	f000 ff66 	bl	8010acc <uxr_get_input_reliable_stream>
 800fc00:	4680      	mov	r8, r0
 800fc02:	b348      	cbz	r0, 800fc58 <uxr_create_session+0x168>
 800fc04:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800fc06:	9205      	str	r2, [sp, #20]
 800fc08:	a81a      	add	r0, sp, #104	@ 0x68
 800fc0a:	f7fc f9f9 	bl	800c000 <ucdr_buffer_remaining>
 800fc0e:	4603      	mov	r3, r0
 800fc10:	f10d 0019 	add.w	r0, sp, #25
 800fc14:	9000      	str	r0, [sp, #0]
 800fc16:	9a05      	ldr	r2, [sp, #20]
 800fc18:	4649      	mov	r1, r9
 800fc1a:	4640      	mov	r0, r8
 800fc1c:	f006 fb46 	bl	80162ac <uxr_receive_reliable_message>
 800fc20:	b1d0      	cbz	r0, 800fc58 <uxr_create_session+0x168>
 800fc22:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800fc26:	2b00      	cmp	r3, #0
 800fc28:	d038      	beq.n	800fc9c <uxr_create_session+0x1ac>
 800fc2a:	9e04      	ldr	r6, [sp, #16]
 800fc2c:	e00a      	b.n	800fc44 <uxr_create_session+0x154>
 800fc2e:	f04f 0302 	mov.w	r3, #2
 800fc32:	f88d 6028 	strb.w	r6, [sp, #40]	@ 0x28
 800fc36:	f88d 7029 	strb.w	r7, [sp, #41]	@ 0x29
 800fc3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fc3e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc40:	f7ff fae4 	bl	800f20c <read_submessage_list>
 800fc44:	a922      	add	r1, sp, #136	@ 0x88
 800fc46:	2204      	movs	r2, #4
 800fc48:	4640      	mov	r0, r8
 800fc4a:	f006 fbaf 	bl	80163ac <uxr_next_input_reliable_buffer_available>
 800fc4e:	4603      	mov	r3, r0
 800fc50:	a922      	add	r1, sp, #136	@ 0x88
 800fc52:	4620      	mov	r0, r4
 800fc54:	2b00      	cmp	r3, #0
 800fc56:	d1ea      	bne.n	800fc2e <uxr_create_session+0x13e>
 800fc58:	9904      	ldr	r1, [sp, #16]
 800fc5a:	463a      	mov	r2, r7
 800fc5c:	4620      	mov	r0, r4
 800fc5e:	f7ff f951 	bl	800ef04 <write_submessage_acknack.isra.0>
 800fc62:	e779      	b.n	800fb58 <uxr_create_session+0x68>
 800fc64:	4639      	mov	r1, r7
 800fc66:	4650      	mov	r0, sl
 800fc68:	f000 ff26 	bl	8010ab8 <uxr_get_input_best_effort_stream>
 800fc6c:	2800      	cmp	r0, #0
 800fc6e:	f43f af73 	beq.w	800fb58 <uxr_create_session+0x68>
 800fc72:	4649      	mov	r1, r9
 800fc74:	f006 fa86 	bl	8016184 <uxr_receive_best_effort_message>
 800fc78:	2800      	cmp	r0, #0
 800fc7a:	f43f af6d 	beq.w	800fb58 <uxr_create_session+0x68>
 800fc7e:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fc82:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc84:	a91a      	add	r1, sp, #104	@ 0x68
 800fc86:	4620      	mov	r0, r4
 800fc88:	f7ff fac0 	bl	800f20c <read_submessage_list>
 800fc8c:	e764      	b.n	800fb58 <uxr_create_session+0x68>
 800fc8e:	4650      	mov	r0, sl
 800fc90:	f000 fe62 	bl	8010958 <uxr_reset_stream_storage>
 800fc94:	2001      	movs	r0, #1
 800fc96:	b02b      	add	sp, #172	@ 0xac
 800fc98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc9c:	f88d 602a 	strb.w	r6, [sp, #42]	@ 0x2a
 800fca0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fca2:	a91a      	add	r1, sp, #104	@ 0x68
 800fca4:	4620      	mov	r0, r4
 800fca6:	f7ff fab1 	bl	800f20c <read_submessage_list>
 800fcaa:	e7be      	b.n	800fc2a <uxr_create_session+0x13a>

0800fcac <uxr_prepare_stream_to_write_submessage>:
 800fcac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	4682      	mov	sl, r0
 800fcb4:	4610      	mov	r0, r2
 800fcb6:	4615      	mov	r5, r2
 800fcb8:	461e      	mov	r6, r3
 800fcba:	f89d 7028 	ldrb.w	r7, [sp, #40]	@ 0x28
 800fcbe:	f89d 802c 	ldrb.w	r8, [sp, #44]	@ 0x2c
 800fcc2:	9101      	str	r1, [sp, #4]
 800fcc4:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800fcc8:	f000 ff60 	bl	8010b8c <uxr_submessage_padding>
 800fccc:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800fcd0:	f105 0904 	add.w	r9, r5, #4
 800fcd4:	2b01      	cmp	r3, #1
 800fcd6:	4481      	add	r9, r0
 800fcd8:	d01d      	beq.n	800fd16 <uxr_prepare_stream_to_write_submessage+0x6a>
 800fcda:	2b02      	cmp	r3, #2
 800fcdc:	d116      	bne.n	800fd0c <uxr_prepare_stream_to_write_submessage+0x60>
 800fcde:	4621      	mov	r1, r4
 800fce0:	f10a 0008 	add.w	r0, sl, #8
 800fce4:	f000 fede 	bl	8010aa4 <uxr_get_output_reliable_stream>
 800fce8:	4604      	mov	r4, r0
 800fcea:	b158      	cbz	r0, 800fd04 <uxr_prepare_stream_to_write_submessage+0x58>
 800fcec:	4649      	mov	r1, r9
 800fcee:	4632      	mov	r2, r6
 800fcf0:	f006 fd18 	bl	8016724 <uxr_prepare_reliable_buffer_to_write>
 800fcf4:	4604      	mov	r4, r0
 800fcf6:	b12c      	cbz	r4, 800fd04 <uxr_prepare_stream_to_write_submessage+0x58>
 800fcf8:	4643      	mov	r3, r8
 800fcfa:	b2aa      	uxth	r2, r5
 800fcfc:	4639      	mov	r1, r7
 800fcfe:	4630      	mov	r0, r6
 800fd00:	f000 ff04 	bl	8010b0c <uxr_buffer_submessage_header>
 800fd04:	4620      	mov	r0, r4
 800fd06:	b002      	add	sp, #8
 800fd08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd0c:	2400      	movs	r4, #0
 800fd0e:	4620      	mov	r0, r4
 800fd10:	b002      	add	sp, #8
 800fd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fd16:	4621      	mov	r1, r4
 800fd18:	f10a 0008 	add.w	r0, sl, #8
 800fd1c:	f000 feba 	bl	8010a94 <uxr_get_output_best_effort_stream>
 800fd20:	4604      	mov	r4, r0
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d0ee      	beq.n	800fd04 <uxr_prepare_stream_to_write_submessage+0x58>
 800fd26:	4649      	mov	r1, r9
 800fd28:	4632      	mov	r2, r6
 800fd2a:	f006 fc2b 	bl	8016584 <uxr_prepare_best_effort_buffer_to_write>
 800fd2e:	4604      	mov	r4, r0
 800fd30:	e7e1      	b.n	800fcf6 <uxr_prepare_stream_to_write_submessage+0x4a>
 800fd32:	bf00      	nop

0800fd34 <uxr_init_session_info>:
 800fd34:	0e13      	lsrs	r3, r2, #24
 800fd36:	7043      	strb	r3, [r0, #1]
 800fd38:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800fd3c:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800fd40:	7001      	strb	r1, [r0, #0]
 800fd42:	70c3      	strb	r3, [r0, #3]
 800fd44:	2109      	movs	r1, #9
 800fd46:	23ff      	movs	r3, #255	@ 0xff
 800fd48:	f880 c002 	strb.w	ip, [r0, #2]
 800fd4c:	7102      	strb	r2, [r0, #4]
 800fd4e:	80c1      	strh	r1, [r0, #6]
 800fd50:	7143      	strb	r3, [r0, #5]
 800fd52:	4770      	bx	lr

0800fd54 <uxr_buffer_create_session>:
 800fd54:	b530      	push	{r4, r5, lr}
 800fd56:	b089      	sub	sp, #36	@ 0x24
 800fd58:	2300      	movs	r3, #0
 800fd5a:	4d12      	ldr	r5, [pc, #72]	@ (800fda4 <uxr_buffer_create_session+0x50>)
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	f8ad 201c 	strh.w	r2, [sp, #28]
 800fd62:	2201      	movs	r2, #1
 800fd64:	9301      	str	r3, [sp, #4]
 800fd66:	80c2      	strh	r2, [r0, #6]
 800fd68:	f88d 2004 	strb.w	r2, [sp, #4]
 800fd6c:	682a      	ldr	r2, [r5, #0]
 800fd6e:	9200      	str	r2, [sp, #0]
 800fd70:	88aa      	ldrh	r2, [r5, #4]
 800fd72:	f8ad 2006 	strh.w	r2, [sp, #6]
 800fd76:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800fd7a:	9202      	str	r2, [sp, #8]
 800fd7c:	460c      	mov	r4, r1
 800fd7e:	7802      	ldrb	r2, [r0, #0]
 800fd80:	9303      	str	r3, [sp, #12]
 800fd82:	4619      	mov	r1, r3
 800fd84:	f88d 200c 	strb.w	r2, [sp, #12]
 800fd88:	4620      	mov	r0, r4
 800fd8a:	2210      	movs	r2, #16
 800fd8c:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800fd90:	9306      	str	r3, [sp, #24]
 800fd92:	f000 febb 	bl	8010b0c <uxr_buffer_submessage_header>
 800fd96:	4669      	mov	r1, sp
 800fd98:	4620      	mov	r0, r4
 800fd9a:	f001 fe13 	bl	80119c4 <uxr_serialize_CREATE_CLIENT_Payload>
 800fd9e:	b009      	add	sp, #36	@ 0x24
 800fda0:	bd30      	pop	{r4, r5, pc}
 800fda2:	bf00      	nop
 800fda4:	08018c00 	.word	0x08018c00

0800fda8 <uxr_buffer_delete_session>:
 800fda8:	b510      	push	{r4, lr}
 800fdaa:	4b0c      	ldr	r3, [pc, #48]	@ (800fddc <uxr_buffer_delete_session+0x34>)
 800fdac:	b082      	sub	sp, #8
 800fdae:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800fdb2:	f8ad c006 	strh.w	ip, [sp, #6]
 800fdb6:	460c      	mov	r4, r1
 800fdb8:	2202      	movs	r2, #2
 800fdba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fdbe:	80c2      	strh	r2, [r0, #6]
 800fdc0:	f8ad 3004 	strh.w	r3, [sp, #4]
 800fdc4:	2204      	movs	r2, #4
 800fdc6:	2300      	movs	r3, #0
 800fdc8:	2103      	movs	r1, #3
 800fdca:	4620      	mov	r0, r4
 800fdcc:	f000 fe9e 	bl	8010b0c <uxr_buffer_submessage_header>
 800fdd0:	a901      	add	r1, sp, #4
 800fdd2:	4620      	mov	r0, r4
 800fdd4:	f001 fe9c 	bl	8011b10 <uxr_serialize_DELETE_Payload>
 800fdd8:	b002      	add	sp, #8
 800fdda:	bd10      	pop	{r4, pc}
 800fddc:	08018c00 	.word	0x08018c00

0800fde0 <uxr_read_create_session_status>:
 800fde0:	b510      	push	{r4, lr}
 800fde2:	b088      	sub	sp, #32
 800fde4:	4604      	mov	r4, r0
 800fde6:	4608      	mov	r0, r1
 800fde8:	a901      	add	r1, sp, #4
 800fdea:	f001 fea1 	bl	8011b30 <uxr_deserialize_STATUS_AGENT_Payload>
 800fdee:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800fdf2:	7163      	strb	r3, [r4, #5]
 800fdf4:	b008      	add	sp, #32
 800fdf6:	bd10      	pop	{r4, pc}

0800fdf8 <uxr_read_delete_session_status>:
 800fdf8:	b510      	push	{r4, lr}
 800fdfa:	4604      	mov	r4, r0
 800fdfc:	b084      	sub	sp, #16
 800fdfe:	4608      	mov	r0, r1
 800fe00:	a902      	add	r1, sp, #8
 800fe02:	f001 fec5 	bl	8011b90 <uxr_deserialize_STATUS_Payload>
 800fe06:	88e3      	ldrh	r3, [r4, #6]
 800fe08:	2b02      	cmp	r3, #2
 800fe0a:	d001      	beq.n	800fe10 <uxr_read_delete_session_status+0x18>
 800fe0c:	b004      	add	sp, #16
 800fe0e:	bd10      	pop	{r4, pc}
 800fe10:	f10d 000a 	add.w	r0, sp, #10
 800fe14:	f7fe ff06 	bl	800ec24 <uxr_object_id_from_raw>
 800fe18:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800fe1c:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800fe20:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800fe24:	b29b      	uxth	r3, r3
 800fe26:	2b02      	cmp	r3, #2
 800fe28:	bf04      	itt	eq
 800fe2a:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800fe2e:	7163      	strbeq	r3, [r4, #5]
 800fe30:	b004      	add	sp, #16
 800fe32:	bd10      	pop	{r4, pc}

0800fe34 <uxr_stamp_create_session_header>:
 800fe34:	b510      	push	{r4, lr}
 800fe36:	2208      	movs	r2, #8
 800fe38:	b08a      	sub	sp, #40	@ 0x28
 800fe3a:	4604      	mov	r4, r0
 800fe3c:	eb0d 0002 	add.w	r0, sp, r2
 800fe40:	f7fc f8ae 	bl	800bfa0 <ucdr_init_buffer>
 800fe44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe48:	9400      	str	r4, [sp, #0]
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	f001 0180 	and.w	r1, r1, #128	@ 0x80
 800fe52:	a802      	add	r0, sp, #8
 800fe54:	f001 f854 	bl	8010f00 <uxr_serialize_message_header>
 800fe58:	b00a      	add	sp, #40	@ 0x28
 800fe5a:	bd10      	pop	{r4, pc}

0800fe5c <uxr_stamp_session_header>:
 800fe5c:	b530      	push	{r4, r5, lr}
 800fe5e:	b08d      	sub	sp, #52	@ 0x34
 800fe60:	4604      	mov	r4, r0
 800fe62:	460d      	mov	r5, r1
 800fe64:	9203      	str	r2, [sp, #12]
 800fe66:	4619      	mov	r1, r3
 800fe68:	a804      	add	r0, sp, #16
 800fe6a:	2208      	movs	r2, #8
 800fe6c:	f7fc f898 	bl	800bfa0 <ucdr_init_buffer>
 800fe70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe74:	9b03      	ldr	r3, [sp, #12]
 800fe76:	9400      	str	r4, [sp, #0]
 800fe78:	462a      	mov	r2, r5
 800fe7a:	a804      	add	r0, sp, #16
 800fe7c:	f001 f840 	bl	8010f00 <uxr_serialize_message_header>
 800fe80:	b00d      	add	sp, #52	@ 0x34
 800fe82:	bd30      	pop	{r4, r5, pc}

0800fe84 <uxr_read_session_header>:
 800fe84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe88:	4607      	mov	r7, r0
 800fe8a:	b084      	sub	sp, #16
 800fe8c:	4608      	mov	r0, r1
 800fe8e:	460c      	mov	r4, r1
 800fe90:	4615      	mov	r5, r2
 800fe92:	461e      	mov	r6, r3
 800fe94:	f7fc f8b4 	bl	800c000 <ucdr_buffer_remaining>
 800fe98:	2808      	cmp	r0, #8
 800fe9a:	d803      	bhi.n	800fea4 <uxr_read_session_header+0x20>
 800fe9c:	2000      	movs	r0, #0
 800fe9e:	b004      	add	sp, #16
 800fea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fea4:	f10d 080c 	add.w	r8, sp, #12
 800fea8:	4633      	mov	r3, r6
 800feaa:	462a      	mov	r2, r5
 800feac:	f8cd 8000 	str.w	r8, [sp]
 800feb0:	4620      	mov	r0, r4
 800feb2:	f10d 010b 	add.w	r1, sp, #11
 800feb6:	f001 f841 	bl	8010f3c <uxr_deserialize_message_header>
 800feba:	783a      	ldrb	r2, [r7, #0]
 800febc:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800fec0:	4293      	cmp	r3, r2
 800fec2:	d1eb      	bne.n	800fe9c <uxr_read_session_header+0x18>
 800fec4:	061b      	lsls	r3, r3, #24
 800fec6:	d41c      	bmi.n	800ff02 <uxr_read_session_header+0x7e>
 800fec8:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800fecc:	787b      	ldrb	r3, [r7, #1]
 800fece:	429a      	cmp	r2, r3
 800fed0:	d003      	beq.n	800feda <uxr_read_session_header+0x56>
 800fed2:	2001      	movs	r0, #1
 800fed4:	f080 0001 	eor.w	r0, r0, #1
 800fed8:	e7e1      	b.n	800fe9e <uxr_read_session_header+0x1a>
 800feda:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800fede:	78bb      	ldrb	r3, [r7, #2]
 800fee0:	429a      	cmp	r2, r3
 800fee2:	f107 0102 	add.w	r1, r7, #2
 800fee6:	d1f4      	bne.n	800fed2 <uxr_read_session_header+0x4e>
 800fee8:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800feec:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800fef0:	429a      	cmp	r2, r3
 800fef2:	d1ee      	bne.n	800fed2 <uxr_read_session_header+0x4e>
 800fef4:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800fef8:	784b      	ldrb	r3, [r1, #1]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d1e9      	bne.n	800fed2 <uxr_read_session_header+0x4e>
 800fefe:	2000      	movs	r0, #0
 800ff00:	e7e8      	b.n	800fed4 <uxr_read_session_header+0x50>
 800ff02:	2001      	movs	r0, #1
 800ff04:	e7cb      	b.n	800fe9e <uxr_read_session_header+0x1a>
 800ff06:	bf00      	nop

0800ff08 <uxr_session_header_offset>:
 800ff08:	f990 3000 	ldrsb.w	r3, [r0]
 800ff0c:	2b00      	cmp	r3, #0
 800ff0e:	bfac      	ite	ge
 800ff10:	2008      	movge	r0, #8
 800ff12:	2004      	movlt	r0, #4
 800ff14:	4770      	bx	lr
 800ff16:	bf00      	nop

0800ff18 <uxr_init_base_object_request>:
 800ff18:	b510      	push	{r4, lr}
 800ff1a:	88c3      	ldrh	r3, [r0, #6]
 800ff1c:	b082      	sub	sp, #8
 800ff1e:	f64f 74f4 	movw	r4, #65524	@ 0xfff4
 800ff22:	9101      	str	r1, [sp, #4]
 800ff24:	f1a3 010a 	sub.w	r1, r3, #10
 800ff28:	b289      	uxth	r1, r1
 800ff2a:	42a1      	cmp	r1, r4
 800ff2c:	d80e      	bhi.n	800ff4c <uxr_init_base_object_request+0x34>
 800ff2e:	3301      	adds	r3, #1
 800ff30:	b29c      	uxth	r4, r3
 800ff32:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ff36:	b2db      	uxtb	r3, r3
 800ff38:	80c4      	strh	r4, [r0, #6]
 800ff3a:	9801      	ldr	r0, [sp, #4]
 800ff3c:	7011      	strb	r1, [r2, #0]
 800ff3e:	7053      	strb	r3, [r2, #1]
 800ff40:	1c91      	adds	r1, r2, #2
 800ff42:	f7fe fe83 	bl	800ec4c <uxr_object_id_to_raw>
 800ff46:	4620      	mov	r0, r4
 800ff48:	b002      	add	sp, #8
 800ff4a:	bd10      	pop	{r4, pc}
 800ff4c:	230a      	movs	r3, #10
 800ff4e:	2100      	movs	r1, #0
 800ff50:	461c      	mov	r4, r3
 800ff52:	e7f1      	b.n	800ff38 <uxr_init_base_object_request+0x20>

0800ff54 <uxr_parse_base_object_request>:
 800ff54:	b570      	push	{r4, r5, r6, lr}
 800ff56:	4604      	mov	r4, r0
 800ff58:	3002      	adds	r0, #2
 800ff5a:	460d      	mov	r5, r1
 800ff5c:	4616      	mov	r6, r2
 800ff5e:	f7fe fe61 	bl	800ec24 <uxr_object_id_from_raw>
 800ff62:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800ff66:	8028      	strh	r0, [r5, #0]
 800ff68:	806b      	strh	r3, [r5, #2]
 800ff6a:	7822      	ldrb	r2, [r4, #0]
 800ff6c:	7863      	ldrb	r3, [r4, #1]
 800ff6e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800ff72:	8033      	strh	r3, [r6, #0]
 800ff74:	bd70      	pop	{r4, r5, r6, pc}
 800ff76:	bf00      	nop

0800ff78 <uxr_init_framing_io>:
 800ff78:	2300      	movs	r3, #0
 800ff7a:	7041      	strb	r1, [r0, #1]
 800ff7c:	7003      	strb	r3, [r0, #0]
 800ff7e:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ff80:	4770      	bx	lr
 800ff82:	bf00      	nop

0800ff84 <uxr_write_framed_msg>:
 800ff84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ff88:	4617      	mov	r7, r2
 800ff8a:	7842      	ldrb	r2, [r0, #1]
 800ff8c:	b083      	sub	sp, #12
 800ff8e:	460e      	mov	r6, r1
 800ff90:	f1a2 017d 	sub.w	r1, r2, #125	@ 0x7d
 800ff94:	469a      	mov	sl, r3
 800ff96:	2901      	cmp	r1, #1
 800ff98:	f04f 037e 	mov.w	r3, #126	@ 0x7e
 800ff9c:	4604      	mov	r4, r0
 800ff9e:	f880 3038 	strb.w	r3, [r0, #56]	@ 0x38
 800ffa2:	f8dd b038 	ldr.w	fp, [sp, #56]	@ 0x38
 800ffa6:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 800ffaa:	f240 8137 	bls.w	801021c <uxr_write_framed_msg+0x298>
 800ffae:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 800ffb2:	f884 2039 	strb.w	r2, [r4, #57]	@ 0x39
 800ffb6:	2901      	cmp	r1, #1
 800ffb8:	f04f 0202 	mov.w	r2, #2
 800ffbc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ffc0:	f240 808f 	bls.w	80100e2 <uxr_write_framed_msg+0x15e>
 800ffc4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffc6:	f884 003a 	strb.w	r0, [r4, #58]	@ 0x3a
 800ffca:	b2dd      	uxtb	r5, r3
 800ffcc:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 800ffd0:	2203      	movs	r2, #3
 800ffd2:	2901      	cmp	r1, #1
 800ffd4:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800ffd8:	f240 809a 	bls.w	8010110 <uxr_write_framed_msg+0x18c>
 800ffdc:	18a1      	adds	r1, r4, r2
 800ffde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ffe0:	f881 5038 	strb.w	r5, [r1, #56]	@ 0x38
 800ffe4:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800ffe8:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 800ffec:	3201      	adds	r2, #1
 800ffee:	2801      	cmp	r0, #1
 800fff0:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 800fff4:	f240 80a0 	bls.w	8010138 <uxr_write_framed_msg+0x1b4>
 800fff8:	18a0      	adds	r0, r4, r2
 800fffa:	3201      	adds	r2, #1
 800fffc:	b2d2      	uxtb	r2, r2
 800fffe:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010002:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010006:	2b00      	cmp	r3, #0
 8010008:	f000 80a9 	beq.w	801015e <uxr_write_framed_msg+0x1da>
 801000c:	f04f 0900 	mov.w	r9, #0
 8010010:	46c8      	mov	r8, r9
 8010012:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010016:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801001a:	2901      	cmp	r1, #1
 801001c:	f240 80c3 	bls.w	80101a6 <uxr_write_framed_msg+0x222>
 8010020:	2a29      	cmp	r2, #41	@ 0x29
 8010022:	f200 809f 	bhi.w	8010164 <uxr_write_framed_msg+0x1e0>
 8010026:	18a1      	adds	r1, r4, r2
 8010028:	3201      	adds	r2, #1
 801002a:	b2d2      	uxtb	r2, r2
 801002c:	f881 3038 	strb.w	r3, [r1, #56]	@ 0x38
 8010030:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010034:	ea89 0303 	eor.w	r3, r9, r3
 8010038:	498c      	ldr	r1, [pc, #560]	@ (801026c <uxr_write_framed_msg+0x2e8>)
 801003a:	b2db      	uxtb	r3, r3
 801003c:	f108 0801 	add.w	r8, r8, #1
 8010040:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8010044:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8010048:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801004a:	4543      	cmp	r3, r8
 801004c:	d8e1      	bhi.n	8010012 <uxr_write_framed_msg+0x8e>
 801004e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010052:	fa5f f889 	uxtb.w	r8, r9
 8010056:	9301      	str	r3, [sp, #4]
 8010058:	f04f 0900 	mov.w	r9, #0
 801005c:	f1a8 0a7d 	sub.w	sl, r8, #125	@ 0x7d
 8010060:	fa5f f18a 	uxtb.w	r1, sl
 8010064:	2901      	cmp	r1, #1
 8010066:	d921      	bls.n	80100ac <uxr_write_framed_msg+0x128>
 8010068:	2a29      	cmp	r2, #41	@ 0x29
 801006a:	f240 80af 	bls.w	80101cc <uxr_write_framed_msg+0x248>
 801006e:	2500      	movs	r5, #0
 8010070:	e000      	b.n	8010074 <uxr_write_framed_msg+0xf0>
 8010072:	b160      	cbz	r0, 801008e <uxr_write_framed_msg+0x10a>
 8010074:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010078:	1b52      	subs	r2, r2, r5
 801007a:	465b      	mov	r3, fp
 801007c:	4421      	add	r1, r4
 801007e:	4638      	mov	r0, r7
 8010080:	47b0      	blx	r6
 8010082:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010086:	4405      	add	r5, r0
 8010088:	4295      	cmp	r5, r2
 801008a:	d3f2      	bcc.n	8010072 <uxr_write_framed_msg+0xee>
 801008c:	d003      	beq.n	8010096 <uxr_write_framed_msg+0x112>
 801008e:	2000      	movs	r0, #0
 8010090:	b003      	add	sp, #12
 8010092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010096:	fa5f f18a 	uxtb.w	r1, sl
 801009a:	f04f 0300 	mov.w	r3, #0
 801009e:	2901      	cmp	r1, #1
 80100a0:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 80100a4:	f04f 0200 	mov.w	r2, #0
 80100a8:	f200 8090 	bhi.w	80101cc <uxr_write_framed_msg+0x248>
 80100ac:	1c51      	adds	r1, r2, #1
 80100ae:	b2c9      	uxtb	r1, r1
 80100b0:	2929      	cmp	r1, #41	@ 0x29
 80100b2:	d8dc      	bhi.n	801006e <uxr_write_framed_msg+0xea>
 80100b4:	18a5      	adds	r5, r4, r2
 80100b6:	4421      	add	r1, r4
 80100b8:	3202      	adds	r2, #2
 80100ba:	f088 0820 	eor.w	r8, r8, #32
 80100be:	4648      	mov	r0, r9
 80100c0:	f04f 037d 	mov.w	r3, #125	@ 0x7d
 80100c4:	b2d2      	uxtb	r2, r2
 80100c6:	f885 3038 	strb.w	r3, [r5, #56]	@ 0x38
 80100ca:	f04f 0901 	mov.w	r9, #1
 80100ce:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80100d2:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80100d6:	2800      	cmp	r0, #0
 80100d8:	f040 8085 	bne.w	80101e6 <uxr_write_framed_msg+0x262>
 80100dc:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80100e0:	e7bc      	b.n	801005c <uxr_write_framed_msg+0xd8>
 80100e2:	4611      	mov	r1, r2
 80100e4:	f04f 0c03 	mov.w	ip, #3
 80100e8:	2204      	movs	r2, #4
 80100ea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80100ec:	4421      	add	r1, r4
 80100ee:	b2dd      	uxtb	r5, r3
 80100f0:	f04f 0e7d 	mov.w	lr, #125	@ 0x7d
 80100f4:	f881 e038 	strb.w	lr, [r1, #56]	@ 0x38
 80100f8:	44a4      	add	ip, r4
 80100fa:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 80100fe:	f080 0020 	eor.w	r0, r0, #32
 8010102:	2901      	cmp	r1, #1
 8010104:	f88c 0038 	strb.w	r0, [ip, #56]	@ 0x38
 8010108:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 801010c:	f63f af66 	bhi.w	800ffdc <uxr_write_framed_msg+0x58>
 8010110:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010112:	18a0      	adds	r0, r4, r2
 8010114:	f085 0520 	eor.w	r5, r5, #32
 8010118:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801011c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8010120:	f880 c038 	strb.w	ip, [r0, #56]	@ 0x38
 8010124:	f880 5039 	strb.w	r5, [r0, #57]	@ 0x39
 8010128:	f1a1 007d 	sub.w	r0, r1, #125	@ 0x7d
 801012c:	3202      	adds	r2, #2
 801012e:	2801      	cmp	r0, #1
 8010130:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010134:	f63f af60 	bhi.w	800fff8 <uxr_write_framed_msg+0x74>
 8010138:	1c50      	adds	r0, r2, #1
 801013a:	18a5      	adds	r5, r4, r2
 801013c:	fa54 f080 	uxtab	r0, r4, r0
 8010140:	3202      	adds	r2, #2
 8010142:	f081 0120 	eor.w	r1, r1, #32
 8010146:	b2d2      	uxtb	r2, r2
 8010148:	f04f 0c7d 	mov.w	ip, #125	@ 0x7d
 801014c:	f885 c038 	strb.w	ip, [r5, #56]	@ 0x38
 8010150:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 8010154:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010158:	2b00      	cmp	r3, #0
 801015a:	f47f af57 	bne.w	801000c <uxr_write_framed_msg+0x88>
 801015e:	9301      	str	r3, [sp, #4]
 8010160:	4698      	mov	r8, r3
 8010162:	e779      	b.n	8010058 <uxr_write_framed_msg+0xd4>
 8010164:	2500      	movs	r5, #0
 8010166:	e001      	b.n	801016c <uxr_write_framed_msg+0x1e8>
 8010168:	2800      	cmp	r0, #0
 801016a:	d090      	beq.n	801008e <uxr_write_framed_msg+0x10a>
 801016c:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 8010170:	1b52      	subs	r2, r2, r5
 8010172:	465b      	mov	r3, fp
 8010174:	4421      	add	r1, r4
 8010176:	4638      	mov	r0, r7
 8010178:	47b0      	blx	r6
 801017a:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 801017e:	4405      	add	r5, r0
 8010180:	4295      	cmp	r5, r2
 8010182:	d3f1      	bcc.n	8010168 <uxr_write_framed_msg+0x1e4>
 8010184:	d183      	bne.n	801008e <uxr_write_framed_msg+0x10a>
 8010186:	f04f 0300 	mov.w	r3, #0
 801018a:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 801018e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010190:	4543      	cmp	r3, r8
 8010192:	d964      	bls.n	801025e <uxr_write_framed_msg+0x2da>
 8010194:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8010198:	f1a3 017d 	sub.w	r1, r3, #125	@ 0x7d
 801019c:	2901      	cmp	r1, #1
 801019e:	f04f 0200 	mov.w	r2, #0
 80101a2:	f63f af3d 	bhi.w	8010020 <uxr_write_framed_msg+0x9c>
 80101a6:	1c51      	adds	r1, r2, #1
 80101a8:	b2c9      	uxtb	r1, r1
 80101aa:	2929      	cmp	r1, #41	@ 0x29
 80101ac:	d8da      	bhi.n	8010164 <uxr_write_framed_msg+0x1e0>
 80101ae:	18a0      	adds	r0, r4, r2
 80101b0:	4421      	add	r1, r4
 80101b2:	f04f 057d 	mov.w	r5, #125	@ 0x7d
 80101b6:	3202      	adds	r2, #2
 80101b8:	f880 5038 	strb.w	r5, [r0, #56]	@ 0x38
 80101bc:	b2d2      	uxtb	r2, r2
 80101be:	f083 0020 	eor.w	r0, r3, #32
 80101c2:	f881 0038 	strb.w	r0, [r1, #56]	@ 0x38
 80101c6:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80101ca:	e733      	b.n	8010034 <uxr_write_framed_msg+0xb0>
 80101cc:	18a1      	adds	r1, r4, r2
 80101ce:	3201      	adds	r2, #1
 80101d0:	4648      	mov	r0, r9
 80101d2:	b2d2      	uxtb	r2, r2
 80101d4:	f881 8038 	strb.w	r8, [r1, #56]	@ 0x38
 80101d8:	f04f 0901 	mov.w	r9, #1
 80101dc:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 80101e0:	2800      	cmp	r0, #0
 80101e2:	f43f af7b 	beq.w	80100dc <uxr_write_framed_msg+0x158>
 80101e6:	2500      	movs	r5, #0
 80101e8:	e002      	b.n	80101f0 <uxr_write_framed_msg+0x26c>
 80101ea:	2800      	cmp	r0, #0
 80101ec:	f43f af4f 	beq.w	801008e <uxr_write_framed_msg+0x10a>
 80101f0:	f105 0138 	add.w	r1, r5, #56	@ 0x38
 80101f4:	1b52      	subs	r2, r2, r5
 80101f6:	465b      	mov	r3, fp
 80101f8:	4421      	add	r1, r4
 80101fa:	4638      	mov	r0, r7
 80101fc:	47b0      	blx	r6
 80101fe:	f894 2062 	ldrb.w	r2, [r4, #98]	@ 0x62
 8010202:	4405      	add	r5, r0
 8010204:	4295      	cmp	r5, r2
 8010206:	d3f0      	bcc.n	80101ea <uxr_write_framed_msg+0x266>
 8010208:	f47f af41 	bne.w	801008e <uxr_write_framed_msg+0x10a>
 801020c:	2300      	movs	r3, #0
 801020e:	f884 3062 	strb.w	r3, [r4, #98]	@ 0x62
 8010212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010214:	b298      	uxth	r0, r3
 8010216:	b003      	add	sp, #12
 8010218:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801021c:	217d      	movs	r1, #125	@ 0x7d
 801021e:	f082 0220 	eor.w	r2, r2, #32
 8010222:	f884 1039 	strb.w	r1, [r4, #57]	@ 0x39
 8010226:	f1a0 017d 	sub.w	r1, r0, #125	@ 0x7d
 801022a:	f884 203a 	strb.w	r2, [r4, #58]	@ 0x3a
 801022e:	2901      	cmp	r1, #1
 8010230:	f04f 0203 	mov.w	r2, #3
 8010234:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010238:	d804      	bhi.n	8010244 <uxr_write_framed_msg+0x2c0>
 801023a:	4611      	mov	r1, r2
 801023c:	f04f 0c04 	mov.w	ip, #4
 8010240:	2205      	movs	r2, #5
 8010242:	e752      	b.n	80100ea <uxr_write_framed_msg+0x166>
 8010244:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010246:	f884 003b 	strb.w	r0, [r4, #59]	@ 0x3b
 801024a:	b2dd      	uxtb	r5, r3
 801024c:	f1a5 017d 	sub.w	r1, r5, #125	@ 0x7d
 8010250:	2204      	movs	r2, #4
 8010252:	2901      	cmp	r1, #1
 8010254:	f884 2062 	strb.w	r2, [r4, #98]	@ 0x62
 8010258:	f63f aec0 	bhi.w	800ffdc <uxr_write_framed_msg+0x58>
 801025c:	e758      	b.n	8010110 <uxr_write_framed_msg+0x18c>
 801025e:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8010262:	fa5f f889 	uxtb.w	r8, r9
 8010266:	9301      	str	r3, [sp, #4]
 8010268:	2200      	movs	r2, #0
 801026a:	e6f5      	b.n	8010058 <uxr_write_framed_msg+0xd4>
 801026c:	08018fd4 	.word	0x08018fd4

08010270 <uxr_framing_read_transport>:
 8010270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010274:	4604      	mov	r4, r0
 8010276:	b083      	sub	sp, #12
 8010278:	461f      	mov	r7, r3
 801027a:	f8dd b034 	ldr.w	fp, [sp, #52]	@ 0x34
 801027e:	4689      	mov	r9, r1
 8010280:	4692      	mov	sl, r2
 8010282:	f000 fc89 	bl	8010b98 <uxr_millis>
 8010286:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801028a:	f894 602d 	ldrb.w	r6, [r4, #45]	@ 0x2d
 801028e:	42b3      	cmp	r3, r6
 8010290:	4680      	mov	r8, r0
 8010292:	d061      	beq.n	8010358 <uxr_framing_read_transport+0xe8>
 8010294:	d81c      	bhi.n	80102d0 <uxr_framing_read_transport+0x60>
 8010296:	1e75      	subs	r5, r6, #1
 8010298:	1aed      	subs	r5, r5, r3
 801029a:	b2ed      	uxtb	r5, r5
 801029c:	2600      	movs	r6, #0
 801029e:	455d      	cmp	r5, fp
 80102a0:	d81f      	bhi.n	80102e2 <uxr_framing_read_transport+0x72>
 80102a2:	19ab      	adds	r3, r5, r6
 80102a4:	455b      	cmp	r3, fp
 80102a6:	bf84      	itt	hi
 80102a8:	ebab 0605 	subhi.w	r6, fp, r5
 80102ac:	b2f6      	uxtbhi	r6, r6
 80102ae:	b9ed      	cbnz	r5, 80102ec <uxr_framing_read_transport+0x7c>
 80102b0:	f04f 0b00 	mov.w	fp, #0
 80102b4:	f000 fc70 	bl	8010b98 <uxr_millis>
 80102b8:	683b      	ldr	r3, [r7, #0]
 80102ba:	eba0 0808 	sub.w	r8, r0, r8
 80102be:	eba3 0308 	sub.w	r3, r3, r8
 80102c2:	4658      	mov	r0, fp
 80102c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80102c8:	603b      	str	r3, [r7, #0]
 80102ca:	b003      	add	sp, #12
 80102cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d0:	2e00      	cmp	r6, #0
 80102d2:	d049      	beq.n	8010368 <uxr_framing_read_transport+0xf8>
 80102d4:	f1c3 052a 	rsb	r5, r3, #42	@ 0x2a
 80102d8:	b2ed      	uxtb	r5, r5
 80102da:	3e01      	subs	r6, #1
 80102dc:	455d      	cmp	r5, fp
 80102de:	b2f6      	uxtb	r6, r6
 80102e0:	d9df      	bls.n	80102a2 <uxr_framing_read_transport+0x32>
 80102e2:	fa5f f58b 	uxtb.w	r5, fp
 80102e6:	2600      	movs	r6, #0
 80102e8:	2d00      	cmp	r5, #0
 80102ea:	d0e1      	beq.n	80102b0 <uxr_framing_read_transport+0x40>
 80102ec:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80102f0:	3102      	adds	r1, #2
 80102f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80102f4:	9300      	str	r3, [sp, #0]
 80102f6:	683b      	ldr	r3, [r7, #0]
 80102f8:	4421      	add	r1, r4
 80102fa:	462a      	mov	r2, r5
 80102fc:	4650      	mov	r0, sl
 80102fe:	47c8      	blx	r9
 8010300:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 8010304:	4a1a      	ldr	r2, [pc, #104]	@ (8010370 <uxr_framing_read_transport+0x100>)
 8010306:	4403      	add	r3, r0
 8010308:	0859      	lsrs	r1, r3, #1
 801030a:	fba2 2101 	umull	r2, r1, r2, r1
 801030e:	0889      	lsrs	r1, r1, #2
 8010310:	222a      	movs	r2, #42	@ 0x2a
 8010312:	fb02 3111 	mls	r1, r2, r1, r3
 8010316:	4683      	mov	fp, r0
 8010318:	f884 102c 	strb.w	r1, [r4, #44]	@ 0x2c
 801031c:	2800      	cmp	r0, #0
 801031e:	d0c7      	beq.n	80102b0 <uxr_framing_read_transport+0x40>
 8010320:	42a8      	cmp	r0, r5
 8010322:	d1c7      	bne.n	80102b4 <uxr_framing_read_transport+0x44>
 8010324:	2e00      	cmp	r6, #0
 8010326:	d0c5      	beq.n	80102b4 <uxr_framing_read_transport+0x44>
 8010328:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801032a:	9300      	str	r3, [sp, #0]
 801032c:	3102      	adds	r1, #2
 801032e:	4632      	mov	r2, r6
 8010330:	4421      	add	r1, r4
 8010332:	2300      	movs	r3, #0
 8010334:	4650      	mov	r0, sl
 8010336:	47c8      	blx	r9
 8010338:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801033c:	4a0c      	ldr	r2, [pc, #48]	@ (8010370 <uxr_framing_read_transport+0x100>)
 801033e:	180b      	adds	r3, r1, r0
 8010340:	0859      	lsrs	r1, r3, #1
 8010342:	fba2 1201 	umull	r1, r2, r2, r1
 8010346:	0892      	lsrs	r2, r2, #2
 8010348:	212a      	movs	r1, #42	@ 0x2a
 801034a:	fb01 3312 	mls	r3, r1, r2, r3
 801034e:	eb00 0b05 	add.w	fp, r0, r5
 8010352:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 8010356:	e7ad      	b.n	80102b4 <uxr_framing_read_transport+0x44>
 8010358:	2600      	movs	r6, #0
 801035a:	f1bb 0f28 	cmp.w	fp, #40	@ 0x28
 801035e:	85a6      	strh	r6, [r4, #44]	@ 0x2c
 8010360:	d9bf      	bls.n	80102e2 <uxr_framing_read_transport+0x72>
 8010362:	2102      	movs	r1, #2
 8010364:	2529      	movs	r5, #41	@ 0x29
 8010366:	e7c4      	b.n	80102f2 <uxr_framing_read_transport+0x82>
 8010368:	f1c3 0529 	rsb	r5, r3, #41	@ 0x29
 801036c:	b2ed      	uxtb	r5, r5
 801036e:	e796      	b.n	801029e <uxr_framing_read_transport+0x2e>
 8010370:	30c30c31 	.word	0x30c30c31

08010374 <uxr_read_framed_msg>:
 8010374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010378:	461e      	mov	r6, r3
 801037a:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 801037e:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 8010382:	429d      	cmp	r5, r3
 8010384:	b083      	sub	sp, #12
 8010386:	4604      	mov	r4, r0
 8010388:	4688      	mov	r8, r1
 801038a:	4691      	mov	r9, r2
 801038c:	f000 8188 	beq.w	80106a0 <uxr_read_framed_msg+0x32c>
 8010390:	7823      	ldrb	r3, [r4, #0]
 8010392:	4dc1      	ldr	r5, [pc, #772]	@ (8010698 <uxr_read_framed_msg+0x324>)
 8010394:	4fc1      	ldr	r7, [pc, #772]	@ (801069c <uxr_read_framed_msg+0x328>)
 8010396:	2b07      	cmp	r3, #7
 8010398:	d8fd      	bhi.n	8010396 <uxr_read_framed_msg+0x22>
 801039a:	e8df f013 	tbh	[pc, r3, lsl #1]
 801039e:	0115      	.short	0x0115
 80103a0:	00d600f6 	.word	0x00d600f6
 80103a4:	009000b9 	.word	0x009000b9
 80103a8:	0030004d 	.word	0x0030004d
 80103ac:	0008      	.short	0x0008
 80103ae:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 80103b2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80103b6:	4299      	cmp	r1, r3
 80103b8:	f000 814a 	beq.w	8010650 <uxr_read_framed_msg+0x2dc>
 80103bc:	18e2      	adds	r2, r4, r3
 80103be:	7892      	ldrb	r2, [r2, #2]
 80103c0:	2a7d      	cmp	r2, #125	@ 0x7d
 80103c2:	f000 8199 	beq.w	80106f8 <uxr_read_framed_msg+0x384>
 80103c6:	3301      	adds	r3, #1
 80103c8:	0858      	lsrs	r0, r3, #1
 80103ca:	fba5 1000 	umull	r1, r0, r5, r0
 80103ce:	0880      	lsrs	r0, r0, #2
 80103d0:	212a      	movs	r1, #42	@ 0x2a
 80103d2:	fb01 3310 	mls	r3, r1, r0, r3
 80103d6:	2a7e      	cmp	r2, #126	@ 0x7e
 80103d8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80103dc:	f000 8252 	beq.w	8010884 <uxr_read_framed_msg+0x510>
 80103e0:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80103e2:	8ee1      	ldrh	r1, [r4, #54]	@ 0x36
 80103e4:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80103e8:	b29b      	uxth	r3, r3
 80103ea:	2200      	movs	r2, #0
 80103ec:	4299      	cmp	r1, r3
 80103ee:	86a3      	strh	r3, [r4, #52]	@ 0x34
 80103f0:	7022      	strb	r2, [r4, #0]
 80103f2:	f000 8179 	beq.w	80106e8 <uxr_read_framed_msg+0x374>
 80103f6:	2000      	movs	r0, #0
 80103f8:	b003      	add	sp, #12
 80103fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103fe:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010402:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010406:	4299      	cmp	r1, r3
 8010408:	f000 8131 	beq.w	801066e <uxr_read_framed_msg+0x2fa>
 801040c:	18e2      	adds	r2, r4, r3
 801040e:	7890      	ldrb	r0, [r2, #2]
 8010410:	287d      	cmp	r0, #125	@ 0x7d
 8010412:	f000 8190 	beq.w	8010736 <uxr_read_framed_msg+0x3c2>
 8010416:	3301      	adds	r3, #1
 8010418:	085a      	lsrs	r2, r3, #1
 801041a:	fba5 1202 	umull	r1, r2, r5, r2
 801041e:	0892      	lsrs	r2, r2, #2
 8010420:	212a      	movs	r1, #42	@ 0x2a
 8010422:	fb01 3312 	mls	r3, r1, r2, r3
 8010426:	287e      	cmp	r0, #126	@ 0x7e
 8010428:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801042c:	f000 821a 	beq.w	8010864 <uxr_read_framed_msg+0x4f0>
 8010430:	2307      	movs	r3, #7
 8010432:	86a0      	strh	r0, [r4, #52]	@ 0x34
 8010434:	7023      	strb	r3, [r4, #0]
 8010436:	e7ae      	b.n	8010396 <uxr_read_framed_msg+0x22>
 8010438:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801043a:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 801043e:	459e      	cmp	lr, r3
 8010440:	d938      	bls.n	80104b4 <uxr_read_framed_msg+0x140>
 8010442:	ee07 8a90 	vmov	s15, r8
 8010446:	212a      	movs	r1, #42	@ 0x2a
 8010448:	e020      	b.n	801048c <uxr_read_framed_msg+0x118>
 801044a:	f89b c002 	ldrb.w	ip, [fp, #2]
 801044e:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 8010452:	f000 80d4 	beq.w	80105fe <uxr_read_framed_msg+0x28a>
 8010456:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 801045a:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801045e:	f000 8219 	beq.w	8010894 <uxr_read_framed_msg+0x520>
 8010462:	f806 c003 	strb.w	ip, [r6, r3]
 8010466:	f8b4 a036 	ldrh.w	sl, [r4, #54]	@ 0x36
 801046a:	8e63      	ldrh	r3, [r4, #50]	@ 0x32
 801046c:	f8b4 e030 	ldrh.w	lr, [r4, #48]	@ 0x30
 8010470:	ea8a 000c 	eor.w	r0, sl, ip
 8010474:	b2c0      	uxtb	r0, r0
 8010476:	3301      	adds	r3, #1
 8010478:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 801047c:	b29b      	uxth	r3, r3
 801047e:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8010482:	4573      	cmp	r3, lr
 8010484:	8663      	strh	r3, [r4, #50]	@ 0x32
 8010486:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8010488:	f080 8120 	bcs.w	80106cc <uxr_read_framed_msg+0x358>
 801048c:	f894 002d 	ldrb.w	r0, [r4, #45]	@ 0x2d
 8010490:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 8010494:	f100 0c01 	add.w	ip, r0, #1
 8010498:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801049c:	fba5 8202 	umull	r8, r2, r5, r2
 80104a0:	0892      	lsrs	r2, r2, #2
 80104a2:	4582      	cmp	sl, r0
 80104a4:	eb04 0b00 	add.w	fp, r4, r0
 80104a8:	fb01 c212 	mls	r2, r1, r2, ip
 80104ac:	d1cd      	bne.n	801044a <uxr_read_framed_msg+0xd6>
 80104ae:	ee17 8a90 	vmov	r8, s15
 80104b2:	459e      	cmp	lr, r3
 80104b4:	f040 8111 	bne.w	80106da <uxr_read_framed_msg+0x366>
 80104b8:	2306      	movs	r3, #6
 80104ba:	7023      	strb	r3, [r4, #0]
 80104bc:	e76b      	b.n	8010396 <uxr_read_framed_msg+0x22>
 80104be:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 80104c2:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 80104c6:	4298      	cmp	r0, r3
 80104c8:	f000 80c2 	beq.w	8010650 <uxr_read_framed_msg+0x2dc>
 80104cc:	18e2      	adds	r2, r4, r3
 80104ce:	7891      	ldrb	r1, [r2, #2]
 80104d0:	297d      	cmp	r1, #125	@ 0x7d
 80104d2:	f000 814c 	beq.w	801076e <uxr_read_framed_msg+0x3fa>
 80104d6:	3301      	adds	r3, #1
 80104d8:	085a      	lsrs	r2, r3, #1
 80104da:	fba5 0202 	umull	r0, r2, r5, r2
 80104de:	0892      	lsrs	r2, r2, #2
 80104e0:	202a      	movs	r0, #42	@ 0x2a
 80104e2:	fb00 3312 	mls	r3, r0, r2, r3
 80104e6:	297e      	cmp	r1, #126	@ 0x7e
 80104e8:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80104ec:	f000 81ca 	beq.w	8010884 <uxr_read_framed_msg+0x510>
 80104f0:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80104f2:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 80104f6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80104f8:	b29b      	uxth	r3, r3
 80104fa:	2000      	movs	r0, #0
 80104fc:	428b      	cmp	r3, r1
 80104fe:	8623      	strh	r3, [r4, #48]	@ 0x30
 8010500:	8660      	strh	r0, [r4, #50]	@ 0x32
 8010502:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8010504:	f240 80df 	bls.w	80106c6 <uxr_read_framed_msg+0x352>
 8010508:	7020      	strb	r0, [r4, #0]
 801050a:	b003      	add	sp, #12
 801050c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010510:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 8010514:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010518:	4299      	cmp	r1, r3
 801051a:	f000 80a8 	beq.w	801066e <uxr_read_framed_msg+0x2fa>
 801051e:	18e2      	adds	r2, r4, r3
 8010520:	7890      	ldrb	r0, [r2, #2]
 8010522:	287d      	cmp	r0, #125	@ 0x7d
 8010524:	f000 8164 	beq.w	80107f0 <uxr_read_framed_msg+0x47c>
 8010528:	3301      	adds	r3, #1
 801052a:	085a      	lsrs	r2, r3, #1
 801052c:	fba5 1202 	umull	r1, r2, r5, r2
 8010530:	0892      	lsrs	r2, r2, #2
 8010532:	212a      	movs	r1, #42	@ 0x2a
 8010534:	fb01 3312 	mls	r3, r1, r2, r3
 8010538:	287e      	cmp	r0, #126	@ 0x7e
 801053a:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801053e:	f000 8191 	beq.w	8010864 <uxr_read_framed_msg+0x4f0>
 8010542:	2304      	movs	r3, #4
 8010544:	8620      	strh	r0, [r4, #48]	@ 0x30
 8010546:	7023      	strb	r3, [r4, #0]
 8010548:	e725      	b.n	8010396 <uxr_read_framed_msg+0x22>
 801054a:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
 801054e:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 8010552:	4290      	cmp	r0, r2
 8010554:	f000 80b3 	beq.w	80106be <uxr_read_framed_msg+0x34a>
 8010558:	18a3      	adds	r3, r4, r2
 801055a:	7899      	ldrb	r1, [r3, #2]
 801055c:	297d      	cmp	r1, #125	@ 0x7d
 801055e:	f000 8164 	beq.w	801082a <uxr_read_framed_msg+0x4b6>
 8010562:	3201      	adds	r2, #1
 8010564:	0850      	lsrs	r0, r2, #1
 8010566:	fba5 3000 	umull	r3, r0, r5, r0
 801056a:	0880      	lsrs	r0, r0, #2
 801056c:	232a      	movs	r3, #42	@ 0x2a
 801056e:	fb03 2210 	mls	r2, r3, r0, r2
 8010572:	297e      	cmp	r1, #126	@ 0x7e
 8010574:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 8010578:	f000 8188 	beq.w	801088c <uxr_read_framed_msg+0x518>
 801057c:	7863      	ldrb	r3, [r4, #1]
 801057e:	428b      	cmp	r3, r1
 8010580:	bf0c      	ite	eq
 8010582:	2303      	moveq	r3, #3
 8010584:	2300      	movne	r3, #0
 8010586:	7023      	strb	r3, [r4, #0]
 8010588:	e705      	b.n	8010396 <uxr_read_framed_msg+0x22>
 801058a:	f894 102c 	ldrb.w	r1, [r4, #44]	@ 0x2c
 801058e:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8010592:	2200      	movs	r2, #0
 8010594:	4299      	cmp	r1, r3
 8010596:	f884 202e 	strb.w	r2, [r4, #46]	@ 0x2e
 801059a:	d06c      	beq.n	8010676 <uxr_read_framed_msg+0x302>
 801059c:	18e2      	adds	r2, r4, r3
 801059e:	7890      	ldrb	r0, [r2, #2]
 80105a0:	287d      	cmp	r0, #125	@ 0x7d
 80105a2:	f000 8101 	beq.w	80107a8 <uxr_read_framed_msg+0x434>
 80105a6:	3301      	adds	r3, #1
 80105a8:	085a      	lsrs	r2, r3, #1
 80105aa:	fba5 1202 	umull	r1, r2, r5, r2
 80105ae:	0892      	lsrs	r2, r2, #2
 80105b0:	212a      	movs	r1, #42	@ 0x2a
 80105b2:	fb01 3312 	mls	r3, r1, r2, r3
 80105b6:	287e      	cmp	r0, #126	@ 0x7e
 80105b8:	f884 002e 	strb.w	r0, [r4, #46]	@ 0x2e
 80105bc:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80105c0:	d059      	beq.n	8010676 <uxr_read_framed_msg+0x302>
 80105c2:	2302      	movs	r3, #2
 80105c4:	7023      	strb	r3, [r4, #0]
 80105c6:	e6e6      	b.n	8010396 <uxr_read_framed_msg+0x22>
 80105c8:	f894 a02c 	ldrb.w	sl, [r4, #44]	@ 0x2c
 80105cc:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80105d0:	f04f 0e2a 	mov.w	lr, #42	@ 0x2a
 80105d4:	1c51      	adds	r1, r2, #1
 80105d6:	084b      	lsrs	r3, r1, #1
 80105d8:	fba5 c303 	umull	ip, r3, r5, r3
 80105dc:	089b      	lsrs	r3, r3, #2
 80105de:	fb0e 1313 	mls	r3, lr, r3, r1
 80105e2:	4592      	cmp	sl, r2
 80105e4:	eb04 0002 	add.w	r0, r4, r2
 80105e8:	b2da      	uxtb	r2, r3
 80105ea:	f43f af04 	beq.w	80103f6 <uxr_read_framed_msg+0x82>
 80105ee:	7883      	ldrb	r3, [r0, #2]
 80105f0:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 80105f4:	2b7e      	cmp	r3, #126	@ 0x7e
 80105f6:	d1ed      	bne.n	80105d4 <uxr_read_framed_msg+0x260>
 80105f8:	2301      	movs	r3, #1
 80105fa:	7023      	strb	r3, [r4, #0]
 80105fc:	e6cb      	b.n	8010396 <uxr_read_framed_msg+0x22>
 80105fe:	f100 0c01 	add.w	ip, r0, #1
 8010602:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010606:	fba5 8202 	umull	r8, r2, r5, r2
 801060a:	0892      	lsrs	r2, r2, #2
 801060c:	fb01 c212 	mls	r2, r1, r2, ip
 8010610:	eb04 0c02 	add.w	ip, r4, r2
 8010614:	b2d2      	uxtb	r2, r2
 8010616:	4592      	cmp	sl, r2
 8010618:	f100 0002 	add.w	r0, r0, #2
 801061c:	f43f af47 	beq.w	80104ae <uxr_read_framed_msg+0x13a>
 8010620:	0842      	lsrs	r2, r0, #1
 8010622:	f89c a002 	ldrb.w	sl, [ip, #2]
 8010626:	fba5 8202 	umull	r8, r2, r5, r2
 801062a:	0892      	lsrs	r2, r2, #2
 801062c:	fb01 0012 	mls	r0, r1, r2, r0
 8010630:	f1ba 0f7e 	cmp.w	sl, #126	@ 0x7e
 8010634:	f08a 0c20 	eor.w	ip, sl, #32
 8010638:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d
 801063c:	f47f af11 	bne.w	8010462 <uxr_read_framed_msg+0xee>
 8010640:	459e      	cmp	lr, r3
 8010642:	ee17 8a90 	vmov	r8, s15
 8010646:	f43f af37 	beq.w	80104b8 <uxr_read_framed_msg+0x144>
 801064a:	2301      	movs	r3, #1
 801064c:	7023      	strb	r3, [r4, #0]
 801064e:	e6a2      	b.n	8010396 <uxr_read_framed_msg+0x22>
 8010650:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010652:	9300      	str	r3, [sp, #0]
 8010654:	2301      	movs	r3, #1
 8010656:	9301      	str	r3, [sp, #4]
 8010658:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801065a:	464a      	mov	r2, r9
 801065c:	4641      	mov	r1, r8
 801065e:	4620      	mov	r0, r4
 8010660:	f7ff fe06 	bl	8010270 <uxr_framing_read_transport>
 8010664:	2800      	cmp	r0, #0
 8010666:	f43f aec6 	beq.w	80103f6 <uxr_read_framed_msg+0x82>
 801066a:	7823      	ldrb	r3, [r4, #0]
 801066c:	e693      	b.n	8010396 <uxr_read_framed_msg+0x22>
 801066e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010670:	9300      	str	r3, [sp, #0]
 8010672:	2302      	movs	r3, #2
 8010674:	e7ef      	b.n	8010656 <uxr_read_framed_msg+0x2e2>
 8010676:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010678:	9300      	str	r3, [sp, #0]
 801067a:	2304      	movs	r3, #4
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	464a      	mov	r2, r9
 8010680:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010682:	4641      	mov	r1, r8
 8010684:	4620      	mov	r0, r4
 8010686:	f7ff fdf3 	bl	8010270 <uxr_framing_read_transport>
 801068a:	2800      	cmp	r0, #0
 801068c:	d1ed      	bne.n	801066a <uxr_read_framed_msg+0x2f6>
 801068e:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8010692:	2b7e      	cmp	r3, #126	@ 0x7e
 8010694:	d0e9      	beq.n	801066a <uxr_read_framed_msg+0x2f6>
 8010696:	e6ae      	b.n	80103f6 <uxr_read_framed_msg+0x82>
 8010698:	30c30c31 	.word	0x30c30c31
 801069c:	08018fd4 	.word	0x08018fd4
 80106a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106a2:	9300      	str	r3, [sp, #0]
 80106a4:	2305      	movs	r3, #5
 80106a6:	9301      	str	r3, [sp, #4]
 80106a8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80106aa:	f7ff fde1 	bl	8010270 <uxr_framing_read_transport>
 80106ae:	f894 202d 	ldrb.w	r2, [r4, #45]	@ 0x2d
 80106b2:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 80106b6:	429a      	cmp	r2, r3
 80106b8:	f43f ae9d 	beq.w	80103f6 <uxr_read_framed_msg+0x82>
 80106bc:	e668      	b.n	8010390 <uxr_read_framed_msg+0x1c>
 80106be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106c0:	9300      	str	r3, [sp, #0]
 80106c2:	2303      	movs	r3, #3
 80106c4:	e7c7      	b.n	8010656 <uxr_read_framed_msg+0x2e2>
 80106c6:	2305      	movs	r3, #5
 80106c8:	7023      	strb	r3, [r4, #0]
 80106ca:	e664      	b.n	8010396 <uxr_read_framed_msg+0x22>
 80106cc:	ee17 8a90 	vmov	r8, s15
 80106d0:	f43f aef2 	beq.w	80104b8 <uxr_read_framed_msg+0x144>
 80106d4:	f1bc 0f7e 	cmp.w	ip, #126	@ 0x7e
 80106d8:	d08e      	beq.n	80105f8 <uxr_read_framed_msg+0x284>
 80106da:	ebae 0303 	sub.w	r3, lr, r3
 80106de:	3302      	adds	r3, #2
 80106e0:	9301      	str	r3, [sp, #4]
 80106e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80106e4:	9300      	str	r3, [sp, #0]
 80106e6:	e7b7      	b.n	8010658 <uxr_read_framed_msg+0x2e4>
 80106e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80106ea:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 80106ee:	7013      	strb	r3, [r2, #0]
 80106f0:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80106f2:	b003      	add	sp, #12
 80106f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106f8:	f103 0c01 	add.w	ip, r3, #1
 80106fc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8010700:	fba5 0202 	umull	r0, r2, r5, r2
 8010704:	0892      	lsrs	r2, r2, #2
 8010706:	202a      	movs	r0, #42	@ 0x2a
 8010708:	fb00 c212 	mls	r2, r0, r2, ip
 801070c:	fa5f fc82 	uxtb.w	ip, r2
 8010710:	4561      	cmp	r1, ip
 8010712:	d09d      	beq.n	8010650 <uxr_read_framed_msg+0x2dc>
 8010714:	3302      	adds	r3, #2
 8010716:	4422      	add	r2, r4
 8010718:	0859      	lsrs	r1, r3, #1
 801071a:	7892      	ldrb	r2, [r2, #2]
 801071c:	fba5 c101 	umull	ip, r1, r5, r1
 8010720:	0889      	lsrs	r1, r1, #2
 8010722:	fb00 3311 	mls	r3, r0, r1, r3
 8010726:	2a7e      	cmp	r2, #126	@ 0x7e
 8010728:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 801072c:	f000 80aa 	beq.w	8010884 <uxr_read_framed_msg+0x510>
 8010730:	f082 0220 	eor.w	r2, r2, #32
 8010734:	e654      	b.n	80103e0 <uxr_read_framed_msg+0x6c>
 8010736:	1c58      	adds	r0, r3, #1
 8010738:	0842      	lsrs	r2, r0, #1
 801073a:	fba5 c202 	umull	ip, r2, r5, r2
 801073e:	0892      	lsrs	r2, r2, #2
 8010740:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010744:	fb0c 0212 	mls	r2, ip, r2, r0
 8010748:	b2d0      	uxtb	r0, r2
 801074a:	4281      	cmp	r1, r0
 801074c:	d08f      	beq.n	801066e <uxr_read_framed_msg+0x2fa>
 801074e:	4422      	add	r2, r4
 8010750:	3302      	adds	r3, #2
 8010752:	7890      	ldrb	r0, [r2, #2]
 8010754:	085a      	lsrs	r2, r3, #1
 8010756:	fba5 1202 	umull	r1, r2, r5, r2
 801075a:	0892      	lsrs	r2, r2, #2
 801075c:	fb0c 3312 	mls	r3, ip, r2, r3
 8010760:	287e      	cmp	r0, #126	@ 0x7e
 8010762:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010766:	d07d      	beq.n	8010864 <uxr_read_framed_msg+0x4f0>
 8010768:	f080 0020 	eor.w	r0, r0, #32
 801076c:	e660      	b.n	8010430 <uxr_read_framed_msg+0xbc>
 801076e:	1c59      	adds	r1, r3, #1
 8010770:	084a      	lsrs	r2, r1, #1
 8010772:	fba5 c202 	umull	ip, r2, r5, r2
 8010776:	0892      	lsrs	r2, r2, #2
 8010778:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 801077c:	fb0c 1212 	mls	r2, ip, r2, r1
 8010780:	b2d1      	uxtb	r1, r2
 8010782:	4288      	cmp	r0, r1
 8010784:	f43f af64 	beq.w	8010650 <uxr_read_framed_msg+0x2dc>
 8010788:	4422      	add	r2, r4
 801078a:	3302      	adds	r3, #2
 801078c:	7891      	ldrb	r1, [r2, #2]
 801078e:	085a      	lsrs	r2, r3, #1
 8010790:	fba5 0202 	umull	r0, r2, r5, r2
 8010794:	0892      	lsrs	r2, r2, #2
 8010796:	fb0c 3312 	mls	r3, ip, r2, r3
 801079a:	297e      	cmp	r1, #126	@ 0x7e
 801079c:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107a0:	d070      	beq.n	8010884 <uxr_read_framed_msg+0x510>
 80107a2:	f081 0120 	eor.w	r1, r1, #32
 80107a6:	e6a3      	b.n	80104f0 <uxr_read_framed_msg+0x17c>
 80107a8:	f103 0c01 	add.w	ip, r3, #1
 80107ac:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80107b0:	fba5 0202 	umull	r0, r2, r5, r2
 80107b4:	0892      	lsrs	r2, r2, #2
 80107b6:	202a      	movs	r0, #42	@ 0x2a
 80107b8:	fb00 c212 	mls	r2, r0, r2, ip
 80107bc:	fa5f fc82 	uxtb.w	ip, r2
 80107c0:	4561      	cmp	r1, ip
 80107c2:	f43f af58 	beq.w	8010676 <uxr_read_framed_msg+0x302>
 80107c6:	4422      	add	r2, r4
 80107c8:	3302      	adds	r3, #2
 80107ca:	7891      	ldrb	r1, [r2, #2]
 80107cc:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80107d0:	085a      	lsrs	r2, r3, #1
 80107d2:	fba5 c202 	umull	ip, r2, r5, r2
 80107d6:	0892      	lsrs	r2, r2, #2
 80107d8:	fb00 3312 	mls	r3, r0, r2, r3
 80107dc:	297e      	cmp	r1, #126	@ 0x7e
 80107de:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 80107e2:	f43f af48 	beq.w	8010676 <uxr_read_framed_msg+0x302>
 80107e6:	f081 0120 	eor.w	r1, r1, #32
 80107ea:	f884 102e 	strb.w	r1, [r4, #46]	@ 0x2e
 80107ee:	e6e8      	b.n	80105c2 <uxr_read_framed_msg+0x24e>
 80107f0:	1c58      	adds	r0, r3, #1
 80107f2:	0842      	lsrs	r2, r0, #1
 80107f4:	fba5 c202 	umull	ip, r2, r5, r2
 80107f8:	0892      	lsrs	r2, r2, #2
 80107fa:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 80107fe:	fb0c 0212 	mls	r2, ip, r2, r0
 8010802:	b2d0      	uxtb	r0, r2
 8010804:	4281      	cmp	r1, r0
 8010806:	f43f af32 	beq.w	801066e <uxr_read_framed_msg+0x2fa>
 801080a:	4422      	add	r2, r4
 801080c:	3302      	adds	r3, #2
 801080e:	7890      	ldrb	r0, [r2, #2]
 8010810:	085a      	lsrs	r2, r3, #1
 8010812:	fba5 1202 	umull	r1, r2, r5, r2
 8010816:	0892      	lsrs	r2, r2, #2
 8010818:	fb0c 3312 	mls	r3, ip, r2, r3
 801081c:	287e      	cmp	r0, #126	@ 0x7e
 801081e:	f884 302d 	strb.w	r3, [r4, #45]	@ 0x2d
 8010822:	d01f      	beq.n	8010864 <uxr_read_framed_msg+0x4f0>
 8010824:	f080 0020 	eor.w	r0, r0, #32
 8010828:	e68b      	b.n	8010542 <uxr_read_framed_msg+0x1ce>
 801082a:	1c51      	adds	r1, r2, #1
 801082c:	084b      	lsrs	r3, r1, #1
 801082e:	fba5 c303 	umull	ip, r3, r5, r3
 8010832:	089b      	lsrs	r3, r3, #2
 8010834:	f04f 0c2a 	mov.w	ip, #42	@ 0x2a
 8010838:	fb0c 1313 	mls	r3, ip, r3, r1
 801083c:	b2d9      	uxtb	r1, r3
 801083e:	4288      	cmp	r0, r1
 8010840:	f43f af3d 	beq.w	80106be <uxr_read_framed_msg+0x34a>
 8010844:	3202      	adds	r2, #2
 8010846:	4423      	add	r3, r4
 8010848:	0850      	lsrs	r0, r2, #1
 801084a:	789b      	ldrb	r3, [r3, #2]
 801084c:	fba5 1000 	umull	r1, r0, r5, r0
 8010850:	0880      	lsrs	r0, r0, #2
 8010852:	fb0c 2210 	mls	r2, ip, r0, r2
 8010856:	2b7e      	cmp	r3, #126	@ 0x7e
 8010858:	f884 202d 	strb.w	r2, [r4, #45]	@ 0x2d
 801085c:	d016      	beq.n	801088c <uxr_read_framed_msg+0x518>
 801085e:	f083 0120 	eor.w	r1, r3, #32
 8010862:	e68b      	b.n	801057c <uxr_read_framed_msg+0x208>
 8010864:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010866:	9300      	str	r3, [sp, #0]
 8010868:	2302      	movs	r3, #2
 801086a:	9301      	str	r3, [sp, #4]
 801086c:	464a      	mov	r2, r9
 801086e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010870:	4641      	mov	r1, r8
 8010872:	4620      	mov	r0, r4
 8010874:	f7ff fcfc 	bl	8010270 <uxr_framing_read_transport>
 8010878:	2800      	cmp	r0, #0
 801087a:	f47f aef6 	bne.w	801066a <uxr_read_framed_msg+0x2f6>
 801087e:	2301      	movs	r3, #1
 8010880:	7023      	strb	r3, [r4, #0]
 8010882:	e588      	b.n	8010396 <uxr_read_framed_msg+0x22>
 8010884:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010886:	9300      	str	r3, [sp, #0]
 8010888:	2301      	movs	r3, #1
 801088a:	e7ee      	b.n	801086a <uxr_read_framed_msg+0x4f6>
 801088c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801088e:	9300      	str	r3, [sp, #0]
 8010890:	2303      	movs	r3, #3
 8010892:	e7ea      	b.n	801086a <uxr_read_framed_msg+0x4f6>
 8010894:	ee17 8a90 	vmov	r8, s15
 8010898:	e6ae      	b.n	80105f8 <uxr_read_framed_msg+0x284>
 801089a:	bf00      	nop

0801089c <uxr_stream_id>:
 801089c:	2901      	cmp	r1, #1
 801089e:	b082      	sub	sp, #8
 80108a0:	d01d      	beq.n	80108de <uxr_stream_id+0x42>
 80108a2:	2902      	cmp	r1, #2
 80108a4:	f04f 0c00 	mov.w	ip, #0
 80108a8:	d01e      	beq.n	80108e8 <uxr_stream_id+0x4c>
 80108aa:	2300      	movs	r3, #0
 80108ac:	f36c 0307 	bfi	r3, ip, #0, #8
 80108b0:	f360 230f 	bfi	r3, r0, #8, #8
 80108b4:	f361 4317 	bfi	r3, r1, #16, #8
 80108b8:	f362 631f 	bfi	r3, r2, #24, #8
 80108bc:	b2da      	uxtb	r2, r3
 80108be:	2000      	movs	r0, #0
 80108c0:	f362 0007 	bfi	r0, r2, #0, #8
 80108c4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80108c8:	f362 200f 	bfi	r0, r2, #8, #8
 80108cc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 80108d0:	f362 4017 	bfi	r0, r2, #16, #8
 80108d4:	0e1b      	lsrs	r3, r3, #24
 80108d6:	f363 601f 	bfi	r0, r3, #24, #8
 80108da:	b002      	add	sp, #8
 80108dc:	4770      	bx	lr
 80108de:	f100 0c01 	add.w	ip, r0, #1
 80108e2:	fa5f fc8c 	uxtb.w	ip, ip
 80108e6:	e7e0      	b.n	80108aa <uxr_stream_id+0xe>
 80108e8:	f080 0c80 	eor.w	ip, r0, #128	@ 0x80
 80108ec:	e7dd      	b.n	80108aa <uxr_stream_id+0xe>
 80108ee:	bf00      	nop

080108f0 <uxr_stream_id_from_raw>:
 80108f0:	b082      	sub	sp, #8
 80108f2:	b130      	cbz	r0, 8010902 <uxr_stream_id_from_raw+0x12>
 80108f4:	0603      	lsls	r3, r0, #24
 80108f6:	d420      	bmi.n	801093a <uxr_stream_id_from_raw+0x4a>
 80108f8:	1e42      	subs	r2, r0, #1
 80108fa:	b2d2      	uxtb	r2, r2
 80108fc:	f04f 0c01 	mov.w	ip, #1
 8010900:	e001      	b.n	8010906 <uxr_stream_id_from_raw+0x16>
 8010902:	4684      	mov	ip, r0
 8010904:	4602      	mov	r2, r0
 8010906:	2300      	movs	r3, #0
 8010908:	f360 0307 	bfi	r3, r0, #0, #8
 801090c:	f362 230f 	bfi	r3, r2, #8, #8
 8010910:	f36c 4317 	bfi	r3, ip, #16, #8
 8010914:	f361 631f 	bfi	r3, r1, #24, #8
 8010918:	b2da      	uxtb	r2, r3
 801091a:	2000      	movs	r0, #0
 801091c:	f362 0007 	bfi	r0, r2, #0, #8
 8010920:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8010924:	f362 200f 	bfi	r0, r2, #8, #8
 8010928:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801092c:	f362 4017 	bfi	r0, r2, #16, #8
 8010930:	0e1b      	lsrs	r3, r3, #24
 8010932:	f363 601f 	bfi	r0, r3, #24, #8
 8010936:	b002      	add	sp, #8
 8010938:	4770      	bx	lr
 801093a:	f080 0280 	eor.w	r2, r0, #128	@ 0x80
 801093e:	f04f 0c02 	mov.w	ip, #2
 8010942:	e7e0      	b.n	8010906 <uxr_stream_id_from_raw+0x16>

08010944 <uxr_init_stream_storage>:
 8010944:	2300      	movs	r3, #0
 8010946:	7403      	strb	r3, [r0, #16]
 8010948:	f880 3040 	strb.w	r3, [r0, #64]	@ 0x40
 801094c:	f880 3044 	strb.w	r3, [r0, #68]	@ 0x44
 8010950:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
 8010954:	4770      	bx	lr
 8010956:	bf00      	nop

08010958 <uxr_reset_stream_storage>:
 8010958:	b570      	push	{r4, r5, r6, lr}
 801095a:	7c03      	ldrb	r3, [r0, #16]
 801095c:	4604      	mov	r4, r0
 801095e:	b153      	cbz	r3, 8010976 <uxr_reset_stream_storage+0x1e>
 8010960:	4606      	mov	r6, r0
 8010962:	2500      	movs	r5, #0
 8010964:	4630      	mov	r0, r6
 8010966:	f005 fe07 	bl	8016578 <uxr_reset_output_best_effort_stream>
 801096a:	7c23      	ldrb	r3, [r4, #16]
 801096c:	3501      	adds	r5, #1
 801096e:	42ab      	cmp	r3, r5
 8010970:	f106 0610 	add.w	r6, r6, #16
 8010974:	d8f6      	bhi.n	8010964 <uxr_reset_stream_storage+0xc>
 8010976:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801097a:	b163      	cbz	r3, 8010996 <uxr_reset_stream_storage+0x3e>
 801097c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010980:	2500      	movs	r5, #0
 8010982:	4630      	mov	r0, r6
 8010984:	f005 fbfa 	bl	801617c <uxr_reset_input_best_effort_stream>
 8010988:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 801098c:	3501      	adds	r5, #1
 801098e:	42ab      	cmp	r3, r5
 8010990:	f106 0602 	add.w	r6, r6, #2
 8010994:	d8f5      	bhi.n	8010982 <uxr_reset_stream_storage+0x2a>
 8010996:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 801099a:	b163      	cbz	r3, 80109b6 <uxr_reset_stream_storage+0x5e>
 801099c:	f104 0618 	add.w	r6, r4, #24
 80109a0:	2500      	movs	r5, #0
 80109a2:	4630      	mov	r0, r6
 80109a4:	f005 fe94 	bl	80166d0 <uxr_reset_output_reliable_stream>
 80109a8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80109ac:	3501      	adds	r5, #1
 80109ae:	42ab      	cmp	r3, r5
 80109b0:	f106 0628 	add.w	r6, r6, #40	@ 0x28
 80109b4:	d8f5      	bhi.n	80109a2 <uxr_reset_stream_storage+0x4a>
 80109b6:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80109ba:	b163      	cbz	r3, 80109d6 <uxr_reset_stream_storage+0x7e>
 80109bc:	f104 0648 	add.w	r6, r4, #72	@ 0x48
 80109c0:	2500      	movs	r5, #0
 80109c2:	4630      	mov	r0, r6
 80109c4:	f005 fc4e 	bl	8016264 <uxr_reset_input_reliable_stream>
 80109c8:	f894 3060 	ldrb.w	r3, [r4, #96]	@ 0x60
 80109cc:	3501      	adds	r5, #1
 80109ce:	42ab      	cmp	r3, r5
 80109d0:	f106 0618 	add.w	r6, r6, #24
 80109d4:	d8f5      	bhi.n	80109c2 <uxr_reset_stream_storage+0x6a>
 80109d6:	bd70      	pop	{r4, r5, r6, pc}

080109d8 <uxr_add_output_best_effort_buffer>:
 80109d8:	b510      	push	{r4, lr}
 80109da:	7c04      	ldrb	r4, [r0, #16]
 80109dc:	f104 0c01 	add.w	ip, r4, #1
 80109e0:	b082      	sub	sp, #8
 80109e2:	f880 c010 	strb.w	ip, [r0, #16]
 80109e6:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 80109ea:	f005 fdbb 	bl	8016564 <uxr_init_output_best_effort_stream>
 80109ee:	2201      	movs	r2, #1
 80109f0:	4611      	mov	r1, r2
 80109f2:	4620      	mov	r0, r4
 80109f4:	b002      	add	sp, #8
 80109f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80109fa:	f7ff bf4f 	b.w	801089c <uxr_stream_id>
 80109fe:	bf00      	nop

08010a00 <uxr_add_output_reliable_buffer>:
 8010a00:	b510      	push	{r4, lr}
 8010a02:	b084      	sub	sp, #16
 8010a04:	4684      	mov	ip, r0
 8010a06:	f89d 0018 	ldrb.w	r0, [sp, #24]
 8010a0a:	9000      	str	r0, [sp, #0]
 8010a0c:	f89c 4040 	ldrb.w	r4, [ip, #64]	@ 0x40
 8010a10:	2028      	movs	r0, #40	@ 0x28
 8010a12:	fb00 c004 	mla	r0, r0, r4, ip
 8010a16:	f104 0e01 	add.w	lr, r4, #1
 8010a1a:	3018      	adds	r0, #24
 8010a1c:	f88c e040 	strb.w	lr, [ip, #64]	@ 0x40
 8010a20:	f005 fe1e 	bl	8016660 <uxr_init_output_reliable_stream>
 8010a24:	2201      	movs	r2, #1
 8010a26:	2102      	movs	r1, #2
 8010a28:	4620      	mov	r0, r4
 8010a2a:	b004      	add	sp, #16
 8010a2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a30:	f7ff bf34 	b.w	801089c <uxr_stream_id>

08010a34 <uxr_add_input_best_effort_buffer>:
 8010a34:	b510      	push	{r4, lr}
 8010a36:	f890 4044 	ldrb.w	r4, [r0, #68]	@ 0x44
 8010a3a:	4603      	mov	r3, r0
 8010a3c:	1c62      	adds	r2, r4, #1
 8010a3e:	f104 0021 	add.w	r0, r4, #33	@ 0x21
 8010a42:	b082      	sub	sp, #8
 8010a44:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8010a48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8010a4c:	f005 fb92 	bl	8016174 <uxr_init_input_best_effort_stream>
 8010a50:	2200      	movs	r2, #0
 8010a52:	2101      	movs	r1, #1
 8010a54:	4620      	mov	r0, r4
 8010a56:	b002      	add	sp, #8
 8010a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a5c:	f7ff bf1e 	b.w	801089c <uxr_stream_id>

08010a60 <uxr_add_input_reliable_buffer>:
 8010a60:	b510      	push	{r4, lr}
 8010a62:	b084      	sub	sp, #16
 8010a64:	4684      	mov	ip, r0
 8010a66:	9806      	ldr	r0, [sp, #24]
 8010a68:	9000      	str	r0, [sp, #0]
 8010a6a:	f89c 4060 	ldrb.w	r4, [ip, #96]	@ 0x60
 8010a6e:	2018      	movs	r0, #24
 8010a70:	fb00 c004 	mla	r0, r0, r4, ip
 8010a74:	f104 0e01 	add.w	lr, r4, #1
 8010a78:	3048      	adds	r0, #72	@ 0x48
 8010a7a:	f88c e060 	strb.w	lr, [ip, #96]	@ 0x60
 8010a7e:	f005 fbc5 	bl	801620c <uxr_init_input_reliable_stream>
 8010a82:	2200      	movs	r2, #0
 8010a84:	2102      	movs	r1, #2
 8010a86:	4620      	mov	r0, r4
 8010a88:	b004      	add	sp, #16
 8010a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010a8e:	f7ff bf05 	b.w	801089c <uxr_stream_id>
 8010a92:	bf00      	nop

08010a94 <uxr_get_output_best_effort_stream>:
 8010a94:	7c03      	ldrb	r3, [r0, #16]
 8010a96:	428b      	cmp	r3, r1
 8010a98:	bf8c      	ite	hi
 8010a9a:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 8010a9e:	2000      	movls	r0, #0
 8010aa0:	4770      	bx	lr
 8010aa2:	bf00      	nop

08010aa4 <uxr_get_output_reliable_stream>:
 8010aa4:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010aa8:	428b      	cmp	r3, r1
 8010aaa:	bf83      	ittte	hi
 8010aac:	2328      	movhi	r3, #40	@ 0x28
 8010aae:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010ab2:	3018      	addhi	r0, #24
 8010ab4:	2000      	movls	r0, #0
 8010ab6:	4770      	bx	lr

08010ab8 <uxr_get_input_best_effort_stream>:
 8010ab8:	f890 3044 	ldrb.w	r3, [r0, #68]	@ 0x44
 8010abc:	428b      	cmp	r3, r1
 8010abe:	bf86      	itte	hi
 8010ac0:	3121      	addhi	r1, #33	@ 0x21
 8010ac2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 8010ac6:	2000      	movls	r0, #0
 8010ac8:	4770      	bx	lr
 8010aca:	bf00      	nop

08010acc <uxr_get_input_reliable_stream>:
 8010acc:	f890 3060 	ldrb.w	r3, [r0, #96]	@ 0x60
 8010ad0:	428b      	cmp	r3, r1
 8010ad2:	bf83      	ittte	hi
 8010ad4:	2318      	movhi	r3, #24
 8010ad6:	fb03 0001 	mlahi	r0, r3, r1, r0
 8010ada:	3048      	addhi	r0, #72	@ 0x48
 8010adc:	2000      	movls	r0, #0
 8010ade:	4770      	bx	lr

08010ae0 <uxr_output_streams_confirmed>:
 8010ae0:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8010ae4:	b183      	cbz	r3, 8010b08 <uxr_output_streams_confirmed+0x28>
 8010ae6:	b570      	push	{r4, r5, r6, lr}
 8010ae8:	4606      	mov	r6, r0
 8010aea:	f100 0518 	add.w	r5, r0, #24
 8010aee:	2400      	movs	r4, #0
 8010af0:	e001      	b.n	8010af6 <uxr_output_streams_confirmed+0x16>
 8010af2:	3528      	adds	r5, #40	@ 0x28
 8010af4:	b138      	cbz	r0, 8010b06 <uxr_output_streams_confirmed+0x26>
 8010af6:	4628      	mov	r0, r5
 8010af8:	f006 f85a 	bl	8016bb0 <uxr_is_output_up_to_date>
 8010afc:	f896 3040 	ldrb.w	r3, [r6, #64]	@ 0x40
 8010b00:	3401      	adds	r4, #1
 8010b02:	42a3      	cmp	r3, r4
 8010b04:	d8f5      	bhi.n	8010af2 <uxr_output_streams_confirmed+0x12>
 8010b06:	bd70      	pop	{r4, r5, r6, pc}
 8010b08:	2001      	movs	r0, #1
 8010b0a:	4770      	bx	lr

08010b0c <uxr_buffer_submessage_header>:
 8010b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0e:	4604      	mov	r4, r0
 8010b10:	460e      	mov	r6, r1
 8010b12:	2104      	movs	r1, #4
 8010b14:	4615      	mov	r5, r2
 8010b16:	461f      	mov	r7, r3
 8010b18:	f7fb fa5c 	bl	800bfd4 <ucdr_align_to>
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	ea47 0203 	orr.w	r2, r7, r3
 8010b22:	4631      	mov	r1, r6
 8010b24:	7523      	strb	r3, [r4, #20]
 8010b26:	4620      	mov	r0, r4
 8010b28:	462b      	mov	r3, r5
 8010b2a:	f000 fa27 	bl	8010f7c <uxr_serialize_submessage_header>
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7fb fa66 	bl	800c000 <ucdr_buffer_remaining>
 8010b34:	42a8      	cmp	r0, r5
 8010b36:	bf34      	ite	cc
 8010b38:	2000      	movcc	r0, #0
 8010b3a:	2001      	movcs	r0, #1
 8010b3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b3e:	bf00      	nop

08010b40 <uxr_read_submessage_header>:
 8010b40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b44:	4604      	mov	r4, r0
 8010b46:	460d      	mov	r5, r1
 8010b48:	2104      	movs	r1, #4
 8010b4a:	4616      	mov	r6, r2
 8010b4c:	4698      	mov	r8, r3
 8010b4e:	f7fb fa41 	bl	800bfd4 <ucdr_align_to>
 8010b52:	4620      	mov	r0, r4
 8010b54:	f7fb fa54 	bl	800c000 <ucdr_buffer_remaining>
 8010b58:	2803      	cmp	r0, #3
 8010b5a:	bf8c      	ite	hi
 8010b5c:	2701      	movhi	r7, #1
 8010b5e:	2700      	movls	r7, #0
 8010b60:	d802      	bhi.n	8010b68 <uxr_read_submessage_header+0x28>
 8010b62:	4638      	mov	r0, r7
 8010b64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b68:	4633      	mov	r3, r6
 8010b6a:	4642      	mov	r2, r8
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	4629      	mov	r1, r5
 8010b70:	f000 fa18 	bl	8010fa4 <uxr_deserialize_submessage_header>
 8010b74:	f898 3000 	ldrb.w	r3, [r8]
 8010b78:	f003 0201 	and.w	r2, r3, #1
 8010b7c:	f003 03fe 	and.w	r3, r3, #254	@ 0xfe
 8010b80:	f888 3000 	strb.w	r3, [r8]
 8010b84:	7522      	strb	r2, [r4, #20]
 8010b86:	4638      	mov	r0, r7
 8010b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010b8c <uxr_submessage_padding>:
 8010b8c:	f010 0003 	ands.w	r0, r0, #3
 8010b90:	bf18      	it	ne
 8010b92:	f1c0 0004 	rsbne	r0, r0, #4
 8010b96:	4770      	bx	lr

08010b98 <uxr_millis>:
 8010b98:	b510      	push	{r4, lr}
 8010b9a:	b084      	sub	sp, #16
 8010b9c:	4669      	mov	r1, sp
 8010b9e:	2001      	movs	r0, #1
 8010ba0:	f7f1 fa2e 	bl	8002000 <clock_gettime>
 8010ba4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 8010ba8:	4906      	ldr	r1, [pc, #24]	@ (8010bc4 <uxr_millis+0x2c>)
 8010baa:	fba0 0301 	umull	r0, r3, r0, r1
 8010bae:	1900      	adds	r0, r0, r4
 8010bb0:	fb01 3102 	mla	r1, r1, r2, r3
 8010bb4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 8010bb8:	4a03      	ldr	r2, [pc, #12]	@ (8010bc8 <uxr_millis+0x30>)
 8010bba:	2300      	movs	r3, #0
 8010bbc:	f7ef ff66 	bl	8000a8c <__aeabi_ldivmod>
 8010bc0:	b004      	add	sp, #16
 8010bc2:	bd10      	pop	{r4, pc}
 8010bc4:	3b9aca00 	.word	0x3b9aca00
 8010bc8:	000f4240 	.word	0x000f4240

08010bcc <uxr_nanos>:
 8010bcc:	b510      	push	{r4, lr}
 8010bce:	b084      	sub	sp, #16
 8010bd0:	4669      	mov	r1, sp
 8010bd2:	2001      	movs	r0, #1
 8010bd4:	f7f1 fa14 	bl	8002000 <clock_gettime>
 8010bd8:	4a06      	ldr	r2, [pc, #24]	@ (8010bf4 <uxr_nanos+0x28>)
 8010bda:	9800      	ldr	r0, [sp, #0]
 8010bdc:	9902      	ldr	r1, [sp, #8]
 8010bde:	9c01      	ldr	r4, [sp, #4]
 8010be0:	fba0 0302 	umull	r0, r3, r0, r2
 8010be4:	1840      	adds	r0, r0, r1
 8010be6:	fb02 3304 	mla	r3, r2, r4, r3
 8010bea:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 8010bee:	b004      	add	sp, #16
 8010bf0:	bd10      	pop	{r4, pc}
 8010bf2:	bf00      	nop
 8010bf4:	3b9aca00 	.word	0x3b9aca00

08010bf8 <on_full_output_buffer_fragmented>:
 8010bf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bfc:	460c      	mov	r4, r1
 8010bfe:	b08a      	sub	sp, #40	@ 0x28
 8010c00:	f891 10c1 	ldrb.w	r1, [r1, #193]	@ 0xc1
 8010c04:	4606      	mov	r6, r0
 8010c06:	f104 0008 	add.w	r0, r4, #8
 8010c0a:	f7ff ff4b 	bl	8010aa4 <uxr_get_output_reliable_stream>
 8010c0e:	4605      	mov	r5, r0
 8010c10:	f005 ffd8 	bl	8016bc4 <get_available_free_slots>
 8010c14:	b968      	cbnz	r0, 8010c32 <on_full_output_buffer_fragmented+0x3a>
 8010c16:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	@ 0xb8
 8010c1a:	4620      	mov	r0, r4
 8010c1c:	4798      	blx	r3
 8010c1e:	b918      	cbnz	r0, 8010c28 <on_full_output_buffer_fragmented+0x30>
 8010c20:	2001      	movs	r0, #1
 8010c22:	b00a      	add	sp, #40	@ 0x28
 8010c24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c28:	4628      	mov	r0, r5
 8010c2a:	f005 ffcb 	bl	8016bc4 <get_available_free_slots>
 8010c2e:	2800      	cmp	r0, #0
 8010c30:	d0f6      	beq.n	8010c20 <on_full_output_buffer_fragmented+0x28>
 8010c32:	8929      	ldrh	r1, [r5, #8]
 8010c34:	89eb      	ldrh	r3, [r5, #14]
 8010c36:	7b28      	ldrb	r0, [r5, #12]
 8010c38:	686a      	ldr	r2, [r5, #4]
 8010c3a:	fbb2 f8f1 	udiv	r8, r2, r1
 8010c3e:	fbb3 f2f1 	udiv	r2, r3, r1
 8010c42:	fb01 3112 	mls	r1, r1, r2, r3
 8010c46:	f5c0 407f 	rsb	r0, r0, #65280	@ 0xff00
 8010c4a:	b289      	uxth	r1, r1
 8010c4c:	fb08 f101 	mul.w	r1, r8, r1
 8010c50:	30fc      	adds	r0, #252	@ 0xfc
 8010c52:	f1a8 0804 	sub.w	r8, r8, #4
 8010c56:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
 8010c5a:	4440      	add	r0, r8
 8010c5c:	b287      	uxth	r7, r0
 8010c5e:	1bdb      	subs	r3, r3, r7
 8010c60:	f8c4 30c4 	str.w	r3, [r4, #196]	@ 0xc4
 8010c64:	682b      	ldr	r3, [r5, #0]
 8010c66:	3104      	adds	r1, #4
 8010c68:	4419      	add	r1, r3
 8010c6a:	4642      	mov	r2, r8
 8010c6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	a802      	add	r0, sp, #8
 8010c74:	2300      	movs	r3, #0
 8010c76:	f7fb f981 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 8010c7a:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010c7e:	f102 0308 	add.w	r3, r2, #8
 8010c82:	4543      	cmp	r3, r8
 8010c84:	d928      	bls.n	8010cd8 <on_full_output_buffer_fragmented+0xe0>
 8010c86:	463a      	mov	r2, r7
 8010c88:	2300      	movs	r3, #0
 8010c8a:	210d      	movs	r1, #13
 8010c8c:	a802      	add	r0, sp, #8
 8010c8e:	f7ff ff3d 	bl	8010b0c <uxr_buffer_submessage_header>
 8010c92:	8929      	ldrh	r1, [r5, #8]
 8010c94:	89eb      	ldrh	r3, [r5, #14]
 8010c96:	fbb3 f2f1 	udiv	r2, r3, r1
 8010c9a:	fb01 3312 	mls	r3, r1, r2, r3
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	686a      	ldr	r2, [r5, #4]
 8010ca2:	fbb2 f2f1 	udiv	r2, r2, r1
 8010ca6:	fb02 f303 	mul.w	r3, r2, r3
 8010caa:	682a      	ldr	r2, [r5, #0]
 8010cac:	f842 8003 	str.w	r8, [r2, r3]
 8010cb0:	89e8      	ldrh	r0, [r5, #14]
 8010cb2:	2101      	movs	r1, #1
 8010cb4:	f005 ffa6 	bl	8016c04 <uxr_seq_num_add>
 8010cb8:	9904      	ldr	r1, [sp, #16]
 8010cba:	9a03      	ldr	r2, [sp, #12]
 8010cbc:	81e8      	strh	r0, [r5, #14]
 8010cbe:	1a52      	subs	r2, r2, r1
 8010cc0:	4630      	mov	r0, r6
 8010cc2:	f7fb f96d 	bl	800bfa0 <ucdr_init_buffer>
 8010cc6:	4630      	mov	r0, r6
 8010cc8:	490f      	ldr	r1, [pc, #60]	@ (8010d08 <on_full_output_buffer_fragmented+0x110>)
 8010cca:	4622      	mov	r2, r4
 8010ccc:	f7fb f93c 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8010cd0:	2000      	movs	r0, #0
 8010cd2:	b00a      	add	sp, #40	@ 0x28
 8010cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010cd8:	b292      	uxth	r2, r2
 8010cda:	2302      	movs	r3, #2
 8010cdc:	210d      	movs	r1, #13
 8010cde:	a802      	add	r0, sp, #8
 8010ce0:	f7ff ff14 	bl	8010b0c <uxr_buffer_submessage_header>
 8010ce4:	8928      	ldrh	r0, [r5, #8]
 8010ce6:	89eb      	ldrh	r3, [r5, #14]
 8010ce8:	fbb3 f1f0 	udiv	r1, r3, r0
 8010cec:	fb00 3311 	mls	r3, r0, r1, r3
 8010cf0:	f8d4 20c4 	ldr.w	r2, [r4, #196]	@ 0xc4
 8010cf4:	6869      	ldr	r1, [r5, #4]
 8010cf6:	fbb1 f1f0 	udiv	r1, r1, r0
 8010cfa:	b29b      	uxth	r3, r3
 8010cfc:	fb01 f303 	mul.w	r3, r1, r3
 8010d00:	6829      	ldr	r1, [r5, #0]
 8010d02:	3208      	adds	r2, #8
 8010d04:	50ca      	str	r2, [r1, r3]
 8010d06:	e7d3      	b.n	8010cb0 <on_full_output_buffer_fragmented+0xb8>
 8010d08:	08010bf9 	.word	0x08010bf9

08010d0c <uxr_prepare_output_stream>:
 8010d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010d0e:	b087      	sub	sp, #28
 8010d10:	2707      	movs	r7, #7
 8010d12:	9202      	str	r2, [sp, #8]
 8010d14:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8010d16:	9103      	str	r1, [sp, #12]
 8010d18:	2500      	movs	r5, #0
 8010d1a:	3204      	adds	r2, #4
 8010d1c:	e9cd 7500 	strd	r7, r5, [sp]
 8010d20:	461c      	mov	r4, r3
 8010d22:	4606      	mov	r6, r0
 8010d24:	f7fe ffc2 	bl	800fcac <uxr_prepare_stream_to_write_submessage>
 8010d28:	f080 0201 	eor.w	r2, r0, #1
 8010d2c:	b2d2      	uxtb	r2, r2
 8010d2e:	75a2      	strb	r2, [r4, #22]
 8010d30:	b112      	cbz	r2, 8010d38 <uxr_prepare_output_stream+0x2c>
 8010d32:	4628      	mov	r0, r5
 8010d34:	b007      	add	sp, #28
 8010d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010d38:	aa05      	add	r2, sp, #20
 8010d3a:	9902      	ldr	r1, [sp, #8]
 8010d3c:	4630      	mov	r0, r6
 8010d3e:	f7ff f8eb 	bl	800ff18 <uxr_init_base_object_request>
 8010d42:	a905      	add	r1, sp, #20
 8010d44:	4605      	mov	r5, r0
 8010d46:	4620      	mov	r0, r4
 8010d48:	f000 ffa0 	bl	8011c8c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010d4c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 8010d50:	69a6      	ldr	r6, [r4, #24]
 8010d52:	69e7      	ldr	r7, [r4, #28]
 8010d54:	1a52      	subs	r2, r2, r1
 8010d56:	4620      	mov	r0, r4
 8010d58:	f7fb f922 	bl	800bfa0 <ucdr_init_buffer>
 8010d5c:	4620      	mov	r0, r4
 8010d5e:	463a      	mov	r2, r7
 8010d60:	4631      	mov	r1, r6
 8010d62:	f7fb f8f1 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8010d66:	4628      	mov	r0, r5
 8010d68:	b007      	add	sp, #28
 8010d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08010d6c <uxr_prepare_output_stream_fragmented>:
 8010d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d70:	b091      	sub	sp, #68	@ 0x44
 8010d72:	4605      	mov	r5, r0
 8010d74:	9105      	str	r1, [sp, #20]
 8010d76:	3008      	adds	r0, #8
 8010d78:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010d7c:	461e      	mov	r6, r3
 8010d7e:	9204      	str	r2, [sp, #16]
 8010d80:	f7ff fe90 	bl	8010aa4 <uxr_get_output_reliable_stream>
 8010d84:	f89d 3016 	ldrb.w	r3, [sp, #22]
 8010d88:	2b01      	cmp	r3, #1
 8010d8a:	f000 8091 	beq.w	8010eb0 <uxr_prepare_output_stream_fragmented+0x144>
 8010d8e:	4604      	mov	r4, r0
 8010d90:	2800      	cmp	r0, #0
 8010d92:	f000 808d 	beq.w	8010eb0 <uxr_prepare_output_stream_fragmented+0x144>
 8010d96:	f005 ff15 	bl	8016bc4 <get_available_free_slots>
 8010d9a:	2800      	cmp	r0, #0
 8010d9c:	f000 8083 	beq.w	8010ea6 <uxr_prepare_output_stream_fragmented+0x13a>
 8010da0:	8922      	ldrh	r2, [r4, #8]
 8010da2:	89e7      	ldrh	r7, [r4, #14]
 8010da4:	fbb7 f9f2 	udiv	r9, r7, r2
 8010da8:	fb02 7919 	mls	r9, r2, r9, r7
 8010dac:	fa1f f989 	uxth.w	r9, r9
 8010db0:	6863      	ldr	r3, [r4, #4]
 8010db2:	fbb3 f2f2 	udiv	r2, r3, r2
 8010db6:	6823      	ldr	r3, [r4, #0]
 8010db8:	9203      	str	r2, [sp, #12]
 8010dba:	fb02 f909 	mul.w	r9, r2, r9
 8010dbe:	f109 0904 	add.w	r9, r9, #4
 8010dc2:	4499      	add	r9, r3
 8010dc4:	7b23      	ldrb	r3, [r4, #12]
 8010dc6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010dca:	4543      	cmp	r3, r8
 8010dcc:	f1a2 0b04 	sub.w	fp, r2, #4
 8010dd0:	d37a      	bcc.n	8010ec8 <uxr_prepare_output_stream_fragmented+0x15c>
 8010dd2:	f1ab 0a04 	sub.w	sl, fp, #4
 8010dd6:	ebaa 0a03 	sub.w	sl, sl, r3
 8010dda:	465a      	mov	r2, fp
 8010ddc:	2300      	movs	r3, #0
 8010dde:	4649      	mov	r1, r9
 8010de0:	a808      	add	r0, sp, #32
 8010de2:	f8cd 8000 	str.w	r8, [sp]
 8010de6:	f7fb f8c9 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 8010dea:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010dec:	fa1f fa8a 	uxth.w	sl, sl
 8010df0:	4652      	mov	r2, sl
 8010df2:	f103 0a08 	add.w	sl, r3, #8
 8010df6:	45da      	cmp	sl, fp
 8010df8:	bf34      	ite	cc
 8010dfa:	2302      	movcc	r3, #2
 8010dfc:	2300      	movcs	r3, #0
 8010dfe:	210d      	movs	r1, #13
 8010e00:	a808      	add	r0, sp, #32
 8010e02:	f7ff fe83 	bl	8010b0c <uxr_buffer_submessage_header>
 8010e06:	8921      	ldrh	r1, [r4, #8]
 8010e08:	fbb7 f2f1 	udiv	r2, r7, r1
 8010e0c:	fb01 7212 	mls	r2, r1, r2, r7
 8010e10:	b292      	uxth	r2, r2
 8010e12:	6863      	ldr	r3, [r4, #4]
 8010e14:	fbb3 f3f1 	udiv	r3, r3, r1
 8010e18:	fb02 f303 	mul.w	r3, r2, r3
 8010e1c:	6822      	ldr	r2, [r4, #0]
 8010e1e:	4638      	mov	r0, r7
 8010e20:	f842 b003 	str.w	fp, [r2, r3]
 8010e24:	2101      	movs	r1, #1
 8010e26:	f005 feed 	bl	8016c04 <uxr_seq_num_add>
 8010e2a:	9b03      	ldr	r3, [sp, #12]
 8010e2c:	f108 0104 	add.w	r1, r8, #4
 8010e30:	f1a3 0208 	sub.w	r2, r3, #8
 8010e34:	eba2 0208 	sub.w	r2, r2, r8
 8010e38:	4449      	add	r1, r9
 8010e3a:	4607      	mov	r7, r0
 8010e3c:	4630      	mov	r0, r6
 8010e3e:	f7fb f8af 	bl	800bfa0 <ucdr_init_buffer>
 8010e42:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8010e44:	81e7      	strh	r7, [r4, #14]
 8010e46:	1d1a      	adds	r2, r3, #4
 8010e48:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 8010e4c:	bf28      	it	cs
 8010e4e:	2200      	movcs	r2, #0
 8010e50:	2300      	movs	r3, #0
 8010e52:	b292      	uxth	r2, r2
 8010e54:	2107      	movs	r1, #7
 8010e56:	4630      	mov	r0, r6
 8010e58:	f7ff fe58 	bl	8010b0c <uxr_buffer_submessage_header>
 8010e5c:	9904      	ldr	r1, [sp, #16]
 8010e5e:	aa07      	add	r2, sp, #28
 8010e60:	4628      	mov	r0, r5
 8010e62:	f7ff f859 	bl	800ff18 <uxr_init_base_object_request>
 8010e66:	4604      	mov	r4, r0
 8010e68:	b318      	cbz	r0, 8010eb2 <uxr_prepare_output_stream_fragmented+0x146>
 8010e6a:	a907      	add	r1, sp, #28
 8010e6c:	4630      	mov	r0, r6
 8010e6e:	f000 ff0d 	bl	8011c8c <uxr_serialize_WRITE_DATA_Payload_Data>
 8010e72:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8010e76:	4630      	mov	r0, r6
 8010e78:	1a52      	subs	r2, r2, r1
 8010e7a:	f7fb f891 	bl	800bfa0 <ucdr_init_buffer>
 8010e7e:	9b05      	ldr	r3, [sp, #20]
 8010e80:	f8c5 30c0 	str.w	r3, [r5, #192]	@ 0xc0
 8010e84:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010e86:	f8c5 30b8 	str.w	r3, [r5, #184]	@ 0xb8
 8010e8a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8010e8c:	491b      	ldr	r1, [pc, #108]	@ (8010efc <uxr_prepare_output_stream_fragmented+0x190>)
 8010e8e:	f8c5 a0c4 	str.w	sl, [r5, #196]	@ 0xc4
 8010e92:	4630      	mov	r0, r6
 8010e94:	f8c5 30bc 	str.w	r3, [r5, #188]	@ 0xbc
 8010e98:	462a      	mov	r2, r5
 8010e9a:	f7fb f855 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8010e9e:	4620      	mov	r0, r4
 8010ea0:	b011      	add	sp, #68	@ 0x44
 8010ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ea6:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8010ea8:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010eaa:	4628      	mov	r0, r5
 8010eac:	4798      	blx	r3
 8010eae:	b920      	cbnz	r0, 8010eba <uxr_prepare_output_stream_fragmented+0x14e>
 8010eb0:	2400      	movs	r4, #0
 8010eb2:	4620      	mov	r0, r4
 8010eb4:	b011      	add	sp, #68	@ 0x44
 8010eb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010eba:	4620      	mov	r0, r4
 8010ebc:	f005 fe82 	bl	8016bc4 <get_available_free_slots>
 8010ec0:	2800      	cmp	r0, #0
 8010ec2:	f47f af6d 	bne.w	8010da0 <uxr_prepare_output_stream_fragmented+0x34>
 8010ec6:	e7f3      	b.n	8010eb0 <uxr_prepare_output_stream_fragmented+0x144>
 8010ec8:	4638      	mov	r0, r7
 8010eca:	2101      	movs	r1, #1
 8010ecc:	f005 fe9a 	bl	8016c04 <uxr_seq_num_add>
 8010ed0:	8921      	ldrh	r1, [r4, #8]
 8010ed2:	fbb0 f2f1 	udiv	r2, r0, r1
 8010ed6:	fb01 0912 	mls	r9, r1, r2, r0
 8010eda:	fa1f f289 	uxth.w	r2, r9
 8010ede:	6863      	ldr	r3, [r4, #4]
 8010ee0:	fbb3 f9f1 	udiv	r9, r3, r1
 8010ee4:	6823      	ldr	r3, [r4, #0]
 8010ee6:	fb02 f909 	mul.w	r9, r2, r9
 8010eea:	f109 0904 	add.w	r9, r9, #4
 8010eee:	4499      	add	r9, r3
 8010ef0:	4607      	mov	r7, r0
 8010ef2:	7b23      	ldrb	r3, [r4, #12]
 8010ef4:	f859 8c04 	ldr.w	r8, [r9, #-4]
 8010ef8:	e76b      	b.n	8010dd2 <uxr_prepare_output_stream_fragmented+0x66>
 8010efa:	bf00      	nop
 8010efc:	08010bf9 	.word	0x08010bf9

08010f00 <uxr_serialize_message_header>:
 8010f00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f02:	b083      	sub	sp, #12
 8010f04:	4616      	mov	r6, r2
 8010f06:	4604      	mov	r4, r0
 8010f08:	9301      	str	r3, [sp, #4]
 8010f0a:	460d      	mov	r5, r1
 8010f0c:	9f08      	ldr	r7, [sp, #32]
 8010f0e:	f7f9 ff05 	bl	800ad1c <ucdr_serialize_uint8_t>
 8010f12:	4631      	mov	r1, r6
 8010f14:	4620      	mov	r0, r4
 8010f16:	f7f9 ff01 	bl	800ad1c <ucdr_serialize_uint8_t>
 8010f1a:	9a01      	ldr	r2, [sp, #4]
 8010f1c:	2101      	movs	r1, #1
 8010f1e:	4620      	mov	r0, r4
 8010f20:	f7f9 ffa8 	bl	800ae74 <ucdr_serialize_endian_uint16_t>
 8010f24:	062b      	lsls	r3, r5, #24
 8010f26:	d501      	bpl.n	8010f2c <uxr_serialize_message_header+0x2c>
 8010f28:	b003      	add	sp, #12
 8010f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f2c:	2204      	movs	r2, #4
 8010f2e:	4639      	mov	r1, r7
 8010f30:	4620      	mov	r0, r4
 8010f32:	b003      	add	sp, #12
 8010f34:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f38:	f004 bfe4 	b.w	8015f04 <ucdr_serialize_array_uint8_t>

08010f3c <uxr_deserialize_message_header>:
 8010f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010f3e:	b083      	sub	sp, #12
 8010f40:	4616      	mov	r6, r2
 8010f42:	4604      	mov	r4, r0
 8010f44:	9301      	str	r3, [sp, #4]
 8010f46:	460d      	mov	r5, r1
 8010f48:	9f08      	ldr	r7, [sp, #32]
 8010f4a:	f7f9 fefd 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8010f4e:	4631      	mov	r1, r6
 8010f50:	4620      	mov	r0, r4
 8010f52:	f7f9 fef9 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8010f56:	9a01      	ldr	r2, [sp, #4]
 8010f58:	2101      	movs	r1, #1
 8010f5a:	4620      	mov	r0, r4
 8010f5c:	f7fa f87e 	bl	800b05c <ucdr_deserialize_endian_uint16_t>
 8010f60:	f995 3000 	ldrsb.w	r3, [r5]
 8010f64:	2b00      	cmp	r3, #0
 8010f66:	da01      	bge.n	8010f6c <uxr_deserialize_message_header+0x30>
 8010f68:	b003      	add	sp, #12
 8010f6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f6c:	2204      	movs	r2, #4
 8010f6e:	4639      	mov	r1, r7
 8010f70:	4620      	mov	r0, r4
 8010f72:	b003      	add	sp, #12
 8010f74:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8010f78:	f005 b828 	b.w	8015fcc <ucdr_deserialize_array_uint8_t>

08010f7c <uxr_serialize_submessage_header>:
 8010f7c:	b530      	push	{r4, r5, lr}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	4615      	mov	r5, r2
 8010f82:	4604      	mov	r4, r0
 8010f84:	9301      	str	r3, [sp, #4]
 8010f86:	f7f9 fec9 	bl	800ad1c <ucdr_serialize_uint8_t>
 8010f8a:	4629      	mov	r1, r5
 8010f8c:	4620      	mov	r0, r4
 8010f8e:	f7f9 fec5 	bl	800ad1c <ucdr_serialize_uint8_t>
 8010f92:	9a01      	ldr	r2, [sp, #4]
 8010f94:	2101      	movs	r1, #1
 8010f96:	4620      	mov	r0, r4
 8010f98:	b003      	add	sp, #12
 8010f9a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010f9e:	f7f9 bf69 	b.w	800ae74 <ucdr_serialize_endian_uint16_t>
 8010fa2:	bf00      	nop

08010fa4 <uxr_deserialize_submessage_header>:
 8010fa4:	b530      	push	{r4, r5, lr}
 8010fa6:	b083      	sub	sp, #12
 8010fa8:	4615      	mov	r5, r2
 8010faa:	4604      	mov	r4, r0
 8010fac:	9301      	str	r3, [sp, #4]
 8010fae:	f7f9 fecb 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8010fb2:	4629      	mov	r1, r5
 8010fb4:	4620      	mov	r0, r4
 8010fb6:	f7f9 fec7 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8010fba:	9a01      	ldr	r2, [sp, #4]
 8010fbc:	2101      	movs	r1, #1
 8010fbe:	4620      	mov	r0, r4
 8010fc0:	b003      	add	sp, #12
 8010fc2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010fc6:	f7fa b849 	b.w	800b05c <ucdr_deserialize_endian_uint16_t>
 8010fca:	bf00      	nop

08010fcc <uxr_serialize_CLIENT_Representation>:
 8010fcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010fd0:	2204      	movs	r2, #4
 8010fd2:	460e      	mov	r6, r1
 8010fd4:	4605      	mov	r5, r0
 8010fd6:	f004 ff95 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8010fda:	2202      	movs	r2, #2
 8010fdc:	4607      	mov	r7, r0
 8010fde:	1d31      	adds	r1, r6, #4
 8010fe0:	4628      	mov	r0, r5
 8010fe2:	f004 ff8f 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8010fe6:	4038      	ands	r0, r7
 8010fe8:	2202      	movs	r2, #2
 8010fea:	1db1      	adds	r1, r6, #6
 8010fec:	b2c7      	uxtb	r7, r0
 8010fee:	4628      	mov	r0, r5
 8010ff0:	f004 ff88 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8010ff4:	2204      	movs	r2, #4
 8010ff6:	4007      	ands	r7, r0
 8010ff8:	f106 0108 	add.w	r1, r6, #8
 8010ffc:	4628      	mov	r0, r5
 8010ffe:	f004 ff81 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011002:	7b31      	ldrb	r1, [r6, #12]
 8011004:	4007      	ands	r7, r0
 8011006:	4628      	mov	r0, r5
 8011008:	f7f9 fe88 	bl	800ad1c <ucdr_serialize_uint8_t>
 801100c:	7b71      	ldrb	r1, [r6, #13]
 801100e:	4007      	ands	r7, r0
 8011010:	4628      	mov	r0, r5
 8011012:	f7f9 fe55 	bl	800acc0 <ucdr_serialize_bool>
 8011016:	7b73      	ldrb	r3, [r6, #13]
 8011018:	ea07 0800 	and.w	r8, r7, r0
 801101c:	b93b      	cbnz	r3, 801102e <uxr_serialize_CLIENT_Representation+0x62>
 801101e:	8bb1      	ldrh	r1, [r6, #28]
 8011020:	4628      	mov	r0, r5
 8011022:	f7f9 fea7 	bl	800ad74 <ucdr_serialize_uint16_t>
 8011026:	ea08 0000 	and.w	r0, r8, r0
 801102a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801102e:	6931      	ldr	r1, [r6, #16]
 8011030:	4628      	mov	r0, r5
 8011032:	f7fa f889 	bl	800b148 <ucdr_serialize_uint32_t>
 8011036:	6933      	ldr	r3, [r6, #16]
 8011038:	b1e3      	cbz	r3, 8011074 <uxr_serialize_CLIENT_Representation+0xa8>
 801103a:	b1c0      	cbz	r0, 801106e <uxr_serialize_CLIENT_Representation+0xa2>
 801103c:	4637      	mov	r7, r6
 801103e:	f04f 0900 	mov.w	r9, #0
 8011042:	e001      	b.n	8011048 <uxr_serialize_CLIENT_Representation+0x7c>
 8011044:	3708      	adds	r7, #8
 8011046:	b194      	cbz	r4, 801106e <uxr_serialize_CLIENT_Representation+0xa2>
 8011048:	6979      	ldr	r1, [r7, #20]
 801104a:	4628      	mov	r0, r5
 801104c:	f005 f87a 	bl	8016144 <ucdr_serialize_string>
 8011050:	69b9      	ldr	r1, [r7, #24]
 8011052:	4604      	mov	r4, r0
 8011054:	4628      	mov	r0, r5
 8011056:	f005 f875 	bl	8016144 <ucdr_serialize_string>
 801105a:	6933      	ldr	r3, [r6, #16]
 801105c:	f109 0901 	add.w	r9, r9, #1
 8011060:	4004      	ands	r4, r0
 8011062:	4599      	cmp	r9, r3
 8011064:	b2e4      	uxtb	r4, r4
 8011066:	d3ed      	bcc.n	8011044 <uxr_serialize_CLIENT_Representation+0x78>
 8011068:	ea08 0804 	and.w	r8, r8, r4
 801106c:	e7d7      	b.n	801101e <uxr_serialize_CLIENT_Representation+0x52>
 801106e:	f04f 0800 	mov.w	r8, #0
 8011072:	e7d4      	b.n	801101e <uxr_serialize_CLIENT_Representation+0x52>
 8011074:	ea08 0800 	and.w	r8, r8, r0
 8011078:	e7d1      	b.n	801101e <uxr_serialize_CLIENT_Representation+0x52>
 801107a:	bf00      	nop

0801107c <uxr_deserialize_CLIENT_Representation>:
 801107c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011080:	2204      	movs	r2, #4
 8011082:	460c      	mov	r4, r1
 8011084:	4605      	mov	r5, r0
 8011086:	f004 ffa1 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 801108a:	2202      	movs	r2, #2
 801108c:	4607      	mov	r7, r0
 801108e:	1d21      	adds	r1, r4, #4
 8011090:	4628      	mov	r0, r5
 8011092:	f004 ff9b 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011096:	4038      	ands	r0, r7
 8011098:	2202      	movs	r2, #2
 801109a:	1da1      	adds	r1, r4, #6
 801109c:	b2c6      	uxtb	r6, r0
 801109e:	4628      	mov	r0, r5
 80110a0:	f004 ff94 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 80110a4:	2204      	movs	r2, #4
 80110a6:	4006      	ands	r6, r0
 80110a8:	f104 0108 	add.w	r1, r4, #8
 80110ac:	4628      	mov	r0, r5
 80110ae:	f004 ff8d 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 80110b2:	f104 010c 	add.w	r1, r4, #12
 80110b6:	4006      	ands	r6, r0
 80110b8:	4628      	mov	r0, r5
 80110ba:	f7f9 fe45 	bl	800ad48 <ucdr_deserialize_uint8_t>
 80110be:	f104 010d 	add.w	r1, r4, #13
 80110c2:	ea06 0700 	and.w	r7, r6, r0
 80110c6:	4628      	mov	r0, r5
 80110c8:	f7f9 fe10 	bl	800acec <ucdr_deserialize_bool>
 80110cc:	7b63      	ldrb	r3, [r4, #13]
 80110ce:	4007      	ands	r7, r0
 80110d0:	b93b      	cbnz	r3, 80110e2 <uxr_deserialize_CLIENT_Representation+0x66>
 80110d2:	f104 011c 	add.w	r1, r4, #28
 80110d6:	4628      	mov	r0, r5
 80110d8:	f7f9 ff4c 	bl	800af74 <ucdr_deserialize_uint16_t>
 80110dc:	4038      	ands	r0, r7
 80110de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110e2:	f104 0110 	add.w	r1, r4, #16
 80110e6:	4628      	mov	r0, r5
 80110e8:	f7fa f95e 	bl	800b3a8 <ucdr_deserialize_uint32_t>
 80110ec:	6923      	ldr	r3, [r4, #16]
 80110ee:	2b01      	cmp	r3, #1
 80110f0:	d903      	bls.n	80110fa <uxr_deserialize_CLIENT_Representation+0x7e>
 80110f2:	2301      	movs	r3, #1
 80110f4:	75ab      	strb	r3, [r5, #22]
 80110f6:	2700      	movs	r7, #0
 80110f8:	e7eb      	b.n	80110d2 <uxr_deserialize_CLIENT_Representation+0x56>
 80110fa:	b30b      	cbz	r3, 8011140 <uxr_deserialize_CLIENT_Representation+0xc4>
 80110fc:	2800      	cmp	r0, #0
 80110fe:	d0fa      	beq.n	80110f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 8011100:	46a0      	mov	r8, r4
 8011102:	f04f 0900 	mov.w	r9, #0
 8011106:	e001      	b.n	801110c <uxr_deserialize_CLIENT_Representation+0x90>
 8011108:	2e00      	cmp	r6, #0
 801110a:	d0f4      	beq.n	80110f6 <uxr_deserialize_CLIENT_Representation+0x7a>
 801110c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 8011110:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011114:	4628      	mov	r0, r5
 8011116:	f005 f825 	bl	8016164 <ucdr_deserialize_string>
 801111a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801111e:	4606      	mov	r6, r0
 8011120:	f8d8 1018 	ldr.w	r1, [r8, #24]
 8011124:	4628      	mov	r0, r5
 8011126:	f005 f81d 	bl	8016164 <ucdr_deserialize_string>
 801112a:	6923      	ldr	r3, [r4, #16]
 801112c:	f109 0901 	add.w	r9, r9, #1
 8011130:	4006      	ands	r6, r0
 8011132:	4599      	cmp	r9, r3
 8011134:	f108 0808 	add.w	r8, r8, #8
 8011138:	b2f6      	uxtb	r6, r6
 801113a:	d3e5      	bcc.n	8011108 <uxr_deserialize_CLIENT_Representation+0x8c>
 801113c:	4037      	ands	r7, r6
 801113e:	e7c8      	b.n	80110d2 <uxr_deserialize_CLIENT_Representation+0x56>
 8011140:	4007      	ands	r7, r0
 8011142:	e7c6      	b.n	80110d2 <uxr_deserialize_CLIENT_Representation+0x56>

08011144 <uxr_serialize_AGENT_Representation>:
 8011144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011148:	2204      	movs	r2, #4
 801114a:	460f      	mov	r7, r1
 801114c:	4605      	mov	r5, r0
 801114e:	f004 fed9 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011152:	2202      	movs	r2, #2
 8011154:	4604      	mov	r4, r0
 8011156:	1d39      	adds	r1, r7, #4
 8011158:	4628      	mov	r0, r5
 801115a:	f004 fed3 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 801115e:	4020      	ands	r0, r4
 8011160:	2202      	movs	r2, #2
 8011162:	1db9      	adds	r1, r7, #6
 8011164:	b2c4      	uxtb	r4, r0
 8011166:	4628      	mov	r0, r5
 8011168:	f004 fecc 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 801116c:	7a39      	ldrb	r1, [r7, #8]
 801116e:	4004      	ands	r4, r0
 8011170:	4628      	mov	r0, r5
 8011172:	f7f9 fda5 	bl	800acc0 <ucdr_serialize_bool>
 8011176:	7a3b      	ldrb	r3, [r7, #8]
 8011178:	ea00 0804 	and.w	r8, r0, r4
 801117c:	b913      	cbnz	r3, 8011184 <uxr_serialize_AGENT_Representation+0x40>
 801117e:	4640      	mov	r0, r8
 8011180:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011184:	68f9      	ldr	r1, [r7, #12]
 8011186:	4628      	mov	r0, r5
 8011188:	f7f9 ffde 	bl	800b148 <ucdr_serialize_uint32_t>
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	b303      	cbz	r3, 80111d2 <uxr_serialize_AGENT_Representation+0x8e>
 8011190:	b1d0      	cbz	r0, 80111c8 <uxr_serialize_AGENT_Representation+0x84>
 8011192:	463e      	mov	r6, r7
 8011194:	f04f 0900 	mov.w	r9, #0
 8011198:	e001      	b.n	801119e <uxr_serialize_AGENT_Representation+0x5a>
 801119a:	3608      	adds	r6, #8
 801119c:	b1a4      	cbz	r4, 80111c8 <uxr_serialize_AGENT_Representation+0x84>
 801119e:	6931      	ldr	r1, [r6, #16]
 80111a0:	4628      	mov	r0, r5
 80111a2:	f004 ffcf 	bl	8016144 <ucdr_serialize_string>
 80111a6:	6971      	ldr	r1, [r6, #20]
 80111a8:	4604      	mov	r4, r0
 80111aa:	4628      	mov	r0, r5
 80111ac:	f004 ffca 	bl	8016144 <ucdr_serialize_string>
 80111b0:	68fb      	ldr	r3, [r7, #12]
 80111b2:	f109 0901 	add.w	r9, r9, #1
 80111b6:	4004      	ands	r4, r0
 80111b8:	4599      	cmp	r9, r3
 80111ba:	b2e4      	uxtb	r4, r4
 80111bc:	d3ed      	bcc.n	801119a <uxr_serialize_AGENT_Representation+0x56>
 80111be:	ea08 0804 	and.w	r8, r8, r4
 80111c2:	4640      	mov	r0, r8
 80111c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111c8:	f04f 0800 	mov.w	r8, #0
 80111cc:	4640      	mov	r0, r8
 80111ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111d2:	ea08 0800 	and.w	r8, r8, r0
 80111d6:	e7d2      	b.n	801117e <uxr_serialize_AGENT_Representation+0x3a>

080111d8 <uxr_serialize_DATAWRITER_Representation>:
 80111d8:	b570      	push	{r4, r5, r6, lr}
 80111da:	460d      	mov	r5, r1
 80111dc:	7809      	ldrb	r1, [r1, #0]
 80111de:	4606      	mov	r6, r0
 80111e0:	f7f9 fd9c 	bl	800ad1c <ucdr_serialize_uint8_t>
 80111e4:	4604      	mov	r4, r0
 80111e6:	b130      	cbz	r0, 80111f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 80111e8:	782b      	ldrb	r3, [r5, #0]
 80111ea:	2b02      	cmp	r3, #2
 80111ec:	d00c      	beq.n	8011208 <uxr_serialize_DATAWRITER_Representation+0x30>
 80111ee:	2b03      	cmp	r3, #3
 80111f0:	d010      	beq.n	8011214 <uxr_serialize_DATAWRITER_Representation+0x3c>
 80111f2:	2b01      	cmp	r3, #1
 80111f4:	d008      	beq.n	8011208 <uxr_serialize_DATAWRITER_Representation+0x30>
 80111f6:	2202      	movs	r2, #2
 80111f8:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 80111fc:	4630      	mov	r0, r6
 80111fe:	f004 fe81 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011202:	4020      	ands	r0, r4
 8011204:	b2c0      	uxtb	r0, r0
 8011206:	bd70      	pop	{r4, r5, r6, pc}
 8011208:	6869      	ldr	r1, [r5, #4]
 801120a:	4630      	mov	r0, r6
 801120c:	f004 ff9a 	bl	8016144 <ucdr_serialize_string>
 8011210:	4604      	mov	r4, r0
 8011212:	e7f0      	b.n	80111f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011214:	4629      	mov	r1, r5
 8011216:	4630      	mov	r0, r6
 8011218:	f851 2f04 	ldr.w	r2, [r1, #4]!
 801121c:	3104      	adds	r1, #4
 801121e:	f004 ff65 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 8011222:	4604      	mov	r4, r0
 8011224:	e7e7      	b.n	80111f6 <uxr_serialize_DATAWRITER_Representation+0x1e>
 8011226:	bf00      	nop

08011228 <uxr_serialize_ObjectVariant.part.0>:
 8011228:	b570      	push	{r4, r5, r6, lr}
 801122a:	780b      	ldrb	r3, [r1, #0]
 801122c:	3b01      	subs	r3, #1
 801122e:	460c      	mov	r4, r1
 8011230:	4605      	mov	r5, r0
 8011232:	2b0d      	cmp	r3, #13
 8011234:	d854      	bhi.n	80112e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011236:	e8df f003 	tbb	[pc, r3]
 801123a:	0730      	.short	0x0730
 801123c:	07071b1b 	.word	0x07071b1b
 8011240:	0c530707 	.word	0x0c530707
 8011244:	494e0c0c 	.word	0x494e0c0c
 8011248:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801124c:	3104      	adds	r1, #4
 801124e:	f7ff bfc3 	b.w	80111d8 <uxr_serialize_DATAWRITER_Representation>
 8011252:	7909      	ldrb	r1, [r1, #4]
 8011254:	f7f9 fd62 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011258:	b1e8      	cbz	r0, 8011296 <uxr_serialize_ObjectVariant.part.0+0x6e>
 801125a:	7923      	ldrb	r3, [r4, #4]
 801125c:	2b01      	cmp	r3, #1
 801125e:	d001      	beq.n	8011264 <uxr_serialize_ObjectVariant.part.0+0x3c>
 8011260:	2b02      	cmp	r3, #2
 8011262:	d13d      	bne.n	80112e0 <uxr_serialize_ObjectVariant.part.0+0xb8>
 8011264:	68a1      	ldr	r1, [r4, #8]
 8011266:	4628      	mov	r0, r5
 8011268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801126c:	f004 bf6a 	b.w	8016144 <ucdr_serialize_string>
 8011270:	7909      	ldrb	r1, [r1, #4]
 8011272:	f7f9 fd53 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011276:	4606      	mov	r6, r0
 8011278:	b120      	cbz	r0, 8011284 <uxr_serialize_ObjectVariant.part.0+0x5c>
 801127a:	7923      	ldrb	r3, [r4, #4]
 801127c:	2b02      	cmp	r3, #2
 801127e:	d039      	beq.n	80112f4 <uxr_serialize_ObjectVariant.part.0+0xcc>
 8011280:	2b03      	cmp	r3, #3
 8011282:	d02f      	beq.n	80112e4 <uxr_serialize_ObjectVariant.part.0+0xbc>
 8011284:	2202      	movs	r2, #2
 8011286:	f504 7103 	add.w	r1, r4, #524	@ 0x20c
 801128a:	4628      	mov	r0, r5
 801128c:	f004 fe3a 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011290:	4030      	ands	r0, r6
 8011292:	b2c0      	uxtb	r0, r0
 8011294:	bd70      	pop	{r4, r5, r6, pc}
 8011296:	2000      	movs	r0, #0
 8011298:	bd70      	pop	{r4, r5, r6, pc}
 801129a:	7909      	ldrb	r1, [r1, #4]
 801129c:	f7f9 fd3e 	bl	800ad1c <ucdr_serialize_uint8_t>
 80112a0:	4606      	mov	r6, r0
 80112a2:	b158      	cbz	r0, 80112bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80112a4:	7923      	ldrb	r3, [r4, #4]
 80112a6:	2b02      	cmp	r3, #2
 80112a8:	d003      	beq.n	80112b2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 80112aa:	2b03      	cmp	r3, #3
 80112ac:	d028      	beq.n	8011300 <uxr_serialize_ObjectVariant.part.0+0xd8>
 80112ae:	2b01      	cmp	r3, #1
 80112b0:	d104      	bne.n	80112bc <uxr_serialize_ObjectVariant.part.0+0x94>
 80112b2:	68a1      	ldr	r1, [r4, #8]
 80112b4:	4628      	mov	r0, r5
 80112b6:	f004 ff45 	bl	8016144 <ucdr_serialize_string>
 80112ba:	4606      	mov	r6, r0
 80112bc:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	@ 0x20c
 80112c0:	4628      	mov	r0, r5
 80112c2:	f7fa fa67 	bl	800b794 <ucdr_serialize_int16_t>
 80112c6:	4030      	ands	r0, r6
 80112c8:	b2c0      	uxtb	r0, r0
 80112ca:	bd70      	pop	{r4, r5, r6, pc}
 80112cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112d0:	3104      	adds	r1, #4
 80112d2:	f7ff be7b 	b.w	8010fcc <uxr_serialize_CLIENT_Representation>
 80112d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80112da:	3104      	adds	r1, #4
 80112dc:	f7ff bf32 	b.w	8011144 <uxr_serialize_AGENT_Representation>
 80112e0:	2001      	movs	r0, #1
 80112e2:	bd70      	pop	{r4, r5, r6, pc}
 80112e4:	68a2      	ldr	r2, [r4, #8]
 80112e6:	f104 010c 	add.w	r1, r4, #12
 80112ea:	4628      	mov	r0, r5
 80112ec:	f004 fefe 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 80112f0:	4606      	mov	r6, r0
 80112f2:	e7c7      	b.n	8011284 <uxr_serialize_ObjectVariant.part.0+0x5c>
 80112f4:	68a1      	ldr	r1, [r4, #8]
 80112f6:	4628      	mov	r0, r5
 80112f8:	f004 ff24 	bl	8016144 <ucdr_serialize_string>
 80112fc:	4606      	mov	r6, r0
 80112fe:	e7c1      	b.n	8011284 <uxr_serialize_ObjectVariant.part.0+0x5c>
 8011300:	68a2      	ldr	r2, [r4, #8]
 8011302:	f104 010c 	add.w	r1, r4, #12
 8011306:	4628      	mov	r0, r5
 8011308:	f004 fef0 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 801130c:	4606      	mov	r6, r0
 801130e:	e7d5      	b.n	80112bc <uxr_serialize_ObjectVariant.part.0+0x94>

08011310 <uxr_deserialize_DATAWRITER_Representation>:
 8011310:	b570      	push	{r4, r5, r6, lr}
 8011312:	4606      	mov	r6, r0
 8011314:	460d      	mov	r5, r1
 8011316:	f7f9 fd17 	bl	800ad48 <ucdr_deserialize_uint8_t>
 801131a:	4604      	mov	r4, r0
 801131c:	b130      	cbz	r0, 801132c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801131e:	782b      	ldrb	r3, [r5, #0]
 8011320:	2b02      	cmp	r3, #2
 8011322:	d00c      	beq.n	801133e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 8011324:	2b03      	cmp	r3, #3
 8011326:	d012      	beq.n	801134e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 8011328:	2b01      	cmp	r3, #1
 801132a:	d008      	beq.n	801133e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 801132c:	2202      	movs	r2, #2
 801132e:	f505 7102 	add.w	r1, r5, #520	@ 0x208
 8011332:	4630      	mov	r0, r6
 8011334:	f004 fe4a 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011338:	4020      	ands	r0, r4
 801133a:	b2c0      	uxtb	r0, r0
 801133c:	bd70      	pop	{r4, r5, r6, pc}
 801133e:	6869      	ldr	r1, [r5, #4]
 8011340:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011344:	4630      	mov	r0, r6
 8011346:	f004 ff0d 	bl	8016164 <ucdr_deserialize_string>
 801134a:	4604      	mov	r4, r0
 801134c:	e7ee      	b.n	801132c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 801134e:	1d2b      	adds	r3, r5, #4
 8011350:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011354:	f105 0108 	add.w	r1, r5, #8
 8011358:	4630      	mov	r0, r6
 801135a:	f004 fed9 	bl	8016110 <ucdr_deserialize_sequence_uint8_t>
 801135e:	4604      	mov	r4, r0
 8011360:	e7e4      	b.n	801132c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 8011362:	bf00      	nop

08011364 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 8011364:	b570      	push	{r4, r5, r6, lr}
 8011366:	460d      	mov	r5, r1
 8011368:	7809      	ldrb	r1, [r1, #0]
 801136a:	4606      	mov	r6, r0
 801136c:	f7f9 fca8 	bl	800acc0 <ucdr_serialize_bool>
 8011370:	782b      	ldrb	r3, [r5, #0]
 8011372:	4604      	mov	r4, r0
 8011374:	b94b      	cbnz	r3, 801138a <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 8011376:	7a29      	ldrb	r1, [r5, #8]
 8011378:	4630      	mov	r0, r6
 801137a:	f7f9 fca1 	bl	800acc0 <ucdr_serialize_bool>
 801137e:	7a2b      	ldrb	r3, [r5, #8]
 8011380:	4004      	ands	r4, r0
 8011382:	b2e4      	uxtb	r4, r4
 8011384:	b943      	cbnz	r3, 8011398 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 8011386:	4620      	mov	r0, r4
 8011388:	bd70      	pop	{r4, r5, r6, pc}
 801138a:	6869      	ldr	r1, [r5, #4]
 801138c:	4630      	mov	r0, r6
 801138e:	f004 fed9 	bl	8016144 <ucdr_serialize_string>
 8011392:	4004      	ands	r4, r0
 8011394:	b2e4      	uxtb	r4, r4
 8011396:	e7ee      	b.n	8011376 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 8011398:	68e9      	ldr	r1, [r5, #12]
 801139a:	4630      	mov	r0, r6
 801139c:	f004 fed2 	bl	8016144 <ucdr_serialize_string>
 80113a0:	4004      	ands	r4, r0
 80113a2:	4620      	mov	r0, r4
 80113a4:	bd70      	pop	{r4, r5, r6, pc}
 80113a6:	bf00      	nop

080113a8 <uxr_serialize_OBJK_Topic_Binary>:
 80113a8:	b570      	push	{r4, r5, r6, lr}
 80113aa:	460d      	mov	r5, r1
 80113ac:	6809      	ldr	r1, [r1, #0]
 80113ae:	4606      	mov	r6, r0
 80113b0:	f004 fec8 	bl	8016144 <ucdr_serialize_string>
 80113b4:	7929      	ldrb	r1, [r5, #4]
 80113b6:	4604      	mov	r4, r0
 80113b8:	4630      	mov	r0, r6
 80113ba:	f7f9 fc81 	bl	800acc0 <ucdr_serialize_bool>
 80113be:	792b      	ldrb	r3, [r5, #4]
 80113c0:	4004      	ands	r4, r0
 80113c2:	b2e4      	uxtb	r4, r4
 80113c4:	b943      	cbnz	r3, 80113d8 <uxr_serialize_OBJK_Topic_Binary+0x30>
 80113c6:	7b29      	ldrb	r1, [r5, #12]
 80113c8:	4630      	mov	r0, r6
 80113ca:	f7f9 fc79 	bl	800acc0 <ucdr_serialize_bool>
 80113ce:	7b2b      	ldrb	r3, [r5, #12]
 80113d0:	4004      	ands	r4, r0
 80113d2:	b93b      	cbnz	r3, 80113e4 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 80113d4:	4620      	mov	r0, r4
 80113d6:	bd70      	pop	{r4, r5, r6, pc}
 80113d8:	68a9      	ldr	r1, [r5, #8]
 80113da:	4630      	mov	r0, r6
 80113dc:	f004 feb2 	bl	8016144 <ucdr_serialize_string>
 80113e0:	4004      	ands	r4, r0
 80113e2:	e7f0      	b.n	80113c6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 80113e4:	6929      	ldr	r1, [r5, #16]
 80113e6:	4630      	mov	r0, r6
 80113e8:	f004 feac 	bl	8016144 <ucdr_serialize_string>
 80113ec:	4004      	ands	r4, r0
 80113ee:	b2e4      	uxtb	r4, r4
 80113f0:	4620      	mov	r0, r4
 80113f2:	bd70      	pop	{r4, r5, r6, pc}

080113f4 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 80113f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80113f8:	460c      	mov	r4, r1
 80113fa:	7809      	ldrb	r1, [r1, #0]
 80113fc:	4606      	mov	r6, r0
 80113fe:	f7f9 fc5f 	bl	800acc0 <ucdr_serialize_bool>
 8011402:	7823      	ldrb	r3, [r4, #0]
 8011404:	4605      	mov	r5, r0
 8011406:	b96b      	cbnz	r3, 8011424 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 8011408:	f894 1028 	ldrb.w	r1, [r4, #40]	@ 0x28
 801140c:	4630      	mov	r0, r6
 801140e:	f7f9 fc57 	bl	800acc0 <ucdr_serialize_bool>
 8011412:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 8011416:	4005      	ands	r5, r0
 8011418:	b2ed      	uxtb	r5, r5
 801141a:	2b00      	cmp	r3, #0
 801141c:	d169      	bne.n	80114f2 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 801141e:	4628      	mov	r0, r5
 8011420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011424:	6861      	ldr	r1, [r4, #4]
 8011426:	4630      	mov	r0, r6
 8011428:	f7f9 fe8e 	bl	800b148 <ucdr_serialize_uint32_t>
 801142c:	6863      	ldr	r3, [r4, #4]
 801142e:	2b00      	cmp	r3, #0
 8011430:	d06b      	beq.n	801150a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 8011432:	2800      	cmp	r0, #0
 8011434:	d067      	beq.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011436:	68a1      	ldr	r1, [r4, #8]
 8011438:	4630      	mov	r0, r6
 801143a:	f004 fe83 	bl	8016144 <ucdr_serialize_string>
 801143e:	6863      	ldr	r3, [r4, #4]
 8011440:	2b01      	cmp	r3, #1
 8011442:	d953      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011444:	2800      	cmp	r0, #0
 8011446:	d05e      	beq.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011448:	68e1      	ldr	r1, [r4, #12]
 801144a:	4630      	mov	r0, r6
 801144c:	f004 fe7a 	bl	8016144 <ucdr_serialize_string>
 8011450:	6863      	ldr	r3, [r4, #4]
 8011452:	2b02      	cmp	r3, #2
 8011454:	d94a      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011456:	2800      	cmp	r0, #0
 8011458:	d055      	beq.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801145a:	6921      	ldr	r1, [r4, #16]
 801145c:	4630      	mov	r0, r6
 801145e:	f004 fe71 	bl	8016144 <ucdr_serialize_string>
 8011462:	6863      	ldr	r3, [r4, #4]
 8011464:	2b03      	cmp	r3, #3
 8011466:	d941      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 8011468:	2800      	cmp	r0, #0
 801146a:	d04c      	beq.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801146c:	6961      	ldr	r1, [r4, #20]
 801146e:	4630      	mov	r0, r6
 8011470:	f004 fe68 	bl	8016144 <ucdr_serialize_string>
 8011474:	6863      	ldr	r3, [r4, #4]
 8011476:	2b04      	cmp	r3, #4
 8011478:	d938      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801147a:	2800      	cmp	r0, #0
 801147c:	d043      	beq.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 801147e:	69a1      	ldr	r1, [r4, #24]
 8011480:	4630      	mov	r0, r6
 8011482:	f004 fe5f 	bl	8016144 <ucdr_serialize_string>
 8011486:	6863      	ldr	r3, [r4, #4]
 8011488:	2b05      	cmp	r3, #5
 801148a:	d92f      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801148c:	2800      	cmp	r0, #0
 801148e:	d03a      	beq.n	8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 8011490:	69e1      	ldr	r1, [r4, #28]
 8011492:	4630      	mov	r0, r6
 8011494:	f004 fe56 	bl	8016144 <ucdr_serialize_string>
 8011498:	6863      	ldr	r3, [r4, #4]
 801149a:	2b06      	cmp	r3, #6
 801149c:	d926      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 801149e:	b390      	cbz	r0, 8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114a0:	6a21      	ldr	r1, [r4, #32]
 80114a2:	4630      	mov	r0, r6
 80114a4:	f004 fe4e 	bl	8016144 <ucdr_serialize_string>
 80114a8:	6863      	ldr	r3, [r4, #4]
 80114aa:	2b07      	cmp	r3, #7
 80114ac:	d91e      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114ae:	b350      	cbz	r0, 8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114b0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80114b2:	4630      	mov	r0, r6
 80114b4:	f004 fe46 	bl	8016144 <ucdr_serialize_string>
 80114b8:	6863      	ldr	r3, [r4, #4]
 80114ba:	2b08      	cmp	r3, #8
 80114bc:	d916      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114be:	b310      	cbz	r0, 8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114c0:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80114c2:	4630      	mov	r0, r6
 80114c4:	f004 fe3e 	bl	8016144 <ucdr_serialize_string>
 80114c8:	6863      	ldr	r3, [r4, #4]
 80114ca:	2b09      	cmp	r3, #9
 80114cc:	d90e      	bls.n	80114ec <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 80114ce:	b1d0      	cbz	r0, 8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114d0:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
 80114d4:	2709      	movs	r7, #9
 80114d6:	e000      	b.n	80114da <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 80114d8:	b1a8      	cbz	r0, 8011506 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 80114da:	f858 1b04 	ldr.w	r1, [r8], #4
 80114de:	4630      	mov	r0, r6
 80114e0:	f004 fe30 	bl	8016144 <ucdr_serialize_string>
 80114e4:	6862      	ldr	r2, [r4, #4]
 80114e6:	3701      	adds	r7, #1
 80114e8:	4297      	cmp	r7, r2
 80114ea:	d3f5      	bcc.n	80114d8 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 80114ec:	4005      	ands	r5, r0
 80114ee:	b2ed      	uxtb	r5, r5
 80114f0:	e78a      	b.n	8011408 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 80114f2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80114f4:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 80114f8:	4630      	mov	r0, r6
 80114fa:	f004 fdf7 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 80114fe:	4005      	ands	r5, r0
 8011500:	4628      	mov	r0, r5
 8011502:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011506:	2500      	movs	r5, #0
 8011508:	e77e      	b.n	8011408 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 801150a:	4028      	ands	r0, r5
 801150c:	b2c5      	uxtb	r5, r0
 801150e:	e77b      	b.n	8011408 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

08011510 <uxr_serialize_OBJK_Publisher_Binary>:
 8011510:	b570      	push	{r4, r5, r6, lr}
 8011512:	460d      	mov	r5, r1
 8011514:	7809      	ldrb	r1, [r1, #0]
 8011516:	4606      	mov	r6, r0
 8011518:	f7f9 fbd2 	bl	800acc0 <ucdr_serialize_bool>
 801151c:	782b      	ldrb	r3, [r5, #0]
 801151e:	4604      	mov	r4, r0
 8011520:	b94b      	cbnz	r3, 8011536 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 8011522:	7a29      	ldrb	r1, [r5, #8]
 8011524:	4630      	mov	r0, r6
 8011526:	f7f9 fbcb 	bl	800acc0 <ucdr_serialize_bool>
 801152a:	7a2b      	ldrb	r3, [r5, #8]
 801152c:	4004      	ands	r4, r0
 801152e:	b2e4      	uxtb	r4, r4
 8011530:	b943      	cbnz	r3, 8011544 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 8011532:	4620      	mov	r0, r4
 8011534:	bd70      	pop	{r4, r5, r6, pc}
 8011536:	6869      	ldr	r1, [r5, #4]
 8011538:	4630      	mov	r0, r6
 801153a:	f004 fe03 	bl	8016144 <ucdr_serialize_string>
 801153e:	4004      	ands	r4, r0
 8011540:	b2e4      	uxtb	r4, r4
 8011542:	e7ee      	b.n	8011522 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 8011544:	f105 010c 	add.w	r1, r5, #12
 8011548:	4630      	mov	r0, r6
 801154a:	f7ff ff53 	bl	80113f4 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 801154e:	4004      	ands	r4, r0
 8011550:	4620      	mov	r0, r4
 8011552:	bd70      	pop	{r4, r5, r6, pc}

08011554 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 8011554:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 8011558:	4688      	mov	r8, r1
 801155a:	8809      	ldrh	r1, [r1, #0]
 801155c:	4681      	mov	r9, r0
 801155e:	f7f9 fc09 	bl	800ad74 <ucdr_serialize_uint16_t>
 8011562:	f898 1002 	ldrb.w	r1, [r8, #2]
 8011566:	4606      	mov	r6, r0
 8011568:	4648      	mov	r0, r9
 801156a:	f7f9 fba9 	bl	800acc0 <ucdr_serialize_bool>
 801156e:	f898 3002 	ldrb.w	r3, [r8, #2]
 8011572:	4006      	ands	r6, r0
 8011574:	b2f5      	uxtb	r5, r6
 8011576:	b9eb      	cbnz	r3, 80115b4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 8011578:	f898 1006 	ldrb.w	r1, [r8, #6]
 801157c:	4648      	mov	r0, r9
 801157e:	f7f9 fb9f 	bl	800acc0 <ucdr_serialize_bool>
 8011582:	f898 3006 	ldrb.w	r3, [r8, #6]
 8011586:	4005      	ands	r5, r0
 8011588:	bb7b      	cbnz	r3, 80115ea <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 801158a:	f898 100c 	ldrb.w	r1, [r8, #12]
 801158e:	4648      	mov	r0, r9
 8011590:	f7f9 fb96 	bl	800acc0 <ucdr_serialize_bool>
 8011594:	f898 300c 	ldrb.w	r3, [r8, #12]
 8011598:	4005      	ands	r5, r0
 801159a:	b9f3      	cbnz	r3, 80115da <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 801159c:	f898 1014 	ldrb.w	r1, [r8, #20]
 80115a0:	4648      	mov	r0, r9
 80115a2:	f7f9 fb8d 	bl	800acc0 <ucdr_serialize_bool>
 80115a6:	f898 3014 	ldrb.w	r3, [r8, #20]
 80115aa:	4005      	ands	r5, r0
 80115ac:	b94b      	cbnz	r3, 80115c2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 80115ae:	4628      	mov	r0, r5
 80115b0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80115b4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 80115b8:	4648      	mov	r0, r9
 80115ba:	f7f9 fbdb 	bl	800ad74 <ucdr_serialize_uint16_t>
 80115be:	4005      	ands	r5, r0
 80115c0:	e7da      	b.n	8011578 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 80115c2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80115c6:	f108 011c 	add.w	r1, r8, #28
 80115ca:	4648      	mov	r0, r9
 80115cc:	f004 fd8e 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 80115d0:	4028      	ands	r0, r5
 80115d2:	b2c5      	uxtb	r5, r0
 80115d4:	4628      	mov	r0, r5
 80115d6:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 80115da:	f8d8 1010 	ldr.w	r1, [r8, #16]
 80115de:	4648      	mov	r0, r9
 80115e0:	f7f9 fdb2 	bl	800b148 <ucdr_serialize_uint32_t>
 80115e4:	4028      	ands	r0, r5
 80115e6:	b2c5      	uxtb	r5, r0
 80115e8:	e7d8      	b.n	801159c <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 80115ea:	f8d8 1008 	ldr.w	r1, [r8, #8]
 80115ee:	4648      	mov	r0, r9
 80115f0:	f7f9 fdaa 	bl	800b148 <ucdr_serialize_uint32_t>
 80115f4:	4028      	ands	r0, r5
 80115f6:	b2c5      	uxtb	r5, r0
 80115f8:	e7c7      	b.n	801158a <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 80115fa:	bf00      	nop

080115fc <uxr_serialize_OBJK_DataWriter_Binary>:
 80115fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115fe:	2202      	movs	r2, #2
 8011600:	460d      	mov	r5, r1
 8011602:	4606      	mov	r6, r0
 8011604:	f004 fc7e 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011608:	78a9      	ldrb	r1, [r5, #2]
 801160a:	4604      	mov	r4, r0
 801160c:	4630      	mov	r0, r6
 801160e:	f7f9 fb57 	bl	800acc0 <ucdr_serialize_bool>
 8011612:	78ab      	ldrb	r3, [r5, #2]
 8011614:	4004      	ands	r4, r0
 8011616:	b2e4      	uxtb	r4, r4
 8011618:	b90b      	cbnz	r3, 801161e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 801161a:	4620      	mov	r0, r4
 801161c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801161e:	f105 0108 	add.w	r1, r5, #8
 8011622:	4630      	mov	r0, r6
 8011624:	f7ff ff96 	bl	8011554 <uxr_serialize_OBJK_Endpoint_QosBinary>
 8011628:	f895 102c 	ldrb.w	r1, [r5, #44]	@ 0x2c
 801162c:	4607      	mov	r7, r0
 801162e:	4630      	mov	r0, r6
 8011630:	f7f9 fb46 	bl	800acc0 <ucdr_serialize_bool>
 8011634:	f895 302c 	ldrb.w	r3, [r5, #44]	@ 0x2c
 8011638:	4038      	ands	r0, r7
 801163a:	b2c7      	uxtb	r7, r0
 801163c:	b913      	cbnz	r3, 8011644 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 801163e:	403c      	ands	r4, r7
 8011640:	4620      	mov	r0, r4
 8011642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011644:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	@ 0x30
 8011648:	4630      	mov	r0, r6
 801164a:	f7f9 ffd3 	bl	800b5f4 <ucdr_serialize_uint64_t>
 801164e:	4007      	ands	r7, r0
 8011650:	e7f5      	b.n	801163e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 8011652:	bf00      	nop

08011654 <uxr_deserialize_ObjectVariant>:
 8011654:	b570      	push	{r4, r5, r6, lr}
 8011656:	4605      	mov	r5, r0
 8011658:	460e      	mov	r6, r1
 801165a:	f7f9 fb75 	bl	800ad48 <ucdr_deserialize_uint8_t>
 801165e:	b168      	cbz	r0, 801167c <uxr_deserialize_ObjectVariant+0x28>
 8011660:	7833      	ldrb	r3, [r6, #0]
 8011662:	3b01      	subs	r3, #1
 8011664:	4604      	mov	r4, r0
 8011666:	2b0d      	cmp	r3, #13
 8011668:	d809      	bhi.n	801167e <uxr_deserialize_ObjectVariant+0x2a>
 801166a:	e8df f003 	tbb	[pc, r3]
 801166e:	0a41      	.short	0x0a41
 8011670:	0a0a2323 	.word	0x0a0a2323
 8011674:	10080a0a 	.word	0x10080a0a
 8011678:	565c1010 	.word	0x565c1010
 801167c:	2400      	movs	r4, #0
 801167e:	4620      	mov	r0, r4
 8011680:	bd70      	pop	{r4, r5, r6, pc}
 8011682:	1d31      	adds	r1, r6, #4
 8011684:	4628      	mov	r0, r5
 8011686:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801168a:	f7ff be41 	b.w	8011310 <uxr_deserialize_DATAWRITER_Representation>
 801168e:	1d31      	adds	r1, r6, #4
 8011690:	4628      	mov	r0, r5
 8011692:	f7f9 fb59 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011696:	2800      	cmp	r0, #0
 8011698:	d0f0      	beq.n	801167c <uxr_deserialize_ObjectVariant+0x28>
 801169a:	7933      	ldrb	r3, [r6, #4]
 801169c:	2b01      	cmp	r3, #1
 801169e:	d001      	beq.n	80116a4 <uxr_deserialize_ObjectVariant+0x50>
 80116a0:	2b02      	cmp	r3, #2
 80116a2:	d1ec      	bne.n	801167e <uxr_deserialize_ObjectVariant+0x2a>
 80116a4:	68b1      	ldr	r1, [r6, #8]
 80116a6:	4628      	mov	r0, r5
 80116a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80116b0:	f004 bd58 	b.w	8016164 <ucdr_deserialize_string>
 80116b4:	1d31      	adds	r1, r6, #4
 80116b6:	4628      	mov	r0, r5
 80116b8:	f7f9 fb46 	bl	800ad48 <ucdr_deserialize_uint8_t>
 80116bc:	4604      	mov	r4, r0
 80116be:	b170      	cbz	r0, 80116de <uxr_deserialize_ObjectVariant+0x8a>
 80116c0:	7933      	ldrb	r3, [r6, #4]
 80116c2:	2b02      	cmp	r3, #2
 80116c4:	d04c      	beq.n	8011760 <uxr_deserialize_ObjectVariant+0x10c>
 80116c6:	2b03      	cmp	r3, #3
 80116c8:	d109      	bne.n	80116de <uxr_deserialize_ObjectVariant+0x8a>
 80116ca:	f106 0308 	add.w	r3, r6, #8
 80116ce:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80116d2:	f106 010c 	add.w	r1, r6, #12
 80116d6:	4628      	mov	r0, r5
 80116d8:	f004 fd1a 	bl	8016110 <ucdr_deserialize_sequence_uint8_t>
 80116dc:	4604      	mov	r4, r0
 80116de:	2202      	movs	r2, #2
 80116e0:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 80116e4:	4628      	mov	r0, r5
 80116e6:	f004 fc71 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 80116ea:	4020      	ands	r0, r4
 80116ec:	b2c4      	uxtb	r4, r0
 80116ee:	e7c6      	b.n	801167e <uxr_deserialize_ObjectVariant+0x2a>
 80116f0:	1d31      	adds	r1, r6, #4
 80116f2:	4628      	mov	r0, r5
 80116f4:	f7f9 fb28 	bl	800ad48 <ucdr_deserialize_uint8_t>
 80116f8:	4604      	mov	r4, r0
 80116fa:	b130      	cbz	r0, 801170a <uxr_deserialize_ObjectVariant+0xb6>
 80116fc:	7933      	ldrb	r3, [r6, #4]
 80116fe:	2b02      	cmp	r3, #2
 8011700:	d036      	beq.n	8011770 <uxr_deserialize_ObjectVariant+0x11c>
 8011702:	2b03      	cmp	r3, #3
 8011704:	d03c      	beq.n	8011780 <uxr_deserialize_ObjectVariant+0x12c>
 8011706:	2b01      	cmp	r3, #1
 8011708:	d032      	beq.n	8011770 <uxr_deserialize_ObjectVariant+0x11c>
 801170a:	f506 7103 	add.w	r1, r6, #524	@ 0x20c
 801170e:	4628      	mov	r0, r5
 8011710:	f7fa f8c0 	bl	800b894 <ucdr_deserialize_int16_t>
 8011714:	4020      	ands	r0, r4
 8011716:	b2c4      	uxtb	r4, r0
 8011718:	e7b1      	b.n	801167e <uxr_deserialize_ObjectVariant+0x2a>
 801171a:	1d31      	adds	r1, r6, #4
 801171c:	4628      	mov	r0, r5
 801171e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8011722:	f7ff bcab 	b.w	801107c <uxr_deserialize_CLIENT_Representation>
 8011726:	2204      	movs	r2, #4
 8011728:	18b1      	adds	r1, r6, r2
 801172a:	4628      	mov	r0, r5
 801172c:	f004 fc4e 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011730:	2202      	movs	r2, #2
 8011732:	f106 0108 	add.w	r1, r6, #8
 8011736:	4604      	mov	r4, r0
 8011738:	4628      	mov	r0, r5
 801173a:	f004 fc47 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 801173e:	2202      	movs	r2, #2
 8011740:	4004      	ands	r4, r0
 8011742:	f106 010a 	add.w	r1, r6, #10
 8011746:	4628      	mov	r0, r5
 8011748:	f004 fc40 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 801174c:	b2e4      	uxtb	r4, r4
 801174e:	4603      	mov	r3, r0
 8011750:	f106 010c 	add.w	r1, r6, #12
 8011754:	4628      	mov	r0, r5
 8011756:	401c      	ands	r4, r3
 8011758:	f7f9 fac8 	bl	800acec <ucdr_deserialize_bool>
 801175c:	4004      	ands	r4, r0
 801175e:	e78e      	b.n	801167e <uxr_deserialize_ObjectVariant+0x2a>
 8011760:	68b1      	ldr	r1, [r6, #8]
 8011762:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011766:	4628      	mov	r0, r5
 8011768:	f004 fcfc 	bl	8016164 <ucdr_deserialize_string>
 801176c:	4604      	mov	r4, r0
 801176e:	e7b6      	b.n	80116de <uxr_deserialize_ObjectVariant+0x8a>
 8011770:	68b1      	ldr	r1, [r6, #8]
 8011772:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011776:	4628      	mov	r0, r5
 8011778:	f004 fcf4 	bl	8016164 <ucdr_deserialize_string>
 801177c:	4604      	mov	r4, r0
 801177e:	e7c4      	b.n	801170a <uxr_deserialize_ObjectVariant+0xb6>
 8011780:	f106 0308 	add.w	r3, r6, #8
 8011784:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8011788:	f106 010c 	add.w	r1, r6, #12
 801178c:	4628      	mov	r0, r5
 801178e:	f004 fcbf 	bl	8016110 <ucdr_deserialize_sequence_uint8_t>
 8011792:	4604      	mov	r4, r0
 8011794:	e7b9      	b.n	801170a <uxr_deserialize_ObjectVariant+0xb6>
 8011796:	bf00      	nop

08011798 <uxr_deserialize_BaseObjectRequest>:
 8011798:	b570      	push	{r4, r5, r6, lr}
 801179a:	2202      	movs	r2, #2
 801179c:	4605      	mov	r5, r0
 801179e:	460e      	mov	r6, r1
 80117a0:	f004 fc14 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 80117a4:	2202      	movs	r2, #2
 80117a6:	4604      	mov	r4, r0
 80117a8:	18b1      	adds	r1, r6, r2
 80117aa:	4628      	mov	r0, r5
 80117ac:	f004 fc0e 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 80117b0:	4020      	ands	r0, r4
 80117b2:	b2c0      	uxtb	r0, r0
 80117b4:	bd70      	pop	{r4, r5, r6, pc}
 80117b6:	bf00      	nop

080117b8 <uxr_serialize_ActivityInfoVariant>:
 80117b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80117bc:	460d      	mov	r5, r1
 80117be:	7809      	ldrb	r1, [r1, #0]
 80117c0:	4607      	mov	r7, r0
 80117c2:	f7f9 faab 	bl	800ad1c <ucdr_serialize_uint8_t>
 80117c6:	4681      	mov	r9, r0
 80117c8:	b138      	cbz	r0, 80117da <uxr_serialize_ActivityInfoVariant+0x22>
 80117ca:	782b      	ldrb	r3, [r5, #0]
 80117cc:	2b06      	cmp	r3, #6
 80117ce:	f000 8082 	beq.w	80118d6 <uxr_serialize_ActivityInfoVariant+0x11e>
 80117d2:	2b0d      	cmp	r3, #13
 80117d4:	d016      	beq.n	8011804 <uxr_serialize_ActivityInfoVariant+0x4c>
 80117d6:	2b05      	cmp	r3, #5
 80117d8:	d002      	beq.n	80117e0 <uxr_serialize_ActivityInfoVariant+0x28>
 80117da:	4648      	mov	r0, r9
 80117dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80117e0:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80117e4:	4638      	mov	r0, r7
 80117e6:	f7f9 ffd5 	bl	800b794 <ucdr_serialize_int16_t>
 80117ea:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 80117ee:	4681      	mov	r9, r0
 80117f0:	4638      	mov	r0, r7
 80117f2:	f7f9 feff 	bl	800b5f4 <ucdr_serialize_uint64_t>
 80117f6:	ea09 0000 	and.w	r0, r9, r0
 80117fa:	fa5f f980 	uxtb.w	r9, r0
 80117fe:	4648      	mov	r0, r9
 8011800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011804:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 8011808:	4638      	mov	r0, r7
 801180a:	f7f9 ffc3 	bl	800b794 <ucdr_serialize_int16_t>
 801180e:	68e9      	ldr	r1, [r5, #12]
 8011810:	4681      	mov	r9, r0
 8011812:	4638      	mov	r0, r7
 8011814:	f7f9 fc98 	bl	800b148 <ucdr_serialize_uint32_t>
 8011818:	68eb      	ldr	r3, [r5, #12]
 801181a:	2b00      	cmp	r3, #0
 801181c:	d0eb      	beq.n	80117f6 <uxr_serialize_ActivityInfoVariant+0x3e>
 801181e:	b320      	cbz	r0, 801186a <uxr_serialize_ActivityInfoVariant+0xb2>
 8011820:	f105 080c 	add.w	r8, r5, #12
 8011824:	2600      	movs	r6, #0
 8011826:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 801182a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 801182e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 8011832:	4638      	mov	r0, r7
 8011834:	f7f9 fa72 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011838:	2800      	cmp	r0, #0
 801183a:	d053      	beq.n	80118e4 <uxr_serialize_ActivityInfoVariant+0x12c>
 801183c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 8011840:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 8011844:	0074      	lsls	r4, r6, #1
 8011846:	00c9      	lsls	r1, r1, #3
 8011848:	2b03      	cmp	r3, #3
 801184a:	d854      	bhi.n	80118f6 <uxr_serialize_ActivityInfoVariant+0x13e>
 801184c:	e8df f003 	tbb	[pc, r3]
 8011850:	02102132 	.word	0x02102132
 8011854:	4441      	add	r1, r8
 8011856:	4638      	mov	r0, r7
 8011858:	6889      	ldr	r1, [r1, #8]
 801185a:	f004 fc73 	bl	8016144 <ucdr_serialize_string>
 801185e:	68ea      	ldr	r2, [r5, #12]
 8011860:	3601      	adds	r6, #1
 8011862:	4296      	cmp	r6, r2
 8011864:	d242      	bcs.n	80118ec <uxr_serialize_ActivityInfoVariant+0x134>
 8011866:	2800      	cmp	r0, #0
 8011868:	d1dd      	bne.n	8011826 <uxr_serialize_ActivityInfoVariant+0x6e>
 801186a:	f04f 0900 	mov.w	r9, #0
 801186e:	e7b4      	b.n	80117da <uxr_serialize_ActivityInfoVariant+0x22>
 8011870:	3108      	adds	r1, #8
 8011872:	4441      	add	r1, r8
 8011874:	2210      	movs	r2, #16
 8011876:	4638      	mov	r0, r7
 8011878:	f004 fb44 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 801187c:	4434      	add	r4, r6
 801187e:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 8011882:	4604      	mov	r4, r0
 8011884:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8011886:	4638      	mov	r0, r7
 8011888:	f7f9 fc5e 	bl	800b148 <ucdr_serialize_uint32_t>
 801188c:	4020      	ands	r0, r4
 801188e:	b2c0      	uxtb	r0, r0
 8011890:	e7e5      	b.n	801185e <uxr_serialize_ActivityInfoVariant+0xa6>
 8011892:	3108      	adds	r1, #8
 8011894:	4441      	add	r1, r8
 8011896:	2204      	movs	r2, #4
 8011898:	4638      	mov	r0, r7
 801189a:	f004 fb33 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 801189e:	4434      	add	r4, r6
 80118a0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80118a4:	4604      	mov	r4, r0
 80118a6:	8b19      	ldrh	r1, [r3, #24]
 80118a8:	4638      	mov	r0, r7
 80118aa:	f7f9 fa63 	bl	800ad74 <ucdr_serialize_uint16_t>
 80118ae:	4020      	ands	r0, r4
 80118b0:	b2c0      	uxtb	r0, r0
 80118b2:	e7d4      	b.n	801185e <uxr_serialize_ActivityInfoVariant+0xa6>
 80118b4:	3108      	adds	r1, #8
 80118b6:	4441      	add	r1, r8
 80118b8:	2202      	movs	r2, #2
 80118ba:	4638      	mov	r0, r7
 80118bc:	f004 fb22 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 80118c0:	4434      	add	r4, r6
 80118c2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 80118c6:	4604      	mov	r4, r0
 80118c8:	7d99      	ldrb	r1, [r3, #22]
 80118ca:	4638      	mov	r0, r7
 80118cc:	f7f9 fa26 	bl	800ad1c <ucdr_serialize_uint8_t>
 80118d0:	4020      	ands	r0, r4
 80118d2:	b2c0      	uxtb	r0, r0
 80118d4:	e7c3      	b.n	801185e <uxr_serialize_ActivityInfoVariant+0xa6>
 80118d6:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 80118da:	4638      	mov	r0, r7
 80118dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80118e0:	f7f9 bf58 	b.w	800b794 <ucdr_serialize_int16_t>
 80118e4:	68ea      	ldr	r2, [r5, #12]
 80118e6:	3601      	adds	r6, #1
 80118e8:	42b2      	cmp	r2, r6
 80118ea:	d8be      	bhi.n	801186a <uxr_serialize_ActivityInfoVariant+0xb2>
 80118ec:	ea09 0900 	and.w	r9, r9, r0
 80118f0:	fa5f f989 	uxtb.w	r9, r9
 80118f4:	e771      	b.n	80117da <uxr_serialize_ActivityInfoVariant+0x22>
 80118f6:	68eb      	ldr	r3, [r5, #12]
 80118f8:	3601      	adds	r6, #1
 80118fa:	429e      	cmp	r6, r3
 80118fc:	f10a 0a18 	add.w	sl, sl, #24
 8011900:	d395      	bcc.n	801182e <uxr_serialize_ActivityInfoVariant+0x76>
 8011902:	e76a      	b.n	80117da <uxr_serialize_ActivityInfoVariant+0x22>

08011904 <uxr_deserialize_BaseObjectReply>:
 8011904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011908:	2202      	movs	r2, #2
 801190a:	4606      	mov	r6, r0
 801190c:	460f      	mov	r7, r1
 801190e:	f004 fb5d 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011912:	2202      	movs	r2, #2
 8011914:	18b9      	adds	r1, r7, r2
 8011916:	4605      	mov	r5, r0
 8011918:	4630      	mov	r0, r6
 801191a:	f004 fb57 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 801191e:	1d39      	adds	r1, r7, #4
 8011920:	4680      	mov	r8, r0
 8011922:	4630      	mov	r0, r6
 8011924:	f7f9 fa10 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011928:	1d79      	adds	r1, r7, #5
 801192a:	4604      	mov	r4, r0
 801192c:	4630      	mov	r0, r6
 801192e:	f7f9 fa0b 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011932:	ea05 0508 	and.w	r5, r5, r8
 8011936:	402c      	ands	r4, r5
 8011938:	4020      	ands	r0, r4
 801193a:	b2c0      	uxtb	r0, r0
 801193c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011940 <uxr_serialize_ReadSpecification>:
 8011940:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011944:	460e      	mov	r6, r1
 8011946:	7809      	ldrb	r1, [r1, #0]
 8011948:	4607      	mov	r7, r0
 801194a:	f7f9 f9e7 	bl	800ad1c <ucdr_serialize_uint8_t>
 801194e:	7871      	ldrb	r1, [r6, #1]
 8011950:	4604      	mov	r4, r0
 8011952:	4638      	mov	r0, r7
 8011954:	f7f9 f9e2 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011958:	78b1      	ldrb	r1, [r6, #2]
 801195a:	4004      	ands	r4, r0
 801195c:	4638      	mov	r0, r7
 801195e:	f7f9 f9af 	bl	800acc0 <ucdr_serialize_bool>
 8011962:	78b3      	ldrb	r3, [r6, #2]
 8011964:	b2e4      	uxtb	r4, r4
 8011966:	4004      	ands	r4, r0
 8011968:	b94b      	cbnz	r3, 801197e <uxr_serialize_ReadSpecification+0x3e>
 801196a:	7a31      	ldrb	r1, [r6, #8]
 801196c:	4638      	mov	r0, r7
 801196e:	f7f9 f9a7 	bl	800acc0 <ucdr_serialize_bool>
 8011972:	7a33      	ldrb	r3, [r6, #8]
 8011974:	4004      	ands	r4, r0
 8011976:	b943      	cbnz	r3, 801198a <uxr_serialize_ReadSpecification+0x4a>
 8011978:	4620      	mov	r0, r4
 801197a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801197e:	6871      	ldr	r1, [r6, #4]
 8011980:	4638      	mov	r0, r7
 8011982:	f004 fbdf 	bl	8016144 <ucdr_serialize_string>
 8011986:	4004      	ands	r4, r0
 8011988:	e7ef      	b.n	801196a <uxr_serialize_ReadSpecification+0x2a>
 801198a:	8971      	ldrh	r1, [r6, #10]
 801198c:	4638      	mov	r0, r7
 801198e:	f7f9 f9f1 	bl	800ad74 <ucdr_serialize_uint16_t>
 8011992:	89b1      	ldrh	r1, [r6, #12]
 8011994:	4605      	mov	r5, r0
 8011996:	4638      	mov	r0, r7
 8011998:	f7f9 f9ec 	bl	800ad74 <ucdr_serialize_uint16_t>
 801199c:	89f1      	ldrh	r1, [r6, #14]
 801199e:	4005      	ands	r5, r0
 80119a0:	4638      	mov	r0, r7
 80119a2:	f7f9 f9e7 	bl	800ad74 <ucdr_serialize_uint16_t>
 80119a6:	8a31      	ldrh	r1, [r6, #16]
 80119a8:	4680      	mov	r8, r0
 80119aa:	4638      	mov	r0, r7
 80119ac:	f7f9 f9e2 	bl	800ad74 <ucdr_serialize_uint16_t>
 80119b0:	b2ed      	uxtb	r5, r5
 80119b2:	4025      	ands	r5, r4
 80119b4:	ea08 0505 	and.w	r5, r8, r5
 80119b8:	ea00 0405 	and.w	r4, r0, r5
 80119bc:	4620      	mov	r0, r4
 80119be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119c2:	bf00      	nop

080119c4 <uxr_serialize_CREATE_CLIENT_Payload>:
 80119c4:	f7ff bb02 	b.w	8010fcc <uxr_serialize_CLIENT_Representation>

080119c8 <uxr_serialize_CREATE_Payload>:
 80119c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80119ca:	2202      	movs	r2, #2
 80119cc:	4607      	mov	r7, r0
 80119ce:	460e      	mov	r6, r1
 80119d0:	f004 fa98 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 80119d4:	2202      	movs	r2, #2
 80119d6:	18b1      	adds	r1, r6, r2
 80119d8:	4605      	mov	r5, r0
 80119da:	4638      	mov	r0, r7
 80119dc:	f004 fa92 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 80119e0:	7931      	ldrb	r1, [r6, #4]
 80119e2:	4604      	mov	r4, r0
 80119e4:	4638      	mov	r0, r7
 80119e6:	f7f9 f999 	bl	800ad1c <ucdr_serialize_uint8_t>
 80119ea:	b170      	cbz	r0, 8011a0a <uxr_serialize_CREATE_Payload+0x42>
 80119ec:	7933      	ldrb	r3, [r6, #4]
 80119ee:	402c      	ands	r4, r5
 80119f0:	3b01      	subs	r3, #1
 80119f2:	b2e4      	uxtb	r4, r4
 80119f4:	2b0d      	cmp	r3, #13
 80119f6:	d809      	bhi.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 80119f8:	e8df f003 	tbb	[pc, r3]
 80119fc:	23230a4c 	.word	0x23230a4c
 8011a00:	0a0a0a0a 	.word	0x0a0a0a0a
 8011a04:	12121208 	.word	0x12121208
 8011a08:	3e45      	.short	0x3e45
 8011a0a:	2400      	movs	r4, #0
 8011a0c:	4620      	mov	r0, r4
 8011a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a10:	f106 0108 	add.w	r1, r6, #8
 8011a14:	4638      	mov	r0, r7
 8011a16:	f7ff fbdf 	bl	80111d8 <uxr_serialize_DATAWRITER_Representation>
 8011a1a:	4004      	ands	r4, r0
 8011a1c:	4620      	mov	r0, r4
 8011a1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a20:	7a31      	ldrb	r1, [r6, #8]
 8011a22:	4638      	mov	r0, r7
 8011a24:	f7f9 f97a 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011a28:	2800      	cmp	r0, #0
 8011a2a:	d0ee      	beq.n	8011a0a <uxr_serialize_CREATE_Payload+0x42>
 8011a2c:	7a33      	ldrb	r3, [r6, #8]
 8011a2e:	2b01      	cmp	r3, #1
 8011a30:	d001      	beq.n	8011a36 <uxr_serialize_CREATE_Payload+0x6e>
 8011a32:	2b02      	cmp	r3, #2
 8011a34:	d1ea      	bne.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 8011a36:	68f1      	ldr	r1, [r6, #12]
 8011a38:	4638      	mov	r0, r7
 8011a3a:	f004 fb83 	bl	8016144 <ucdr_serialize_string>
 8011a3e:	4004      	ands	r4, r0
 8011a40:	e7e4      	b.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 8011a42:	7a31      	ldrb	r1, [r6, #8]
 8011a44:	4638      	mov	r0, r7
 8011a46:	f7f9 f969 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011a4a:	4605      	mov	r5, r0
 8011a4c:	b158      	cbz	r0, 8011a66 <uxr_serialize_CREATE_Payload+0x9e>
 8011a4e:	7a33      	ldrb	r3, [r6, #8]
 8011a50:	2b02      	cmp	r3, #2
 8011a52:	d034      	beq.n	8011abe <uxr_serialize_CREATE_Payload+0xf6>
 8011a54:	2b03      	cmp	r3, #3
 8011a56:	d106      	bne.n	8011a66 <uxr_serialize_CREATE_Payload+0x9e>
 8011a58:	68f2      	ldr	r2, [r6, #12]
 8011a5a:	f106 0110 	add.w	r1, r6, #16
 8011a5e:	4638      	mov	r0, r7
 8011a60:	f004 fb44 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 8011a64:	4605      	mov	r5, r0
 8011a66:	2202      	movs	r2, #2
 8011a68:	f506 7104 	add.w	r1, r6, #528	@ 0x210
 8011a6c:	4638      	mov	r0, r7
 8011a6e:	f004 fa49 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011a72:	4028      	ands	r0, r5
 8011a74:	4004      	ands	r4, r0
 8011a76:	e7c9      	b.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 8011a78:	f106 0108 	add.w	r1, r6, #8
 8011a7c:	4638      	mov	r0, r7
 8011a7e:	f7ff faa5 	bl	8010fcc <uxr_serialize_CLIENT_Representation>
 8011a82:	4004      	ands	r4, r0
 8011a84:	e7c2      	b.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 8011a86:	f106 0108 	add.w	r1, r6, #8
 8011a8a:	4638      	mov	r0, r7
 8011a8c:	f7ff fb5a 	bl	8011144 <uxr_serialize_AGENT_Representation>
 8011a90:	4004      	ands	r4, r0
 8011a92:	e7bb      	b.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 8011a94:	7a31      	ldrb	r1, [r6, #8]
 8011a96:	4638      	mov	r0, r7
 8011a98:	f7f9 f940 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011a9c:	4605      	mov	r5, r0
 8011a9e:	b130      	cbz	r0, 8011aae <uxr_serialize_CREATE_Payload+0xe6>
 8011aa0:	7a33      	ldrb	r3, [r6, #8]
 8011aa2:	2b02      	cmp	r3, #2
 8011aa4:	d011      	beq.n	8011aca <uxr_serialize_CREATE_Payload+0x102>
 8011aa6:	2b03      	cmp	r3, #3
 8011aa8:	d015      	beq.n	8011ad6 <uxr_serialize_CREATE_Payload+0x10e>
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d00d      	beq.n	8011aca <uxr_serialize_CREATE_Payload+0x102>
 8011aae:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	@ 0x210
 8011ab2:	4638      	mov	r0, r7
 8011ab4:	f7f9 fe6e 	bl	800b794 <ucdr_serialize_int16_t>
 8011ab8:	4028      	ands	r0, r5
 8011aba:	4004      	ands	r4, r0
 8011abc:	e7a6      	b.n	8011a0c <uxr_serialize_CREATE_Payload+0x44>
 8011abe:	68f1      	ldr	r1, [r6, #12]
 8011ac0:	4638      	mov	r0, r7
 8011ac2:	f004 fb3f 	bl	8016144 <ucdr_serialize_string>
 8011ac6:	4605      	mov	r5, r0
 8011ac8:	e7cd      	b.n	8011a66 <uxr_serialize_CREATE_Payload+0x9e>
 8011aca:	68f1      	ldr	r1, [r6, #12]
 8011acc:	4638      	mov	r0, r7
 8011ace:	f004 fb39 	bl	8016144 <ucdr_serialize_string>
 8011ad2:	4605      	mov	r5, r0
 8011ad4:	e7eb      	b.n	8011aae <uxr_serialize_CREATE_Payload+0xe6>
 8011ad6:	68f2      	ldr	r2, [r6, #12]
 8011ad8:	f106 0110 	add.w	r1, r6, #16
 8011adc:	4638      	mov	r0, r7
 8011ade:	f004 fb05 	bl	80160ec <ucdr_serialize_sequence_uint8_t>
 8011ae2:	4605      	mov	r5, r0
 8011ae4:	e7e3      	b.n	8011aae <uxr_serialize_CREATE_Payload+0xe6>
 8011ae6:	bf00      	nop

08011ae8 <uxr_deserialize_GET_INFO_Payload>:
 8011ae8:	b570      	push	{r4, r5, r6, lr}
 8011aea:	2202      	movs	r2, #2
 8011aec:	4605      	mov	r5, r0
 8011aee:	460e      	mov	r6, r1
 8011af0:	f004 fa6c 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011af4:	2202      	movs	r2, #2
 8011af6:	18b1      	adds	r1, r6, r2
 8011af8:	4604      	mov	r4, r0
 8011afa:	4628      	mov	r0, r5
 8011afc:	f004 fa66 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011b00:	1d31      	adds	r1, r6, #4
 8011b02:	4004      	ands	r4, r0
 8011b04:	4628      	mov	r0, r5
 8011b06:	f7f9 fc4f 	bl	800b3a8 <ucdr_deserialize_uint32_t>
 8011b0a:	b2e4      	uxtb	r4, r4
 8011b0c:	4020      	ands	r0, r4
 8011b0e:	bd70      	pop	{r4, r5, r6, pc}

08011b10 <uxr_serialize_DELETE_Payload>:
 8011b10:	b570      	push	{r4, r5, r6, lr}
 8011b12:	2202      	movs	r2, #2
 8011b14:	4605      	mov	r5, r0
 8011b16:	460e      	mov	r6, r1
 8011b18:	f004 f9f4 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011b1c:	2202      	movs	r2, #2
 8011b1e:	4604      	mov	r4, r0
 8011b20:	18b1      	adds	r1, r6, r2
 8011b22:	4628      	mov	r0, r5
 8011b24:	f004 f9ee 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011b28:	4020      	ands	r0, r4
 8011b2a:	b2c0      	uxtb	r0, r0
 8011b2c:	bd70      	pop	{r4, r5, r6, pc}
 8011b2e:	bf00      	nop

08011b30 <uxr_deserialize_STATUS_AGENT_Payload>:
 8011b30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b34:	4605      	mov	r5, r0
 8011b36:	460e      	mov	r6, r1
 8011b38:	f7f9 f906 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011b3c:	1c71      	adds	r1, r6, #1
 8011b3e:	4604      	mov	r4, r0
 8011b40:	4628      	mov	r0, r5
 8011b42:	f7f9 f901 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011b46:	2204      	movs	r2, #4
 8011b48:	18b1      	adds	r1, r6, r2
 8011b4a:	4680      	mov	r8, r0
 8011b4c:	4628      	mov	r0, r5
 8011b4e:	f004 fa3d 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011b52:	f106 0108 	add.w	r1, r6, #8
 8011b56:	4607      	mov	r7, r0
 8011b58:	2202      	movs	r2, #2
 8011b5a:	4628      	mov	r0, r5
 8011b5c:	f004 fa36 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011b60:	ea04 0308 	and.w	r3, r4, r8
 8011b64:	b2db      	uxtb	r3, r3
 8011b66:	ea03 0407 	and.w	r4, r3, r7
 8011b6a:	2202      	movs	r2, #2
 8011b6c:	4607      	mov	r7, r0
 8011b6e:	f106 010a 	add.w	r1, r6, #10
 8011b72:	4628      	mov	r0, r5
 8011b74:	f004 fa2a 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011b78:	f106 010c 	add.w	r1, r6, #12
 8011b7c:	4603      	mov	r3, r0
 8011b7e:	4628      	mov	r0, r5
 8011b80:	461d      	mov	r5, r3
 8011b82:	f7f9 f8b3 	bl	800acec <ucdr_deserialize_bool>
 8011b86:	403c      	ands	r4, r7
 8011b88:	4025      	ands	r5, r4
 8011b8a:	4028      	ands	r0, r5
 8011b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011b90 <uxr_deserialize_STATUS_Payload>:
 8011b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011b94:	2202      	movs	r2, #2
 8011b96:	4606      	mov	r6, r0
 8011b98:	460f      	mov	r7, r1
 8011b9a:	f004 fa17 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011b9e:	2202      	movs	r2, #2
 8011ba0:	18b9      	adds	r1, r7, r2
 8011ba2:	4605      	mov	r5, r0
 8011ba4:	4630      	mov	r0, r6
 8011ba6:	f004 fa11 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011baa:	1d39      	adds	r1, r7, #4
 8011bac:	4680      	mov	r8, r0
 8011bae:	4630      	mov	r0, r6
 8011bb0:	f7f9 f8ca 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011bb4:	1d79      	adds	r1, r7, #5
 8011bb6:	4604      	mov	r4, r0
 8011bb8:	4630      	mov	r0, r6
 8011bba:	f7f9 f8c5 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011bbe:	ea05 0508 	and.w	r5, r5, r8
 8011bc2:	402c      	ands	r4, r5
 8011bc4:	4020      	ands	r0, r4
 8011bc6:	b2c0      	uxtb	r0, r0
 8011bc8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011bcc <uxr_serialize_INFO_Payload>:
 8011bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011bd0:	2202      	movs	r2, #2
 8011bd2:	460c      	mov	r4, r1
 8011bd4:	4605      	mov	r5, r0
 8011bd6:	f004 f995 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011bda:	2202      	movs	r2, #2
 8011bdc:	18a1      	adds	r1, r4, r2
 8011bde:	4680      	mov	r8, r0
 8011be0:	4628      	mov	r0, r5
 8011be2:	f004 f98f 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011be6:	7921      	ldrb	r1, [r4, #4]
 8011be8:	4607      	mov	r7, r0
 8011bea:	4628      	mov	r0, r5
 8011bec:	f7f9 f896 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011bf0:	7961      	ldrb	r1, [r4, #5]
 8011bf2:	4606      	mov	r6, r0
 8011bf4:	4628      	mov	r0, r5
 8011bf6:	f7f9 f891 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011bfa:	ea08 0807 	and.w	r8, r8, r7
 8011bfe:	ea06 0608 	and.w	r6, r6, r8
 8011c02:	4006      	ands	r6, r0
 8011c04:	7a21      	ldrb	r1, [r4, #8]
 8011c06:	4628      	mov	r0, r5
 8011c08:	f7f9 f85a 	bl	800acc0 <ucdr_serialize_bool>
 8011c0c:	7a23      	ldrb	r3, [r4, #8]
 8011c0e:	b2f7      	uxtb	r7, r6
 8011c10:	4606      	mov	r6, r0
 8011c12:	b96b      	cbnz	r3, 8011c30 <uxr_serialize_INFO_Payload+0x64>
 8011c14:	f894 121c 	ldrb.w	r1, [r4, #540]	@ 0x21c
 8011c18:	4628      	mov	r0, r5
 8011c1a:	f7f9 f851 	bl	800acc0 <ucdr_serialize_bool>
 8011c1e:	f894 321c 	ldrb.w	r3, [r4, #540]	@ 0x21c
 8011c22:	4030      	ands	r0, r6
 8011c24:	b2c6      	uxtb	r6, r0
 8011c26:	b983      	cbnz	r3, 8011c4a <uxr_serialize_INFO_Payload+0x7e>
 8011c28:	ea06 0007 	and.w	r0, r6, r7
 8011c2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c30:	7b21      	ldrb	r1, [r4, #12]
 8011c32:	4628      	mov	r0, r5
 8011c34:	f7f9 f872 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011c38:	b188      	cbz	r0, 8011c5e <uxr_serialize_INFO_Payload+0x92>
 8011c3a:	f104 010c 	add.w	r1, r4, #12
 8011c3e:	4628      	mov	r0, r5
 8011c40:	f7ff faf2 	bl	8011228 <uxr_serialize_ObjectVariant.part.0>
 8011c44:	4030      	ands	r0, r6
 8011c46:	b2c6      	uxtb	r6, r0
 8011c48:	e7e4      	b.n	8011c14 <uxr_serialize_INFO_Payload+0x48>
 8011c4a:	f504 7108 	add.w	r1, r4, #544	@ 0x220
 8011c4e:	4628      	mov	r0, r5
 8011c50:	f7ff fdb2 	bl	80117b8 <uxr_serialize_ActivityInfoVariant>
 8011c54:	4006      	ands	r6, r0
 8011c56:	ea06 0007 	and.w	r0, r6, r7
 8011c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011c5e:	4606      	mov	r6, r0
 8011c60:	e7d8      	b.n	8011c14 <uxr_serialize_INFO_Payload+0x48>
 8011c62:	bf00      	nop

08011c64 <uxr_serialize_READ_DATA_Payload>:
 8011c64:	b570      	push	{r4, r5, r6, lr}
 8011c66:	2202      	movs	r2, #2
 8011c68:	4605      	mov	r5, r0
 8011c6a:	460e      	mov	r6, r1
 8011c6c:	f004 f94a 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011c70:	2202      	movs	r2, #2
 8011c72:	18b1      	adds	r1, r6, r2
 8011c74:	4604      	mov	r4, r0
 8011c76:	4628      	mov	r0, r5
 8011c78:	f004 f944 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011c7c:	1d31      	adds	r1, r6, #4
 8011c7e:	4004      	ands	r4, r0
 8011c80:	4628      	mov	r0, r5
 8011c82:	f7ff fe5d 	bl	8011940 <uxr_serialize_ReadSpecification>
 8011c86:	b2e4      	uxtb	r4, r4
 8011c88:	4020      	ands	r0, r4
 8011c8a:	bd70      	pop	{r4, r5, r6, pc}

08011c8c <uxr_serialize_WRITE_DATA_Payload_Data>:
 8011c8c:	b570      	push	{r4, r5, r6, lr}
 8011c8e:	2202      	movs	r2, #2
 8011c90:	4605      	mov	r5, r0
 8011c92:	460e      	mov	r6, r1
 8011c94:	f004 f936 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011c98:	2202      	movs	r2, #2
 8011c9a:	4604      	mov	r4, r0
 8011c9c:	18b1      	adds	r1, r6, r2
 8011c9e:	4628      	mov	r0, r5
 8011ca0:	f004 f930 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011ca4:	4020      	ands	r0, r4
 8011ca6:	b2c0      	uxtb	r0, r0
 8011ca8:	bd70      	pop	{r4, r5, r6, pc}
 8011caa:	bf00      	nop

08011cac <uxr_serialize_ACKNACK_Payload>:
 8011cac:	b570      	push	{r4, r5, r6, lr}
 8011cae:	460c      	mov	r4, r1
 8011cb0:	460e      	mov	r6, r1
 8011cb2:	f834 1b02 	ldrh.w	r1, [r4], #2
 8011cb6:	4605      	mov	r5, r0
 8011cb8:	f7f9 f85c 	bl	800ad74 <ucdr_serialize_uint16_t>
 8011cbc:	2202      	movs	r2, #2
 8011cbe:	4621      	mov	r1, r4
 8011cc0:	4604      	mov	r4, r0
 8011cc2:	4628      	mov	r0, r5
 8011cc4:	f004 f91e 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011cc8:	7931      	ldrb	r1, [r6, #4]
 8011cca:	4004      	ands	r4, r0
 8011ccc:	4628      	mov	r0, r5
 8011cce:	f7f9 f825 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011cd2:	b2e4      	uxtb	r4, r4
 8011cd4:	4020      	ands	r0, r4
 8011cd6:	bd70      	pop	{r4, r5, r6, pc}

08011cd8 <uxr_deserialize_ACKNACK_Payload>:
 8011cd8:	b570      	push	{r4, r5, r6, lr}
 8011cda:	4605      	mov	r5, r0
 8011cdc:	460e      	mov	r6, r1
 8011cde:	f7f9 f949 	bl	800af74 <ucdr_deserialize_uint16_t>
 8011ce2:	2202      	movs	r2, #2
 8011ce4:	18b1      	adds	r1, r6, r2
 8011ce6:	4604      	mov	r4, r0
 8011ce8:	4628      	mov	r0, r5
 8011cea:	f004 f96f 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011cee:	1d31      	adds	r1, r6, #4
 8011cf0:	4004      	ands	r4, r0
 8011cf2:	4628      	mov	r0, r5
 8011cf4:	f7f9 f828 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011cf8:	b2e4      	uxtb	r4, r4
 8011cfa:	4020      	ands	r0, r4
 8011cfc:	bd70      	pop	{r4, r5, r6, pc}
 8011cfe:	bf00      	nop

08011d00 <uxr_serialize_HEARTBEAT_Payload>:
 8011d00:	b570      	push	{r4, r5, r6, lr}
 8011d02:	460d      	mov	r5, r1
 8011d04:	8809      	ldrh	r1, [r1, #0]
 8011d06:	4606      	mov	r6, r0
 8011d08:	f7f9 f834 	bl	800ad74 <ucdr_serialize_uint16_t>
 8011d0c:	8869      	ldrh	r1, [r5, #2]
 8011d0e:	4604      	mov	r4, r0
 8011d10:	4630      	mov	r0, r6
 8011d12:	f7f9 f82f 	bl	800ad74 <ucdr_serialize_uint16_t>
 8011d16:	7929      	ldrb	r1, [r5, #4]
 8011d18:	4004      	ands	r4, r0
 8011d1a:	4630      	mov	r0, r6
 8011d1c:	f7f8 fffe 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011d20:	b2e4      	uxtb	r4, r4
 8011d22:	4020      	ands	r0, r4
 8011d24:	bd70      	pop	{r4, r5, r6, pc}
 8011d26:	bf00      	nop

08011d28 <uxr_deserialize_HEARTBEAT_Payload>:
 8011d28:	b570      	push	{r4, r5, r6, lr}
 8011d2a:	4605      	mov	r5, r0
 8011d2c:	460e      	mov	r6, r1
 8011d2e:	f7f9 f921 	bl	800af74 <ucdr_deserialize_uint16_t>
 8011d32:	1cb1      	adds	r1, r6, #2
 8011d34:	4604      	mov	r4, r0
 8011d36:	4628      	mov	r0, r5
 8011d38:	f7f9 f91c 	bl	800af74 <ucdr_deserialize_uint16_t>
 8011d3c:	1d31      	adds	r1, r6, #4
 8011d3e:	4004      	ands	r4, r0
 8011d40:	4628      	mov	r0, r5
 8011d42:	f7f9 f801 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011d46:	b2e4      	uxtb	r4, r4
 8011d48:	4020      	ands	r0, r4
 8011d4a:	bd70      	pop	{r4, r5, r6, pc}

08011d4c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 8011d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011d50:	4605      	mov	r5, r0
 8011d52:	460e      	mov	r6, r1
 8011d54:	f7f9 feaa 	bl	800baac <ucdr_deserialize_int32_t>
 8011d58:	1d31      	adds	r1, r6, #4
 8011d5a:	4607      	mov	r7, r0
 8011d5c:	4628      	mov	r0, r5
 8011d5e:	f7f9 fb23 	bl	800b3a8 <ucdr_deserialize_uint32_t>
 8011d62:	f106 0108 	add.w	r1, r6, #8
 8011d66:	4680      	mov	r8, r0
 8011d68:	4628      	mov	r0, r5
 8011d6a:	f7f9 fe9f 	bl	800baac <ucdr_deserialize_int32_t>
 8011d6e:	f106 010c 	add.w	r1, r6, #12
 8011d72:	4604      	mov	r4, r0
 8011d74:	4628      	mov	r0, r5
 8011d76:	f7f9 fb17 	bl	800b3a8 <ucdr_deserialize_uint32_t>
 8011d7a:	ea07 0708 	and.w	r7, r7, r8
 8011d7e:	403c      	ands	r4, r7
 8011d80:	f106 0110 	add.w	r1, r6, #16
 8011d84:	4004      	ands	r4, r0
 8011d86:	4628      	mov	r0, r5
 8011d88:	f7f9 fe90 	bl	800baac <ucdr_deserialize_int32_t>
 8011d8c:	f106 0114 	add.w	r1, r6, #20
 8011d90:	4607      	mov	r7, r0
 8011d92:	4628      	mov	r0, r5
 8011d94:	f7f9 fb08 	bl	800b3a8 <ucdr_deserialize_uint32_t>
 8011d98:	b2e4      	uxtb	r4, r4
 8011d9a:	403c      	ands	r4, r7
 8011d9c:	4020      	ands	r0, r4
 8011d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011da2:	bf00      	nop

08011da4 <uxr_serialize_SampleIdentity>:
 8011da4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011da8:	220c      	movs	r2, #12
 8011daa:	4604      	mov	r4, r0
 8011dac:	460d      	mov	r5, r1
 8011dae:	f004 f8a9 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011db2:	2203      	movs	r2, #3
 8011db4:	f105 010c 	add.w	r1, r5, #12
 8011db8:	4607      	mov	r7, r0
 8011dba:	4620      	mov	r0, r4
 8011dbc:	f004 f8a2 	bl	8015f04 <ucdr_serialize_array_uint8_t>
 8011dc0:	7be9      	ldrb	r1, [r5, #15]
 8011dc2:	4680      	mov	r8, r0
 8011dc4:	4620      	mov	r0, r4
 8011dc6:	f7f8 ffa9 	bl	800ad1c <ucdr_serialize_uint8_t>
 8011dca:	6929      	ldr	r1, [r5, #16]
 8011dcc:	4606      	mov	r6, r0
 8011dce:	4620      	mov	r0, r4
 8011dd0:	f7f9 fdd4 	bl	800b97c <ucdr_serialize_int32_t>
 8011dd4:	6969      	ldr	r1, [r5, #20]
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	4620      	mov	r0, r4
 8011dda:	ea07 0708 	and.w	r7, r7, r8
 8011dde:	461c      	mov	r4, r3
 8011de0:	f7f9 f9b2 	bl	800b148 <ucdr_serialize_uint32_t>
 8011de4:	403e      	ands	r6, r7
 8011de6:	4034      	ands	r4, r6
 8011de8:	4020      	ands	r0, r4
 8011dea:	b2c0      	uxtb	r0, r0
 8011dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011df0 <uxr_deserialize_SampleIdentity>:
 8011df0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011df4:	220c      	movs	r2, #12
 8011df6:	4604      	mov	r4, r0
 8011df8:	460d      	mov	r5, r1
 8011dfa:	f004 f8e7 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011dfe:	2203      	movs	r2, #3
 8011e00:	f105 010c 	add.w	r1, r5, #12
 8011e04:	4607      	mov	r7, r0
 8011e06:	4620      	mov	r0, r4
 8011e08:	f004 f8e0 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 8011e0c:	f105 010f 	add.w	r1, r5, #15
 8011e10:	4680      	mov	r8, r0
 8011e12:	4620      	mov	r0, r4
 8011e14:	f7f8 ff98 	bl	800ad48 <ucdr_deserialize_uint8_t>
 8011e18:	f105 0110 	add.w	r1, r5, #16
 8011e1c:	4606      	mov	r6, r0
 8011e1e:	4620      	mov	r0, r4
 8011e20:	f7f9 fe44 	bl	800baac <ucdr_deserialize_int32_t>
 8011e24:	f105 0114 	add.w	r1, r5, #20
 8011e28:	4603      	mov	r3, r0
 8011e2a:	4620      	mov	r0, r4
 8011e2c:	ea07 0708 	and.w	r7, r7, r8
 8011e30:	461c      	mov	r4, r3
 8011e32:	f7f9 fab9 	bl	800b3a8 <ucdr_deserialize_uint32_t>
 8011e36:	403e      	ands	r6, r7
 8011e38:	4034      	ands	r4, r6
 8011e3a:	4020      	ands	r0, r4
 8011e3c:	b2c0      	uxtb	r0, r0
 8011e3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011e42:	bf00      	nop

08011e44 <rcl_client_get_rmw_handle>:
 8011e44:	b118      	cbz	r0, 8011e4e <rcl_client_get_rmw_handle+0xa>
 8011e46:	6800      	ldr	r0, [r0, #0]
 8011e48:	b108      	cbz	r0, 8011e4e <rcl_client_get_rmw_handle+0xa>
 8011e4a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011e4e:	4770      	bx	lr

08011e50 <rcl_send_request>:
 8011e50:	b570      	push	{r4, r5, r6, lr}
 8011e52:	b082      	sub	sp, #8
 8011e54:	b1e8      	cbz	r0, 8011e92 <rcl_send_request+0x42>
 8011e56:	4604      	mov	r4, r0
 8011e58:	6800      	ldr	r0, [r0, #0]
 8011e5a:	b1d0      	cbz	r0, 8011e92 <rcl_send_request+0x42>
 8011e5c:	f8d0 3108 	ldr.w	r3, [r0, #264]	@ 0x108
 8011e60:	b1bb      	cbz	r3, 8011e92 <rcl_send_request+0x42>
 8011e62:	460e      	mov	r6, r1
 8011e64:	b1d1      	cbz	r1, 8011e9c <rcl_send_request+0x4c>
 8011e66:	4615      	mov	r5, r2
 8011e68:	b1c2      	cbz	r2, 8011e9c <rcl_send_request+0x4c>
 8011e6a:	2105      	movs	r1, #5
 8011e6c:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011e70:	f002 fda6 	bl	80149c0 <__atomic_load_8>
 8011e74:	6823      	ldr	r3, [r4, #0]
 8011e76:	e9c5 0100 	strd	r0, r1, [r5]
 8011e7a:	462a      	mov	r2, r5
 8011e7c:	4631      	mov	r1, r6
 8011e7e:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011e82:	f003 fc91 	bl	80157a8 <rmw_send_request>
 8011e86:	4606      	mov	r6, r0
 8011e88:	b160      	cbz	r0, 8011ea4 <rcl_send_request+0x54>
 8011e8a:	2601      	movs	r6, #1
 8011e8c:	4630      	mov	r0, r6
 8011e8e:	b002      	add	sp, #8
 8011e90:	bd70      	pop	{r4, r5, r6, pc}
 8011e92:	f44f 76fa 	mov.w	r6, #500	@ 0x1f4
 8011e96:	4630      	mov	r0, r6
 8011e98:	b002      	add	sp, #8
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	260b      	movs	r6, #11
 8011e9e:	4630      	mov	r0, r6
 8011ea0:	b002      	add	sp, #8
 8011ea2:	bd70      	pop	{r4, r5, r6, pc}
 8011ea4:	6820      	ldr	r0, [r4, #0]
 8011ea6:	2105      	movs	r1, #5
 8011ea8:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011eac:	f500 7088 	add.w	r0, r0, #272	@ 0x110
 8011eb0:	9100      	str	r1, [sp, #0]
 8011eb2:	f002 fdf1 	bl	8014a98 <__atomic_exchange_8>
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	b002      	add	sp, #8
 8011eba:	bd70      	pop	{r4, r5, r6, pc}
 8011ebc:	0000      	movs	r0, r0
	...

08011ec0 <rcl_take_response>:
 8011ec0:	b570      	push	{r4, r5, r6, lr}
 8011ec2:	468e      	mov	lr, r1
 8011ec4:	460c      	mov	r4, r1
 8011ec6:	4616      	mov	r6, r2
 8011ec8:	4605      	mov	r5, r0
 8011eca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011ece:	b08c      	sub	sp, #48	@ 0x30
 8011ed0:	f10d 0c18 	add.w	ip, sp, #24
 8011ed4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011ed8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011edc:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011ee0:	b35d      	cbz	r5, 8011f3a <rcl_take_response+0x7a>
 8011ee2:	682b      	ldr	r3, [r5, #0]
 8011ee4:	b34b      	cbz	r3, 8011f3a <rcl_take_response+0x7a>
 8011ee6:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 8011eea:	b330      	cbz	r0, 8011f3a <rcl_take_response+0x7a>
 8011eec:	b346      	cbz	r6, 8011f40 <rcl_take_response+0x80>
 8011eee:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 8011f48 <rcl_take_response+0x88>
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	f88d 3007 	strb.w	r3, [sp, #7]
 8011ef8:	4632      	mov	r2, r6
 8011efa:	f10d 0307 	add.w	r3, sp, #7
 8011efe:	a902      	add	r1, sp, #8
 8011f00:	ed8d 7b02 	vstr	d7, [sp, #8]
 8011f04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8011f08:	f003 fd56 	bl	80159b8 <rmw_take_response>
 8011f0c:	4605      	mov	r5, r0
 8011f0e:	b9c8      	cbnz	r0, 8011f44 <rcl_take_response+0x84>
 8011f10:	f89d 2007 	ldrb.w	r2, [sp, #7]
 8011f14:	f240 13f5 	movw	r3, #501	@ 0x1f5
 8011f18:	2a00      	cmp	r2, #0
 8011f1a:	bf08      	it	eq
 8011f1c:	461d      	moveq	r5, r3
 8011f1e:	f10d 0e18 	add.w	lr, sp, #24
 8011f22:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011f26:	46a4      	mov	ip, r4
 8011f28:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011f2c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8011f30:	e88c 0003 	stmia.w	ip, {r0, r1}
 8011f34:	4628      	mov	r0, r5
 8011f36:	b00c      	add	sp, #48	@ 0x30
 8011f38:	bd70      	pop	{r4, r5, r6, pc}
 8011f3a:	f44f 75fa 	mov.w	r5, #500	@ 0x1f4
 8011f3e:	e7ee      	b.n	8011f1e <rcl_take_response+0x5e>
 8011f40:	250b      	movs	r5, #11
 8011f42:	e7ec      	b.n	8011f1e <rcl_take_response+0x5e>
 8011f44:	2501      	movs	r5, #1
 8011f46:	e7ea      	b.n	8011f1e <rcl_take_response+0x5e>
	...

08011f50 <rcl_client_is_valid>:
 8011f50:	b130      	cbz	r0, 8011f60 <rcl_client_is_valid+0x10>
 8011f52:	6800      	ldr	r0, [r0, #0]
 8011f54:	b120      	cbz	r0, 8011f60 <rcl_client_is_valid+0x10>
 8011f56:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8011f5a:	3800      	subs	r0, #0
 8011f5c:	bf18      	it	ne
 8011f5e:	2001      	movne	r0, #1
 8011f60:	4770      	bx	lr
 8011f62:	bf00      	nop

08011f64 <rcl_convert_rmw_ret_to_rcl_ret>:
 8011f64:	280b      	cmp	r0, #11
 8011f66:	dc0d      	bgt.n	8011f84 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 8011f68:	2800      	cmp	r0, #0
 8011f6a:	db09      	blt.n	8011f80 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011f6c:	280b      	cmp	r0, #11
 8011f6e:	d807      	bhi.n	8011f80 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 8011f70:	e8df f000 	tbb	[pc, r0]
 8011f74:	07060607 	.word	0x07060607
 8011f78:	06060606 	.word	0x06060606
 8011f7c:	07070606 	.word	0x07070606
 8011f80:	2001      	movs	r0, #1
 8011f82:	4770      	bx	lr
 8011f84:	28cb      	cmp	r0, #203	@ 0xcb
 8011f86:	bf18      	it	ne
 8011f88:	2001      	movne	r0, #1
 8011f8a:	4770      	bx	lr

08011f8c <rcl_get_zero_initialized_context>:
 8011f8c:	4a03      	ldr	r2, [pc, #12]	@ (8011f9c <rcl_get_zero_initialized_context+0x10>)
 8011f8e:	4603      	mov	r3, r0
 8011f90:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f94:	e883 0003 	stmia.w	r3, {r0, r1}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	4770      	bx	lr
 8011f9c:	080191d4 	.word	0x080191d4

08011fa0 <rcl_context_is_valid>:
 8011fa0:	b118      	cbz	r0, 8011faa <rcl_context_is_valid+0xa>
 8011fa2:	6840      	ldr	r0, [r0, #4]
 8011fa4:	3800      	subs	r0, #0
 8011fa6:	bf18      	it	ne
 8011fa8:	2001      	movne	r0, #1
 8011faa:	4770      	bx	lr

08011fac <__cleanup_context>:
 8011fac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fb0:	4606      	mov	r6, r0
 8011fb2:	6800      	ldr	r0, [r0, #0]
 8011fb4:	2300      	movs	r3, #0
 8011fb6:	6073      	str	r3, [r6, #4]
 8011fb8:	2800      	cmp	r0, #0
 8011fba:	d049      	beq.n	8012050 <__cleanup_context+0xa4>
 8011fbc:	6947      	ldr	r7, [r0, #20]
 8011fbe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8011fc2:	f8d0 9010 	ldr.w	r9, [r0, #16]
 8011fc6:	b137      	cbz	r7, 8011fd6 <__cleanup_context+0x2a>
 8011fc8:	3014      	adds	r0, #20
 8011fca:	f7fa f8c1 	bl	800c150 <rcl_init_options_fini>
 8011fce:	4607      	mov	r7, r0
 8011fd0:	2800      	cmp	r0, #0
 8011fd2:	d144      	bne.n	801205e <__cleanup_context+0xb2>
 8011fd4:	6830      	ldr	r0, [r6, #0]
 8011fd6:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8011fd8:	b143      	cbz	r3, 8011fec <__cleanup_context+0x40>
 8011fda:	3028      	adds	r0, #40	@ 0x28
 8011fdc:	f7fb fc7c 	bl	800d8d8 <rmw_context_fini>
 8011fe0:	b118      	cbz	r0, 8011fea <__cleanup_context+0x3e>
 8011fe2:	2f00      	cmp	r7, #0
 8011fe4:	d03e      	beq.n	8012064 <__cleanup_context+0xb8>
 8011fe6:	f7fb f9af 	bl	800d348 <rcutils_reset_error>
 8011fea:	6830      	ldr	r0, [r6, #0]
 8011fec:	6a03      	ldr	r3, [r0, #32]
 8011fee:	b1db      	cbz	r3, 8012028 <__cleanup_context+0x7c>
 8011ff0:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 8011ff4:	2a01      	cmp	r2, #1
 8011ff6:	f17c 0100 	sbcs.w	r1, ip, #0
 8011ffa:	db11      	blt.n	8012020 <__cleanup_context+0x74>
 8011ffc:	2400      	movs	r4, #0
 8011ffe:	4625      	mov	r5, r4
 8012000:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8012004:	4649      	mov	r1, r9
 8012006:	b1b8      	cbz	r0, 8012038 <__cleanup_context+0x8c>
 8012008:	47c0      	blx	r8
 801200a:	6833      	ldr	r3, [r6, #0]
 801200c:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 8012010:	3401      	adds	r4, #1
 8012012:	f145 0500 	adc.w	r5, r5, #0
 8012016:	4294      	cmp	r4, r2
 8012018:	eb75 010c 	sbcs.w	r1, r5, ip
 801201c:	6a1b      	ldr	r3, [r3, #32]
 801201e:	dbef      	blt.n	8012000 <__cleanup_context+0x54>
 8012020:	4618      	mov	r0, r3
 8012022:	4649      	mov	r1, r9
 8012024:	47c0      	blx	r8
 8012026:	6830      	ldr	r0, [r6, #0]
 8012028:	4649      	mov	r1, r9
 801202a:	47c0      	blx	r8
 801202c:	2300      	movs	r3, #0
 801202e:	e9c6 3300 	strd	r3, r3, [r6]
 8012032:	4638      	mov	r0, r7
 8012034:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012038:	3401      	adds	r4, #1
 801203a:	f145 0500 	adc.w	r5, r5, #0
 801203e:	4294      	cmp	r4, r2
 8012040:	eb75 010c 	sbcs.w	r1, r5, ip
 8012044:	dbdc      	blt.n	8012000 <__cleanup_context+0x54>
 8012046:	4618      	mov	r0, r3
 8012048:	4649      	mov	r1, r9
 801204a:	47c0      	blx	r8
 801204c:	6830      	ldr	r0, [r6, #0]
 801204e:	e7eb      	b.n	8012028 <__cleanup_context+0x7c>
 8012050:	4607      	mov	r7, r0
 8012052:	2300      	movs	r3, #0
 8012054:	e9c6 3300 	strd	r3, r3, [r6]
 8012058:	4638      	mov	r0, r7
 801205a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801205e:	f7fb f973 	bl	800d348 <rcutils_reset_error>
 8012062:	e7b7      	b.n	8011fd4 <__cleanup_context+0x28>
 8012064:	f7ff ff7e 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 8012068:	4607      	mov	r7, r0
 801206a:	e7bc      	b.n	8011fe6 <__cleanup_context+0x3a>

0801206c <rcl_init>:
 801206c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012070:	1e05      	subs	r5, r0, #0
 8012072:	b09e      	sub	sp, #120	@ 0x78
 8012074:	460e      	mov	r6, r1
 8012076:	4690      	mov	r8, r2
 8012078:	461f      	mov	r7, r3
 801207a:	f340 809c 	ble.w	80121b6 <rcl_init+0x14a>
 801207e:	2900      	cmp	r1, #0
 8012080:	f000 809c 	beq.w	80121bc <rcl_init+0x150>
 8012084:	f1a1 0e04 	sub.w	lr, r1, #4
 8012088:	f04f 0c00 	mov.w	ip, #0
 801208c:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 8012090:	f10c 0c01 	add.w	ip, ip, #1
 8012094:	2c00      	cmp	r4, #0
 8012096:	f000 8091 	beq.w	80121bc <rcl_init+0x150>
 801209a:	4565      	cmp	r5, ip
 801209c:	d1f6      	bne.n	801208c <rcl_init+0x20>
 801209e:	f1b8 0f00 	cmp.w	r8, #0
 80120a2:	f000 808b 	beq.w	80121bc <rcl_init+0x150>
 80120a6:	f8d8 4000 	ldr.w	r4, [r8]
 80120aa:	2c00      	cmp	r4, #0
 80120ac:	f000 8086 	beq.w	80121bc <rcl_init+0x150>
 80120b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120b2:	f10d 0c64 	add.w	ip, sp, #100	@ 0x64
 80120b6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80120ba:	6823      	ldr	r3, [r4, #0]
 80120bc:	f8cc 3000 	str.w	r3, [ip]
 80120c0:	a819      	add	r0, sp, #100	@ 0x64
 80120c2:	f7fb f91b 	bl	800d2fc <rcutils_allocator_is_valid>
 80120c6:	2800      	cmp	r0, #0
 80120c8:	d078      	beq.n	80121bc <rcl_init+0x150>
 80120ca:	2f00      	cmp	r7, #0
 80120cc:	d076      	beq.n	80121bc <rcl_init+0x150>
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d178      	bne.n	80121c6 <rcl_init+0x15a>
 80120d4:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 80120d8:	2178      	movs	r1, #120	@ 0x78
 80120da:	2001      	movs	r0, #1
 80120dc:	4798      	blx	r3
 80120de:	4604      	mov	r4, r0
 80120e0:	6038      	str	r0, [r7, #0]
 80120e2:	2800      	cmp	r0, #0
 80120e4:	f000 80b6 	beq.w	8012254 <rcl_init+0x1e8>
 80120e8:	a802      	add	r0, sp, #8
 80120ea:	f002 ffb9 	bl	8015060 <rmw_get_zero_initialized_context>
 80120ee:	a902      	add	r1, sp, #8
 80120f0:	f104 0028 	add.w	r0, r4, #40	@ 0x28
 80120f4:	2250      	movs	r2, #80	@ 0x50
 80120f6:	ac19      	add	r4, sp, #100	@ 0x64
 80120f8:	f005 fe07 	bl	8017d0a <memcpy>
 80120fc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80120fe:	f8d7 e000 	ldr.w	lr, [r7]
 8012102:	46f4      	mov	ip, lr
 8012104:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012108:	6823      	ldr	r3, [r4, #0]
 801210a:	f8cc 3000 	str.w	r3, [ip]
 801210e:	f10e 0114 	add.w	r1, lr, #20
 8012112:	4640      	mov	r0, r8
 8012114:	f7fa f846 	bl	800c1a4 <rcl_init_options_copy>
 8012118:	4604      	mov	r4, r0
 801211a:	2800      	cmp	r0, #0
 801211c:	d144      	bne.n	80121a8 <rcl_init+0x13c>
 801211e:	f8d7 9000 	ldr.w	r9, [r7]
 8012122:	ea4f 78e5 	mov.w	r8, r5, asr #31
 8012126:	f8c9 0020 	str.w	r0, [r9, #32]
 801212a:	f8c9 5018 	str.w	r5, [r9, #24]
 801212e:	f8c9 801c 	str.w	r8, [r9, #28]
 8012132:	2d00      	cmp	r5, #0
 8012134:	d04e      	beq.n	80121d4 <rcl_init+0x168>
 8012136:	2e00      	cmp	r6, #0
 8012138:	d04c      	beq.n	80121d4 <rcl_init+0x168>
 801213a:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	@ 0x70
 801213e:	2104      	movs	r1, #4
 8012140:	4628      	mov	r0, r5
 8012142:	4798      	blx	r3
 8012144:	f8c9 0020 	str.w	r0, [r9, #32]
 8012148:	f8d7 9000 	ldr.w	r9, [r7]
 801214c:	f8d9 3020 	ldr.w	r3, [r9, #32]
 8012150:	46ca      	mov	sl, r9
 8012152:	b343      	cbz	r3, 80121a6 <rcl_init+0x13a>
 8012154:	2d01      	cmp	r5, #1
 8012156:	f178 0300 	sbcs.w	r3, r8, #0
 801215a:	db3b      	blt.n	80121d4 <rcl_init+0x168>
 801215c:	2400      	movs	r4, #0
 801215e:	3e04      	subs	r6, #4
 8012160:	46a1      	mov	r9, r4
 8012162:	e00b      	b.n	801217c <rcl_init+0x110>
 8012164:	6831      	ldr	r1, [r6, #0]
 8012166:	f005 fdd0 	bl	8017d0a <memcpy>
 801216a:	3401      	adds	r4, #1
 801216c:	f149 0900 	adc.w	r9, r9, #0
 8012170:	45c8      	cmp	r8, r9
 8012172:	bf08      	it	eq
 8012174:	42a5      	cmpeq	r5, r4
 8012176:	d02b      	beq.n	80121d0 <rcl_init+0x164>
 8012178:	f8d7 a000 	ldr.w	sl, [r7]
 801217c:	f856 0f04 	ldr.w	r0, [r6, #4]!
 8012180:	f7ee f858 	bl	8000234 <strlen>
 8012184:	1c42      	adds	r2, r0, #1
 8012186:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8012188:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801218a:	f8da a020 	ldr.w	sl, [sl, #32]
 801218e:	9201      	str	r2, [sp, #4]
 8012190:	4610      	mov	r0, r2
 8012192:	4798      	blx	r3
 8012194:	683b      	ldr	r3, [r7, #0]
 8012196:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 801219a:	6a1b      	ldr	r3, [r3, #32]
 801219c:	9a01      	ldr	r2, [sp, #4]
 801219e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 80121a2:	2800      	cmp	r0, #0
 80121a4:	d1de      	bne.n	8012164 <rcl_init+0xf8>
 80121a6:	240a      	movs	r4, #10
 80121a8:	4638      	mov	r0, r7
 80121aa:	f7ff feff 	bl	8011fac <__cleanup_context>
 80121ae:	4620      	mov	r0, r4
 80121b0:	b01e      	add	sp, #120	@ 0x78
 80121b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121b6:	2900      	cmp	r1, #0
 80121b8:	f43f af71 	beq.w	801209e <rcl_init+0x32>
 80121bc:	240b      	movs	r4, #11
 80121be:	4620      	mov	r0, r4
 80121c0:	b01e      	add	sp, #120	@ 0x78
 80121c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121c6:	2464      	movs	r4, #100	@ 0x64
 80121c8:	4620      	mov	r0, r4
 80121ca:	b01e      	add	sp, #120	@ 0x78
 80121cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80121d0:	f8d7 9000 	ldr.w	r9, [r7]
 80121d4:	4926      	ldr	r1, [pc, #152]	@ (8012270 <rcl_init+0x204>)
 80121d6:	680b      	ldr	r3, [r1, #0]
 80121d8:	3301      	adds	r3, #1
 80121da:	d036      	beq.n	801224a <rcl_init+0x1de>
 80121dc:	600b      	str	r3, [r1, #0]
 80121de:	461a      	mov	r2, r3
 80121e0:	2400      	movs	r4, #0
 80121e2:	f8d9 0014 	ldr.w	r0, [r9, #20]
 80121e6:	607b      	str	r3, [r7, #4]
 80121e8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80121ea:	3301      	adds	r3, #1
 80121ec:	e9c0 2406 	strd	r2, r4, [r0, #24]
 80121f0:	d034      	beq.n	801225c <rcl_init+0x1f0>
 80121f2:	f890 3030 	ldrb.w	r3, [r0, #48]	@ 0x30
 80121f6:	b93b      	cbnz	r3, 8012208 <rcl_init+0x19c>
 80121f8:	3030      	adds	r0, #48	@ 0x30
 80121fa:	f000 f83b 	bl	8012274 <rcl_get_localhost_only>
 80121fe:	4604      	mov	r4, r0
 8012200:	2800      	cmp	r0, #0
 8012202:	d1d1      	bne.n	80121a8 <rcl_init+0x13c>
 8012204:	683b      	ldr	r3, [r7, #0]
 8012206:	6958      	ldr	r0, [r3, #20]
 8012208:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 801220a:	aa18      	add	r2, sp, #96	@ 0x60
 801220c:	a917      	add	r1, sp, #92	@ 0x5c
 801220e:	f001 f871 	bl	80132f4 <rcl_validate_enclave_name>
 8012212:	4604      	mov	r4, r0
 8012214:	2800      	cmp	r0, #0
 8012216:	d1c7      	bne.n	80121a8 <rcl_init+0x13c>
 8012218:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801221a:	b9eb      	cbnz	r3, 8012258 <rcl_init+0x1ec>
 801221c:	6839      	ldr	r1, [r7, #0]
 801221e:	694b      	ldr	r3, [r1, #20]
 8012220:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8012222:	f103 0228 	add.w	r2, r3, #40	@ 0x28
 8012226:	f000 fb3f 	bl	80128a8 <rcl_get_security_options_from_environment>
 801222a:	4604      	mov	r4, r0
 801222c:	2800      	cmp	r0, #0
 801222e:	d1bb      	bne.n	80121a8 <rcl_init+0x13c>
 8012230:	6839      	ldr	r1, [r7, #0]
 8012232:	6948      	ldr	r0, [r1, #20]
 8012234:	3128      	adds	r1, #40	@ 0x28
 8012236:	3018      	adds	r0, #24
 8012238:	f7fb fa18 	bl	800d66c <rmw_init>
 801223c:	4604      	mov	r4, r0
 801223e:	2800      	cmp	r0, #0
 8012240:	d0bd      	beq.n	80121be <rcl_init+0x152>
 8012242:	f7ff fe8f 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 8012246:	4604      	mov	r4, r0
 8012248:	e7ae      	b.n	80121a8 <rcl_init+0x13c>
 801224a:	2201      	movs	r2, #1
 801224c:	461c      	mov	r4, r3
 801224e:	600a      	str	r2, [r1, #0]
 8012250:	4613      	mov	r3, r2
 8012252:	e7c6      	b.n	80121e2 <rcl_init+0x176>
 8012254:	240a      	movs	r4, #10
 8012256:	e7b2      	b.n	80121be <rcl_init+0x152>
 8012258:	2401      	movs	r4, #1
 801225a:	e7a5      	b.n	80121a8 <rcl_init+0x13c>
 801225c:	3024      	adds	r0, #36	@ 0x24
 801225e:	f004 fcf1 	bl	8016c44 <rcl_get_default_domain_id>
 8012262:	4604      	mov	r4, r0
 8012264:	2800      	cmp	r0, #0
 8012266:	d19f      	bne.n	80121a8 <rcl_init+0x13c>
 8012268:	683b      	ldr	r3, [r7, #0]
 801226a:	6958      	ldr	r0, [r3, #20]
 801226c:	e7c1      	b.n	80121f2 <rcl_init+0x186>
 801226e:	bf00      	nop
 8012270:	2000b280 	.word	0x2000b280

08012274 <rcl_get_localhost_only>:
 8012274:	b510      	push	{r4, lr}
 8012276:	b082      	sub	sp, #8
 8012278:	2300      	movs	r3, #0
 801227a:	9301      	str	r3, [sp, #4]
 801227c:	b1b8      	cbz	r0, 80122ae <rcl_get_localhost_only+0x3a>
 801227e:	4604      	mov	r4, r0
 8012280:	a901      	add	r1, sp, #4
 8012282:	480c      	ldr	r0, [pc, #48]	@ (80122b4 <rcl_get_localhost_only+0x40>)
 8012284:	f002 fc40 	bl	8014b08 <rcutils_get_env>
 8012288:	b110      	cbz	r0, 8012290 <rcl_get_localhost_only+0x1c>
 801228a:	2001      	movs	r0, #1
 801228c:	b002      	add	sp, #8
 801228e:	bd10      	pop	{r4, pc}
 8012290:	9b01      	ldr	r3, [sp, #4]
 8012292:	b113      	cbz	r3, 801229a <rcl_get_localhost_only+0x26>
 8012294:	781a      	ldrb	r2, [r3, #0]
 8012296:	2a31      	cmp	r2, #49	@ 0x31
 8012298:	d004      	beq.n	80122a4 <rcl_get_localhost_only+0x30>
 801229a:	2302      	movs	r3, #2
 801229c:	2000      	movs	r0, #0
 801229e:	7023      	strb	r3, [r4, #0]
 80122a0:	b002      	add	sp, #8
 80122a2:	bd10      	pop	{r4, pc}
 80122a4:	785b      	ldrb	r3, [r3, #1]
 80122a6:	2b00      	cmp	r3, #0
 80122a8:	d1f7      	bne.n	801229a <rcl_get_localhost_only+0x26>
 80122aa:	2301      	movs	r3, #1
 80122ac:	e7f6      	b.n	801229c <rcl_get_localhost_only+0x28>
 80122ae:	200b      	movs	r0, #11
 80122b0:	b002      	add	sp, #8
 80122b2:	bd10      	pop	{r4, pc}
 80122b4:	080191dc 	.word	0x080191dc

080122b8 <rcl_get_zero_initialized_node>:
 80122b8:	4a03      	ldr	r2, [pc, #12]	@ (80122c8 <rcl_get_zero_initialized_node+0x10>)
 80122ba:	4603      	mov	r3, r0
 80122bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80122c0:	e883 0003 	stmia.w	r3, {r0, r1}
 80122c4:	4618      	mov	r0, r3
 80122c6:	4770      	bx	lr
 80122c8:	080191f8 	.word	0x080191f8

080122cc <rcl_node_init>:
 80122cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80122d0:	b0a9      	sub	sp, #164	@ 0xa4
 80122d2:	4604      	mov	r4, r0
 80122d4:	f8dd 80c8 	ldr.w	r8, [sp, #200]	@ 0xc8
 80122d8:	a823      	add	r0, sp, #140	@ 0x8c
 80122da:	460e      	mov	r6, r1
 80122dc:	4615      	mov	r5, r2
 80122de:	461f      	mov	r7, r3
 80122e0:	f004 ff24 	bl	801712c <rcl_guard_condition_get_default_options>
 80122e4:	f1b8 0f00 	cmp.w	r8, #0
 80122e8:	f000 80e6 	beq.w	80124b8 <rcl_node_init+0x1ec>
 80122ec:	4640      	mov	r0, r8
 80122ee:	f7fb f805 	bl	800d2fc <rcutils_allocator_is_valid>
 80122f2:	2800      	cmp	r0, #0
 80122f4:	f000 80e0 	beq.w	80124b8 <rcl_node_init+0x1ec>
 80122f8:	2e00      	cmp	r6, #0
 80122fa:	f000 80dd 	beq.w	80124b8 <rcl_node_init+0x1ec>
 80122fe:	2d00      	cmp	r5, #0
 8012300:	f000 80da 	beq.w	80124b8 <rcl_node_init+0x1ec>
 8012304:	2c00      	cmp	r4, #0
 8012306:	f000 80d7 	beq.w	80124b8 <rcl_node_init+0x1ec>
 801230a:	f8d4 9004 	ldr.w	r9, [r4, #4]
 801230e:	f1b9 0f00 	cmp.w	r9, #0
 8012312:	f040 80fd 	bne.w	8012510 <rcl_node_init+0x244>
 8012316:	2f00      	cmp	r7, #0
 8012318:	f000 80ce 	beq.w	80124b8 <rcl_node_init+0x1ec>
 801231c:	4638      	mov	r0, r7
 801231e:	f7ff fe3f 	bl	8011fa0 <rcl_context_is_valid>
 8012322:	4682      	mov	sl, r0
 8012324:	2800      	cmp	r0, #0
 8012326:	f000 80cd 	beq.w	80124c4 <rcl_node_init+0x1f8>
 801232a:	464a      	mov	r2, r9
 801232c:	a922      	add	r1, sp, #136	@ 0x88
 801232e:	4630      	mov	r0, r6
 8012330:	f8cd 9088 	str.w	r9, [sp, #136]	@ 0x88
 8012334:	f003 f812 	bl	801535c <rmw_validate_node_name>
 8012338:	4681      	mov	r9, r0
 801233a:	2800      	cmp	r0, #0
 801233c:	f040 80be 	bne.w	80124bc <rcl_node_init+0x1f0>
 8012340:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8012342:	2800      	cmp	r0, #0
 8012344:	f040 80f0 	bne.w	8012528 <rcl_node_init+0x25c>
 8012348:	4628      	mov	r0, r5
 801234a:	f7ed ff73 	bl	8000234 <strlen>
 801234e:	2800      	cmp	r0, #0
 8012350:	f040 80bb 	bne.w	80124ca <rcl_node_init+0x1fe>
 8012354:	4d7c      	ldr	r5, [pc, #496]	@ (8012548 <rcl_node_init+0x27c>)
 8012356:	a922      	add	r1, sp, #136	@ 0x88
 8012358:	2200      	movs	r2, #0
 801235a:	4628      	mov	r0, r5
 801235c:	f002 ffe0 	bl	8015320 <rmw_validate_namespace>
 8012360:	4681      	mov	r9, r0
 8012362:	2800      	cmp	r0, #0
 8012364:	f040 80aa 	bne.w	80124bc <rcl_node_init+0x1f0>
 8012368:	4682      	mov	sl, r0
 801236a:	9822      	ldr	r0, [sp, #136]	@ 0x88
 801236c:	2800      	cmp	r0, #0
 801236e:	f040 80e0 	bne.w	8012532 <rcl_node_init+0x266>
 8012372:	f8d8 3000 	ldr.w	r3, [r8]
 8012376:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801237a:	2078      	movs	r0, #120	@ 0x78
 801237c:	4798      	blx	r3
 801237e:	4681      	mov	r9, r0
 8012380:	6060      	str	r0, [r4, #4]
 8012382:	2800      	cmp	r0, #0
 8012384:	f000 80ca 	beq.w	801251c <rcl_node_init+0x250>
 8012388:	2200      	movs	r2, #0
 801238a:	2300      	movs	r3, #0
 801238c:	e9c9 231a 	strd	r2, r3, [r9, #104]	@ 0x68
 8012390:	e9c9 231c 	strd	r2, r3, [r9, #112]	@ 0x70
 8012394:	a808      	add	r0, sp, #32
 8012396:	f000 f907 	bl	80125a8 <rcl_node_get_default_options>
 801239a:	a908      	add	r1, sp, #32
 801239c:	4648      	mov	r0, r9
 801239e:	2268      	movs	r2, #104	@ 0x68
 80123a0:	f005 fcb3 	bl	8017d0a <memcpy>
 80123a4:	6861      	ldr	r1, [r4, #4]
 80123a6:	6027      	str	r7, [r4, #0]
 80123a8:	4640      	mov	r0, r8
 80123aa:	f000 f90b 	bl	80125c4 <rcl_node_options_copy>
 80123ae:	2800      	cmp	r0, #0
 80123b0:	d158      	bne.n	8012464 <rcl_node_init+0x198>
 80123b2:	4628      	mov	r0, r5
 80123b4:	f7ed ff3e 	bl	8000234 <strlen>
 80123b8:	4428      	add	r0, r5
 80123ba:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 80123be:	e9cd 5603 	strd	r5, r6, [sp, #12]
 80123c2:	2b2f      	cmp	r3, #47	@ 0x2f
 80123c4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80123c8:	9300      	str	r3, [sp, #0]
 80123ca:	bf0c      	ite	eq
 80123cc:	4b5f      	ldreq	r3, [pc, #380]	@ (801254c <rcl_node_init+0x280>)
 80123ce:	4b60      	ldrne	r3, [pc, #384]	@ (8012550 <rcl_node_init+0x284>)
 80123d0:	9302      	str	r3, [sp, #8]
 80123d2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80123d6:	9301      	str	r3, [sp, #4]
 80123d8:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80123dc:	f8d4 9004 	ldr.w	r9, [r4, #4]
 80123e0:	f002 fbba 	bl	8014b58 <rcutils_format_string_limit>
 80123e4:	6823      	ldr	r3, [r4, #0]
 80123e6:	f8c9 0074 	str.w	r0, [r9, #116]	@ 0x74
 80123ea:	6818      	ldr	r0, [r3, #0]
 80123ec:	4631      	mov	r1, r6
 80123ee:	3028      	adds	r0, #40	@ 0x28
 80123f0:	462a      	mov	r2, r5
 80123f2:	6866      	ldr	r6, [r4, #4]
 80123f4:	f7fb fb1c 	bl	800da30 <rmw_create_node>
 80123f8:	6863      	ldr	r3, [r4, #4]
 80123fa:	66b0      	str	r0, [r6, #104]	@ 0x68
 80123fc:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 80123fe:	2800      	cmp	r0, #0
 8012400:	d032      	beq.n	8012468 <rcl_node_init+0x19c>
 8012402:	f7fb fba9 	bl	800db58 <rmw_node_get_graph_guard_condition>
 8012406:	4681      	mov	r9, r0
 8012408:	b360      	cbz	r0, 8012464 <rcl_node_init+0x198>
 801240a:	f8d8 3000 	ldr.w	r3, [r8]
 801240e:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012412:	6866      	ldr	r6, [r4, #4]
 8012414:	2008      	movs	r0, #8
 8012416:	4798      	blx	r3
 8012418:	6863      	ldr	r3, [r4, #4]
 801241a:	66f0      	str	r0, [r6, #108]	@ 0x6c
 801241c:	f8d3 b06c 	ldr.w	fp, [r3, #108]	@ 0x6c
 8012420:	f1bb 0f00 	cmp.w	fp, #0
 8012424:	d020      	beq.n	8012468 <rcl_node_init+0x19c>
 8012426:	a806      	add	r0, sp, #24
 8012428:	f004 fda4 	bl	8016f74 <rcl_get_zero_initialized_guard_condition>
 801242c:	a806      	add	r0, sp, #24
 801242e:	c803      	ldmia	r0, {r0, r1}
 8012430:	6863      	ldr	r3, [r4, #4]
 8012432:	46c4      	mov	ip, r8
 8012434:	f8d3 e06c 	ldr.w	lr, [r3, #108]	@ 0x6c
 8012438:	e88b 0003 	stmia.w	fp, {r0, r1}
 801243c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012440:	ae23      	add	r6, sp, #140	@ 0x8c
 8012442:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8012444:	f8dc 3000 	ldr.w	r3, [ip]
 8012448:	6033      	str	r3, [r6, #0]
 801244a:	ab28      	add	r3, sp, #160	@ 0xa0
 801244c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 8012450:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012454:	4649      	mov	r1, r9
 8012456:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8012458:	463a      	mov	r2, r7
 801245a:	4670      	mov	r0, lr
 801245c:	f004 fde0 	bl	8017020 <rcl_guard_condition_init_from_rmw>
 8012460:	4681      	mov	r9, r0
 8012462:	b328      	cbz	r0, 80124b0 <rcl_node_init+0x1e4>
 8012464:	6863      	ldr	r3, [r4, #4]
 8012466:	b1f3      	cbz	r3, 80124a6 <rcl_node_init+0x1da>
 8012468:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 801246a:	b128      	cbz	r0, 8012478 <rcl_node_init+0x1ac>
 801246c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012470:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012474:	4798      	blx	r3
 8012476:	6863      	ldr	r3, [r4, #4]
 8012478:	6e98      	ldr	r0, [r3, #104]	@ 0x68
 801247a:	b110      	cbz	r0, 8012482 <rcl_node_init+0x1b6>
 801247c:	f7fb faf0 	bl	800da60 <rmw_destroy_node>
 8012480:	6863      	ldr	r3, [r4, #4]
 8012482:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012484:	b148      	cbz	r0, 801249a <rcl_node_init+0x1ce>
 8012486:	f004 fe2b 	bl	80170e0 <rcl_guard_condition_fini>
 801248a:	6863      	ldr	r3, [r4, #4]
 801248c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 8012490:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 8012492:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012496:	4798      	blx	r3
 8012498:	6863      	ldr	r3, [r4, #4]
 801249a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801249e:	4618      	mov	r0, r3
 80124a0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80124a4:	4798      	blx	r3
 80124a6:	2300      	movs	r3, #0
 80124a8:	e9c4 3300 	strd	r3, r3, [r4]
 80124ac:	f04f 0901 	mov.w	r9, #1
 80124b0:	f1ba 0f00 	cmp.w	sl, #0
 80124b4:	d125      	bne.n	8012502 <rcl_node_init+0x236>
 80124b6:	e001      	b.n	80124bc <rcl_node_init+0x1f0>
 80124b8:	f04f 090b 	mov.w	r9, #11
 80124bc:	4648      	mov	r0, r9
 80124be:	b029      	add	sp, #164	@ 0xa4
 80124c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124c4:	f04f 0965 	mov.w	r9, #101	@ 0x65
 80124c8:	e7f8      	b.n	80124bc <rcl_node_init+0x1f0>
 80124ca:	782b      	ldrb	r3, [r5, #0]
 80124cc:	2b2f      	cmp	r3, #47	@ 0x2f
 80124ce:	f43f af42 	beq.w	8012356 <rcl_node_init+0x8a>
 80124d2:	9503      	str	r5, [sp, #12]
 80124d4:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80124d8:	9300      	str	r3, [sp, #0]
 80124da:	4b1e      	ldr	r3, [pc, #120]	@ (8012554 <rcl_node_init+0x288>)
 80124dc:	9302      	str	r3, [sp, #8]
 80124de:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80124e2:	9301      	str	r3, [sp, #4]
 80124e4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 80124e8:	f002 fb36 	bl	8014b58 <rcutils_format_string_limit>
 80124ec:	4605      	mov	r5, r0
 80124ee:	b340      	cbz	r0, 8012542 <rcl_node_init+0x276>
 80124f0:	2200      	movs	r2, #0
 80124f2:	a922      	add	r1, sp, #136	@ 0x88
 80124f4:	9222      	str	r2, [sp, #136]	@ 0x88
 80124f6:	f002 ff13 	bl	8015320 <rmw_validate_namespace>
 80124fa:	4681      	mov	r9, r0
 80124fc:	2800      	cmp	r0, #0
 80124fe:	f43f af34 	beq.w	801236a <rcl_node_init+0x9e>
 8012502:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8012506:	f8d8 1010 	ldr.w	r1, [r8, #16]
 801250a:	4628      	mov	r0, r5
 801250c:	4798      	blx	r3
 801250e:	e7d5      	b.n	80124bc <rcl_node_init+0x1f0>
 8012510:	f04f 0964 	mov.w	r9, #100	@ 0x64
 8012514:	4648      	mov	r0, r9
 8012516:	b029      	add	sp, #164	@ 0xa4
 8012518:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801251c:	f04f 090a 	mov.w	r9, #10
 8012520:	f1ba 0f00 	cmp.w	sl, #0
 8012524:	d1ed      	bne.n	8012502 <rcl_node_init+0x236>
 8012526:	e7c9      	b.n	80124bc <rcl_node_init+0x1f0>
 8012528:	f002 ff6a 	bl	8015400 <rmw_node_name_validation_result_string>
 801252c:	f04f 09c9 	mov.w	r9, #201	@ 0xc9
 8012530:	e7c4      	b.n	80124bc <rcl_node_init+0x1f0>
 8012532:	f002 ff07 	bl	8015344 <rmw_namespace_validation_result_string>
 8012536:	f04f 09ca 	mov.w	r9, #202	@ 0xca
 801253a:	f1ba 0f00 	cmp.w	sl, #0
 801253e:	d1e0      	bne.n	8012502 <rcl_node_init+0x236>
 8012540:	e7bc      	b.n	80124bc <rcl_node_init+0x1f0>
 8012542:	f04f 090a 	mov.w	r9, #10
 8012546:	e7b9      	b.n	80124bc <rcl_node_init+0x1f0>
 8012548:	08018f88 	.word	0x08018f88
 801254c:	08018fb0 	.word	0x08018fb0
 8012550:	08018f8c 	.word	0x08018f8c
 8012554:	080191f4 	.word	0x080191f4

08012558 <rcl_node_is_valid>:
 8012558:	b130      	cbz	r0, 8012568 <rcl_node_is_valid+0x10>
 801255a:	6843      	ldr	r3, [r0, #4]
 801255c:	b123      	cbz	r3, 8012568 <rcl_node_is_valid+0x10>
 801255e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012560:	b113      	cbz	r3, 8012568 <rcl_node_is_valid+0x10>
 8012562:	6800      	ldr	r0, [r0, #0]
 8012564:	f7ff bd1c 	b.w	8011fa0 <rcl_context_is_valid>
 8012568:	2000      	movs	r0, #0
 801256a:	4770      	bx	lr

0801256c <rcl_node_get_name>:
 801256c:	b120      	cbz	r0, 8012578 <rcl_node_get_name+0xc>
 801256e:	6840      	ldr	r0, [r0, #4]
 8012570:	b110      	cbz	r0, 8012578 <rcl_node_get_name+0xc>
 8012572:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012574:	b100      	cbz	r0, 8012578 <rcl_node_get_name+0xc>
 8012576:	6880      	ldr	r0, [r0, #8]
 8012578:	4770      	bx	lr
 801257a:	bf00      	nop

0801257c <rcl_node_get_namespace>:
 801257c:	b120      	cbz	r0, 8012588 <rcl_node_get_namespace+0xc>
 801257e:	6840      	ldr	r0, [r0, #4]
 8012580:	b110      	cbz	r0, 8012588 <rcl_node_get_namespace+0xc>
 8012582:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 8012584:	b100      	cbz	r0, 8012588 <rcl_node_get_namespace+0xc>
 8012586:	68c0      	ldr	r0, [r0, #12]
 8012588:	4770      	bx	lr
 801258a:	bf00      	nop

0801258c <rcl_node_get_options>:
 801258c:	b128      	cbz	r0, 801259a <rcl_node_get_options+0xe>
 801258e:	6840      	ldr	r0, [r0, #4]
 8012590:	b118      	cbz	r0, 801259a <rcl_node_get_options+0xe>
 8012592:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8012594:	2b00      	cmp	r3, #0
 8012596:	bf08      	it	eq
 8012598:	2000      	moveq	r0, #0
 801259a:	4770      	bx	lr

0801259c <rcl_node_get_rmw_handle>:
 801259c:	b110      	cbz	r0, 80125a4 <rcl_node_get_rmw_handle+0x8>
 801259e:	6840      	ldr	r0, [r0, #4]
 80125a0:	b100      	cbz	r0, 80125a4 <rcl_node_get_rmw_handle+0x8>
 80125a2:	6e80      	ldr	r0, [r0, #104]	@ 0x68
 80125a4:	4770      	bx	lr
 80125a6:	bf00      	nop

080125a8 <rcl_node_get_default_options>:
 80125a8:	b510      	push	{r4, lr}
 80125aa:	2268      	movs	r2, #104	@ 0x68
 80125ac:	4604      	mov	r4, r0
 80125ae:	2100      	movs	r1, #0
 80125b0:	f005 fae2 	bl	8017b78 <memset>
 80125b4:	4620      	mov	r0, r4
 80125b6:	f7fa fe93 	bl	800d2e0 <rcutils_get_default_allocator>
 80125ba:	2301      	movs	r3, #1
 80125bc:	7523      	strb	r3, [r4, #20]
 80125be:	4620      	mov	r0, r4
 80125c0:	bd10      	pop	{r4, pc}
 80125c2:	bf00      	nop

080125c4 <rcl_node_options_copy>:
 80125c4:	b1d0      	cbz	r0, 80125fc <rcl_node_options_copy+0x38>
 80125c6:	b570      	push	{r4, r5, r6, lr}
 80125c8:	460c      	mov	r4, r1
 80125ca:	b1a9      	cbz	r1, 80125f8 <rcl_node_options_copy+0x34>
 80125cc:	4288      	cmp	r0, r1
 80125ce:	4684      	mov	ip, r0
 80125d0:	d012      	beq.n	80125f8 <rcl_node_options_copy+0x34>
 80125d2:	4605      	mov	r5, r0
 80125d4:	8a86      	ldrh	r6, [r0, #20]
 80125d6:	468e      	mov	lr, r1
 80125d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80125da:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 80125de:	682b      	ldr	r3, [r5, #0]
 80125e0:	f8ce 3000 	str.w	r3, [lr]
 80125e4:	f10c 0118 	add.w	r1, ip, #24
 80125e8:	2250      	movs	r2, #80	@ 0x50
 80125ea:	82a6      	strh	r6, [r4, #20]
 80125ec:	f104 0018 	add.w	r0, r4, #24
 80125f0:	f005 fb8b 	bl	8017d0a <memcpy>
 80125f4:	2000      	movs	r0, #0
 80125f6:	bd70      	pop	{r4, r5, r6, pc}
 80125f8:	200b      	movs	r0, #11
 80125fa:	bd70      	pop	{r4, r5, r6, pc}
 80125fc:	200b      	movs	r0, #11
 80125fe:	4770      	bx	lr

08012600 <rcl_node_resolve_name>:
 8012600:	b082      	sub	sp, #8
 8012602:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012606:	b091      	sub	sp, #68	@ 0x44
 8012608:	ac1a      	add	r4, sp, #104	@ 0x68
 801260a:	e884 000c 	stmia.w	r4, {r2, r3}
 801260e:	f89d 807c 	ldrb.w	r8, [sp, #124]	@ 0x7c
 8012612:	2800      	cmp	r0, #0
 8012614:	d03b      	beq.n	801268e <rcl_node_resolve_name+0x8e>
 8012616:	460c      	mov	r4, r1
 8012618:	4605      	mov	r5, r0
 801261a:	f7ff ffb7 	bl	801258c <rcl_node_get_options>
 801261e:	2800      	cmp	r0, #0
 8012620:	d037      	beq.n	8012692 <rcl_node_resolve_name+0x92>
 8012622:	4628      	mov	r0, r5
 8012624:	f7ff ffa2 	bl	801256c <rcl_node_get_name>
 8012628:	4606      	mov	r6, r0
 801262a:	4628      	mov	r0, r5
 801262c:	f7ff ffa6 	bl	801257c <rcl_node_get_namespace>
 8012630:	f10d 0e68 	add.w	lr, sp, #104	@ 0x68
 8012634:	4681      	mov	r9, r0
 8012636:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801263a:	ad0b      	add	r5, sp, #44	@ 0x2c
 801263c:	46ac      	mov	ip, r5
 801263e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012642:	f8de 3000 	ldr.w	r3, [lr]
 8012646:	f8cc 3000 	str.w	r3, [ip]
 801264a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801264c:	b1fb      	cbz	r3, 801268e <rcl_node_resolve_name+0x8e>
 801264e:	468a      	mov	sl, r1
 8012650:	f8dd b078 	ldr.w	fp, [sp, #120]	@ 0x78
 8012654:	f002 fbd8 	bl	8014e08 <rcutils_get_zero_initialized_string_map>
 8012658:	ab10      	add	r3, sp, #64	@ 0x40
 801265a:	9008      	str	r0, [sp, #32]
 801265c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 8012660:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012664:	2100      	movs	r1, #0
 8012666:	e895 000c 	ldmia.w	r5, {r2, r3}
 801266a:	a808      	add	r0, sp, #32
 801266c:	f002 fc44 	bl	8014ef8 <rcutils_string_map_init>
 8012670:	4607      	mov	r7, r0
 8012672:	b180      	cbz	r0, 8012696 <rcl_node_resolve_name+0x96>
 8012674:	f7fa fe50 	bl	800d318 <rcutils_get_error_string>
 8012678:	f7fa fe66 	bl	800d348 <rcutils_reset_error>
 801267c:	2f0a      	cmp	r7, #10
 801267e:	bf18      	it	ne
 8012680:	2701      	movne	r7, #1
 8012682:	4638      	mov	r0, r7
 8012684:	b011      	add	sp, #68	@ 0x44
 8012686:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801268a:	b002      	add	sp, #8
 801268c:	4770      	bx	lr
 801268e:	270b      	movs	r7, #11
 8012690:	e7f7      	b.n	8012682 <rcl_node_resolve_name+0x82>
 8012692:	2701      	movs	r7, #1
 8012694:	e7f5      	b.n	8012682 <rcl_node_resolve_name+0x82>
 8012696:	9009      	str	r0, [sp, #36]	@ 0x24
 8012698:	9007      	str	r0, [sp, #28]
 801269a:	a808      	add	r0, sp, #32
 801269c:	f004 fc64 	bl	8016f68 <rcl_get_default_topic_name_substitutions>
 80126a0:	4607      	mov	r7, r0
 80126a2:	b1a8      	cbz	r0, 80126d0 <rcl_node_resolve_name+0xd0>
 80126a4:	280a      	cmp	r0, #10
 80126a6:	9c07      	ldr	r4, [sp, #28]
 80126a8:	d000      	beq.n	80126ac <rcl_node_resolve_name+0xac>
 80126aa:	2701      	movs	r7, #1
 80126ac:	a808      	add	r0, sp, #32
 80126ae:	f002 fc63 	bl	8014f78 <rcutils_string_map_fini>
 80126b2:	2800      	cmp	r0, #0
 80126b4:	d13d      	bne.n	8012732 <rcl_node_resolve_name+0x132>
 80126b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80126b8:	4659      	mov	r1, fp
 80126ba:	47d0      	blx	sl
 80126bc:	4659      	mov	r1, fp
 80126be:	4620      	mov	r0, r4
 80126c0:	47d0      	blx	sl
 80126c2:	f1b8 0f00 	cmp.w	r8, #0
 80126c6:	d0dc      	beq.n	8012682 <rcl_node_resolve_name+0x82>
 80126c8:	2f67      	cmp	r7, #103	@ 0x67
 80126ca:	bf08      	it	eq
 80126cc:	2768      	moveq	r7, #104	@ 0x68
 80126ce:	e7d8      	b.n	8012682 <rcl_node_resolve_name+0x82>
 80126d0:	ab09      	add	r3, sp, #36	@ 0x24
 80126d2:	9305      	str	r3, [sp, #20]
 80126d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80126d6:	46ec      	mov	ip, sp
 80126d8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80126dc:	682b      	ldr	r3, [r5, #0]
 80126de:	f8cc 3000 	str.w	r3, [ip]
 80126e2:	464a      	mov	r2, r9
 80126e4:	4631      	mov	r1, r6
 80126e6:	4620      	mov	r0, r4
 80126e8:	ab08      	add	r3, sp, #32
 80126ea:	f004 fadf 	bl	8016cac <rcl_expand_topic_name>
 80126ee:	4607      	mov	r7, r0
 80126f0:	b9b8      	cbnz	r0, 8012722 <rcl_node_resolve_name+0x122>
 80126f2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80126f4:	9009      	str	r0, [sp, #36]	@ 0x24
 80126f6:	4602      	mov	r2, r0
 80126f8:	a90a      	add	r1, sp, #40	@ 0x28
 80126fa:	4620      	mov	r0, r4
 80126fc:	f002 fd4c 	bl	8015198 <rmw_validate_full_topic_name>
 8012700:	b988      	cbnz	r0, 8012726 <rcl_node_resolve_name+0x126>
 8012702:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8012704:	b9d5      	cbnz	r5, 801273c <rcl_node_resolve_name+0x13c>
 8012706:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8012708:	a808      	add	r0, sp, #32
 801270a:	601c      	str	r4, [r3, #0]
 801270c:	f002 fc34 	bl	8014f78 <rcutils_string_map_fini>
 8012710:	4607      	mov	r7, r0
 8012712:	b1a8      	cbz	r0, 8012740 <rcl_node_resolve_name+0x140>
 8012714:	f7fa fe00 	bl	800d318 <rcutils_get_error_string>
 8012718:	462c      	mov	r4, r5
 801271a:	f7fa fe15 	bl	800d348 <rcutils_reset_error>
 801271e:	2701      	movs	r7, #1
 8012720:	e7c9      	b.n	80126b6 <rcl_node_resolve_name+0xb6>
 8012722:	9c07      	ldr	r4, [sp, #28]
 8012724:	e7c2      	b.n	80126ac <rcl_node_resolve_name+0xac>
 8012726:	f7fa fdf7 	bl	800d318 <rcutils_get_error_string>
 801272a:	2701      	movs	r7, #1
 801272c:	f7fa fe0c 	bl	800d348 <rcutils_reset_error>
 8012730:	e7bc      	b.n	80126ac <rcl_node_resolve_name+0xac>
 8012732:	f7fa fdf1 	bl	800d318 <rcutils_get_error_string>
 8012736:	f7fa fe07 	bl	800d348 <rcutils_reset_error>
 801273a:	e7bc      	b.n	80126b6 <rcl_node_resolve_name+0xb6>
 801273c:	2767      	movs	r7, #103	@ 0x67
 801273e:	e7b5      	b.n	80126ac <rcl_node_resolve_name+0xac>
 8012740:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012742:	4659      	mov	r1, fp
 8012744:	47d0      	blx	sl
 8012746:	4659      	mov	r1, fp
 8012748:	4638      	mov	r0, r7
 801274a:	47d0      	blx	sl
 801274c:	e799      	b.n	8012682 <rcl_node_resolve_name+0x82>
 801274e:	bf00      	nop

08012750 <exact_match_lookup>:
 8012750:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012752:	f102 0708 	add.w	r7, r2, #8
 8012756:	460b      	mov	r3, r1
 8012758:	4614      	mov	r4, r2
 801275a:	4606      	mov	r6, r0
 801275c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012760:	b085      	sub	sp, #20
 8012762:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012766:	4618      	mov	r0, r3
 8012768:	4919      	ldr	r1, [pc, #100]	@ (80127d0 <exact_match_lookup+0x80>)
 801276a:	e894 000c 	ldmia.w	r4, {r2, r3}
 801276e:	f002 f9e5 	bl	8014b3c <rcutils_join_path>
 8012772:	7833      	ldrb	r3, [r6, #0]
 8012774:	2b2f      	cmp	r3, #47	@ 0x2f
 8012776:	4605      	mov	r5, r0
 8012778:	d023      	beq.n	80127c2 <exact_match_lookup+0x72>
 801277a:	f104 030c 	add.w	r3, r4, #12
 801277e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012782:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012786:	1c70      	adds	r0, r6, #1
 8012788:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801278c:	f002 f9dc 	bl	8014b48 <rcutils_to_native_path>
 8012790:	4606      	mov	r6, r0
 8012792:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 8012796:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801279a:	4631      	mov	r1, r6
 801279c:	e894 000c 	ldmia.w	r4, {r2, r3}
 80127a0:	4628      	mov	r0, r5
 80127a2:	f002 f9cb 	bl	8014b3c <rcutils_join_path>
 80127a6:	6862      	ldr	r2, [r4, #4]
 80127a8:	6921      	ldr	r1, [r4, #16]
 80127aa:	4603      	mov	r3, r0
 80127ac:	4630      	mov	r0, r6
 80127ae:	461e      	mov	r6, r3
 80127b0:	4790      	blx	r2
 80127b2:	4628      	mov	r0, r5
 80127b4:	6863      	ldr	r3, [r4, #4]
 80127b6:	6921      	ldr	r1, [r4, #16]
 80127b8:	4798      	blx	r3
 80127ba:	4635      	mov	r5, r6
 80127bc:	4628      	mov	r0, r5
 80127be:	b005      	add	sp, #20
 80127c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127c2:	7873      	ldrb	r3, [r6, #1]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d1d8      	bne.n	801277a <exact_match_lookup+0x2a>
 80127c8:	4628      	mov	r0, r5
 80127ca:	b005      	add	sp, #20
 80127cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80127ce:	bf00      	nop
 80127d0:	0801923c 	.word	0x0801923c

080127d4 <rcl_get_secure_root>:
 80127d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80127d8:	b085      	sub	sp, #20
 80127da:	b168      	cbz	r0, 80127f8 <rcl_get_secure_root+0x24>
 80127dc:	4607      	mov	r7, r0
 80127de:	4608      	mov	r0, r1
 80127e0:	460c      	mov	r4, r1
 80127e2:	f7fa fd8b 	bl	800d2fc <rcutils_allocator_is_valid>
 80127e6:	b138      	cbz	r0, 80127f8 <rcl_get_secure_root+0x24>
 80127e8:	2300      	movs	r3, #0
 80127ea:	482d      	ldr	r0, [pc, #180]	@ (80128a0 <rcl_get_secure_root+0xcc>)
 80127ec:	9303      	str	r3, [sp, #12]
 80127ee:	a903      	add	r1, sp, #12
 80127f0:	f002 f98a 	bl	8014b08 <rcutils_get_env>
 80127f4:	4605      	mov	r5, r0
 80127f6:	b120      	cbz	r0, 8012802 <rcl_get_secure_root+0x2e>
 80127f8:	2500      	movs	r5, #0
 80127fa:	4628      	mov	r0, r5
 80127fc:	b005      	add	sp, #20
 80127fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012802:	9b03      	ldr	r3, [sp, #12]
 8012804:	781a      	ldrb	r2, [r3, #0]
 8012806:	2a00      	cmp	r2, #0
 8012808:	d0f6      	beq.n	80127f8 <rcl_get_secure_root+0x24>
 801280a:	f104 090c 	add.w	r9, r4, #12
 801280e:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012812:	e88d 0003 	stmia.w	sp, {r0, r1}
 8012816:	4618      	mov	r0, r3
 8012818:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 801281c:	f002 fab6 	bl	8014d8c <rcutils_strdup>
 8012820:	4680      	mov	r8, r0
 8012822:	2800      	cmp	r0, #0
 8012824:	d0e8      	beq.n	80127f8 <rcl_get_secure_root+0x24>
 8012826:	481f      	ldr	r0, [pc, #124]	@ (80128a4 <rcl_get_secure_root+0xd0>)
 8012828:	9503      	str	r5, [sp, #12]
 801282a:	a903      	add	r1, sp, #12
 801282c:	f002 f96c 	bl	8014b08 <rcutils_get_env>
 8012830:	b160      	cbz	r0, 801284c <rcl_get_secure_root+0x78>
 8012832:	2600      	movs	r6, #0
 8012834:	6863      	ldr	r3, [r4, #4]
 8012836:	6921      	ldr	r1, [r4, #16]
 8012838:	4630      	mov	r0, r6
 801283a:	4798      	blx	r3
 801283c:	4640      	mov	r0, r8
 801283e:	6863      	ldr	r3, [r4, #4]
 8012840:	6921      	ldr	r1, [r4, #16]
 8012842:	4798      	blx	r3
 8012844:	4628      	mov	r0, r5
 8012846:	b005      	add	sp, #20
 8012848:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801284c:	9b03      	ldr	r3, [sp, #12]
 801284e:	781e      	ldrb	r6, [r3, #0]
 8012850:	b1f6      	cbz	r6, 8012890 <rcl_get_secure_root+0xbc>
 8012852:	e899 0003 	ldmia.w	r9, {r0, r1}
 8012856:	e88d 0003 	stmia.w	sp, {r0, r1}
 801285a:	4618      	mov	r0, r3
 801285c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 8012860:	f002 fa94 	bl	8014d8c <rcutils_strdup>
 8012864:	4606      	mov	r6, r0
 8012866:	2800      	cmp	r0, #0
 8012868:	d0e3      	beq.n	8012832 <rcl_get_secure_root+0x5e>
 801286a:	4622      	mov	r2, r4
 801286c:	4641      	mov	r1, r8
 801286e:	f7ff ff6f 	bl	8012750 <exact_match_lookup>
 8012872:	4605      	mov	r5, r0
 8012874:	2d00      	cmp	r5, #0
 8012876:	d0dd      	beq.n	8012834 <rcl_get_secure_root+0x60>
 8012878:	4628      	mov	r0, r5
 801287a:	f002 f95d 	bl	8014b38 <rcutils_is_directory>
 801287e:	4603      	mov	r3, r0
 8012880:	2800      	cmp	r0, #0
 8012882:	d1d7      	bne.n	8012834 <rcl_get_secure_root+0x60>
 8012884:	4628      	mov	r0, r5
 8012886:	6921      	ldr	r1, [r4, #16]
 8012888:	461d      	mov	r5, r3
 801288a:	6863      	ldr	r3, [r4, #4]
 801288c:	4798      	blx	r3
 801288e:	e7d1      	b.n	8012834 <rcl_get_secure_root+0x60>
 8012890:	4622      	mov	r2, r4
 8012892:	4638      	mov	r0, r7
 8012894:	4641      	mov	r1, r8
 8012896:	f7ff ff5b 	bl	8012750 <exact_match_lookup>
 801289a:	4605      	mov	r5, r0
 801289c:	e7ea      	b.n	8012874 <rcl_get_secure_root+0xa0>
 801289e:	bf00      	nop
 80128a0:	08019248 	.word	0x08019248
 80128a4:	08019260 	.word	0x08019260

080128a8 <rcl_get_security_options_from_environment>:
 80128a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80128ac:	b082      	sub	sp, #8
 80128ae:	2300      	movs	r3, #0
 80128b0:	4606      	mov	r6, r0
 80128b2:	460f      	mov	r7, r1
 80128b4:	4820      	ldr	r0, [pc, #128]	@ (8012938 <rcl_get_security_options_from_environment+0x90>)
 80128b6:	9301      	str	r3, [sp, #4]
 80128b8:	a901      	add	r1, sp, #4
 80128ba:	4690      	mov	r8, r2
 80128bc:	f002 f924 	bl	8014b08 <rcutils_get_env>
 80128c0:	b120      	cbz	r0, 80128cc <rcl_get_security_options_from_environment+0x24>
 80128c2:	2501      	movs	r5, #1
 80128c4:	4628      	mov	r0, r5
 80128c6:	b002      	add	sp, #8
 80128c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80128cc:	491b      	ldr	r1, [pc, #108]	@ (801293c <rcl_get_security_options_from_environment+0x94>)
 80128ce:	4604      	mov	r4, r0
 80128d0:	9801      	ldr	r0, [sp, #4]
 80128d2:	f7ed fca5 	bl	8000220 <strcmp>
 80128d6:	4605      	mov	r5, r0
 80128d8:	b9e8      	cbnz	r0, 8012916 <rcl_get_security_options_from_environment+0x6e>
 80128da:	9001      	str	r0, [sp, #4]
 80128dc:	f1b8 0f00 	cmp.w	r8, #0
 80128e0:	d020      	beq.n	8012924 <rcl_get_security_options_from_environment+0x7c>
 80128e2:	4817      	ldr	r0, [pc, #92]	@ (8012940 <rcl_get_security_options_from_environment+0x98>)
 80128e4:	a901      	add	r1, sp, #4
 80128e6:	f002 f90f 	bl	8014b08 <rcutils_get_env>
 80128ea:	2800      	cmp	r0, #0
 80128ec:	d1e9      	bne.n	80128c2 <rcl_get_security_options_from_environment+0x1a>
 80128ee:	4915      	ldr	r1, [pc, #84]	@ (8012944 <rcl_get_security_options_from_environment+0x9c>)
 80128f0:	9801      	ldr	r0, [sp, #4]
 80128f2:	f7ed fc95 	bl	8000220 <strcmp>
 80128f6:	fab0 f080 	clz	r0, r0
 80128fa:	0940      	lsrs	r0, r0, #5
 80128fc:	f888 0000 	strb.w	r0, [r8]
 8012900:	4639      	mov	r1, r7
 8012902:	4630      	mov	r0, r6
 8012904:	f7ff ff66 	bl	80127d4 <rcl_get_secure_root>
 8012908:	b170      	cbz	r0, 8012928 <rcl_get_security_options_from_environment+0x80>
 801290a:	f8c8 0004 	str.w	r0, [r8, #4]
 801290e:	4628      	mov	r0, r5
 8012910:	b002      	add	sp, #8
 8012912:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012916:	4625      	mov	r5, r4
 8012918:	4628      	mov	r0, r5
 801291a:	f888 4000 	strb.w	r4, [r8]
 801291e:	b002      	add	sp, #8
 8012920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012924:	250b      	movs	r5, #11
 8012926:	e7cd      	b.n	80128c4 <rcl_get_security_options_from_environment+0x1c>
 8012928:	f898 5000 	ldrb.w	r5, [r8]
 801292c:	f1a5 0501 	sub.w	r5, r5, #1
 8012930:	fab5 f585 	clz	r5, r5
 8012934:	096d      	lsrs	r5, r5, #5
 8012936:	e7c5      	b.n	80128c4 <rcl_get_security_options_from_environment+0x1c>
 8012938:	08019200 	.word	0x08019200
 801293c:	08019214 	.word	0x08019214
 8012940:	0801921c 	.word	0x0801921c
 8012944:	08019234 	.word	0x08019234

08012948 <rcl_service_get_rmw_handle>:
 8012948:	b118      	cbz	r0, 8012952 <rcl_service_get_rmw_handle+0xa>
 801294a:	6800      	ldr	r0, [r0, #0]
 801294c:	b108      	cbz	r0, 8012952 <rcl_service_get_rmw_handle+0xa>
 801294e:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012952:	4770      	bx	lr

08012954 <rcl_take_request>:
 8012954:	b570      	push	{r4, r5, r6, lr}
 8012956:	468e      	mov	lr, r1
 8012958:	460c      	mov	r4, r1
 801295a:	4616      	mov	r6, r2
 801295c:	4605      	mov	r5, r0
 801295e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012962:	b08c      	sub	sp, #48	@ 0x30
 8012964:	f10d 0c18 	add.w	ip, sp, #24
 8012968:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801296c:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012970:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012974:	b30d      	cbz	r5, 80129ba <rcl_take_request+0x66>
 8012976:	682b      	ldr	r3, [r5, #0]
 8012978:	b1fb      	cbz	r3, 80129ba <rcl_take_request+0x66>
 801297a:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
 801297e:	b1e0      	cbz	r0, 80129ba <rcl_take_request+0x66>
 8012980:	b336      	cbz	r6, 80129d0 <rcl_take_request+0x7c>
 8012982:	2300      	movs	r3, #0
 8012984:	f88d 3007 	strb.w	r3, [sp, #7]
 8012988:	4632      	mov	r2, r6
 801298a:	f10d 0307 	add.w	r3, sp, #7
 801298e:	a902      	add	r1, sp, #8
 8012990:	f002 ff58 	bl	8015844 <rmw_take_request>
 8012994:	4605      	mov	r5, r0
 8012996:	b198      	cbz	r0, 80129c0 <rcl_take_request+0x6c>
 8012998:	280a      	cmp	r0, #10
 801299a:	bf18      	it	ne
 801299c:	2501      	movne	r5, #1
 801299e:	f10d 0e18 	add.w	lr, sp, #24
 80129a2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80129a6:	46a4      	mov	ip, r4
 80129a8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80129ac:	e89e 0003 	ldmia.w	lr, {r0, r1}
 80129b0:	e88c 0003 	stmia.w	ip, {r0, r1}
 80129b4:	4628      	mov	r0, r5
 80129b6:	b00c      	add	sp, #48	@ 0x30
 80129b8:	bd70      	pop	{r4, r5, r6, pc}
 80129ba:	f44f 7516 	mov.w	r5, #600	@ 0x258
 80129be:	e7ee      	b.n	801299e <rcl_take_request+0x4a>
 80129c0:	f89d 2007 	ldrb.w	r2, [sp, #7]
 80129c4:	f240 2359 	movw	r3, #601	@ 0x259
 80129c8:	2a00      	cmp	r2, #0
 80129ca:	bf08      	it	eq
 80129cc:	461d      	moveq	r5, r3
 80129ce:	e7e6      	b.n	801299e <rcl_take_request+0x4a>
 80129d0:	250b      	movs	r5, #11
 80129d2:	e7e4      	b.n	801299e <rcl_take_request+0x4a>

080129d4 <rcl_send_response>:
 80129d4:	b170      	cbz	r0, 80129f4 <rcl_send_response+0x20>
 80129d6:	6800      	ldr	r0, [r0, #0]
 80129d8:	b160      	cbz	r0, 80129f4 <rcl_send_response+0x20>
 80129da:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 80129de:	b148      	cbz	r0, 80129f4 <rcl_send_response+0x20>
 80129e0:	b159      	cbz	r1, 80129fa <rcl_send_response+0x26>
 80129e2:	b510      	push	{r4, lr}
 80129e4:	b15a      	cbz	r2, 80129fe <rcl_send_response+0x2a>
 80129e6:	f002 ff8b 	bl	8015900 <rmw_send_response>
 80129ea:	b110      	cbz	r0, 80129f2 <rcl_send_response+0x1e>
 80129ec:	2802      	cmp	r0, #2
 80129ee:	bf18      	it	ne
 80129f0:	2001      	movne	r0, #1
 80129f2:	bd10      	pop	{r4, pc}
 80129f4:	f44f 7016 	mov.w	r0, #600	@ 0x258
 80129f8:	4770      	bx	lr
 80129fa:	200b      	movs	r0, #11
 80129fc:	4770      	bx	lr
 80129fe:	200b      	movs	r0, #11
 8012a00:	bd10      	pop	{r4, pc}
 8012a02:	bf00      	nop

08012a04 <rcl_service_is_valid>:
 8012a04:	b130      	cbz	r0, 8012a14 <rcl_service_is_valid+0x10>
 8012a06:	6800      	ldr	r0, [r0, #0]
 8012a08:	b120      	cbz	r0, 8012a14 <rcl_service_is_valid+0x10>
 8012a0a:	f8d0 0108 	ldr.w	r0, [r0, #264]	@ 0x108
 8012a0e:	3800      	subs	r0, #0
 8012a10:	bf18      	it	ne
 8012a12:	2001      	movne	r0, #1
 8012a14:	4770      	bx	lr
 8012a16:	bf00      	nop

08012a18 <rcl_take>:
 8012a18:	2800      	cmp	r0, #0
 8012a1a:	d04a      	beq.n	8012ab2 <rcl_take+0x9a>
 8012a1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a20:	4604      	mov	r4, r0
 8012a22:	6800      	ldr	r0, [r0, #0]
 8012a24:	b0a4      	sub	sp, #144	@ 0x90
 8012a26:	2800      	cmp	r0, #0
 8012a28:	d03b      	beq.n	8012aa2 <rcl_take+0x8a>
 8012a2a:	461f      	mov	r7, r3
 8012a2c:	f8d0 30c0 	ldr.w	r3, [r0, #192]	@ 0xc0
 8012a30:	2b00      	cmp	r3, #0
 8012a32:	d036      	beq.n	8012aa2 <rcl_take+0x8a>
 8012a34:	460e      	mov	r6, r1
 8012a36:	2900      	cmp	r1, #0
 8012a38:	d039      	beq.n	8012aae <rcl_take+0x96>
 8012a3a:	4615      	mov	r5, r2
 8012a3c:	2a00      	cmp	r2, #0
 8012a3e:	d03c      	beq.n	8012aba <rcl_take+0xa2>
 8012a40:	a802      	add	r0, sp, #8
 8012a42:	f002 fba1 	bl	8015188 <rmw_get_zero_initialized_message_info>
 8012a46:	f10d 0c08 	add.w	ip, sp, #8
 8012a4a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a4e:	46ae      	mov	lr, r5
 8012a50:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a54:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a58:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a5c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012a60:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012a64:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8012a68:	f04f 0800 	mov.w	r8, #0
 8012a6c:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8012a70:	f88d 804f 	strb.w	r8, [sp, #79]	@ 0x4f
 8012a74:	6822      	ldr	r2, [r4, #0]
 8012a76:	462b      	mov	r3, r5
 8012a78:	f8d2 00c0 	ldr.w	r0, [r2, #192]	@ 0xc0
 8012a7c:	9700      	str	r7, [sp, #0]
 8012a7e:	f10d 024f 	add.w	r2, sp, #79	@ 0x4f
 8012a82:	4631      	mov	r1, r6
 8012a84:	f002 ffe2 	bl	8015a4c <rmw_take_with_info>
 8012a88:	4603      	mov	r3, r0
 8012a8a:	b9c0      	cbnz	r0, 8012abe <rcl_take+0xa6>
 8012a8c:	f89d 104f 	ldrb.w	r1, [sp, #79]	@ 0x4f
 8012a90:	f240 1291 	movw	r2, #401	@ 0x191
 8012a94:	2900      	cmp	r1, #0
 8012a96:	bf08      	it	eq
 8012a98:	4613      	moveq	r3, r2
 8012a9a:	4618      	mov	r0, r3
 8012a9c:	b024      	add	sp, #144	@ 0x90
 8012a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012aa6:	4618      	mov	r0, r3
 8012aa8:	b024      	add	sp, #144	@ 0x90
 8012aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aae:	230b      	movs	r3, #11
 8012ab0:	e7f3      	b.n	8012a9a <rcl_take+0x82>
 8012ab2:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8012ab6:	4618      	mov	r0, r3
 8012ab8:	4770      	bx	lr
 8012aba:	ad14      	add	r5, sp, #80	@ 0x50
 8012abc:	e7c0      	b.n	8012a40 <rcl_take+0x28>
 8012abe:	f7ff fa51 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 8012ac2:	4603      	mov	r3, r0
 8012ac4:	e7e9      	b.n	8012a9a <rcl_take+0x82>
 8012ac6:	bf00      	nop

08012ac8 <rcl_subscription_get_rmw_handle>:
 8012ac8:	b118      	cbz	r0, 8012ad2 <rcl_subscription_get_rmw_handle+0xa>
 8012aca:	6800      	ldr	r0, [r0, #0]
 8012acc:	b108      	cbz	r0, 8012ad2 <rcl_subscription_get_rmw_handle+0xa>
 8012ace:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012ad2:	4770      	bx	lr

08012ad4 <rcl_subscription_is_valid>:
 8012ad4:	b130      	cbz	r0, 8012ae4 <rcl_subscription_is_valid+0x10>
 8012ad6:	6800      	ldr	r0, [r0, #0]
 8012ad8:	b120      	cbz	r0, 8012ae4 <rcl_subscription_is_valid+0x10>
 8012ada:	f8d0 00c0 	ldr.w	r0, [r0, #192]	@ 0xc0
 8012ade:	3800      	subs	r0, #0
 8012ae0:	bf18      	it	ne
 8012ae2:	2001      	movne	r0, #1
 8012ae4:	4770      	bx	lr
 8012ae6:	bf00      	nop

08012ae8 <rcl_get_system_time>:
 8012ae8:	4608      	mov	r0, r1
 8012aea:	f7fa bc49 	b.w	800d380 <rcutils_system_time_now>
 8012aee:	bf00      	nop

08012af0 <rcl_get_steady_time>:
 8012af0:	4608      	mov	r0, r1
 8012af2:	f7fa bc6d 	b.w	800d3d0 <rcutils_steady_time_now>
 8012af6:	bf00      	nop

08012af8 <rcl_get_ros_time>:
 8012af8:	7a03      	ldrb	r3, [r0, #8]
 8012afa:	b510      	push	{r4, lr}
 8012afc:	460c      	mov	r4, r1
 8012afe:	b133      	cbz	r3, 8012b0e <rcl_get_ros_time+0x16>
 8012b00:	2105      	movs	r1, #5
 8012b02:	f001 ff5d 	bl	80149c0 <__atomic_load_8>
 8012b06:	e9c4 0100 	strd	r0, r1, [r4]
 8012b0a:	2000      	movs	r0, #0
 8012b0c:	bd10      	pop	{r4, pc}
 8012b0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8012b12:	4608      	mov	r0, r1
 8012b14:	f7fa bc34 	b.w	800d380 <rcutils_system_time_now>

08012b18 <rcl_clock_init>:
 8012b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012b1a:	4605      	mov	r5, r0
 8012b1c:	4610      	mov	r0, r2
 8012b1e:	4614      	mov	r4, r2
 8012b20:	460e      	mov	r6, r1
 8012b22:	f7fa fbeb 	bl	800d2fc <rcutils_allocator_is_valid>
 8012b26:	b128      	cbz	r0, 8012b34 <rcl_clock_init+0x1c>
 8012b28:	2d03      	cmp	r5, #3
 8012b2a:	d803      	bhi.n	8012b34 <rcl_clock_init+0x1c>
 8012b2c:	e8df f005 	tbb	[pc, r5]
 8012b30:	06532e1d 	.word	0x06532e1d
 8012b34:	f04f 0c0b 	mov.w	ip, #11
 8012b38:	4660      	mov	r0, ip
 8012b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b3c:	2e00      	cmp	r6, #0
 8012b3e:	d0f9      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012b40:	2c00      	cmp	r4, #0
 8012b42:	d0f7      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012b44:	2300      	movs	r3, #0
 8012b46:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012b4a:	f8df e0b4 	ldr.w	lr, [pc, #180]	@ 8012c00 <rcl_clock_init+0xe8>
 8012b4e:	6133      	str	r3, [r6, #16]
 8012b50:	f106 0514 	add.w	r5, r6, #20
 8012b54:	469c      	mov	ip, r3
 8012b56:	2703      	movs	r7, #3
 8012b58:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b5a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b5c:	6823      	ldr	r3, [r4, #0]
 8012b5e:	602b      	str	r3, [r5, #0]
 8012b60:	7037      	strb	r7, [r6, #0]
 8012b62:	f8c6 e00c 	str.w	lr, [r6, #12]
 8012b66:	4660      	mov	r0, ip
 8012b68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b6a:	2e00      	cmp	r6, #0
 8012b6c:	d0e2      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012b6e:	2300      	movs	r3, #0
 8012b70:	7033      	strb	r3, [r6, #0]
 8012b72:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012b76:	e9c6 3303 	strd	r3, r3, [r6, #12]
 8012b7a:	469c      	mov	ip, r3
 8012b7c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012b7e:	f106 0514 	add.w	r5, r6, #20
 8012b82:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012b84:	6823      	ldr	r3, [r4, #0]
 8012b86:	602b      	str	r3, [r5, #0]
 8012b88:	4660      	mov	r0, ip
 8012b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012b8c:	2e00      	cmp	r6, #0
 8012b8e:	d0d1      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012b90:	2c00      	cmp	r4, #0
 8012b92:	d0cf      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012b94:	2700      	movs	r7, #0
 8012b96:	7037      	strb	r7, [r6, #0]
 8012b98:	46a4      	mov	ip, r4
 8012b9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012b9e:	f106 0514 	add.w	r5, r6, #20
 8012ba2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 8012ba6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 8012baa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8012bac:	f8dc 3000 	ldr.w	r3, [ip]
 8012bb0:	602b      	str	r3, [r5, #0]
 8012bb2:	6921      	ldr	r1, [r4, #16]
 8012bb4:	6823      	ldr	r3, [r4, #0]
 8012bb6:	2010      	movs	r0, #16
 8012bb8:	4798      	blx	r3
 8012bba:	6130      	str	r0, [r6, #16]
 8012bbc:	b1d0      	cbz	r0, 8012bf4 <rcl_clock_init+0xdc>
 8012bbe:	2200      	movs	r2, #0
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	e9c0 2300 	strd	r2, r3, [r0]
 8012bc6:	2301      	movs	r3, #1
 8012bc8:	7207      	strb	r7, [r0, #8]
 8012bca:	4a0c      	ldr	r2, [pc, #48]	@ (8012bfc <rcl_clock_init+0xe4>)
 8012bcc:	7033      	strb	r3, [r6, #0]
 8012bce:	46bc      	mov	ip, r7
 8012bd0:	60f2      	str	r2, [r6, #12]
 8012bd2:	4660      	mov	r0, ip
 8012bd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8012bd6:	2e00      	cmp	r6, #0
 8012bd8:	d0ac      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012bda:	2c00      	cmp	r4, #0
 8012bdc:	d0aa      	beq.n	8012b34 <rcl_clock_init+0x1c>
 8012bde:	2300      	movs	r3, #0
 8012be0:	e9c6 3301 	strd	r3, r3, [r6, #4]
 8012be4:	f8df e01c 	ldr.w	lr, [pc, #28]	@ 8012c04 <rcl_clock_init+0xec>
 8012be8:	6133      	str	r3, [r6, #16]
 8012bea:	f106 0514 	add.w	r5, r6, #20
 8012bee:	469c      	mov	ip, r3
 8012bf0:	2702      	movs	r7, #2
 8012bf2:	e7b1      	b.n	8012b58 <rcl_clock_init+0x40>
 8012bf4:	f04f 0c0a 	mov.w	ip, #10
 8012bf8:	e79e      	b.n	8012b38 <rcl_clock_init+0x20>
 8012bfa:	bf00      	nop
 8012bfc:	08012af9 	.word	0x08012af9
 8012c00:	08012af1 	.word	0x08012af1
 8012c04:	08012ae9 	.word	0x08012ae9

08012c08 <rcl_clock_get_now>:
 8012c08:	b140      	cbz	r0, 8012c1c <rcl_clock_get_now+0x14>
 8012c0a:	b139      	cbz	r1, 8012c1c <rcl_clock_get_now+0x14>
 8012c0c:	7803      	ldrb	r3, [r0, #0]
 8012c0e:	b11b      	cbz	r3, 8012c18 <rcl_clock_get_now+0x10>
 8012c10:	68c3      	ldr	r3, [r0, #12]
 8012c12:	b10b      	cbz	r3, 8012c18 <rcl_clock_get_now+0x10>
 8012c14:	6900      	ldr	r0, [r0, #16]
 8012c16:	4718      	bx	r3
 8012c18:	2001      	movs	r0, #1
 8012c1a:	4770      	bx	lr
 8012c1c:	200b      	movs	r0, #11
 8012c1e:	4770      	bx	lr

08012c20 <rcl_clock_add_jump_callback>:
 8012c20:	b082      	sub	sp, #8
 8012c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012c26:	a906      	add	r1, sp, #24
 8012c28:	e881 000c 	stmia.w	r1, {r2, r3}
 8012c2c:	e9dd 650c 	ldrd	r6, r5, [sp, #48]	@ 0x30
 8012c30:	b320      	cbz	r0, 8012c7c <rcl_clock_add_jump_callback+0x5c>
 8012c32:	4604      	mov	r4, r0
 8012c34:	3014      	adds	r0, #20
 8012c36:	f7fa fb61 	bl	800d2fc <rcutils_allocator_is_valid>
 8012c3a:	b1f8      	cbz	r0, 8012c7c <rcl_clock_add_jump_callback+0x5c>
 8012c3c:	b1f6      	cbz	r6, 8012c7c <rcl_clock_add_jump_callback+0x5c>
 8012c3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c40:	2b00      	cmp	r3, #0
 8012c42:	db1b      	blt.n	8012c7c <rcl_clock_add_jump_callback+0x5c>
 8012c44:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8012c48:	2a01      	cmp	r2, #1
 8012c4a:	f173 0300 	sbcs.w	r3, r3, #0
 8012c4e:	da15      	bge.n	8012c7c <rcl_clock_add_jump_callback+0x5c>
 8012c50:	e9d4 0701 	ldrd	r0, r7, [r4, #4]
 8012c54:	2f00      	cmp	r7, #0
 8012c56:	d042      	beq.n	8012cde <rcl_clock_add_jump_callback+0xbe>
 8012c58:	2300      	movs	r3, #0
 8012c5a:	4602      	mov	r2, r0
 8012c5c:	e003      	b.n	8012c66 <rcl_clock_add_jump_callback+0x46>
 8012c5e:	42bb      	cmp	r3, r7
 8012c60:	f102 0228 	add.w	r2, r2, #40	@ 0x28
 8012c64:	d011      	beq.n	8012c8a <rcl_clock_add_jump_callback+0x6a>
 8012c66:	6811      	ldr	r1, [r2, #0]
 8012c68:	42b1      	cmp	r1, r6
 8012c6a:	f103 0301 	add.w	r3, r3, #1
 8012c6e:	d1f6      	bne.n	8012c5e <rcl_clock_add_jump_callback+0x3e>
 8012c70:	6a11      	ldr	r1, [r2, #32]
 8012c72:	42a9      	cmp	r1, r5
 8012c74:	d1f3      	bne.n	8012c5e <rcl_clock_add_jump_callback+0x3e>
 8012c76:	f04f 0e01 	mov.w	lr, #1
 8012c7a:	e001      	b.n	8012c80 <rcl_clock_add_jump_callback+0x60>
 8012c7c:	f04f 0e0b 	mov.w	lr, #11
 8012c80:	4670      	mov	r0, lr
 8012c82:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012c86:	b002      	add	sp, #8
 8012c88:	4770      	bx	lr
 8012c8a:	3301      	adds	r3, #1
 8012c8c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8012c90:	00d9      	lsls	r1, r3, #3
 8012c92:	69e3      	ldr	r3, [r4, #28]
 8012c94:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8012c96:	4798      	blx	r3
 8012c98:	b1f0      	cbz	r0, 8012cd8 <rcl_clock_add_jump_callback+0xb8>
 8012c9a:	68a3      	ldr	r3, [r4, #8]
 8012c9c:	6060      	str	r0, [r4, #4]
 8012c9e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 8012ca2:	f10d 0c18 	add.w	ip, sp, #24
 8012ca6:	f840 6032 	str.w	r6, [r0, r2, lsl #3]
 8012caa:	f103 0801 	add.w	r8, r3, #1
 8012cae:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 8012cb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8012cb6:	f106 0708 	add.w	r7, r6, #8
 8012cba:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8012cbc:	e89c 0003 	ldmia.w	ip, {r0, r1}
 8012cc0:	f04f 0e00 	mov.w	lr, #0
 8012cc4:	e887 0003 	stmia.w	r7, {r0, r1}
 8012cc8:	6235      	str	r5, [r6, #32]
 8012cca:	4670      	mov	r0, lr
 8012ccc:	f8c4 8008 	str.w	r8, [r4, #8]
 8012cd0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012cd4:	b002      	add	sp, #8
 8012cd6:	4770      	bx	lr
 8012cd8:	f04f 0e0a 	mov.w	lr, #10
 8012cdc:	e7d0      	b.n	8012c80 <rcl_clock_add_jump_callback+0x60>
 8012cde:	2128      	movs	r1, #40	@ 0x28
 8012ce0:	e7d7      	b.n	8012c92 <rcl_clock_add_jump_callback+0x72>
 8012ce2:	bf00      	nop

08012ce4 <rcl_clock_remove_jump_callback>:
 8012ce4:	2800      	cmp	r0, #0
 8012ce6:	d057      	beq.n	8012d98 <rcl_clock_remove_jump_callback+0xb4>
 8012ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012cec:	4605      	mov	r5, r0
 8012cee:	3014      	adds	r0, #20
 8012cf0:	4688      	mov	r8, r1
 8012cf2:	4692      	mov	sl, r2
 8012cf4:	f7fa fb02 	bl	800d2fc <rcutils_allocator_is_valid>
 8012cf8:	2800      	cmp	r0, #0
 8012cfa:	d03b      	beq.n	8012d74 <rcl_clock_remove_jump_callback+0x90>
 8012cfc:	f1b8 0f00 	cmp.w	r8, #0
 8012d00:	d038      	beq.n	8012d74 <rcl_clock_remove_jump_callback+0x90>
 8012d02:	68ae      	ldr	r6, [r5, #8]
 8012d04:	b166      	cbz	r6, 8012d20 <rcl_clock_remove_jump_callback+0x3c>
 8012d06:	f8d5 9004 	ldr.w	r9, [r5, #4]
 8012d0a:	eb06 0786 	add.w	r7, r6, r6, lsl #2
 8012d0e:	eb09 07c7 	add.w	r7, r9, r7, lsl #3
 8012d12:	464c      	mov	r4, r9
 8012d14:	6823      	ldr	r3, [r4, #0]
 8012d16:	4543      	cmp	r3, r8
 8012d18:	d005      	beq.n	8012d26 <rcl_clock_remove_jump_callback+0x42>
 8012d1a:	3428      	adds	r4, #40	@ 0x28
 8012d1c:	42a7      	cmp	r7, r4
 8012d1e:	d1f9      	bne.n	8012d14 <rcl_clock_remove_jump_callback+0x30>
 8012d20:	2001      	movs	r0, #1
 8012d22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d26:	6a23      	ldr	r3, [r4, #32]
 8012d28:	3428      	adds	r4, #40	@ 0x28
 8012d2a:	42bc      	cmp	r4, r7
 8012d2c:	d02d      	beq.n	8012d8a <rcl_clock_remove_jump_callback+0xa6>
 8012d2e:	4553      	cmp	r3, sl
 8012d30:	d1f0      	bne.n	8012d14 <rcl_clock_remove_jump_callback+0x30>
 8012d32:	46a6      	mov	lr, r4
 8012d34:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d38:	f1a4 0c28 	sub.w	ip, r4, #40	@ 0x28
 8012d3c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d40:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012d44:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012d48:	e89e 0003 	ldmia.w	lr, {r0, r1}
 8012d4c:	3428      	adds	r4, #40	@ 0x28
 8012d4e:	42a7      	cmp	r7, r4
 8012d50:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012d54:	d1ed      	bne.n	8012d32 <rcl_clock_remove_jump_callback+0x4e>
 8012d56:	3e01      	subs	r6, #1
 8012d58:	60ae      	str	r6, [r5, #8]
 8012d5a:	b176      	cbz	r6, 8012d7a <rcl_clock_remove_jump_callback+0x96>
 8012d5c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
 8012d60:	69eb      	ldr	r3, [r5, #28]
 8012d62:	6a6a      	ldr	r2, [r5, #36]	@ 0x24
 8012d64:	00f1      	lsls	r1, r6, #3
 8012d66:	4648      	mov	r0, r9
 8012d68:	4798      	blx	r3
 8012d6a:	b1b8      	cbz	r0, 8012d9c <rcl_clock_remove_jump_callback+0xb8>
 8012d6c:	6068      	str	r0, [r5, #4]
 8012d6e:	2000      	movs	r0, #0
 8012d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d74:	200b      	movs	r0, #11
 8012d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d7a:	4648      	mov	r0, r9
 8012d7c:	69ab      	ldr	r3, [r5, #24]
 8012d7e:	6a69      	ldr	r1, [r5, #36]	@ 0x24
 8012d80:	4798      	blx	r3
 8012d82:	606e      	str	r6, [r5, #4]
 8012d84:	4630      	mov	r0, r6
 8012d86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d8a:	4553      	cmp	r3, sl
 8012d8c:	d1c8      	bne.n	8012d20 <rcl_clock_remove_jump_callback+0x3c>
 8012d8e:	3e01      	subs	r6, #1
 8012d90:	60ae      	str	r6, [r5, #8]
 8012d92:	2e00      	cmp	r6, #0
 8012d94:	d1e2      	bne.n	8012d5c <rcl_clock_remove_jump_callback+0x78>
 8012d96:	e7f0      	b.n	8012d7a <rcl_clock_remove_jump_callback+0x96>
 8012d98:	200b      	movs	r0, #11
 8012d9a:	4770      	bx	lr
 8012d9c:	200a      	movs	r0, #10
 8012d9e:	e7ea      	b.n	8012d76 <rcl_clock_remove_jump_callback+0x92>

08012da0 <_rcl_timer_time_jump>:
 8012da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012da4:	4605      	mov	r5, r0
 8012da6:	b084      	sub	sp, #16
 8012da8:	4614      	mov	r4, r2
 8012daa:	b131      	cbz	r1, 8012dba <_rcl_timer_time_jump+0x1a>
 8012dac:	7803      	ldrb	r3, [r0, #0]
 8012dae:	3b02      	subs	r3, #2
 8012db0:	2b01      	cmp	r3, #1
 8012db2:	d93f      	bls.n	8012e34 <_rcl_timer_time_jump+0x94>
 8012db4:	b004      	add	sp, #16
 8012db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012dba:	6813      	ldr	r3, [r2, #0]
 8012dbc:	a902      	add	r1, sp, #8
 8012dbe:	6818      	ldr	r0, [r3, #0]
 8012dc0:	f7ff ff22 	bl	8012c08 <rcl_clock_get_now>
 8012dc4:	2800      	cmp	r0, #0
 8012dc6:	d1f5      	bne.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012dc8:	6820      	ldr	r0, [r4, #0]
 8012dca:	2105      	movs	r1, #5
 8012dcc:	3020      	adds	r0, #32
 8012dce:	f001 fdf7 	bl	80149c0 <__atomic_load_8>
 8012dd2:	6823      	ldr	r3, [r4, #0]
 8012dd4:	4681      	mov	r9, r0
 8012dd6:	4688      	mov	r8, r1
 8012dd8:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 8012ddc:	2105      	movs	r1, #5
 8012dde:	f001 fdef 	bl	80149c0 <__atomic_load_8>
 8012de2:	4607      	mov	r7, r0
 8012de4:	6820      	ldr	r0, [r4, #0]
 8012de6:	460e      	mov	r6, r1
 8012de8:	3018      	adds	r0, #24
 8012dea:	2105      	movs	r1, #5
 8012dec:	f001 fde8 	bl	80149c0 <__atomic_load_8>
 8012df0:	782b      	ldrb	r3, [r5, #0]
 8012df2:	9a02      	ldr	r2, [sp, #8]
 8012df4:	3b02      	subs	r3, #2
 8012df6:	2b01      	cmp	r3, #1
 8012df8:	460d      	mov	r5, r1
 8012dfa:	9b03      	ldr	r3, [sp, #12]
 8012dfc:	4682      	mov	sl, r0
 8012dfe:	d937      	bls.n	8012e70 <_rcl_timer_time_jump+0xd0>
 8012e00:	42ba      	cmp	r2, r7
 8012e02:	eb73 0106 	sbcs.w	r1, r3, r6
 8012e06:	da5f      	bge.n	8012ec8 <_rcl_timer_time_jump+0x128>
 8012e08:	454a      	cmp	r2, r9
 8012e0a:	eb73 0108 	sbcs.w	r1, r3, r8
 8012e0e:	dad1      	bge.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e10:	6820      	ldr	r0, [r4, #0]
 8012e12:	eb1a 0202 	adds.w	r2, sl, r2
 8012e16:	eb43 0305 	adc.w	r3, r3, r5
 8012e1a:	2505      	movs	r5, #5
 8012e1c:	3028      	adds	r0, #40	@ 0x28
 8012e1e:	9500      	str	r5, [sp, #0]
 8012e20:	f001 fe04 	bl	8014a2c <__atomic_store_8>
 8012e24:	6820      	ldr	r0, [r4, #0]
 8012e26:	9500      	str	r5, [sp, #0]
 8012e28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e2c:	3020      	adds	r0, #32
 8012e2e:	f001 fdfd 	bl	8014a2c <__atomic_store_8>
 8012e32:	e7bf      	b.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e34:	6813      	ldr	r3, [r2, #0]
 8012e36:	a902      	add	r1, sp, #8
 8012e38:	6818      	ldr	r0, [r3, #0]
 8012e3a:	f7ff fee5 	bl	8012c08 <rcl_clock_get_now>
 8012e3e:	2800      	cmp	r0, #0
 8012e40:	d1b8      	bne.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012e46:	4313      	orrs	r3, r2
 8012e48:	d0b4      	beq.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e4a:	6820      	ldr	r0, [r4, #0]
 8012e4c:	2105      	movs	r1, #5
 8012e4e:	3028      	adds	r0, #40	@ 0x28
 8012e50:	f001 fdb6 	bl	80149c0 <__atomic_load_8>
 8012e54:	9d02      	ldr	r5, [sp, #8]
 8012e56:	9b03      	ldr	r3, [sp, #12]
 8012e58:	4602      	mov	r2, r0
 8012e5a:	6820      	ldr	r0, [r4, #0]
 8012e5c:	1b52      	subs	r2, r2, r5
 8012e5e:	f04f 0405 	mov.w	r4, #5
 8012e62:	9400      	str	r4, [sp, #0]
 8012e64:	eb61 0303 	sbc.w	r3, r1, r3
 8012e68:	3030      	adds	r0, #48	@ 0x30
 8012e6a:	f001 fddf 	bl	8014a2c <__atomic_store_8>
 8012e6e:	e7a1      	b.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e70:	4313      	orrs	r3, r2
 8012e72:	d09f      	beq.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e74:	6820      	ldr	r0, [r4, #0]
 8012e76:	f04f 0805 	mov.w	r8, #5
 8012e7a:	2300      	movs	r3, #0
 8012e7c:	f8cd 8000 	str.w	r8, [sp]
 8012e80:	3030      	adds	r0, #48	@ 0x30
 8012e82:	2200      	movs	r2, #0
 8012e84:	f001 fe08 	bl	8014a98 <__atomic_exchange_8>
 8012e88:	ea51 0300 	orrs.w	r3, r1, r0
 8012e8c:	4606      	mov	r6, r0
 8012e8e:	460f      	mov	r7, r1
 8012e90:	d090      	beq.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012e92:	9a02      	ldr	r2, [sp, #8]
 8012e94:	9b03      	ldr	r3, [sp, #12]
 8012e96:	f8cd 8000 	str.w	r8, [sp]
 8012e9a:	1a12      	subs	r2, r2, r0
 8012e9c:	6820      	ldr	r0, [r4, #0]
 8012e9e:	eb63 0301 	sbc.w	r3, r3, r1
 8012ea2:	eb12 020a 	adds.w	r2, r2, sl
 8012ea6:	eb43 0305 	adc.w	r3, r3, r5
 8012eaa:	3028      	adds	r0, #40	@ 0x28
 8012eac:	f001 fdbe 	bl	8014a2c <__atomic_store_8>
 8012eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012eb4:	f8cd 8000 	str.w	r8, [sp]
 8012eb8:	6820      	ldr	r0, [r4, #0]
 8012eba:	1b92      	subs	r2, r2, r6
 8012ebc:	eb63 0307 	sbc.w	r3, r3, r7
 8012ec0:	3020      	adds	r0, #32
 8012ec2:	f001 fdb3 	bl	8014a2c <__atomic_store_8>
 8012ec6:	e775      	b.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012ec8:	6820      	ldr	r0, [r4, #0]
 8012eca:	3008      	adds	r0, #8
 8012ecc:	f004 f94a 	bl	8017164 <rcl_trigger_guard_condition>
 8012ed0:	e770      	b.n	8012db4 <_rcl_timer_time_jump+0x14>
 8012ed2:	bf00      	nop

08012ed4 <rcl_get_zero_initialized_timer>:
 8012ed4:	4b01      	ldr	r3, [pc, #4]	@ (8012edc <rcl_get_zero_initialized_timer+0x8>)
 8012ed6:	6818      	ldr	r0, [r3, #0]
 8012ed8:	4770      	bx	lr
 8012eda:	bf00      	nop
 8012edc:	08019280 	.word	0x08019280

08012ee0 <rcl_timer_init>:
 8012ee0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012ee4:	b0aa      	sub	sp, #168	@ 0xa8
 8012ee6:	4604      	mov	r4, r0
 8012ee8:	a835      	add	r0, sp, #212	@ 0xd4
 8012eea:	e9dd 8732 	ldrd	r8, r7, [sp, #200]	@ 0xc8
 8012eee:	460d      	mov	r5, r1
 8012ef0:	4692      	mov	sl, r2
 8012ef2:	f7fa fa03 	bl	800d2fc <rcutils_allocator_is_valid>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	d064      	beq.n	8012fc4 <rcl_timer_init+0xe4>
 8012efa:	2c00      	cmp	r4, #0
 8012efc:	d062      	beq.n	8012fc4 <rcl_timer_init+0xe4>
 8012efe:	2d00      	cmp	r5, #0
 8012f00:	d060      	beq.n	8012fc4 <rcl_timer_init+0xe4>
 8012f02:	2f00      	cmp	r7, #0
 8012f04:	db5e      	blt.n	8012fc4 <rcl_timer_init+0xe4>
 8012f06:	6823      	ldr	r3, [r4, #0]
 8012f08:	b123      	cbz	r3, 8012f14 <rcl_timer_init+0x34>
 8012f0a:	2664      	movs	r6, #100	@ 0x64
 8012f0c:	4630      	mov	r0, r6
 8012f0e:	b02a      	add	sp, #168	@ 0xa8
 8012f10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012f14:	a908      	add	r1, sp, #32
 8012f16:	4628      	mov	r0, r5
 8012f18:	f7ff fe76 	bl	8012c08 <rcl_clock_get_now>
 8012f1c:	4606      	mov	r6, r0
 8012f1e:	2800      	cmp	r0, #0
 8012f20:	d1f4      	bne.n	8012f0c <rcl_timer_init+0x2c>
 8012f22:	ae06      	add	r6, sp, #24
 8012f24:	4630      	mov	r0, r6
 8012f26:	e9cd 5a16 	strd	r5, sl, [sp, #88]	@ 0x58
 8012f2a:	f004 f823 	bl	8016f74 <rcl_get_zero_initialized_guard_condition>
 8012f2e:	e896 0003 	ldmia.w	r6, {r0, r1}
 8012f32:	f10d 0960 	add.w	r9, sp, #96	@ 0x60
 8012f36:	ae0b      	add	r6, sp, #44	@ 0x2c
 8012f38:	e889 0003 	stmia.w	r9, {r0, r1}
 8012f3c:	4630      	mov	r0, r6
 8012f3e:	f004 f8f5 	bl	801712c <rcl_guard_condition_get_default_options>
 8012f42:	ab0d      	add	r3, sp, #52	@ 0x34
 8012f44:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012f48:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8012f4c:	4651      	mov	r1, sl
 8012f4e:	e896 000c 	ldmia.w	r6, {r2, r3}
 8012f52:	4648      	mov	r0, r9
 8012f54:	f004 f818 	bl	8016f88 <rcl_guard_condition_init>
 8012f58:	4606      	mov	r6, r0
 8012f5a:	2800      	cmp	r0, #0
 8012f5c:	d1d6      	bne.n	8012f0c <rcl_timer_init+0x2c>
 8012f5e:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8012f60:	781b      	ldrb	r3, [r3, #0]
 8012f62:	2b01      	cmp	r3, #1
 8012f64:	d033      	beq.n	8012fce <rcl_timer_init+0xee>
 8012f66:	9934      	ldr	r1, [sp, #208]	@ 0xd0
 8012f68:	911a      	str	r1, [sp, #104]	@ 0x68
 8012f6a:	4642      	mov	r2, r8
 8012f6c:	463b      	mov	r3, r7
 8012f6e:	e9cd 231c 	strd	r2, r3, [sp, #112]	@ 0x70
 8012f72:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8012f76:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8013028 <rcl_timer_init+0x148>
 8012f7a:	eb12 0008 	adds.w	r0, r2, r8
 8012f7e:	eb47 0103 	adc.w	r1, r7, r3
 8012f82:	f10d 0ed4 	add.w	lr, sp, #212	@ 0xd4
 8012f86:	ed8d 7b22 	vstr	d7, [sp, #136]	@ 0x88
 8012f8a:	e9cd 231e 	strd	r2, r3, [sp, #120]	@ 0x78
 8012f8e:	e9cd 0120 	strd	r0, r1, [sp, #128]	@ 0x80
 8012f92:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012f96:	f10d 0c94 	add.w	ip, sp, #148	@ 0x94
 8012f9a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012f9e:	f8de 3000 	ldr.w	r3, [lr]
 8012fa2:	f8cc 3000 	str.w	r3, [ip]
 8012fa6:	f04f 0a00 	mov.w	sl, #0
 8012faa:	4619      	mov	r1, r3
 8012fac:	f88d a090 	strb.w	sl, [sp, #144]	@ 0x90
 8012fb0:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8012fb2:	2050      	movs	r0, #80	@ 0x50
 8012fb4:	4798      	blx	r3
 8012fb6:	6020      	str	r0, [r4, #0]
 8012fb8:	b358      	cbz	r0, 8013012 <rcl_timer_init+0x132>
 8012fba:	2250      	movs	r2, #80	@ 0x50
 8012fbc:	a916      	add	r1, sp, #88	@ 0x58
 8012fbe:	f004 fea4 	bl	8017d0a <memcpy>
 8012fc2:	e7a3      	b.n	8012f0c <rcl_timer_init+0x2c>
 8012fc4:	260b      	movs	r6, #11
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	b02a      	add	sp, #168	@ 0xa8
 8012fca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fce:	2001      	movs	r0, #1
 8012fd0:	2100      	movs	r1, #0
 8012fd2:	e9cd 0112 	strd	r0, r1, [sp, #72]	@ 0x48
 8012fd6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fda:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8012fde:	e9cd 0114 	strd	r0, r1, [sp, #80]	@ 0x50
 8012fe2:	4a13      	ldr	r2, [pc, #76]	@ (8013030 <rcl_timer_init+0x150>)
 8012fe4:	f88d 3040 	strb.w	r3, [sp, #64]	@ 0x40
 8012fe8:	9405      	str	r4, [sp, #20]
 8012fea:	9204      	str	r2, [sp, #16]
 8012fec:	ab12      	add	r3, sp, #72	@ 0x48
 8012fee:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012ff0:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8012ff4:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 8012ff8:	e89c 000c 	ldmia.w	ip, {r2, r3}
 8012ffc:	4628      	mov	r0, r5
 8012ffe:	f7ff fe0f 	bl	8012c20 <rcl_clock_add_jump_callback>
 8013002:	4682      	mov	sl, r0
 8013004:	2800      	cmp	r0, #0
 8013006:	d0ae      	beq.n	8012f66 <rcl_timer_init+0x86>
 8013008:	4648      	mov	r0, r9
 801300a:	f004 f869 	bl	80170e0 <rcl_guard_condition_fini>
 801300e:	4656      	mov	r6, sl
 8013010:	e77c      	b.n	8012f0c <rcl_timer_init+0x2c>
 8013012:	4648      	mov	r0, r9
 8013014:	f004 f864 	bl	80170e0 <rcl_guard_condition_fini>
 8013018:	4905      	ldr	r1, [pc, #20]	@ (8013030 <rcl_timer_init+0x150>)
 801301a:	4622      	mov	r2, r4
 801301c:	4628      	mov	r0, r5
 801301e:	f7ff fe61 	bl	8012ce4 <rcl_clock_remove_jump_callback>
 8013022:	260a      	movs	r6, #10
 8013024:	e772      	b.n	8012f0c <rcl_timer_init+0x2c>
 8013026:	bf00      	nop
	...
 8013030:	08012da1 	.word	0x08012da1

08013034 <rcl_timer_call>:
 8013034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013038:	b087      	sub	sp, #28
 801303a:	2800      	cmp	r0, #0
 801303c:	d06d      	beq.n	801311a <rcl_timer_call+0xe6>
 801303e:	6803      	ldr	r3, [r0, #0]
 8013040:	4604      	mov	r4, r0
 8013042:	2b00      	cmp	r3, #0
 8013044:	d063      	beq.n	801310e <rcl_timer_call+0xda>
 8013046:	f3bf 8f5b 	dmb	ish
 801304a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801304e:	f3bf 8f5b 	dmb	ish
 8013052:	2b00      	cmp	r3, #0
 8013054:	d150      	bne.n	80130f8 <rcl_timer_call+0xc4>
 8013056:	6803      	ldr	r3, [r0, #0]
 8013058:	a904      	add	r1, sp, #16
 801305a:	6818      	ldr	r0, [r3, #0]
 801305c:	f7ff fdd4 	bl	8012c08 <rcl_clock_get_now>
 8013060:	4605      	mov	r5, r0
 8013062:	2800      	cmp	r0, #0
 8013064:	d14a      	bne.n	80130fc <rcl_timer_call+0xc8>
 8013066:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801306a:	2b00      	cmp	r3, #0
 801306c:	db4a      	blt.n	8013104 <rcl_timer_call+0xd0>
 801306e:	6820      	ldr	r0, [r4, #0]
 8013070:	f04f 0a05 	mov.w	sl, #5
 8013074:	f8cd a000 	str.w	sl, [sp]
 8013078:	3020      	adds	r0, #32
 801307a:	f001 fd0d 	bl	8014a98 <__atomic_exchange_8>
 801307e:	6823      	ldr	r3, [r4, #0]
 8013080:	f3bf 8f5b 	dmb	ish
 8013084:	4680      	mov	r8, r0
 8013086:	f8d3 b010 	ldr.w	fp, [r3, #16]
 801308a:	f3bf 8f5b 	dmb	ish
 801308e:	6820      	ldr	r0, [r4, #0]
 8013090:	4689      	mov	r9, r1
 8013092:	3028      	adds	r0, #40	@ 0x28
 8013094:	4651      	mov	r1, sl
 8013096:	f001 fc93 	bl	80149c0 <__atomic_load_8>
 801309a:	4606      	mov	r6, r0
 801309c:	6820      	ldr	r0, [r4, #0]
 801309e:	460f      	mov	r7, r1
 80130a0:	3018      	adds	r0, #24
 80130a2:	4651      	mov	r1, sl
 80130a4:	f001 fc8c 	bl	80149c0 <__atomic_load_8>
 80130a8:	1836      	adds	r6, r6, r0
 80130aa:	4602      	mov	r2, r0
 80130ac:	4682      	mov	sl, r0
 80130ae:	e9dd 0c04 	ldrd	r0, ip, [sp, #16]
 80130b2:	eb47 0701 	adc.w	r7, r7, r1
 80130b6:	4286      	cmp	r6, r0
 80130b8:	460b      	mov	r3, r1
 80130ba:	eb77 010c 	sbcs.w	r1, r7, ip
 80130be:	da04      	bge.n	80130ca <rcl_timer_call+0x96>
 80130c0:	ea53 0102 	orrs.w	r1, r3, r2
 80130c4:	d12e      	bne.n	8013124 <rcl_timer_call+0xf0>
 80130c6:	4606      	mov	r6, r0
 80130c8:	4667      	mov	r7, ip
 80130ca:	6820      	ldr	r0, [r4, #0]
 80130cc:	2105      	movs	r1, #5
 80130ce:	4632      	mov	r2, r6
 80130d0:	463b      	mov	r3, r7
 80130d2:	3028      	adds	r0, #40	@ 0x28
 80130d4:	9100      	str	r1, [sp, #0]
 80130d6:	f001 fca9 	bl	8014a2c <__atomic_store_8>
 80130da:	f1bb 0f00 	cmp.w	fp, #0
 80130de:	d00d      	beq.n	80130fc <rcl_timer_call+0xc8>
 80130e0:	9a04      	ldr	r2, [sp, #16]
 80130e2:	9b05      	ldr	r3, [sp, #20]
 80130e4:	ebb2 0208 	subs.w	r2, r2, r8
 80130e8:	4620      	mov	r0, r4
 80130ea:	eb63 0309 	sbc.w	r3, r3, r9
 80130ee:	47d8      	blx	fp
 80130f0:	4628      	mov	r0, r5
 80130f2:	b007      	add	sp, #28
 80130f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80130f8:	f240 3521 	movw	r5, #801	@ 0x321
 80130fc:	4628      	mov	r0, r5
 80130fe:	b007      	add	sp, #28
 8013100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013104:	2501      	movs	r5, #1
 8013106:	4628      	mov	r0, r5
 8013108:	b007      	add	sp, #28
 801310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801310e:	f44f 7548 	mov.w	r5, #800	@ 0x320
 8013112:	4628      	mov	r0, r5
 8013114:	b007      	add	sp, #28
 8013116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801311a:	250b      	movs	r5, #11
 801311c:	4628      	mov	r0, r5
 801311e:	b007      	add	sp, #28
 8013120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013124:	1b80      	subs	r0, r0, r6
 8013126:	eb6c 0107 	sbc.w	r1, ip, r7
 801312a:	3801      	subs	r0, #1
 801312c:	f161 0100 	sbc.w	r1, r1, #0
 8013130:	e9cd 3202 	strd	r3, r2, [sp, #8]
 8013134:	f7ed fcaa 	bl	8000a8c <__aeabi_ldivmod>
 8013138:	9b02      	ldr	r3, [sp, #8]
 801313a:	3001      	adds	r0, #1
 801313c:	f141 0100 	adc.w	r1, r1, #0
 8013140:	fb00 f303 	mul.w	r3, r0, r3
 8013144:	fb01 330a 	mla	r3, r1, sl, r3
 8013148:	fba0 0a0a 	umull	r0, sl, r0, sl
 801314c:	1986      	adds	r6, r0, r6
 801314e:	4453      	add	r3, sl
 8013150:	eb43 0707 	adc.w	r7, r3, r7
 8013154:	e7b9      	b.n	80130ca <rcl_timer_call+0x96>
 8013156:	bf00      	nop

08013158 <rcl_timer_is_ready>:
 8013158:	b570      	push	{r4, r5, r6, lr}
 801315a:	b082      	sub	sp, #8
 801315c:	b378      	cbz	r0, 80131be <rcl_timer_is_ready+0x66>
 801315e:	6803      	ldr	r3, [r0, #0]
 8013160:	4604      	mov	r4, r0
 8013162:	b383      	cbz	r3, 80131c6 <rcl_timer_is_ready+0x6e>
 8013164:	460d      	mov	r5, r1
 8013166:	b351      	cbz	r1, 80131be <rcl_timer_is_ready+0x66>
 8013168:	f3bf 8f5b 	dmb	ish
 801316c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8013170:	f3bf 8f5b 	dmb	ish
 8013174:	b953      	cbnz	r3, 801318c <rcl_timer_is_ready+0x34>
 8013176:	6803      	ldr	r3, [r0, #0]
 8013178:	4669      	mov	r1, sp
 801317a:	6818      	ldr	r0, [r3, #0]
 801317c:	f7ff fd44 	bl	8012c08 <rcl_clock_get_now>
 8013180:	4606      	mov	r6, r0
 8013182:	b140      	cbz	r0, 8013196 <rcl_timer_is_ready+0x3e>
 8013184:	f240 3321 	movw	r3, #801	@ 0x321
 8013188:	4298      	cmp	r0, r3
 801318a:	d101      	bne.n	8013190 <rcl_timer_is_ready+0x38>
 801318c:	2600      	movs	r6, #0
 801318e:	702e      	strb	r6, [r5, #0]
 8013190:	4630      	mov	r0, r6
 8013192:	b002      	add	sp, #8
 8013194:	bd70      	pop	{r4, r5, r6, pc}
 8013196:	6820      	ldr	r0, [r4, #0]
 8013198:	2105      	movs	r1, #5
 801319a:	3028      	adds	r0, #40	@ 0x28
 801319c:	f001 fc10 	bl	80149c0 <__atomic_load_8>
 80131a0:	9b00      	ldr	r3, [sp, #0]
 80131a2:	1ac0      	subs	r0, r0, r3
 80131a4:	9b01      	ldr	r3, [sp, #4]
 80131a6:	eb61 0103 	sbc.w	r1, r1, r3
 80131aa:	2801      	cmp	r0, #1
 80131ac:	f171 0300 	sbcs.w	r3, r1, #0
 80131b0:	bfb4      	ite	lt
 80131b2:	2301      	movlt	r3, #1
 80131b4:	2300      	movge	r3, #0
 80131b6:	4630      	mov	r0, r6
 80131b8:	702b      	strb	r3, [r5, #0]
 80131ba:	b002      	add	sp, #8
 80131bc:	bd70      	pop	{r4, r5, r6, pc}
 80131be:	260b      	movs	r6, #11
 80131c0:	4630      	mov	r0, r6
 80131c2:	b002      	add	sp, #8
 80131c4:	bd70      	pop	{r4, r5, r6, pc}
 80131c6:	f44f 7648 	mov.w	r6, #800	@ 0x320
 80131ca:	e7e1      	b.n	8013190 <rcl_timer_is_ready+0x38>

080131cc <rcl_timer_get_time_until_next_call>:
 80131cc:	b570      	push	{r4, r5, r6, lr}
 80131ce:	b082      	sub	sp, #8
 80131d0:	b330      	cbz	r0, 8013220 <rcl_timer_get_time_until_next_call+0x54>
 80131d2:	6803      	ldr	r3, [r0, #0]
 80131d4:	4604      	mov	r4, r0
 80131d6:	b33b      	cbz	r3, 8013228 <rcl_timer_get_time_until_next_call+0x5c>
 80131d8:	460d      	mov	r5, r1
 80131da:	b309      	cbz	r1, 8013220 <rcl_timer_get_time_until_next_call+0x54>
 80131dc:	f3bf 8f5b 	dmb	ish
 80131e0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80131e4:	f3bf 8f5b 	dmb	ish
 80131e8:	b9ab      	cbnz	r3, 8013216 <rcl_timer_get_time_until_next_call+0x4a>
 80131ea:	6803      	ldr	r3, [r0, #0]
 80131ec:	4669      	mov	r1, sp
 80131ee:	6818      	ldr	r0, [r3, #0]
 80131f0:	f7ff fd0a 	bl	8012c08 <rcl_clock_get_now>
 80131f4:	4606      	mov	r6, r0
 80131f6:	b958      	cbnz	r0, 8013210 <rcl_timer_get_time_until_next_call+0x44>
 80131f8:	6820      	ldr	r0, [r4, #0]
 80131fa:	2105      	movs	r1, #5
 80131fc:	3028      	adds	r0, #40	@ 0x28
 80131fe:	f001 fbdf 	bl	80149c0 <__atomic_load_8>
 8013202:	9b00      	ldr	r3, [sp, #0]
 8013204:	1ac0      	subs	r0, r0, r3
 8013206:	9b01      	ldr	r3, [sp, #4]
 8013208:	6028      	str	r0, [r5, #0]
 801320a:	eb61 0103 	sbc.w	r1, r1, r3
 801320e:	6069      	str	r1, [r5, #4]
 8013210:	4630      	mov	r0, r6
 8013212:	b002      	add	sp, #8
 8013214:	bd70      	pop	{r4, r5, r6, pc}
 8013216:	f240 3621 	movw	r6, #801	@ 0x321
 801321a:	4630      	mov	r0, r6
 801321c:	b002      	add	sp, #8
 801321e:	bd70      	pop	{r4, r5, r6, pc}
 8013220:	260b      	movs	r6, #11
 8013222:	4630      	mov	r0, r6
 8013224:	b002      	add	sp, #8
 8013226:	bd70      	pop	{r4, r5, r6, pc}
 8013228:	f44f 7648 	mov.w	r6, #800	@ 0x320
 801322c:	e7f0      	b.n	8013210 <rcl_timer_get_time_until_next_call+0x44>
 801322e:	bf00      	nop

08013230 <rcl_timer_get_guard_condition>:
 8013230:	b130      	cbz	r0, 8013240 <rcl_timer_get_guard_condition+0x10>
 8013232:	6800      	ldr	r0, [r0, #0]
 8013234:	b120      	cbz	r0, 8013240 <rcl_timer_get_guard_condition+0x10>
 8013236:	68c3      	ldr	r3, [r0, #12]
 8013238:	b10b      	cbz	r3, 801323e <rcl_timer_get_guard_condition+0xe>
 801323a:	3008      	adds	r0, #8
 801323c:	4770      	bx	lr
 801323e:	4618      	mov	r0, r3
 8013240:	4770      	bx	lr
 8013242:	bf00      	nop

08013244 <rcl_validate_enclave_name_with_size>:
 8013244:	b378      	cbz	r0, 80132a6 <rcl_validate_enclave_name_with_size+0x62>
 8013246:	b570      	push	{r4, r5, r6, lr}
 8013248:	4615      	mov	r5, r2
 801324a:	b0c2      	sub	sp, #264	@ 0x108
 801324c:	b302      	cbz	r2, 8013290 <rcl_validate_enclave_name_with_size+0x4c>
 801324e:	461e      	mov	r6, r3
 8013250:	466a      	mov	r2, sp
 8013252:	ab01      	add	r3, sp, #4
 8013254:	460c      	mov	r4, r1
 8013256:	f002 f815 	bl	8015284 <rmw_validate_namespace_with_size>
 801325a:	4684      	mov	ip, r0
 801325c:	b9e8      	cbnz	r0, 801329a <rcl_validate_enclave_name_with_size+0x56>
 801325e:	9b00      	ldr	r3, [sp, #0]
 8013260:	b923      	cbnz	r3, 801326c <rcl_validate_enclave_name_with_size+0x28>
 8013262:	2300      	movs	r3, #0
 8013264:	602b      	str	r3, [r5, #0]
 8013266:	4660      	mov	r0, ip
 8013268:	b042      	add	sp, #264	@ 0x108
 801326a:	bd70      	pop	{r4, r5, r6, pc}
 801326c:	2b07      	cmp	r3, #7
 801326e:	d007      	beq.n	8013280 <rcl_validate_enclave_name_with_size+0x3c>
 8013270:	1e5a      	subs	r2, r3, #1
 8013272:	2a05      	cmp	r2, #5
 8013274:	d833      	bhi.n	80132de <rcl_validate_enclave_name_with_size+0x9a>
 8013276:	e8df f002 	tbb	[pc, r2]
 801327a:	2c2f      	.short	0x2c2f
 801327c:	1a232629 	.word	0x1a232629
 8013280:	2cff      	cmp	r4, #255	@ 0xff
 8013282:	d9ee      	bls.n	8013262 <rcl_validate_enclave_name_with_size+0x1e>
 8013284:	602b      	str	r3, [r5, #0]
 8013286:	2e00      	cmp	r6, #0
 8013288:	d0ed      	beq.n	8013266 <rcl_validate_enclave_name_with_size+0x22>
 801328a:	23fe      	movs	r3, #254	@ 0xfe
 801328c:	6033      	str	r3, [r6, #0]
 801328e:	e7ea      	b.n	8013266 <rcl_validate_enclave_name_with_size+0x22>
 8013290:	f04f 0c0b 	mov.w	ip, #11
 8013294:	4660      	mov	r0, ip
 8013296:	b042      	add	sp, #264	@ 0x108
 8013298:	bd70      	pop	{r4, r5, r6, pc}
 801329a:	f7fe fe63 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 801329e:	4684      	mov	ip, r0
 80132a0:	4660      	mov	r0, ip
 80132a2:	b042      	add	sp, #264	@ 0x108
 80132a4:	bd70      	pop	{r4, r5, r6, pc}
 80132a6:	f04f 0c0b 	mov.w	ip, #11
 80132aa:	4660      	mov	r0, ip
 80132ac:	4770      	bx	lr
 80132ae:	2306      	movs	r3, #6
 80132b0:	602b      	str	r3, [r5, #0]
 80132b2:	2e00      	cmp	r6, #0
 80132b4:	d0d7      	beq.n	8013266 <rcl_validate_enclave_name_with_size+0x22>
 80132b6:	9b01      	ldr	r3, [sp, #4]
 80132b8:	6033      	str	r3, [r6, #0]
 80132ba:	4660      	mov	r0, ip
 80132bc:	b042      	add	sp, #264	@ 0x108
 80132be:	bd70      	pop	{r4, r5, r6, pc}
 80132c0:	2305      	movs	r3, #5
 80132c2:	602b      	str	r3, [r5, #0]
 80132c4:	e7f5      	b.n	80132b2 <rcl_validate_enclave_name_with_size+0x6e>
 80132c6:	2304      	movs	r3, #4
 80132c8:	602b      	str	r3, [r5, #0]
 80132ca:	e7f2      	b.n	80132b2 <rcl_validate_enclave_name_with_size+0x6e>
 80132cc:	2303      	movs	r3, #3
 80132ce:	602b      	str	r3, [r5, #0]
 80132d0:	e7ef      	b.n	80132b2 <rcl_validate_enclave_name_with_size+0x6e>
 80132d2:	2302      	movs	r3, #2
 80132d4:	602b      	str	r3, [r5, #0]
 80132d6:	e7ec      	b.n	80132b2 <rcl_validate_enclave_name_with_size+0x6e>
 80132d8:	2301      	movs	r3, #1
 80132da:	602b      	str	r3, [r5, #0]
 80132dc:	e7e9      	b.n	80132b2 <rcl_validate_enclave_name_with_size+0x6e>
 80132de:	4a04      	ldr	r2, [pc, #16]	@ (80132f0 <rcl_validate_enclave_name_with_size+0xac>)
 80132e0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80132e4:	a802      	add	r0, sp, #8
 80132e6:	f001 fd25 	bl	8014d34 <rcutils_snprintf>
 80132ea:	f04f 0c01 	mov.w	ip, #1
 80132ee:	e7ba      	b.n	8013266 <rcl_validate_enclave_name_with_size+0x22>
 80132f0:	08019284 	.word	0x08019284

080132f4 <rcl_validate_enclave_name>:
 80132f4:	b168      	cbz	r0, 8013312 <rcl_validate_enclave_name+0x1e>
 80132f6:	b570      	push	{r4, r5, r6, lr}
 80132f8:	460d      	mov	r5, r1
 80132fa:	4616      	mov	r6, r2
 80132fc:	4604      	mov	r4, r0
 80132fe:	f7ec ff99 	bl	8000234 <strlen>
 8013302:	4633      	mov	r3, r6
 8013304:	4601      	mov	r1, r0
 8013306:	462a      	mov	r2, r5
 8013308:	4620      	mov	r0, r4
 801330a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801330e:	f7ff bf99 	b.w	8013244 <rcl_validate_enclave_name_with_size>
 8013312:	200b      	movs	r0, #11
 8013314:	4770      	bx	lr
 8013316:	bf00      	nop

08013318 <rcl_get_zero_initialized_wait_set>:
 8013318:	b510      	push	{r4, lr}
 801331a:	4c08      	ldr	r4, [pc, #32]	@ (801333c <rcl_get_zero_initialized_wait_set+0x24>)
 801331c:	4686      	mov	lr, r0
 801331e:	4684      	mov	ip, r0
 8013320:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013322:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013326:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013328:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801332c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801332e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8013332:	6823      	ldr	r3, [r4, #0]
 8013334:	f8cc 3000 	str.w	r3, [ip]
 8013338:	4670      	mov	r0, lr
 801333a:	bd10      	pop	{r4, pc}
 801333c:	080192e4 	.word	0x080192e4

08013340 <rcl_wait_set_is_valid>:
 8013340:	b118      	cbz	r0, 801334a <rcl_wait_set_is_valid+0xa>
 8013342:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8013344:	3800      	subs	r0, #0
 8013346:	bf18      	it	ne
 8013348:	2001      	movne	r0, #1
 801334a:	4770      	bx	lr

0801334c <rcl_wait_set_fini>:
 801334c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013350:	b082      	sub	sp, #8
 8013352:	2800      	cmp	r0, #0
 8013354:	f000 8095 	beq.w	8013482 <rcl_wait_set_fini+0x136>
 8013358:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 801335a:	4604      	mov	r4, r0
 801335c:	2e00      	cmp	r6, #0
 801335e:	f000 808c 	beq.w	801347a <rcl_wait_set_fini+0x12e>
 8013362:	6bf0      	ldr	r0, [r6, #60]	@ 0x3c
 8013364:	f002 fd48 	bl	8015df8 <rmw_destroy_wait_set>
 8013368:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801336a:	1e06      	subs	r6, r0, #0
 801336c:	bf18      	it	ne
 801336e:	f44f 7661 	movne.w	r6, #900	@ 0x384
 8013372:	2d00      	cmp	r5, #0
 8013374:	f000 8081 	beq.w	801347a <rcl_wait_set_fini+0x12e>
 8013378:	6820      	ldr	r0, [r4, #0]
 801337a:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801337e:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013380:	2700      	movs	r7, #0
 8013382:	6067      	str	r7, [r4, #4]
 8013384:	602f      	str	r7, [r5, #0]
 8013386:	b120      	cbz	r0, 8013392 <rcl_wait_set_fini+0x46>
 8013388:	9101      	str	r1, [sp, #4]
 801338a:	47c0      	blx	r8
 801338c:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801338e:	9901      	ldr	r1, [sp, #4]
 8013390:	6027      	str	r7, [r4, #0]
 8013392:	68a8      	ldr	r0, [r5, #8]
 8013394:	b120      	cbz	r0, 80133a0 <rcl_wait_set_fini+0x54>
 8013396:	47c0      	blx	r8
 8013398:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801339a:	2300      	movs	r3, #0
 801339c:	e9c5 3301 	strd	r3, r3, [r5, #4]
 80133a0:	68a0      	ldr	r0, [r4, #8]
 80133a2:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133a4:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133a6:	f04f 0800 	mov.w	r8, #0
 80133aa:	f8c4 800c 	str.w	r8, [r4, #12]
 80133ae:	f8c5 800c 	str.w	r8, [r5, #12]
 80133b2:	b128      	cbz	r0, 80133c0 <rcl_wait_set_fini+0x74>
 80133b4:	47b8      	blx	r7
 80133b6:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133b8:	f8c4 8008 	str.w	r8, [r4, #8]
 80133bc:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133be:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133c0:	6968      	ldr	r0, [r5, #20]
 80133c2:	f04f 0800 	mov.w	r8, #0
 80133c6:	f8c5 8010 	str.w	r8, [r5, #16]
 80133ca:	b128      	cbz	r0, 80133d8 <rcl_wait_set_fini+0x8c>
 80133cc:	47b8      	blx	r7
 80133ce:	f8c5 8014 	str.w	r8, [r5, #20]
 80133d2:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133d4:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133d6:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133d8:	6920      	ldr	r0, [r4, #16]
 80133da:	f04f 0800 	mov.w	r8, #0
 80133de:	f8c4 8014 	str.w	r8, [r4, #20]
 80133e2:	f8c5 8040 	str.w	r8, [r5, #64]	@ 0x40
 80133e6:	b128      	cbz	r0, 80133f4 <rcl_wait_set_fini+0xa8>
 80133e8:	47b8      	blx	r7
 80133ea:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 80133ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80133f0:	6cef      	ldr	r7, [r5, #76]	@ 0x4c
 80133f2:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 80133f4:	69a0      	ldr	r0, [r4, #24]
 80133f6:	f04f 0800 	mov.w	r8, #0
 80133fa:	f8c4 801c 	str.w	r8, [r4, #28]
 80133fe:	f8c5 8018 	str.w	r8, [r5, #24]
 8013402:	b128      	cbz	r0, 8013410 <rcl_wait_set_fini+0xc4>
 8013404:	9101      	str	r1, [sp, #4]
 8013406:	47b8      	blx	r7
 8013408:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801340a:	9901      	ldr	r1, [sp, #4]
 801340c:	f8c4 8018 	str.w	r8, [r4, #24]
 8013410:	6a28      	ldr	r0, [r5, #32]
 8013412:	b120      	cbz	r0, 801341e <rcl_wait_set_fini+0xd2>
 8013414:	47b8      	blx	r7
 8013416:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013418:	2300      	movs	r3, #0
 801341a:	e9c5 3307 	strd	r3, r3, [r5, #28]
 801341e:	6a20      	ldr	r0, [r4, #32]
 8013420:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 8013424:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013426:	2700      	movs	r7, #0
 8013428:	6267      	str	r7, [r4, #36]	@ 0x24
 801342a:	626f      	str	r7, [r5, #36]	@ 0x24
 801342c:	b120      	cbz	r0, 8013438 <rcl_wait_set_fini+0xec>
 801342e:	9101      	str	r1, [sp, #4]
 8013430:	47c0      	blx	r8
 8013432:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013434:	9901      	ldr	r1, [sp, #4]
 8013436:	6227      	str	r7, [r4, #32]
 8013438:	6ae8      	ldr	r0, [r5, #44]	@ 0x2c
 801343a:	b120      	cbz	r0, 8013446 <rcl_wait_set_fini+0xfa>
 801343c:	47c0      	blx	r8
 801343e:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013440:	2300      	movs	r3, #0
 8013442:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013446:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013448:	f8d5 804c 	ldr.w	r8, [r5, #76]	@ 0x4c
 801344c:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 801344e:	2700      	movs	r7, #0
 8013450:	62e7      	str	r7, [r4, #44]	@ 0x2c
 8013452:	632f      	str	r7, [r5, #48]	@ 0x30
 8013454:	b120      	cbz	r0, 8013460 <rcl_wait_set_fini+0x114>
 8013456:	9101      	str	r1, [sp, #4]
 8013458:	47c0      	blx	r8
 801345a:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801345c:	9901      	ldr	r1, [sp, #4]
 801345e:	62a7      	str	r7, [r4, #40]	@ 0x28
 8013460:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8013462:	b120      	cbz	r0, 801346e <rcl_wait_set_fini+0x122>
 8013464:	47c0      	blx	r8
 8013466:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 8013468:	2300      	movs	r3, #0
 801346a:	e9c5 330d 	strd	r3, r3, [r5, #52]	@ 0x34
 801346e:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 8013470:	6da9      	ldr	r1, [r5, #88]	@ 0x58
 8013472:	4628      	mov	r0, r5
 8013474:	4798      	blx	r3
 8013476:	2300      	movs	r3, #0
 8013478:	6323      	str	r3, [r4, #48]	@ 0x30
 801347a:	4630      	mov	r0, r6
 801347c:	b002      	add	sp, #8
 801347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013482:	260b      	movs	r6, #11
 8013484:	4630      	mov	r0, r6
 8013486:	b002      	add	sp, #8
 8013488:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801348c <rcl_wait_set_add_subscription>:
 801348c:	b318      	cbz	r0, 80134d6 <rcl_wait_set_add_subscription+0x4a>
 801348e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013490:	b570      	push	{r4, r5, r6, lr}
 8013492:	4604      	mov	r4, r0
 8013494:	b30b      	cbz	r3, 80134da <rcl_wait_set_add_subscription+0x4e>
 8013496:	b319      	cbz	r1, 80134e0 <rcl_wait_set_add_subscription+0x54>
 8013498:	681d      	ldr	r5, [r3, #0]
 801349a:	6840      	ldr	r0, [r0, #4]
 801349c:	4285      	cmp	r5, r0
 801349e:	d217      	bcs.n	80134d0 <rcl_wait_set_add_subscription+0x44>
 80134a0:	6820      	ldr	r0, [r4, #0]
 80134a2:	1c6e      	adds	r6, r5, #1
 80134a4:	601e      	str	r6, [r3, #0]
 80134a6:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80134aa:	b102      	cbz	r2, 80134ae <rcl_wait_set_add_subscription+0x22>
 80134ac:	6015      	str	r5, [r2, #0]
 80134ae:	4608      	mov	r0, r1
 80134b0:	f7ff fb0a 	bl	8012ac8 <rcl_subscription_get_rmw_handle>
 80134b4:	b150      	cbz	r0, 80134cc <rcl_wait_set_add_subscription+0x40>
 80134b6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80134b8:	6842      	ldr	r2, [r0, #4]
 80134ba:	689b      	ldr	r3, [r3, #8]
 80134bc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80134c0:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 80134c2:	6853      	ldr	r3, [r2, #4]
 80134c4:	3301      	adds	r3, #1
 80134c6:	2000      	movs	r0, #0
 80134c8:	6053      	str	r3, [r2, #4]
 80134ca:	bd70      	pop	{r4, r5, r6, pc}
 80134cc:	2001      	movs	r0, #1
 80134ce:	bd70      	pop	{r4, r5, r6, pc}
 80134d0:	f240 3086 	movw	r0, #902	@ 0x386
 80134d4:	bd70      	pop	{r4, r5, r6, pc}
 80134d6:	200b      	movs	r0, #11
 80134d8:	4770      	bx	lr
 80134da:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80134de:	bd70      	pop	{r4, r5, r6, pc}
 80134e0:	200b      	movs	r0, #11
 80134e2:	bd70      	pop	{r4, r5, r6, pc}

080134e4 <rcl_wait_set_clear>:
 80134e4:	2800      	cmp	r0, #0
 80134e6:	d073      	beq.n	80135d0 <rcl_wait_set_clear+0xec>
 80134e8:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80134ea:	b510      	push	{r4, lr}
 80134ec:	4604      	mov	r4, r0
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d070      	beq.n	80135d4 <rcl_wait_set_clear+0xf0>
 80134f2:	6800      	ldr	r0, [r0, #0]
 80134f4:	b138      	cbz	r0, 8013506 <rcl_wait_set_clear+0x22>
 80134f6:	6862      	ldr	r2, [r4, #4]
 80134f8:	2100      	movs	r1, #0
 80134fa:	0092      	lsls	r2, r2, #2
 80134fc:	f004 fb3c 	bl	8017b78 <memset>
 8013500:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013502:	2200      	movs	r2, #0
 8013504:	601a      	str	r2, [r3, #0]
 8013506:	68a0      	ldr	r0, [r4, #8]
 8013508:	b138      	cbz	r0, 801351a <rcl_wait_set_clear+0x36>
 801350a:	68e2      	ldr	r2, [r4, #12]
 801350c:	2100      	movs	r1, #0
 801350e:	0092      	lsls	r2, r2, #2
 8013510:	f004 fb32 	bl	8017b78 <memset>
 8013514:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013516:	2200      	movs	r2, #0
 8013518:	60da      	str	r2, [r3, #12]
 801351a:	69a0      	ldr	r0, [r4, #24]
 801351c:	b138      	cbz	r0, 801352e <rcl_wait_set_clear+0x4a>
 801351e:	69e2      	ldr	r2, [r4, #28]
 8013520:	2100      	movs	r1, #0
 8013522:	0092      	lsls	r2, r2, #2
 8013524:	f004 fb28 	bl	8017b78 <memset>
 8013528:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801352a:	2200      	movs	r2, #0
 801352c:	619a      	str	r2, [r3, #24]
 801352e:	6a20      	ldr	r0, [r4, #32]
 8013530:	b138      	cbz	r0, 8013542 <rcl_wait_set_clear+0x5e>
 8013532:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8013534:	2100      	movs	r1, #0
 8013536:	0092      	lsls	r2, r2, #2
 8013538:	f004 fb1e 	bl	8017b78 <memset>
 801353c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801353e:	2200      	movs	r2, #0
 8013540:	625a      	str	r2, [r3, #36]	@ 0x24
 8013542:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013544:	b138      	cbz	r0, 8013556 <rcl_wait_set_clear+0x72>
 8013546:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013548:	2100      	movs	r1, #0
 801354a:	0092      	lsls	r2, r2, #2
 801354c:	f004 fb14 	bl	8017b78 <memset>
 8013550:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013552:	2200      	movs	r2, #0
 8013554:	631a      	str	r2, [r3, #48]	@ 0x30
 8013556:	6920      	ldr	r0, [r4, #16]
 8013558:	b138      	cbz	r0, 801356a <rcl_wait_set_clear+0x86>
 801355a:	6962      	ldr	r2, [r4, #20]
 801355c:	2100      	movs	r1, #0
 801355e:	0092      	lsls	r2, r2, #2
 8013560:	f004 fb0a 	bl	8017b78 <memset>
 8013564:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013566:	2200      	movs	r2, #0
 8013568:	641a      	str	r2, [r3, #64]	@ 0x40
 801356a:	6898      	ldr	r0, [r3, #8]
 801356c:	b138      	cbz	r0, 801357e <rcl_wait_set_clear+0x9a>
 801356e:	685a      	ldr	r2, [r3, #4]
 8013570:	2100      	movs	r1, #0
 8013572:	0092      	lsls	r2, r2, #2
 8013574:	f004 fb00 	bl	8017b78 <memset>
 8013578:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801357a:	2200      	movs	r2, #0
 801357c:	605a      	str	r2, [r3, #4]
 801357e:	6958      	ldr	r0, [r3, #20]
 8013580:	b138      	cbz	r0, 8013592 <rcl_wait_set_clear+0xae>
 8013582:	691a      	ldr	r2, [r3, #16]
 8013584:	2100      	movs	r1, #0
 8013586:	0092      	lsls	r2, r2, #2
 8013588:	f004 faf6 	bl	8017b78 <memset>
 801358c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801358e:	2200      	movs	r2, #0
 8013590:	611a      	str	r2, [r3, #16]
 8013592:	6a18      	ldr	r0, [r3, #32]
 8013594:	b138      	cbz	r0, 80135a6 <rcl_wait_set_clear+0xc2>
 8013596:	69da      	ldr	r2, [r3, #28]
 8013598:	2100      	movs	r1, #0
 801359a:	0092      	lsls	r2, r2, #2
 801359c:	f004 faec 	bl	8017b78 <memset>
 80135a0:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135a2:	2200      	movs	r2, #0
 80135a4:	61da      	str	r2, [r3, #28]
 80135a6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80135a8:	b138      	cbz	r0, 80135ba <rcl_wait_set_clear+0xd6>
 80135aa:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80135ac:	2100      	movs	r1, #0
 80135ae:	0092      	lsls	r2, r2, #2
 80135b0:	f004 fae2 	bl	8017b78 <memset>
 80135b4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135b6:	2200      	movs	r2, #0
 80135b8:	629a      	str	r2, [r3, #40]	@ 0x28
 80135ba:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80135bc:	b138      	cbz	r0, 80135ce <rcl_wait_set_clear+0xea>
 80135be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80135c0:	2100      	movs	r1, #0
 80135c2:	0092      	lsls	r2, r2, #2
 80135c4:	f004 fad8 	bl	8017b78 <memset>
 80135c8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80135ca:	2000      	movs	r0, #0
 80135cc:	6358      	str	r0, [r3, #52]	@ 0x34
 80135ce:	bd10      	pop	{r4, pc}
 80135d0:	200b      	movs	r0, #11
 80135d2:	4770      	bx	lr
 80135d4:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80135d8:	bd10      	pop	{r4, pc}
 80135da:	bf00      	nop

080135dc <rcl_wait_set_resize>:
 80135dc:	2800      	cmp	r0, #0
 80135de:	f000 8185 	beq.w	80138ec <rcl_wait_set_resize+0x310>
 80135e2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80135e6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 80135e8:	b083      	sub	sp, #12
 80135ea:	4605      	mov	r5, r0
 80135ec:	2c00      	cmp	r4, #0
 80135ee:	f000 817f 	beq.w	80138f0 <rcl_wait_set_resize+0x314>
 80135f2:	f04f 0900 	mov.w	r9, #0
 80135f6:	f8d4 a058 	ldr.w	sl, [r4, #88]	@ 0x58
 80135fa:	461f      	mov	r7, r3
 80135fc:	4688      	mov	r8, r1
 80135fe:	e9d4 b313 	ldrd	fp, r3, [r4, #76]	@ 0x4c
 8013602:	4616      	mov	r6, r2
 8013604:	f8c0 9004 	str.w	r9, [r0, #4]
 8013608:	f8c4 9000 	str.w	r9, [r4]
 801360c:	2900      	cmp	r1, #0
 801360e:	f000 80bd 	beq.w	801378c <rcl_wait_set_resize+0x1b0>
 8013612:	008c      	lsls	r4, r1, #2
 8013614:	6800      	ldr	r0, [r0, #0]
 8013616:	9301      	str	r3, [sp, #4]
 8013618:	4652      	mov	r2, sl
 801361a:	4621      	mov	r1, r4
 801361c:	4798      	blx	r3
 801361e:	9b01      	ldr	r3, [sp, #4]
 8013620:	6028      	str	r0, [r5, #0]
 8013622:	2800      	cmp	r0, #0
 8013624:	f000 80cb 	beq.w	80137be <rcl_wait_set_resize+0x1e2>
 8013628:	4622      	mov	r2, r4
 801362a:	4649      	mov	r1, r9
 801362c:	9301      	str	r3, [sp, #4]
 801362e:	f004 faa3 	bl	8017b78 <memset>
 8013632:	f8c5 8004 	str.w	r8, [r5, #4]
 8013636:	f8d5 8030 	ldr.w	r8, [r5, #48]	@ 0x30
 801363a:	9b01      	ldr	r3, [sp, #4]
 801363c:	f8d8 0008 	ldr.w	r0, [r8, #8]
 8013640:	f8c8 9004 	str.w	r9, [r8, #4]
 8013644:	4652      	mov	r2, sl
 8013646:	4621      	mov	r1, r4
 8013648:	4798      	blx	r3
 801364a:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801364c:	f8c8 0008 	str.w	r0, [r8, #8]
 8013650:	689b      	ldr	r3, [r3, #8]
 8013652:	2b00      	cmp	r3, #0
 8013654:	f000 80ac 	beq.w	80137b0 <rcl_wait_set_resize+0x1d4>
 8013658:	4622      	mov	r2, r4
 801365a:	4649      	mov	r1, r9
 801365c:	4618      	mov	r0, r3
 801365e:	f004 fa8b 	bl	8017b78 <memset>
 8013662:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013664:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013668:	f04f 0800 	mov.w	r8, #0
 801366c:	e9d4 2313 	ldrd	r2, r3, [r4, #76]	@ 0x4c
 8013670:	f8c5 800c 	str.w	r8, [r5, #12]
 8013674:	f8c4 800c 	str.w	r8, [r4, #12]
 8013678:	2e00      	cmp	r6, #0
 801367a:	f040 80a4 	bne.w	80137c6 <rcl_wait_set_resize+0x1ea>
 801367e:	68a8      	ldr	r0, [r5, #8]
 8013680:	b128      	cbz	r0, 801368e <rcl_wait_set_resize+0xb2>
 8013682:	4649      	mov	r1, r9
 8013684:	4790      	blx	r2
 8013686:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013688:	60ae      	str	r6, [r5, #8]
 801368a:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801368e:	f04f 0800 	mov.w	r8, #0
 8013692:	19f6      	adds	r6, r6, r7
 8013694:	f8c4 8010 	str.w	r8, [r4, #16]
 8013698:	f040 80ac 	bne.w	80137f4 <rcl_wait_set_resize+0x218>
 801369c:	6960      	ldr	r0, [r4, #20]
 801369e:	b130      	cbz	r0, 80136ae <rcl_wait_set_resize+0xd2>
 80136a0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80136a2:	4649      	mov	r1, r9
 80136a4:	4798      	blx	r3
 80136a6:	6166      	str	r6, [r4, #20]
 80136a8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136aa:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136ae:	2600      	movs	r6, #0
 80136b0:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80136b4:	616e      	str	r6, [r5, #20]
 80136b6:	6426      	str	r6, [r4, #64]	@ 0x40
 80136b8:	2f00      	cmp	r7, #0
 80136ba:	f040 80ad 	bne.w	8013818 <rcl_wait_set_resize+0x23c>
 80136be:	6928      	ldr	r0, [r5, #16]
 80136c0:	b138      	cbz	r0, 80136d2 <rcl_wait_set_resize+0xf6>
 80136c2:	4649      	mov	r1, r9
 80136c4:	47d0      	blx	sl
 80136c6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136c8:	612f      	str	r7, [r5, #16]
 80136ca:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 80136ce:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80136d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80136d4:	2600      	movs	r6, #0
 80136d6:	61ee      	str	r6, [r5, #28]
 80136d8:	61a6      	str	r6, [r4, #24]
 80136da:	2b00      	cmp	r3, #0
 80136dc:	f040 80af 	bne.w	801383e <rcl_wait_set_resize+0x262>
 80136e0:	69a8      	ldr	r0, [r5, #24]
 80136e2:	b120      	cbz	r0, 80136ee <rcl_wait_set_resize+0x112>
 80136e4:	4649      	mov	r1, r9
 80136e6:	47d0      	blx	sl
 80136e8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80136ea:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136ec:	61ab      	str	r3, [r5, #24]
 80136ee:	6a20      	ldr	r0, [r4, #32]
 80136f0:	b128      	cbz	r0, 80136fe <rcl_wait_set_resize+0x122>
 80136f2:	4649      	mov	r1, r9
 80136f4:	47d0      	blx	sl
 80136f6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80136f8:	2300      	movs	r3, #0
 80136fa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 80136fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013700:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013702:	2600      	movs	r6, #0
 8013704:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 8013708:	626e      	str	r6, [r5, #36]	@ 0x24
 801370a:	6266      	str	r6, [r4, #36]	@ 0x24
 801370c:	2b00      	cmp	r3, #0
 801370e:	f000 80b6 	beq.w	801387e <rcl_wait_set_resize+0x2a2>
 8013712:	ea4f 0a83 	mov.w	sl, r3, lsl #2
 8013716:	6a28      	ldr	r0, [r5, #32]
 8013718:	463a      	mov	r2, r7
 801371a:	4651      	mov	r1, sl
 801371c:	47c8      	blx	r9
 801371e:	6228      	str	r0, [r5, #32]
 8013720:	2800      	cmp	r0, #0
 8013722:	d04c      	beq.n	80137be <rcl_wait_set_resize+0x1e2>
 8013724:	4652      	mov	r2, sl
 8013726:	4631      	mov	r1, r6
 8013728:	f004 fa26 	bl	8017b78 <memset>
 801372c:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801372e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013730:	626b      	str	r3, [r5, #36]	@ 0x24
 8013732:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8013734:	62a6      	str	r6, [r4, #40]	@ 0x28
 8013736:	463a      	mov	r2, r7
 8013738:	4651      	mov	r1, sl
 801373a:	47c8      	blx	r9
 801373c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 801373e:	62e0      	str	r0, [r4, #44]	@ 0x2c
 8013740:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
 8013742:	2c00      	cmp	r4, #0
 8013744:	f000 80f0 	beq.w	8013928 <rcl_wait_set_resize+0x34c>
 8013748:	4620      	mov	r0, r4
 801374a:	4652      	mov	r2, sl
 801374c:	4631      	mov	r1, r6
 801374e:	f004 fa13 	bl	8017b78 <memset>
 8013752:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013754:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013756:	6da7      	ldr	r7, [r4, #88]	@ 0x58
 8013758:	2600      	movs	r6, #0
 801375a:	e9d4 8913 	ldrd	r8, r9, [r4, #76]	@ 0x4c
 801375e:	62ee      	str	r6, [r5, #44]	@ 0x2c
 8013760:	6326      	str	r6, [r4, #48]	@ 0x30
 8013762:	2b00      	cmp	r3, #0
 8013764:	f040 809d 	bne.w	80138a2 <rcl_wait_set_resize+0x2c6>
 8013768:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 801376a:	b120      	cbz	r0, 8013776 <rcl_wait_set_resize+0x19a>
 801376c:	4639      	mov	r1, r7
 801376e:	47c0      	blx	r8
 8013770:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8013772:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013774:	62ab      	str	r3, [r5, #40]	@ 0x28
 8013776:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8013778:	b310      	cbz	r0, 80137c0 <rcl_wait_set_resize+0x1e4>
 801377a:	4639      	mov	r1, r7
 801377c:	47c0      	blx	r8
 801377e:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013780:	2000      	movs	r0, #0
 8013782:	e9c3 000d 	strd	r0, r0, [r3, #52]	@ 0x34
 8013786:	b003      	add	sp, #12
 8013788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378c:	6800      	ldr	r0, [r0, #0]
 801378e:	b120      	cbz	r0, 801379a <rcl_wait_set_resize+0x1be>
 8013790:	4651      	mov	r1, sl
 8013792:	47d8      	blx	fp
 8013794:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013796:	f8c5 8000 	str.w	r8, [r5]
 801379a:	68a0      	ldr	r0, [r4, #8]
 801379c:	2800      	cmp	r0, #0
 801379e:	f43f af61 	beq.w	8013664 <rcl_wait_set_resize+0x88>
 80137a2:	4651      	mov	r1, sl
 80137a4:	47d8      	blx	fp
 80137a6:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137a8:	2300      	movs	r3, #0
 80137aa:	e9c4 3301 	strd	r3, r3, [r4, #4]
 80137ae:	e759      	b.n	8013664 <rcl_wait_set_resize+0x88>
 80137b0:	6828      	ldr	r0, [r5, #0]
 80137b2:	9301      	str	r3, [sp, #4]
 80137b4:	4651      	mov	r1, sl
 80137b6:	47d8      	blx	fp
 80137b8:	9b01      	ldr	r3, [sp, #4]
 80137ba:	e9c5 3300 	strd	r3, r3, [r5]
 80137be:	200a      	movs	r0, #10
 80137c0:	b003      	add	sp, #12
 80137c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80137c6:	00b4      	lsls	r4, r6, #2
 80137c8:	68a8      	ldr	r0, [r5, #8]
 80137ca:	464a      	mov	r2, r9
 80137cc:	4621      	mov	r1, r4
 80137ce:	4798      	blx	r3
 80137d0:	60a8      	str	r0, [r5, #8]
 80137d2:	2800      	cmp	r0, #0
 80137d4:	d0f3      	beq.n	80137be <rcl_wait_set_resize+0x1e2>
 80137d6:	4622      	mov	r2, r4
 80137d8:	4641      	mov	r1, r8
 80137da:	f004 f9cd 	bl	8017b78 <memset>
 80137de:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 80137e0:	60ee      	str	r6, [r5, #12]
 80137e2:	f04f 0800 	mov.w	r8, #0
 80137e6:	19f6      	adds	r6, r6, r7
 80137e8:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 80137ec:	f8c4 8010 	str.w	r8, [r4, #16]
 80137f0:	f43f af54 	beq.w	801369c <rcl_wait_set_resize+0xc0>
 80137f4:	00b6      	lsls	r6, r6, #2
 80137f6:	464a      	mov	r2, r9
 80137f8:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80137fa:	6960      	ldr	r0, [r4, #20]
 80137fc:	4631      	mov	r1, r6
 80137fe:	4798      	blx	r3
 8013800:	4681      	mov	r9, r0
 8013802:	6160      	str	r0, [r4, #20]
 8013804:	2800      	cmp	r0, #0
 8013806:	d076      	beq.n	80138f6 <rcl_wait_set_resize+0x31a>
 8013808:	4632      	mov	r2, r6
 801380a:	4641      	mov	r1, r8
 801380c:	f004 f9b4 	bl	8017b78 <memset>
 8013810:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013812:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 8013816:	e74a      	b.n	80136ae <rcl_wait_set_resize+0xd2>
 8013818:	00bc      	lsls	r4, r7, #2
 801381a:	6928      	ldr	r0, [r5, #16]
 801381c:	464a      	mov	r2, r9
 801381e:	4621      	mov	r1, r4
 8013820:	47c0      	blx	r8
 8013822:	6128      	str	r0, [r5, #16]
 8013824:	2800      	cmp	r0, #0
 8013826:	d0ca      	beq.n	80137be <rcl_wait_set_resize+0x1e2>
 8013828:	4622      	mov	r2, r4
 801382a:	4631      	mov	r1, r6
 801382c:	f004 f9a4 	bl	8017b78 <memset>
 8013830:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8013832:	616f      	str	r7, [r5, #20]
 8013834:	e9d4 a813 	ldrd	sl, r8, [r4, #76]	@ 0x4c
 8013838:	f8d4 9058 	ldr.w	r9, [r4, #88]	@ 0x58
 801383c:	e749      	b.n	80136d2 <rcl_wait_set_resize+0xf6>
 801383e:	009c      	lsls	r4, r3, #2
 8013840:	69a8      	ldr	r0, [r5, #24]
 8013842:	464a      	mov	r2, r9
 8013844:	4621      	mov	r1, r4
 8013846:	47c0      	blx	r8
 8013848:	61a8      	str	r0, [r5, #24]
 801384a:	2800      	cmp	r0, #0
 801384c:	d0b7      	beq.n	80137be <rcl_wait_set_resize+0x1e2>
 801384e:	4622      	mov	r2, r4
 8013850:	4631      	mov	r1, r6
 8013852:	f004 f991 	bl	8017b78 <memset>
 8013856:	6b2f      	ldr	r7, [r5, #48]	@ 0x30
 8013858:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801385a:	61eb      	str	r3, [r5, #28]
 801385c:	6a38      	ldr	r0, [r7, #32]
 801385e:	61fe      	str	r6, [r7, #28]
 8013860:	464a      	mov	r2, r9
 8013862:	4621      	mov	r1, r4
 8013864:	47c0      	blx	r8
 8013866:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013868:	6238      	str	r0, [r7, #32]
 801386a:	6a1f      	ldr	r7, [r3, #32]
 801386c:	2f00      	cmp	r7, #0
 801386e:	d054      	beq.n	801391a <rcl_wait_set_resize+0x33e>
 8013870:	4622      	mov	r2, r4
 8013872:	4631      	mov	r1, r6
 8013874:	4638      	mov	r0, r7
 8013876:	f004 f97f 	bl	8017b78 <memset>
 801387a:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801387c:	e73f      	b.n	80136fe <rcl_wait_set_resize+0x122>
 801387e:	6a28      	ldr	r0, [r5, #32]
 8013880:	b120      	cbz	r0, 801388c <rcl_wait_set_resize+0x2b0>
 8013882:	4639      	mov	r1, r7
 8013884:	47c0      	blx	r8
 8013886:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8013888:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801388a:	622b      	str	r3, [r5, #32]
 801388c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801388e:	2800      	cmp	r0, #0
 8013890:	f43f af60 	beq.w	8013754 <rcl_wait_set_resize+0x178>
 8013894:	4639      	mov	r1, r7
 8013896:	47c0      	blx	r8
 8013898:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 801389a:	2300      	movs	r3, #0
 801389c:	e9c4 330a 	strd	r3, r3, [r4, #40]	@ 0x28
 80138a0:	e758      	b.n	8013754 <rcl_wait_set_resize+0x178>
 80138a2:	009c      	lsls	r4, r3, #2
 80138a4:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 80138a6:	463a      	mov	r2, r7
 80138a8:	4621      	mov	r1, r4
 80138aa:	47c8      	blx	r9
 80138ac:	62a8      	str	r0, [r5, #40]	@ 0x28
 80138ae:	2800      	cmp	r0, #0
 80138b0:	d085      	beq.n	80137be <rcl_wait_set_resize+0x1e2>
 80138b2:	4622      	mov	r2, r4
 80138b4:	4631      	mov	r1, r6
 80138b6:	f004 f95f 	bl	8017b78 <memset>
 80138ba:	f8d5 a030 	ldr.w	sl, [r5, #48]	@ 0x30
 80138be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80138c0:	62eb      	str	r3, [r5, #44]	@ 0x2c
 80138c2:	f8da 0038 	ldr.w	r0, [sl, #56]	@ 0x38
 80138c6:	f8ca 6034 	str.w	r6, [sl, #52]	@ 0x34
 80138ca:	463a      	mov	r2, r7
 80138cc:	4621      	mov	r1, r4
 80138ce:	47c8      	blx	r9
 80138d0:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138d2:	f8ca 0038 	str.w	r0, [sl, #56]	@ 0x38
 80138d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80138d8:	b36b      	cbz	r3, 8013936 <rcl_wait_set_resize+0x35a>
 80138da:	4622      	mov	r2, r4
 80138dc:	4631      	mov	r1, r6
 80138de:	4618      	mov	r0, r3
 80138e0:	f004 f94a 	bl	8017b78 <memset>
 80138e4:	4630      	mov	r0, r6
 80138e6:	b003      	add	sp, #12
 80138e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80138ec:	200b      	movs	r0, #11
 80138ee:	4770      	bx	lr
 80138f0:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80138f4:	e764      	b.n	80137c0 <rcl_wait_set_resize+0x1e4>
 80138f6:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80138f8:	68a8      	ldr	r0, [r5, #8]
 80138fa:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 80138fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138fe:	4798      	blx	r3
 8013900:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013902:	6928      	ldr	r0, [r5, #16]
 8013904:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8013906:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8013908:	f8c5 900c 	str.w	r9, [r5, #12]
 801390c:	f8c5 9008 	str.w	r9, [r5, #8]
 8013910:	4790      	blx	r2
 8013912:	e9c5 9904 	strd	r9, r9, [r5, #16]
 8013916:	200a      	movs	r0, #10
 8013918:	e752      	b.n	80137c0 <rcl_wait_set_resize+0x1e4>
 801391a:	69a8      	ldr	r0, [r5, #24]
 801391c:	4649      	mov	r1, r9
 801391e:	47d0      	blx	sl
 8013920:	e9c5 7706 	strd	r7, r7, [r5, #24]
 8013924:	200a      	movs	r0, #10
 8013926:	e74b      	b.n	80137c0 <rcl_wait_set_resize+0x1e4>
 8013928:	6a28      	ldr	r0, [r5, #32]
 801392a:	4639      	mov	r1, r7
 801392c:	47c0      	blx	r8
 801392e:	e9c5 4408 	strd	r4, r4, [r5, #32]
 8013932:	200a      	movs	r0, #10
 8013934:	e744      	b.n	80137c0 <rcl_wait_set_resize+0x1e4>
 8013936:	6aa8      	ldr	r0, [r5, #40]	@ 0x28
 8013938:	9301      	str	r3, [sp, #4]
 801393a:	4639      	mov	r1, r7
 801393c:	47c0      	blx	r8
 801393e:	9b01      	ldr	r3, [sp, #4]
 8013940:	200a      	movs	r0, #10
 8013942:	e9c5 330a 	strd	r3, r3, [r5, #40]	@ 0x28
 8013946:	e73b      	b.n	80137c0 <rcl_wait_set_resize+0x1e4>

08013948 <rcl_wait_set_init>:
 8013948:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801394c:	b084      	sub	sp, #16
 801394e:	4604      	mov	r4, r0
 8013950:	a810      	add	r0, sp, #64	@ 0x40
 8013952:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8013956:	460f      	mov	r7, r1
 8013958:	4690      	mov	r8, r2
 801395a:	4699      	mov	r9, r3
 801395c:	f7f9 fcce 	bl	800d2fc <rcutils_allocator_is_valid>
 8013960:	2800      	cmp	r0, #0
 8013962:	d06b      	beq.n	8013a3c <rcl_wait_set_init+0xf4>
 8013964:	2c00      	cmp	r4, #0
 8013966:	d069      	beq.n	8013a3c <rcl_wait_set_init+0xf4>
 8013968:	6b25      	ldr	r5, [r4, #48]	@ 0x30
 801396a:	b125      	cbz	r5, 8013976 <rcl_wait_set_init+0x2e>
 801396c:	2564      	movs	r5, #100	@ 0x64
 801396e:	4628      	mov	r0, r5
 8013970:	b004      	add	sp, #16
 8013972:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013976:	f1ba 0f00 	cmp.w	sl, #0
 801397a:	d05f      	beq.n	8013a3c <rcl_wait_set_init+0xf4>
 801397c:	4650      	mov	r0, sl
 801397e:	f7fe fb0f 	bl	8011fa0 <rcl_context_is_valid>
 8013982:	2800      	cmp	r0, #0
 8013984:	d067      	beq.n	8013a56 <rcl_wait_set_init+0x10e>
 8013986:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8013988:	9914      	ldr	r1, [sp, #80]	@ 0x50
 801398a:	205c      	movs	r0, #92	@ 0x5c
 801398c:	4798      	blx	r3
 801398e:	6320      	str	r0, [r4, #48]	@ 0x30
 8013990:	2800      	cmp	r0, #0
 8013992:	d062      	beq.n	8013a5a <rcl_wait_set_init+0x112>
 8013994:	4629      	mov	r1, r5
 8013996:	225c      	movs	r2, #92	@ 0x5c
 8013998:	f004 f8ee 	bl	8017b78 <memset>
 801399c:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	@ 0x34
 80139a0:	eb03 0e02 	add.w	lr, r3, r2
 80139a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139a6:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 80139a8:	f10d 0c40 	add.w	ip, sp, #64	@ 0x40
 80139ac:	449e      	add	lr, r3
 80139ae:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80139b2:	e9c6 5501 	strd	r5, r5, [r6, #4]
 80139b6:	e9c6 5504 	strd	r5, r5, [r6, #16]
 80139ba:	e9c6 5507 	strd	r5, r5, [r6, #28]
 80139be:	e9c6 550a 	strd	r5, r5, [r6, #40]	@ 0x28
 80139c2:	e9c6 550d 	strd	r5, r5, [r6, #52]	@ 0x34
 80139c6:	f106 0548 	add.w	r5, r6, #72	@ 0x48
 80139ca:	f8c6 a044 	str.w	sl, [r6, #68]	@ 0x44
 80139ce:	f8da a000 	ldr.w	sl, [sl]
 80139d2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80139d4:	44c6      	add	lr, r8
 80139d6:	f8dc 3000 	ldr.w	r3, [ip]
 80139da:	602b      	str	r3, [r5, #0]
 80139dc:	eb0e 0147 	add.w	r1, lr, r7, lsl #1
 80139e0:	f10a 0028 	add.w	r0, sl, #40	@ 0x28
 80139e4:	f002 f9fe 	bl	8015de4 <rmw_create_wait_set>
 80139e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80139ea:	63f0      	str	r0, [r6, #60]	@ 0x3c
 80139ec:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80139ee:	b350      	cbz	r0, 8013a46 <rcl_wait_set_init+0xfe>
 80139f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80139f2:	9302      	str	r3, [sp, #8]
 80139f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80139f6:	9301      	str	r3, [sp, #4]
 80139f8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80139fa:	9300      	str	r3, [sp, #0]
 80139fc:	4642      	mov	r2, r8
 80139fe:	464b      	mov	r3, r9
 8013a00:	4639      	mov	r1, r7
 8013a02:	4620      	mov	r0, r4
 8013a04:	f7ff fdea 	bl	80135dc <rcl_wait_set_resize>
 8013a08:	4605      	mov	r5, r0
 8013a0a:	2800      	cmp	r0, #0
 8013a0c:	d0af      	beq.n	801396e <rcl_wait_set_init+0x26>
 8013a0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a10:	bb2b      	cbnz	r3, 8013a5e <rcl_wait_set_init+0x116>
 8013a12:	2600      	movs	r6, #0
 8013a14:	e9cd 6601 	strd	r6, r6, [sp, #4]
 8013a18:	9600      	str	r6, [sp, #0]
 8013a1a:	4633      	mov	r3, r6
 8013a1c:	4632      	mov	r2, r6
 8013a1e:	4631      	mov	r1, r6
 8013a20:	4620      	mov	r0, r4
 8013a22:	f7ff fddb 	bl	80135dc <rcl_wait_set_resize>
 8013a26:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013a28:	2800      	cmp	r0, #0
 8013a2a:	d0a0      	beq.n	801396e <rcl_wait_set_init+0x26>
 8013a2c:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8013a2e:	6d81      	ldr	r1, [r0, #88]	@ 0x58
 8013a30:	4798      	blx	r3
 8013a32:	4628      	mov	r0, r5
 8013a34:	6326      	str	r6, [r4, #48]	@ 0x30
 8013a36:	b004      	add	sp, #16
 8013a38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a3c:	250b      	movs	r5, #11
 8013a3e:	4628      	mov	r0, r5
 8013a40:	b004      	add	sp, #16
 8013a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a46:	2501      	movs	r5, #1
 8013a48:	f002 f9d6 	bl	8015df8 <rmw_destroy_wait_set>
 8013a4c:	2800      	cmp	r0, #0
 8013a4e:	bf18      	it	ne
 8013a50:	f44f 7561 	movne.w	r5, #900	@ 0x384
 8013a54:	e7dd      	b.n	8013a12 <rcl_wait_set_init+0xca>
 8013a56:	2565      	movs	r5, #101	@ 0x65
 8013a58:	e789      	b.n	801396e <rcl_wait_set_init+0x26>
 8013a5a:	250a      	movs	r5, #10
 8013a5c:	e787      	b.n	801396e <rcl_wait_set_init+0x26>
 8013a5e:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8013a60:	e7f2      	b.n	8013a48 <rcl_wait_set_init+0x100>
 8013a62:	bf00      	nop

08013a64 <rcl_wait_set_add_guard_condition>:
 8013a64:	b318      	cbz	r0, 8013aae <rcl_wait_set_add_guard_condition+0x4a>
 8013a66:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013a68:	b570      	push	{r4, r5, r6, lr}
 8013a6a:	4604      	mov	r4, r0
 8013a6c:	b30b      	cbz	r3, 8013ab2 <rcl_wait_set_add_guard_condition+0x4e>
 8013a6e:	b319      	cbz	r1, 8013ab8 <rcl_wait_set_add_guard_condition+0x54>
 8013a70:	68dd      	ldr	r5, [r3, #12]
 8013a72:	68c0      	ldr	r0, [r0, #12]
 8013a74:	4285      	cmp	r5, r0
 8013a76:	d217      	bcs.n	8013aa8 <rcl_wait_set_add_guard_condition+0x44>
 8013a78:	68a0      	ldr	r0, [r4, #8]
 8013a7a:	1c6e      	adds	r6, r5, #1
 8013a7c:	60de      	str	r6, [r3, #12]
 8013a7e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013a82:	b102      	cbz	r2, 8013a86 <rcl_wait_set_add_guard_condition+0x22>
 8013a84:	6015      	str	r5, [r2, #0]
 8013a86:	4608      	mov	r0, r1
 8013a88:	f003 fb7c 	bl	8017184 <rcl_guard_condition_get_rmw_handle>
 8013a8c:	b150      	cbz	r0, 8013aa4 <rcl_wait_set_add_guard_condition+0x40>
 8013a8e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013a90:	6842      	ldr	r2, [r0, #4]
 8013a92:	695b      	ldr	r3, [r3, #20]
 8013a94:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013a98:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013a9a:	6913      	ldr	r3, [r2, #16]
 8013a9c:	3301      	adds	r3, #1
 8013a9e:	2000      	movs	r0, #0
 8013aa0:	6113      	str	r3, [r2, #16]
 8013aa2:	bd70      	pop	{r4, r5, r6, pc}
 8013aa4:	2001      	movs	r0, #1
 8013aa6:	bd70      	pop	{r4, r5, r6, pc}
 8013aa8:	f240 3086 	movw	r0, #902	@ 0x386
 8013aac:	bd70      	pop	{r4, r5, r6, pc}
 8013aae:	200b      	movs	r0, #11
 8013ab0:	4770      	bx	lr
 8013ab2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013ab6:	bd70      	pop	{r4, r5, r6, pc}
 8013ab8:	200b      	movs	r0, #11
 8013aba:	bd70      	pop	{r4, r5, r6, pc}

08013abc <rcl_wait_set_add_timer>:
 8013abc:	b328      	cbz	r0, 8013b0a <rcl_wait_set_add_timer+0x4e>
 8013abe:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013ac0:	b570      	push	{r4, r5, r6, lr}
 8013ac2:	4604      	mov	r4, r0
 8013ac4:	b31b      	cbz	r3, 8013b0e <rcl_wait_set_add_timer+0x52>
 8013ac6:	b329      	cbz	r1, 8013b14 <rcl_wait_set_add_timer+0x58>
 8013ac8:	6c18      	ldr	r0, [r3, #64]	@ 0x40
 8013aca:	6965      	ldr	r5, [r4, #20]
 8013acc:	42a8      	cmp	r0, r5
 8013ace:	d219      	bcs.n	8013b04 <rcl_wait_set_add_timer+0x48>
 8013ad0:	6925      	ldr	r5, [r4, #16]
 8013ad2:	1c46      	adds	r6, r0, #1
 8013ad4:	641e      	str	r6, [r3, #64]	@ 0x40
 8013ad6:	f845 1020 	str.w	r1, [r5, r0, lsl #2]
 8013ada:	b102      	cbz	r2, 8013ade <rcl_wait_set_add_timer+0x22>
 8013adc:	6010      	str	r0, [r2, #0]
 8013ade:	4608      	mov	r0, r1
 8013ae0:	f7ff fba6 	bl	8013230 <rcl_timer_get_guard_condition>
 8013ae4:	b168      	cbz	r0, 8013b02 <rcl_wait_set_add_timer+0x46>
 8013ae6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013ae8:	68e3      	ldr	r3, [r4, #12]
 8013aea:	6c15      	ldr	r5, [r2, #64]	@ 0x40
 8013aec:	3b01      	subs	r3, #1
 8013aee:	441d      	add	r5, r3
 8013af0:	f003 fb48 	bl	8017184 <rcl_guard_condition_get_rmw_handle>
 8013af4:	b180      	cbz	r0, 8013b18 <rcl_wait_set_add_timer+0x5c>
 8013af6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013af8:	6842      	ldr	r2, [r0, #4]
 8013afa:	695b      	ldr	r3, [r3, #20]
 8013afc:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b00:	2000      	movs	r0, #0
 8013b02:	bd70      	pop	{r4, r5, r6, pc}
 8013b04:	f240 3086 	movw	r0, #902	@ 0x386
 8013b08:	bd70      	pop	{r4, r5, r6, pc}
 8013b0a:	200b      	movs	r0, #11
 8013b0c:	4770      	bx	lr
 8013b0e:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b12:	bd70      	pop	{r4, r5, r6, pc}
 8013b14:	200b      	movs	r0, #11
 8013b16:	bd70      	pop	{r4, r5, r6, pc}
 8013b18:	2001      	movs	r0, #1
 8013b1a:	bd70      	pop	{r4, r5, r6, pc}

08013b1c <rcl_wait_set_add_client>:
 8013b1c:	b318      	cbz	r0, 8013b66 <rcl_wait_set_add_client+0x4a>
 8013b1e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b20:	b570      	push	{r4, r5, r6, lr}
 8013b22:	4604      	mov	r4, r0
 8013b24:	b30b      	cbz	r3, 8013b6a <rcl_wait_set_add_client+0x4e>
 8013b26:	b319      	cbz	r1, 8013b70 <rcl_wait_set_add_client+0x54>
 8013b28:	699d      	ldr	r5, [r3, #24]
 8013b2a:	69c0      	ldr	r0, [r0, #28]
 8013b2c:	4285      	cmp	r5, r0
 8013b2e:	d217      	bcs.n	8013b60 <rcl_wait_set_add_client+0x44>
 8013b30:	69a0      	ldr	r0, [r4, #24]
 8013b32:	1c6e      	adds	r6, r5, #1
 8013b34:	619e      	str	r6, [r3, #24]
 8013b36:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013b3a:	b102      	cbz	r2, 8013b3e <rcl_wait_set_add_client+0x22>
 8013b3c:	6015      	str	r5, [r2, #0]
 8013b3e:	4608      	mov	r0, r1
 8013b40:	f7fe f980 	bl	8011e44 <rcl_client_get_rmw_handle>
 8013b44:	b150      	cbz	r0, 8013b5c <rcl_wait_set_add_client+0x40>
 8013b46:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013b48:	6842      	ldr	r2, [r0, #4]
 8013b4a:	6a1b      	ldr	r3, [r3, #32]
 8013b4c:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b50:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013b52:	69d3      	ldr	r3, [r2, #28]
 8013b54:	3301      	adds	r3, #1
 8013b56:	2000      	movs	r0, #0
 8013b58:	61d3      	str	r3, [r2, #28]
 8013b5a:	bd70      	pop	{r4, r5, r6, pc}
 8013b5c:	2001      	movs	r0, #1
 8013b5e:	bd70      	pop	{r4, r5, r6, pc}
 8013b60:	f240 3086 	movw	r0, #902	@ 0x386
 8013b64:	bd70      	pop	{r4, r5, r6, pc}
 8013b66:	200b      	movs	r0, #11
 8013b68:	4770      	bx	lr
 8013b6a:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013b6e:	bd70      	pop	{r4, r5, r6, pc}
 8013b70:	200b      	movs	r0, #11
 8013b72:	bd70      	pop	{r4, r5, r6, pc}

08013b74 <rcl_wait_set_add_service>:
 8013b74:	b318      	cbz	r0, 8013bbe <rcl_wait_set_add_service+0x4a>
 8013b76:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013b78:	b570      	push	{r4, r5, r6, lr}
 8013b7a:	4604      	mov	r4, r0
 8013b7c:	b30b      	cbz	r3, 8013bc2 <rcl_wait_set_add_service+0x4e>
 8013b7e:	b319      	cbz	r1, 8013bc8 <rcl_wait_set_add_service+0x54>
 8013b80:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 8013b82:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 8013b84:	4285      	cmp	r5, r0
 8013b86:	d217      	bcs.n	8013bb8 <rcl_wait_set_add_service+0x44>
 8013b88:	6a20      	ldr	r0, [r4, #32]
 8013b8a:	1c6e      	adds	r6, r5, #1
 8013b8c:	625e      	str	r6, [r3, #36]	@ 0x24
 8013b8e:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8013b92:	b102      	cbz	r2, 8013b96 <rcl_wait_set_add_service+0x22>
 8013b94:	6015      	str	r5, [r2, #0]
 8013b96:	4608      	mov	r0, r1
 8013b98:	f7fe fed6 	bl	8012948 <rcl_service_get_rmw_handle>
 8013b9c:	b150      	cbz	r0, 8013bb4 <rcl_wait_set_add_service+0x40>
 8013b9e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8013ba0:	6842      	ldr	r2, [r0, #4]
 8013ba2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ba4:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013ba8:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8013baa:	6a93      	ldr	r3, [r2, #40]	@ 0x28
 8013bac:	3301      	adds	r3, #1
 8013bae:	2000      	movs	r0, #0
 8013bb0:	6293      	str	r3, [r2, #40]	@ 0x28
 8013bb2:	bd70      	pop	{r4, r5, r6, pc}
 8013bb4:	2001      	movs	r0, #1
 8013bb6:	bd70      	pop	{r4, r5, r6, pc}
 8013bb8:	f240 3086 	movw	r0, #902	@ 0x386
 8013bbc:	bd70      	pop	{r4, r5, r6, pc}
 8013bbe:	200b      	movs	r0, #11
 8013bc0:	4770      	bx	lr
 8013bc2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013bc6:	bd70      	pop	{r4, r5, r6, pc}
 8013bc8:	200b      	movs	r0, #11
 8013bca:	bd70      	pop	{r4, r5, r6, pc}
 8013bcc:	0000      	movs	r0, r0
	...

08013bd0 <rcl_wait>:
 8013bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013bd4:	ed2d 8b02 	vpush	{d8}
 8013bd8:	b08d      	sub	sp, #52	@ 0x34
 8013bda:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013bde:	2800      	cmp	r0, #0
 8013be0:	f000 8143 	beq.w	8013e6a <rcl_wait+0x29a>
 8013be4:	6b06      	ldr	r6, [r0, #48]	@ 0x30
 8013be6:	4605      	mov	r5, r0
 8013be8:	2e00      	cmp	r6, #0
 8013bea:	f000 8112 	beq.w	8013e12 <rcl_wait+0x242>
 8013bee:	6843      	ldr	r3, [r0, #4]
 8013bf0:	b983      	cbnz	r3, 8013c14 <rcl_wait+0x44>
 8013bf2:	68eb      	ldr	r3, [r5, #12]
 8013bf4:	b973      	cbnz	r3, 8013c14 <rcl_wait+0x44>
 8013bf6:	696b      	ldr	r3, [r5, #20]
 8013bf8:	b963      	cbnz	r3, 8013c14 <rcl_wait+0x44>
 8013bfa:	69eb      	ldr	r3, [r5, #28]
 8013bfc:	b953      	cbnz	r3, 8013c14 <rcl_wait+0x44>
 8013bfe:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
 8013c00:	b943      	cbnz	r3, 8013c14 <rcl_wait+0x44>
 8013c02:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8013c04:	b933      	cbnz	r3, 8013c14 <rcl_wait+0x44>
 8013c06:	f240 3085 	movw	r0, #901	@ 0x385
 8013c0a:	b00d      	add	sp, #52	@ 0x34
 8013c0c:	ecbd 8b02 	vpop	{d8}
 8013c10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c14:	9b04      	ldr	r3, [sp, #16]
 8013c16:	6c32      	ldr	r2, [r6, #64]	@ 0x40
 8013c18:	2b01      	cmp	r3, #1
 8013c1a:	9b05      	ldr	r3, [sp, #20]
 8013c1c:	f173 0300 	sbcs.w	r3, r3, #0
 8013c20:	f2c0 80f0 	blt.w	8013e04 <rcl_wait+0x234>
 8013c24:	e9dd 8704 	ldrd	r8, r7, [sp, #16]
 8013c28:	4643      	mov	r3, r8
 8013c2a:	2a00      	cmp	r2, #0
 8013c2c:	f000 8133 	beq.w	8013e96 <rcl_wait+0x2c6>
 8013c30:	2400      	movs	r4, #0
 8013c32:	4613      	mov	r3, r2
 8013c34:	ed9f 8b9c 	vldr	d8, [pc, #624]	@ 8013ea8 <rcl_wait+0x2d8>
 8013c38:	46a2      	mov	sl, r4
 8013c3a:	46a3      	mov	fp, r4
 8013c3c:	f240 3921 	movw	r9, #801	@ 0x321
 8013c40:	4632      	mov	r2, r6
 8013c42:	e014      	b.n	8013c6e <rcl_wait+0x9e>
 8013c44:	2800      	cmp	r0, #0
 8013c46:	d1e0      	bne.n	8013c0a <rcl_wait+0x3a>
 8013c48:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8013c4c:	4542      	cmp	r2, r8
 8013c4e:	eb73 0107 	sbcs.w	r1, r3, r7
 8013c52:	da03      	bge.n	8013c5c <rcl_wait+0x8c>
 8013c54:	4690      	mov	r8, r2
 8013c56:	461f      	mov	r7, r3
 8013c58:	f04f 0b01 	mov.w	fp, #1
 8013c5c:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013c5e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013c60:	3401      	adds	r4, #1
 8013c62:	f14a 0a00 	adc.w	sl, sl, #0
 8013c66:	429c      	cmp	r4, r3
 8013c68:	f17a 0100 	sbcs.w	r1, sl, #0
 8013c6c:	d228      	bcs.n	8013cc0 <rcl_wait+0xf0>
 8013c6e:	6928      	ldr	r0, [r5, #16]
 8013c70:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8013c74:	a908      	add	r1, sp, #32
 8013c76:	00a6      	lsls	r6, r4, #2
 8013c78:	2800      	cmp	r0, #0
 8013c7a:	d0f1      	beq.n	8013c60 <rcl_wait+0x90>
 8013c7c:	68eb      	ldr	r3, [r5, #12]
 8013c7e:	f8d2 c014 	ldr.w	ip, [r2, #20]
 8013c82:	4423      	add	r3, r4
 8013c84:	f85c e023 	ldr.w	lr, [ip, r3, lsl #2]
 8013c88:	f1be 0f00 	cmp.w	lr, #0
 8013c8c:	d006      	beq.n	8013c9c <rcl_wait+0xcc>
 8013c8e:	6913      	ldr	r3, [r2, #16]
 8013c90:	f84c e023 	str.w	lr, [ip, r3, lsl #2]
 8013c94:	3301      	adds	r3, #1
 8013c96:	6113      	str	r3, [r2, #16]
 8013c98:	692b      	ldr	r3, [r5, #16]
 8013c9a:	5998      	ldr	r0, [r3, r6]
 8013c9c:	ed8d 8b08 	vstr	d8, [sp, #32]
 8013ca0:	f7ff fa94 	bl	80131cc <rcl_timer_get_time_until_next_call>
 8013ca4:	4548      	cmp	r0, r9
 8013ca6:	d1cd      	bne.n	8013c44 <rcl_wait+0x74>
 8013ca8:	692b      	ldr	r3, [r5, #16]
 8013caa:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8013cac:	2100      	movs	r1, #0
 8013cae:	5199      	str	r1, [r3, r6]
 8013cb0:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8013cb2:	3401      	adds	r4, #1
 8013cb4:	f14a 0a00 	adc.w	sl, sl, #0
 8013cb8:	429c      	cmp	r4, r3
 8013cba:	f17a 0100 	sbcs.w	r1, sl, #0
 8013cbe:	d3d6      	bcc.n	8013c6e <rcl_wait+0x9e>
 8013cc0:	4616      	mov	r6, r2
 8013cc2:	e9dd 3204 	ldrd	r3, r2, [sp, #16]
 8013cc6:	4313      	orrs	r3, r2
 8013cc8:	46d9      	mov	r9, fp
 8013cca:	f040 80a9 	bne.w	8013e20 <rcl_wait+0x250>
 8013cce:	2300      	movs	r3, #0
 8013cd0:	2200      	movs	r2, #0
 8013cd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8013cd6:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013cda:	ab08      	add	r3, sp, #32
 8013cdc:	9302      	str	r3, [sp, #8]
 8013cde:	6bf2      	ldr	r2, [r6, #60]	@ 0x3c
 8013ce0:	f106 0334 	add.w	r3, r6, #52	@ 0x34
 8013ce4:	e9cd 3200 	strd	r3, r2, [sp]
 8013ce8:	f106 0110 	add.w	r1, r6, #16
 8013cec:	f106 031c 	add.w	r3, r6, #28
 8013cf0:	f106 0228 	add.w	r2, r6, #40	@ 0x28
 8013cf4:	1d30      	adds	r0, r6, #4
 8013cf6:	f001 fefd 	bl	8015af4 <rmw_wait>
 8013cfa:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013cfc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013cfe:	4680      	mov	r8, r0
 8013d00:	b1ca      	cbz	r2, 8013d36 <rcl_wait+0x166>
 8013d02:	2400      	movs	r4, #0
 8013d04:	4627      	mov	r7, r4
 8013d06:	692a      	ldr	r2, [r5, #16]
 8013d08:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8013d0c:	f10d 011f 	add.w	r1, sp, #31
 8013d10:	00a6      	lsls	r6, r4, #2
 8013d12:	b160      	cbz	r0, 8013d2e <rcl_wait+0x15e>
 8013d14:	f88d 701f 	strb.w	r7, [sp, #31]
 8013d18:	f7ff fa1e 	bl	8013158 <rcl_timer_is_ready>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	f47f af74 	bne.w	8013c0a <rcl_wait+0x3a>
 8013d22:	f89d 301f 	ldrb.w	r3, [sp, #31]
 8013d26:	b90b      	cbnz	r3, 8013d2c <rcl_wait+0x15c>
 8013d28:	692a      	ldr	r2, [r5, #16]
 8013d2a:	5193      	str	r3, [r2, r6]
 8013d2c:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8013d2e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8013d30:	3401      	adds	r4, #1
 8013d32:	42a2      	cmp	r2, r4
 8013d34:	d8e7      	bhi.n	8013d06 <rcl_wait+0x136>
 8013d36:	f038 0002 	bics.w	r0, r8, #2
 8013d3a:	f040 8090 	bne.w	8013e5e <rcl_wait+0x28e>
 8013d3e:	686e      	ldr	r6, [r5, #4]
 8013d40:	4602      	mov	r2, r0
 8013d42:	b91e      	cbnz	r6, 8013d4c <rcl_wait+0x17c>
 8013d44:	e00d      	b.n	8013d62 <rcl_wait+0x192>
 8013d46:	3201      	adds	r2, #1
 8013d48:	42b2      	cmp	r2, r6
 8013d4a:	d00a      	beq.n	8013d62 <rcl_wait+0x192>
 8013d4c:	6899      	ldr	r1, [r3, #8]
 8013d4e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d52:	2900      	cmp	r1, #0
 8013d54:	d1f7      	bne.n	8013d46 <rcl_wait+0x176>
 8013d56:	682c      	ldr	r4, [r5, #0]
 8013d58:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d5c:	3201      	adds	r2, #1
 8013d5e:	42b2      	cmp	r2, r6
 8013d60:	d1f4      	bne.n	8013d4c <rcl_wait+0x17c>
 8013d62:	68ee      	ldr	r6, [r5, #12]
 8013d64:	2200      	movs	r2, #0
 8013d66:	b91e      	cbnz	r6, 8013d70 <rcl_wait+0x1a0>
 8013d68:	e00d      	b.n	8013d86 <rcl_wait+0x1b6>
 8013d6a:	3201      	adds	r2, #1
 8013d6c:	42b2      	cmp	r2, r6
 8013d6e:	d00a      	beq.n	8013d86 <rcl_wait+0x1b6>
 8013d70:	6959      	ldr	r1, [r3, #20]
 8013d72:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d76:	2900      	cmp	r1, #0
 8013d78:	d1f7      	bne.n	8013d6a <rcl_wait+0x19a>
 8013d7a:	68ac      	ldr	r4, [r5, #8]
 8013d7c:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013d80:	3201      	adds	r2, #1
 8013d82:	42b2      	cmp	r2, r6
 8013d84:	d1f4      	bne.n	8013d70 <rcl_wait+0x1a0>
 8013d86:	69ee      	ldr	r6, [r5, #28]
 8013d88:	2200      	movs	r2, #0
 8013d8a:	b91e      	cbnz	r6, 8013d94 <rcl_wait+0x1c4>
 8013d8c:	e00d      	b.n	8013daa <rcl_wait+0x1da>
 8013d8e:	3201      	adds	r2, #1
 8013d90:	42b2      	cmp	r2, r6
 8013d92:	d00a      	beq.n	8013daa <rcl_wait+0x1da>
 8013d94:	6a19      	ldr	r1, [r3, #32]
 8013d96:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013d9a:	2900      	cmp	r1, #0
 8013d9c:	d1f7      	bne.n	8013d8e <rcl_wait+0x1be>
 8013d9e:	69ac      	ldr	r4, [r5, #24]
 8013da0:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013da4:	3201      	adds	r2, #1
 8013da6:	42b2      	cmp	r2, r6
 8013da8:	d1f4      	bne.n	8013d94 <rcl_wait+0x1c4>
 8013daa:	6a6e      	ldr	r6, [r5, #36]	@ 0x24
 8013dac:	2200      	movs	r2, #0
 8013dae:	b91e      	cbnz	r6, 8013db8 <rcl_wait+0x1e8>
 8013db0:	e00d      	b.n	8013dce <rcl_wait+0x1fe>
 8013db2:	3201      	adds	r2, #1
 8013db4:	4296      	cmp	r6, r2
 8013db6:	d00a      	beq.n	8013dce <rcl_wait+0x1fe>
 8013db8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8013dba:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013dbe:	2900      	cmp	r1, #0
 8013dc0:	d1f7      	bne.n	8013db2 <rcl_wait+0x1e2>
 8013dc2:	6a2c      	ldr	r4, [r5, #32]
 8013dc4:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013dc8:	3201      	adds	r2, #1
 8013dca:	4296      	cmp	r6, r2
 8013dcc:	d1f4      	bne.n	8013db8 <rcl_wait+0x1e8>
 8013dce:	6aee      	ldr	r6, [r5, #44]	@ 0x2c
 8013dd0:	2200      	movs	r2, #0
 8013dd2:	b91e      	cbnz	r6, 8013ddc <rcl_wait+0x20c>
 8013dd4:	e00d      	b.n	8013df2 <rcl_wait+0x222>
 8013dd6:	3201      	adds	r2, #1
 8013dd8:	42b2      	cmp	r2, r6
 8013dda:	d00a      	beq.n	8013df2 <rcl_wait+0x222>
 8013ddc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8013dde:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8013de2:	2900      	cmp	r1, #0
 8013de4:	d1f7      	bne.n	8013dd6 <rcl_wait+0x206>
 8013de6:	6aac      	ldr	r4, [r5, #40]	@ 0x28
 8013de8:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
 8013dec:	3201      	adds	r2, #1
 8013dee:	42b2      	cmp	r2, r6
 8013df0:	d1f4      	bne.n	8013ddc <rcl_wait+0x20c>
 8013df2:	f1b8 0f02 	cmp.w	r8, #2
 8013df6:	f47f af08 	bne.w	8013c0a <rcl_wait+0x3a>
 8013dfa:	464b      	mov	r3, r9
 8013dfc:	2b00      	cmp	r3, #0
 8013dfe:	bf08      	it	eq
 8013e00:	2002      	moveq	r0, #2
 8013e02:	e702      	b.n	8013c0a <rcl_wait+0x3a>
 8013e04:	2a00      	cmp	r2, #0
 8013e06:	d03a      	beq.n	8013e7e <rcl_wait+0x2ae>
 8013e08:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013e0c:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013e10:	e70e      	b.n	8013c30 <rcl_wait+0x60>
 8013e12:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8013e16:	b00d      	add	sp, #52	@ 0x34
 8013e18:	ecbd 8b02 	vpop	{d8}
 8013e1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e20:	9b04      	ldr	r3, [sp, #16]
 8013e22:	2b01      	cmp	r3, #1
 8013e24:	9b05      	ldr	r3, [sp, #20]
 8013e26:	f173 0300 	sbcs.w	r3, r3, #0
 8013e2a:	db24      	blt.n	8013e76 <rcl_wait+0x2a6>
 8013e2c:	2f00      	cmp	r7, #0
 8013e2e:	bfbc      	itt	lt
 8013e30:	f04f 0800 	movlt.w	r8, #0
 8013e34:	4647      	movlt	r7, r8
 8013e36:	a31e      	add	r3, pc, #120	@ (adr r3, 8013eb0 <rcl_wait+0x2e0>)
 8013e38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e3c:	4640      	mov	r0, r8
 8013e3e:	4639      	mov	r1, r7
 8013e40:	f7ec fe24 	bl	8000a8c <__aeabi_ldivmod>
 8013e44:	a31a      	add	r3, pc, #104	@ (adr r3, 8013eb0 <rcl_wait+0x2e0>)
 8013e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013e4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8013e4e:	4640      	mov	r0, r8
 8013e50:	4639      	mov	r1, r7
 8013e52:	f7ec fe1b 	bl	8000a8c <__aeabi_ldivmod>
 8013e56:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8013e5a:	ab08      	add	r3, sp, #32
 8013e5c:	e73e      	b.n	8013cdc <rcl_wait+0x10c>
 8013e5e:	2001      	movs	r0, #1
 8013e60:	b00d      	add	sp, #52	@ 0x34
 8013e62:	ecbd 8b02 	vpop	{d8}
 8013e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e6a:	200b      	movs	r0, #11
 8013e6c:	b00d      	add	sp, #52	@ 0x34
 8013e6e:	ecbd 8b02 	vpop	{d8}
 8013e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e76:	465b      	mov	r3, fp
 8013e78:	2b00      	cmp	r3, #0
 8013e7a:	d1d7      	bne.n	8013e2c <rcl_wait+0x25c>
 8013e7c:	e72e      	b.n	8013cdc <rcl_wait+0x10c>
 8013e7e:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8013e82:	430b      	orrs	r3, r1
 8013e84:	bf08      	it	eq
 8013e86:	4691      	moveq	r9, r2
 8013e88:	f43f af21 	beq.w	8013cce <rcl_wait+0xfe>
 8013e8c:	9b04      	ldr	r3, [sp, #16]
 8013e8e:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 8013e92:	f06f 4700 	mvn.w	r7, #2147483648	@ 0x80000000
 8013e96:	2b01      	cmp	r3, #1
 8013e98:	9b05      	ldr	r3, [sp, #20]
 8013e9a:	f173 0300 	sbcs.w	r3, r3, #0
 8013e9e:	f04f 0300 	mov.w	r3, #0
 8013ea2:	4699      	mov	r9, r3
 8013ea4:	dac2      	bge.n	8013e2c <rcl_wait+0x25c>
 8013ea6:	e719      	b.n	8013cdc <rcl_wait+0x10c>
 8013ea8:	ffffffff 	.word	0xffffffff
 8013eac:	7fffffff 	.word	0x7fffffff
 8013eb0:	3b9aca00 	.word	0x3b9aca00
 8013eb4:	00000000 	.word	0x00000000

08013eb8 <rcl_action_take_goal_response>:
 8013eb8:	2800      	cmp	r0, #0
 8013eba:	d039      	beq.n	8013f30 <rcl_action_take_goal_response+0x78>
 8013ebc:	b570      	push	{r4, r5, r6, lr}
 8013ebe:	4604      	mov	r4, r0
 8013ec0:	6800      	ldr	r0, [r0, #0]
 8013ec2:	b380      	cbz	r0, 8013f26 <rcl_action_take_goal_response+0x6e>
 8013ec4:	460d      	mov	r5, r1
 8013ec6:	4616      	mov	r6, r2
 8013ec8:	f7fe f842 	bl	8011f50 <rcl_client_is_valid>
 8013ecc:	b330      	cbz	r0, 8013f1c <rcl_action_take_goal_response+0x64>
 8013ece:	6820      	ldr	r0, [r4, #0]
 8013ed0:	3004      	adds	r0, #4
 8013ed2:	f7fe f83d 	bl	8011f50 <rcl_client_is_valid>
 8013ed6:	b308      	cbz	r0, 8013f1c <rcl_action_take_goal_response+0x64>
 8013ed8:	6820      	ldr	r0, [r4, #0]
 8013eda:	3008      	adds	r0, #8
 8013edc:	f7fe f838 	bl	8011f50 <rcl_client_is_valid>
 8013ee0:	b1e0      	cbz	r0, 8013f1c <rcl_action_take_goal_response+0x64>
 8013ee2:	6820      	ldr	r0, [r4, #0]
 8013ee4:	300c      	adds	r0, #12
 8013ee6:	f7fe fdf5 	bl	8012ad4 <rcl_subscription_is_valid>
 8013eea:	b1b8      	cbz	r0, 8013f1c <rcl_action_take_goal_response+0x64>
 8013eec:	6820      	ldr	r0, [r4, #0]
 8013eee:	3010      	adds	r0, #16
 8013ef0:	f7fe fdf0 	bl	8012ad4 <rcl_subscription_is_valid>
 8013ef4:	b190      	cbz	r0, 8013f1c <rcl_action_take_goal_response+0x64>
 8013ef6:	b1cd      	cbz	r5, 8013f2c <rcl_action_take_goal_response+0x74>
 8013ef8:	b1c6      	cbz	r6, 8013f2c <rcl_action_take_goal_response+0x74>
 8013efa:	6820      	ldr	r0, [r4, #0]
 8013efc:	4632      	mov	r2, r6
 8013efe:	4629      	mov	r1, r5
 8013f00:	f7fd ffde 	bl	8011ec0 <rcl_take_response>
 8013f04:	b148      	cbz	r0, 8013f1a <rcl_action_take_goal_response+0x62>
 8013f06:	280a      	cmp	r0, #10
 8013f08:	d007      	beq.n	8013f1a <rcl_action_take_goal_response+0x62>
 8013f0a:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8013f0e:	f640 0337 	movw	r3, #2103	@ 0x837
 8013f12:	4290      	cmp	r0, r2
 8013f14:	bf0c      	ite	eq
 8013f16:	4618      	moveq	r0, r3
 8013f18:	2001      	movne	r0, #1
 8013f1a:	bd70      	pop	{r4, r5, r6, pc}
 8013f1c:	f7f9 fa14 	bl	800d348 <rcutils_reset_error>
 8013f20:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f24:	bd70      	pop	{r4, r5, r6, pc}
 8013f26:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f2a:	bd70      	pop	{r4, r5, r6, pc}
 8013f2c:	200b      	movs	r0, #11
 8013f2e:	bd70      	pop	{r4, r5, r6, pc}
 8013f30:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f34:	4770      	bx	lr
 8013f36:	bf00      	nop

08013f38 <rcl_action_send_result_request>:
 8013f38:	b390      	cbz	r0, 8013fa0 <rcl_action_send_result_request+0x68>
 8013f3a:	b570      	push	{r4, r5, r6, lr}
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	6800      	ldr	r0, [r0, #0]
 8013f40:	b348      	cbz	r0, 8013f96 <rcl_action_send_result_request+0x5e>
 8013f42:	460d      	mov	r5, r1
 8013f44:	4616      	mov	r6, r2
 8013f46:	f7fe f803 	bl	8011f50 <rcl_client_is_valid>
 8013f4a:	b1f8      	cbz	r0, 8013f8c <rcl_action_send_result_request+0x54>
 8013f4c:	6820      	ldr	r0, [r4, #0]
 8013f4e:	3004      	adds	r0, #4
 8013f50:	f7fd fffe 	bl	8011f50 <rcl_client_is_valid>
 8013f54:	b1d0      	cbz	r0, 8013f8c <rcl_action_send_result_request+0x54>
 8013f56:	6820      	ldr	r0, [r4, #0]
 8013f58:	3008      	adds	r0, #8
 8013f5a:	f7fd fff9 	bl	8011f50 <rcl_client_is_valid>
 8013f5e:	b1a8      	cbz	r0, 8013f8c <rcl_action_send_result_request+0x54>
 8013f60:	6820      	ldr	r0, [r4, #0]
 8013f62:	300c      	adds	r0, #12
 8013f64:	f7fe fdb6 	bl	8012ad4 <rcl_subscription_is_valid>
 8013f68:	b180      	cbz	r0, 8013f8c <rcl_action_send_result_request+0x54>
 8013f6a:	6820      	ldr	r0, [r4, #0]
 8013f6c:	3010      	adds	r0, #16
 8013f6e:	f7fe fdb1 	bl	8012ad4 <rcl_subscription_is_valid>
 8013f72:	b158      	cbz	r0, 8013f8c <rcl_action_send_result_request+0x54>
 8013f74:	b195      	cbz	r5, 8013f9c <rcl_action_send_result_request+0x64>
 8013f76:	b18e      	cbz	r6, 8013f9c <rcl_action_send_result_request+0x64>
 8013f78:	6820      	ldr	r0, [r4, #0]
 8013f7a:	4632      	mov	r2, r6
 8013f7c:	4629      	mov	r1, r5
 8013f7e:	3008      	adds	r0, #8
 8013f80:	f7fd ff66 	bl	8011e50 <rcl_send_request>
 8013f84:	3800      	subs	r0, #0
 8013f86:	bf18      	it	ne
 8013f88:	2001      	movne	r0, #1
 8013f8a:	bd70      	pop	{r4, r5, r6, pc}
 8013f8c:	f7f9 f9dc 	bl	800d348 <rcutils_reset_error>
 8013f90:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f94:	bd70      	pop	{r4, r5, r6, pc}
 8013f96:	f640 0036 	movw	r0, #2102	@ 0x836
 8013f9a:	bd70      	pop	{r4, r5, r6, pc}
 8013f9c:	200b      	movs	r0, #11
 8013f9e:	bd70      	pop	{r4, r5, r6, pc}
 8013fa0:	f640 0036 	movw	r0, #2102	@ 0x836
 8013fa4:	4770      	bx	lr
 8013fa6:	bf00      	nop

08013fa8 <rcl_action_take_result_response>:
 8013fa8:	2800      	cmp	r0, #0
 8013faa:	d03a      	beq.n	8014022 <rcl_action_take_result_response+0x7a>
 8013fac:	b570      	push	{r4, r5, r6, lr}
 8013fae:	4604      	mov	r4, r0
 8013fb0:	6800      	ldr	r0, [r0, #0]
 8013fb2:	b388      	cbz	r0, 8014018 <rcl_action_take_result_response+0x70>
 8013fb4:	460d      	mov	r5, r1
 8013fb6:	4616      	mov	r6, r2
 8013fb8:	f7fd ffca 	bl	8011f50 <rcl_client_is_valid>
 8013fbc:	b338      	cbz	r0, 801400e <rcl_action_take_result_response+0x66>
 8013fbe:	6820      	ldr	r0, [r4, #0]
 8013fc0:	3004      	adds	r0, #4
 8013fc2:	f7fd ffc5 	bl	8011f50 <rcl_client_is_valid>
 8013fc6:	b310      	cbz	r0, 801400e <rcl_action_take_result_response+0x66>
 8013fc8:	6820      	ldr	r0, [r4, #0]
 8013fca:	3008      	adds	r0, #8
 8013fcc:	f7fd ffc0 	bl	8011f50 <rcl_client_is_valid>
 8013fd0:	b1e8      	cbz	r0, 801400e <rcl_action_take_result_response+0x66>
 8013fd2:	6820      	ldr	r0, [r4, #0]
 8013fd4:	300c      	adds	r0, #12
 8013fd6:	f7fe fd7d 	bl	8012ad4 <rcl_subscription_is_valid>
 8013fda:	b1c0      	cbz	r0, 801400e <rcl_action_take_result_response+0x66>
 8013fdc:	6820      	ldr	r0, [r4, #0]
 8013fde:	3010      	adds	r0, #16
 8013fe0:	f7fe fd78 	bl	8012ad4 <rcl_subscription_is_valid>
 8013fe4:	b198      	cbz	r0, 801400e <rcl_action_take_result_response+0x66>
 8013fe6:	b1d5      	cbz	r5, 801401e <rcl_action_take_result_response+0x76>
 8013fe8:	b1ce      	cbz	r6, 801401e <rcl_action_take_result_response+0x76>
 8013fea:	6820      	ldr	r0, [r4, #0]
 8013fec:	4632      	mov	r2, r6
 8013fee:	4629      	mov	r1, r5
 8013ff0:	3008      	adds	r0, #8
 8013ff2:	f7fd ff65 	bl	8011ec0 <rcl_take_response>
 8013ff6:	b148      	cbz	r0, 801400c <rcl_action_take_result_response+0x64>
 8013ff8:	280a      	cmp	r0, #10
 8013ffa:	d007      	beq.n	801400c <rcl_action_take_result_response+0x64>
 8013ffc:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014000:	f640 0337 	movw	r3, #2103	@ 0x837
 8014004:	4290      	cmp	r0, r2
 8014006:	bf0c      	ite	eq
 8014008:	4618      	moveq	r0, r3
 801400a:	2001      	movne	r0, #1
 801400c:	bd70      	pop	{r4, r5, r6, pc}
 801400e:	f7f9 f99b 	bl	800d348 <rcutils_reset_error>
 8014012:	f640 0036 	movw	r0, #2102	@ 0x836
 8014016:	bd70      	pop	{r4, r5, r6, pc}
 8014018:	f640 0036 	movw	r0, #2102	@ 0x836
 801401c:	bd70      	pop	{r4, r5, r6, pc}
 801401e:	200b      	movs	r0, #11
 8014020:	bd70      	pop	{r4, r5, r6, pc}
 8014022:	f640 0036 	movw	r0, #2102	@ 0x836
 8014026:	4770      	bx	lr

08014028 <rcl_action_take_cancel_response>:
 8014028:	2800      	cmp	r0, #0
 801402a:	d03a      	beq.n	80140a2 <rcl_action_take_cancel_response+0x7a>
 801402c:	b570      	push	{r4, r5, r6, lr}
 801402e:	4604      	mov	r4, r0
 8014030:	6800      	ldr	r0, [r0, #0]
 8014032:	b388      	cbz	r0, 8014098 <rcl_action_take_cancel_response+0x70>
 8014034:	460d      	mov	r5, r1
 8014036:	4616      	mov	r6, r2
 8014038:	f7fd ff8a 	bl	8011f50 <rcl_client_is_valid>
 801403c:	b338      	cbz	r0, 801408e <rcl_action_take_cancel_response+0x66>
 801403e:	6820      	ldr	r0, [r4, #0]
 8014040:	3004      	adds	r0, #4
 8014042:	f7fd ff85 	bl	8011f50 <rcl_client_is_valid>
 8014046:	b310      	cbz	r0, 801408e <rcl_action_take_cancel_response+0x66>
 8014048:	6820      	ldr	r0, [r4, #0]
 801404a:	3008      	adds	r0, #8
 801404c:	f7fd ff80 	bl	8011f50 <rcl_client_is_valid>
 8014050:	b1e8      	cbz	r0, 801408e <rcl_action_take_cancel_response+0x66>
 8014052:	6820      	ldr	r0, [r4, #0]
 8014054:	300c      	adds	r0, #12
 8014056:	f7fe fd3d 	bl	8012ad4 <rcl_subscription_is_valid>
 801405a:	b1c0      	cbz	r0, 801408e <rcl_action_take_cancel_response+0x66>
 801405c:	6820      	ldr	r0, [r4, #0]
 801405e:	3010      	adds	r0, #16
 8014060:	f7fe fd38 	bl	8012ad4 <rcl_subscription_is_valid>
 8014064:	b198      	cbz	r0, 801408e <rcl_action_take_cancel_response+0x66>
 8014066:	b1d5      	cbz	r5, 801409e <rcl_action_take_cancel_response+0x76>
 8014068:	b1ce      	cbz	r6, 801409e <rcl_action_take_cancel_response+0x76>
 801406a:	6820      	ldr	r0, [r4, #0]
 801406c:	4632      	mov	r2, r6
 801406e:	4629      	mov	r1, r5
 8014070:	3004      	adds	r0, #4
 8014072:	f7fd ff25 	bl	8011ec0 <rcl_take_response>
 8014076:	b148      	cbz	r0, 801408c <rcl_action_take_cancel_response+0x64>
 8014078:	280a      	cmp	r0, #10
 801407a:	d007      	beq.n	801408c <rcl_action_take_cancel_response+0x64>
 801407c:	f240 12f5 	movw	r2, #501	@ 0x1f5
 8014080:	f640 0337 	movw	r3, #2103	@ 0x837
 8014084:	4290      	cmp	r0, r2
 8014086:	bf0c      	ite	eq
 8014088:	4618      	moveq	r0, r3
 801408a:	2001      	movne	r0, #1
 801408c:	bd70      	pop	{r4, r5, r6, pc}
 801408e:	f7f9 f95b 	bl	800d348 <rcutils_reset_error>
 8014092:	f640 0036 	movw	r0, #2102	@ 0x836
 8014096:	bd70      	pop	{r4, r5, r6, pc}
 8014098:	f640 0036 	movw	r0, #2102	@ 0x836
 801409c:	bd70      	pop	{r4, r5, r6, pc}
 801409e:	200b      	movs	r0, #11
 80140a0:	bd70      	pop	{r4, r5, r6, pc}
 80140a2:	f640 0036 	movw	r0, #2102	@ 0x836
 80140a6:	4770      	bx	lr

080140a8 <rcl_action_take_feedback>:
 80140a8:	2800      	cmp	r0, #0
 80140aa:	d038      	beq.n	801411e <rcl_action_take_feedback+0x76>
 80140ac:	b530      	push	{r4, r5, lr}
 80140ae:	4604      	mov	r4, r0
 80140b0:	6800      	ldr	r0, [r0, #0]
 80140b2:	b091      	sub	sp, #68	@ 0x44
 80140b4:	b378      	cbz	r0, 8014116 <rcl_action_take_feedback+0x6e>
 80140b6:	460d      	mov	r5, r1
 80140b8:	f7fd ff4a 	bl	8011f50 <rcl_client_is_valid>
 80140bc:	b328      	cbz	r0, 801410a <rcl_action_take_feedback+0x62>
 80140be:	6820      	ldr	r0, [r4, #0]
 80140c0:	3004      	adds	r0, #4
 80140c2:	f7fd ff45 	bl	8011f50 <rcl_client_is_valid>
 80140c6:	b300      	cbz	r0, 801410a <rcl_action_take_feedback+0x62>
 80140c8:	6820      	ldr	r0, [r4, #0]
 80140ca:	3008      	adds	r0, #8
 80140cc:	f7fd ff40 	bl	8011f50 <rcl_client_is_valid>
 80140d0:	b1d8      	cbz	r0, 801410a <rcl_action_take_feedback+0x62>
 80140d2:	6820      	ldr	r0, [r4, #0]
 80140d4:	300c      	adds	r0, #12
 80140d6:	f7fe fcfd 	bl	8012ad4 <rcl_subscription_is_valid>
 80140da:	b1b0      	cbz	r0, 801410a <rcl_action_take_feedback+0x62>
 80140dc:	6820      	ldr	r0, [r4, #0]
 80140de:	3010      	adds	r0, #16
 80140e0:	f7fe fcf8 	bl	8012ad4 <rcl_subscription_is_valid>
 80140e4:	b188      	cbz	r0, 801410a <rcl_action_take_feedback+0x62>
 80140e6:	b1ed      	cbz	r5, 8014124 <rcl_action_take_feedback+0x7c>
 80140e8:	6820      	ldr	r0, [r4, #0]
 80140ea:	2300      	movs	r3, #0
 80140ec:	466a      	mov	r2, sp
 80140ee:	4629      	mov	r1, r5
 80140f0:	300c      	adds	r0, #12
 80140f2:	f7fe fc91 	bl	8012a18 <rcl_take>
 80140f6:	b160      	cbz	r0, 8014112 <rcl_action_take_feedback+0x6a>
 80140f8:	f240 1391 	movw	r3, #401	@ 0x191
 80140fc:	4298      	cmp	r0, r3
 80140fe:	d014      	beq.n	801412a <rcl_action_take_feedback+0x82>
 8014100:	280a      	cmp	r0, #10
 8014102:	bf18      	it	ne
 8014104:	2001      	movne	r0, #1
 8014106:	b011      	add	sp, #68	@ 0x44
 8014108:	bd30      	pop	{r4, r5, pc}
 801410a:	f7f9 f91d 	bl	800d348 <rcutils_reset_error>
 801410e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014112:	b011      	add	sp, #68	@ 0x44
 8014114:	bd30      	pop	{r4, r5, pc}
 8014116:	f640 0036 	movw	r0, #2102	@ 0x836
 801411a:	b011      	add	sp, #68	@ 0x44
 801411c:	bd30      	pop	{r4, r5, pc}
 801411e:	f640 0036 	movw	r0, #2102	@ 0x836
 8014122:	4770      	bx	lr
 8014124:	200b      	movs	r0, #11
 8014126:	b011      	add	sp, #68	@ 0x44
 8014128:	bd30      	pop	{r4, r5, pc}
 801412a:	f640 0037 	movw	r0, #2103	@ 0x837
 801412e:	e7f0      	b.n	8014112 <rcl_action_take_feedback+0x6a>

08014130 <rcl_action_wait_set_add_action_client>:
 8014130:	2800      	cmp	r0, #0
 8014132:	d048      	beq.n	80141c6 <rcl_action_wait_set_add_action_client+0x96>
 8014134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014136:	460c      	mov	r4, r1
 8014138:	2900      	cmp	r1, #0
 801413a:	d03c      	beq.n	80141b6 <rcl_action_wait_set_add_action_client+0x86>
 801413c:	4605      	mov	r5, r0
 801413e:	6808      	ldr	r0, [r1, #0]
 8014140:	2800      	cmp	r0, #0
 8014142:	d038      	beq.n	80141b6 <rcl_action_wait_set_add_action_client+0x86>
 8014144:	4617      	mov	r7, r2
 8014146:	461e      	mov	r6, r3
 8014148:	f7fd ff02 	bl	8011f50 <rcl_client_is_valid>
 801414c:	b3b0      	cbz	r0, 80141bc <rcl_action_wait_set_add_action_client+0x8c>
 801414e:	6820      	ldr	r0, [r4, #0]
 8014150:	3004      	adds	r0, #4
 8014152:	f7fd fefd 	bl	8011f50 <rcl_client_is_valid>
 8014156:	b388      	cbz	r0, 80141bc <rcl_action_wait_set_add_action_client+0x8c>
 8014158:	6820      	ldr	r0, [r4, #0]
 801415a:	3008      	adds	r0, #8
 801415c:	f7fd fef8 	bl	8011f50 <rcl_client_is_valid>
 8014160:	b360      	cbz	r0, 80141bc <rcl_action_wait_set_add_action_client+0x8c>
 8014162:	6820      	ldr	r0, [r4, #0]
 8014164:	300c      	adds	r0, #12
 8014166:	f7fe fcb5 	bl	8012ad4 <rcl_subscription_is_valid>
 801416a:	b338      	cbz	r0, 80141bc <rcl_action_wait_set_add_action_client+0x8c>
 801416c:	6820      	ldr	r0, [r4, #0]
 801416e:	3010      	adds	r0, #16
 8014170:	f7fe fcb0 	bl	8012ad4 <rcl_subscription_is_valid>
 8014174:	b310      	cbz	r0, 80141bc <rcl_action_wait_set_add_action_client+0x8c>
 8014176:	6821      	ldr	r1, [r4, #0]
 8014178:	4628      	mov	r0, r5
 801417a:	f501 72e2 	add.w	r2, r1, #452	@ 0x1c4
 801417e:	f7ff fccd 	bl	8013b1c <rcl_wait_set_add_client>
 8014182:	b9b8      	cbnz	r0, 80141b4 <rcl_action_wait_set_add_action_client+0x84>
 8014184:	6821      	ldr	r1, [r4, #0]
 8014186:	4628      	mov	r0, r5
 8014188:	f501 72e4 	add.w	r2, r1, #456	@ 0x1c8
 801418c:	3104      	adds	r1, #4
 801418e:	f7ff fcc5 	bl	8013b1c <rcl_wait_set_add_client>
 8014192:	b978      	cbnz	r0, 80141b4 <rcl_action_wait_set_add_action_client+0x84>
 8014194:	6821      	ldr	r1, [r4, #0]
 8014196:	4628      	mov	r0, r5
 8014198:	f501 72e6 	add.w	r2, r1, #460	@ 0x1cc
 801419c:	3108      	adds	r1, #8
 801419e:	f7ff fcbd 	bl	8013b1c <rcl_wait_set_add_client>
 80141a2:	b938      	cbnz	r0, 80141b4 <rcl_action_wait_set_add_action_client+0x84>
 80141a4:	6821      	ldr	r1, [r4, #0]
 80141a6:	4628      	mov	r0, r5
 80141a8:	f501 72e8 	add.w	r2, r1, #464	@ 0x1d0
 80141ac:	310c      	adds	r1, #12
 80141ae:	f7ff f96d 	bl	801348c <rcl_wait_set_add_subscription>
 80141b2:	b158      	cbz	r0, 80141cc <rcl_action_wait_set_add_action_client+0x9c>
 80141b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141b6:	f640 0036 	movw	r0, #2102	@ 0x836
 80141ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141bc:	f7f9 f8c4 	bl	800d348 <rcutils_reset_error>
 80141c0:	f640 0036 	movw	r0, #2102	@ 0x836
 80141c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141c6:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80141ca:	4770      	bx	lr
 80141cc:	6821      	ldr	r1, [r4, #0]
 80141ce:	4628      	mov	r0, r5
 80141d0:	f501 72ea 	add.w	r2, r1, #468	@ 0x1d4
 80141d4:	3110      	adds	r1, #16
 80141d6:	f7ff f959 	bl	801348c <rcl_wait_set_add_subscription>
 80141da:	2800      	cmp	r0, #0
 80141dc:	d1ea      	bne.n	80141b4 <rcl_action_wait_set_add_action_client+0x84>
 80141de:	b11f      	cbz	r7, 80141e8 <rcl_action_wait_set_add_action_client+0xb8>
 80141e0:	6823      	ldr	r3, [r4, #0]
 80141e2:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 80141e6:	603b      	str	r3, [r7, #0]
 80141e8:	2e00      	cmp	r6, #0
 80141ea:	d0e3      	beq.n	80141b4 <rcl_action_wait_set_add_action_client+0x84>
 80141ec:	6823      	ldr	r3, [r4, #0]
 80141ee:	f8d3 31d0 	ldr.w	r3, [r3, #464]	@ 0x1d0
 80141f2:	6033      	str	r3, [r6, #0]
 80141f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80141f6:	bf00      	nop

080141f8 <rcl_action_client_wait_set_get_entities_ready>:
 80141f8:	2800      	cmp	r0, #0
 80141fa:	f000 808d 	beq.w	8014318 <rcl_action_client_wait_set_get_entities_ready+0x120>
 80141fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014202:	460c      	mov	r4, r1
 8014204:	2900      	cmp	r1, #0
 8014206:	d077      	beq.n	80142f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014208:	4605      	mov	r5, r0
 801420a:	6808      	ldr	r0, [r1, #0]
 801420c:	2800      	cmp	r0, #0
 801420e:	d073      	beq.n	80142f8 <rcl_action_client_wait_set_get_entities_ready+0x100>
 8014210:	4616      	mov	r6, r2
 8014212:	461f      	mov	r7, r3
 8014214:	f7fd fe9c 	bl	8011f50 <rcl_client_is_valid>
 8014218:	2800      	cmp	r0, #0
 801421a:	d071      	beq.n	8014300 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801421c:	6820      	ldr	r0, [r4, #0]
 801421e:	3004      	adds	r0, #4
 8014220:	f7fd fe96 	bl	8011f50 <rcl_client_is_valid>
 8014224:	2800      	cmp	r0, #0
 8014226:	d06b      	beq.n	8014300 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014228:	6820      	ldr	r0, [r4, #0]
 801422a:	3008      	adds	r0, #8
 801422c:	f7fd fe90 	bl	8011f50 <rcl_client_is_valid>
 8014230:	2800      	cmp	r0, #0
 8014232:	d065      	beq.n	8014300 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014234:	6820      	ldr	r0, [r4, #0]
 8014236:	300c      	adds	r0, #12
 8014238:	f7fe fc4c 	bl	8012ad4 <rcl_subscription_is_valid>
 801423c:	2800      	cmp	r0, #0
 801423e:	d05f      	beq.n	8014300 <rcl_action_client_wait_set_get_entities_ready+0x108>
 8014240:	6820      	ldr	r0, [r4, #0]
 8014242:	3010      	adds	r0, #16
 8014244:	f7fe fc46 	bl	8012ad4 <rcl_subscription_is_valid>
 8014248:	2800      	cmp	r0, #0
 801424a:	d059      	beq.n	8014300 <rcl_action_client_wait_set_get_entities_ready+0x108>
 801424c:	2e00      	cmp	r6, #0
 801424e:	d060      	beq.n	8014312 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014250:	2f00      	cmp	r7, #0
 8014252:	d05e      	beq.n	8014312 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014254:	9b06      	ldr	r3, [sp, #24]
 8014256:	2b00      	cmp	r3, #0
 8014258:	d05b      	beq.n	8014312 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 801425a:	9b07      	ldr	r3, [sp, #28]
 801425c:	2b00      	cmp	r3, #0
 801425e:	d058      	beq.n	8014312 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014260:	9b08      	ldr	r3, [sp, #32]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d055      	beq.n	8014312 <rcl_action_client_wait_set_get_entities_ready+0x11a>
 8014266:	6823      	ldr	r3, [r4, #0]
 8014268:	686a      	ldr	r2, [r5, #4]
 801426a:	f8d3 11d0 	ldr.w	r1, [r3, #464]	@ 0x1d0
 801426e:	428a      	cmp	r2, r1
 8014270:	d94c      	bls.n	801430c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014272:	f8d3 01d4 	ldr.w	r0, [r3, #468]	@ 0x1d4
 8014276:	4282      	cmp	r2, r0
 8014278:	d948      	bls.n	801430c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801427a:	f8d3 41c4 	ldr.w	r4, [r3, #452]	@ 0x1c4
 801427e:	69ea      	ldr	r2, [r5, #28]
 8014280:	42a2      	cmp	r2, r4
 8014282:	d943      	bls.n	801430c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014284:	f8d3 c1c8 	ldr.w	ip, [r3, #456]	@ 0x1c8
 8014288:	4562      	cmp	r2, ip
 801428a:	d93f      	bls.n	801430c <rcl_action_client_wait_set_get_entities_ready+0x114>
 801428c:	f8d3 e1cc 	ldr.w	lr, [r3, #460]	@ 0x1cc
 8014290:	4572      	cmp	r2, lr
 8014292:	d93b      	bls.n	801430c <rcl_action_client_wait_set_get_entities_ready+0x114>
 8014294:	69aa      	ldr	r2, [r5, #24]
 8014296:	682d      	ldr	r5, [r5, #0]
 8014298:	f852 8024 	ldr.w	r8, [r2, r4, lsl #2]
 801429c:	f855 4020 	ldr.w	r4, [r5, r0, lsl #2]
 80142a0:	f855 5021 	ldr.w	r5, [r5, r1, lsl #2]
 80142a4:	f852 102c 	ldr.w	r1, [r2, ip, lsl #2]
 80142a8:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
 80142ac:	f103 0c0c 	add.w	ip, r3, #12
 80142b0:	eba5 050c 	sub.w	r5, r5, ip
 80142b4:	fab5 f585 	clz	r5, r5
 80142b8:	096d      	lsrs	r5, r5, #5
 80142ba:	7035      	strb	r5, [r6, #0]
 80142bc:	f103 0510 	add.w	r5, r3, #16
 80142c0:	1b64      	subs	r4, r4, r5
 80142c2:	fab4 f484 	clz	r4, r4
 80142c6:	0964      	lsrs	r4, r4, #5
 80142c8:	703c      	strb	r4, [r7, #0]
 80142ca:	eba3 0008 	sub.w	r0, r3, r8
 80142ce:	1d1c      	adds	r4, r3, #4
 80142d0:	3308      	adds	r3, #8
 80142d2:	1ad3      	subs	r3, r2, r3
 80142d4:	fab0 f080 	clz	r0, r0
 80142d8:	9a06      	ldr	r2, [sp, #24]
 80142da:	0940      	lsrs	r0, r0, #5
 80142dc:	1b09      	subs	r1, r1, r4
 80142de:	7010      	strb	r0, [r2, #0]
 80142e0:	fab1 f181 	clz	r1, r1
 80142e4:	9a07      	ldr	r2, [sp, #28]
 80142e6:	0949      	lsrs	r1, r1, #5
 80142e8:	7011      	strb	r1, [r2, #0]
 80142ea:	fab3 f383 	clz	r3, r3
 80142ee:	9a08      	ldr	r2, [sp, #32]
 80142f0:	095b      	lsrs	r3, r3, #5
 80142f2:	2000      	movs	r0, #0
 80142f4:	7013      	strb	r3, [r2, #0]
 80142f6:	e001      	b.n	80142fc <rcl_action_client_wait_set_get_entities_ready+0x104>
 80142f8:	f640 0036 	movw	r0, #2102	@ 0x836
 80142fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014300:	f7f9 f822 	bl	800d348 <rcutils_reset_error>
 8014304:	f640 0036 	movw	r0, #2102	@ 0x836
 8014308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801430c:	2001      	movs	r0, #1
 801430e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014312:	200b      	movs	r0, #11
 8014314:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014318:	f44f 7061 	mov.w	r0, #900	@ 0x384
 801431c:	4770      	bx	lr
 801431e:	bf00      	nop

08014320 <rcl_action_take_goal_request>:
 8014320:	2800      	cmp	r0, #0
 8014322:	d039      	beq.n	8014398 <rcl_action_take_goal_request+0x78>
 8014324:	b570      	push	{r4, r5, r6, lr}
 8014326:	4604      	mov	r4, r0
 8014328:	6800      	ldr	r0, [r0, #0]
 801432a:	b380      	cbz	r0, 801438e <rcl_action_take_goal_request+0x6e>
 801432c:	460d      	mov	r5, r1
 801432e:	4616      	mov	r6, r2
 8014330:	f7fe fb68 	bl	8012a04 <rcl_service_is_valid>
 8014334:	b330      	cbz	r0, 8014384 <rcl_action_take_goal_request+0x64>
 8014336:	6820      	ldr	r0, [r4, #0]
 8014338:	3004      	adds	r0, #4
 801433a:	f7fe fb63 	bl	8012a04 <rcl_service_is_valid>
 801433e:	b308      	cbz	r0, 8014384 <rcl_action_take_goal_request+0x64>
 8014340:	6820      	ldr	r0, [r4, #0]
 8014342:	3008      	adds	r0, #8
 8014344:	f7fe fb5e 	bl	8012a04 <rcl_service_is_valid>
 8014348:	b1e0      	cbz	r0, 8014384 <rcl_action_take_goal_request+0x64>
 801434a:	6820      	ldr	r0, [r4, #0]
 801434c:	300c      	adds	r0, #12
 801434e:	f7f8 f88b 	bl	800c468 <rcl_publisher_is_valid>
 8014352:	b1b8      	cbz	r0, 8014384 <rcl_action_take_goal_request+0x64>
 8014354:	6820      	ldr	r0, [r4, #0]
 8014356:	3010      	adds	r0, #16
 8014358:	f7f8 f886 	bl	800c468 <rcl_publisher_is_valid>
 801435c:	b190      	cbz	r0, 8014384 <rcl_action_take_goal_request+0x64>
 801435e:	b1cd      	cbz	r5, 8014394 <rcl_action_take_goal_request+0x74>
 8014360:	b1c6      	cbz	r6, 8014394 <rcl_action_take_goal_request+0x74>
 8014362:	6820      	ldr	r0, [r4, #0]
 8014364:	4632      	mov	r2, r6
 8014366:	4629      	mov	r1, r5
 8014368:	f7fe faf4 	bl	8012954 <rcl_take_request>
 801436c:	b148      	cbz	r0, 8014382 <rcl_action_take_goal_request+0x62>
 801436e:	280a      	cmp	r0, #10
 8014370:	d007      	beq.n	8014382 <rcl_action_take_goal_request+0x62>
 8014372:	f240 2259 	movw	r2, #601	@ 0x259
 8014376:	f640 0399 	movw	r3, #2201	@ 0x899
 801437a:	4290      	cmp	r0, r2
 801437c:	bf0c      	ite	eq
 801437e:	4618      	moveq	r0, r3
 8014380:	2001      	movne	r0, #1
 8014382:	bd70      	pop	{r4, r5, r6, pc}
 8014384:	f7f8 ffe0 	bl	800d348 <rcutils_reset_error>
 8014388:	f640 0098 	movw	r0, #2200	@ 0x898
 801438c:	bd70      	pop	{r4, r5, r6, pc}
 801438e:	f640 0098 	movw	r0, #2200	@ 0x898
 8014392:	bd70      	pop	{r4, r5, r6, pc}
 8014394:	200b      	movs	r0, #11
 8014396:	bd70      	pop	{r4, r5, r6, pc}
 8014398:	f640 0098 	movw	r0, #2200	@ 0x898
 801439c:	4770      	bx	lr
 801439e:	bf00      	nop

080143a0 <rcl_action_send_goal_response>:
 80143a0:	b390      	cbz	r0, 8014408 <rcl_action_send_goal_response+0x68>
 80143a2:	b570      	push	{r4, r5, r6, lr}
 80143a4:	4604      	mov	r4, r0
 80143a6:	6800      	ldr	r0, [r0, #0]
 80143a8:	b348      	cbz	r0, 80143fe <rcl_action_send_goal_response+0x5e>
 80143aa:	460d      	mov	r5, r1
 80143ac:	4616      	mov	r6, r2
 80143ae:	f7fe fb29 	bl	8012a04 <rcl_service_is_valid>
 80143b2:	b1f8      	cbz	r0, 80143f4 <rcl_action_send_goal_response+0x54>
 80143b4:	6820      	ldr	r0, [r4, #0]
 80143b6:	3004      	adds	r0, #4
 80143b8:	f7fe fb24 	bl	8012a04 <rcl_service_is_valid>
 80143bc:	b1d0      	cbz	r0, 80143f4 <rcl_action_send_goal_response+0x54>
 80143be:	6820      	ldr	r0, [r4, #0]
 80143c0:	3008      	adds	r0, #8
 80143c2:	f7fe fb1f 	bl	8012a04 <rcl_service_is_valid>
 80143c6:	b1a8      	cbz	r0, 80143f4 <rcl_action_send_goal_response+0x54>
 80143c8:	6820      	ldr	r0, [r4, #0]
 80143ca:	300c      	adds	r0, #12
 80143cc:	f7f8 f84c 	bl	800c468 <rcl_publisher_is_valid>
 80143d0:	b180      	cbz	r0, 80143f4 <rcl_action_send_goal_response+0x54>
 80143d2:	6820      	ldr	r0, [r4, #0]
 80143d4:	3010      	adds	r0, #16
 80143d6:	f7f8 f847 	bl	800c468 <rcl_publisher_is_valid>
 80143da:	b158      	cbz	r0, 80143f4 <rcl_action_send_goal_response+0x54>
 80143dc:	b195      	cbz	r5, 8014404 <rcl_action_send_goal_response+0x64>
 80143de:	b18e      	cbz	r6, 8014404 <rcl_action_send_goal_response+0x64>
 80143e0:	6820      	ldr	r0, [r4, #0]
 80143e2:	4632      	mov	r2, r6
 80143e4:	4629      	mov	r1, r5
 80143e6:	f7fe faf5 	bl	80129d4 <rcl_send_response>
 80143ea:	b110      	cbz	r0, 80143f2 <rcl_action_send_goal_response+0x52>
 80143ec:	2802      	cmp	r0, #2
 80143ee:	bf18      	it	ne
 80143f0:	2001      	movne	r0, #1
 80143f2:	bd70      	pop	{r4, r5, r6, pc}
 80143f4:	f7f8 ffa8 	bl	800d348 <rcutils_reset_error>
 80143f8:	f640 0098 	movw	r0, #2200	@ 0x898
 80143fc:	bd70      	pop	{r4, r5, r6, pc}
 80143fe:	f640 0098 	movw	r0, #2200	@ 0x898
 8014402:	bd70      	pop	{r4, r5, r6, pc}
 8014404:	200b      	movs	r0, #11
 8014406:	bd70      	pop	{r4, r5, r6, pc}
 8014408:	f640 0098 	movw	r0, #2200	@ 0x898
 801440c:	4770      	bx	lr
 801440e:	bf00      	nop

08014410 <rcl_action_take_result_request>:
 8014410:	2800      	cmp	r0, #0
 8014412:	d03a      	beq.n	801448a <rcl_action_take_result_request+0x7a>
 8014414:	b570      	push	{r4, r5, r6, lr}
 8014416:	4604      	mov	r4, r0
 8014418:	6800      	ldr	r0, [r0, #0]
 801441a:	b388      	cbz	r0, 8014480 <rcl_action_take_result_request+0x70>
 801441c:	460d      	mov	r5, r1
 801441e:	4616      	mov	r6, r2
 8014420:	f7fe faf0 	bl	8012a04 <rcl_service_is_valid>
 8014424:	b338      	cbz	r0, 8014476 <rcl_action_take_result_request+0x66>
 8014426:	6820      	ldr	r0, [r4, #0]
 8014428:	3004      	adds	r0, #4
 801442a:	f7fe faeb 	bl	8012a04 <rcl_service_is_valid>
 801442e:	b310      	cbz	r0, 8014476 <rcl_action_take_result_request+0x66>
 8014430:	6820      	ldr	r0, [r4, #0]
 8014432:	3008      	adds	r0, #8
 8014434:	f7fe fae6 	bl	8012a04 <rcl_service_is_valid>
 8014438:	b1e8      	cbz	r0, 8014476 <rcl_action_take_result_request+0x66>
 801443a:	6820      	ldr	r0, [r4, #0]
 801443c:	300c      	adds	r0, #12
 801443e:	f7f8 f813 	bl	800c468 <rcl_publisher_is_valid>
 8014442:	b1c0      	cbz	r0, 8014476 <rcl_action_take_result_request+0x66>
 8014444:	6820      	ldr	r0, [r4, #0]
 8014446:	3010      	adds	r0, #16
 8014448:	f7f8 f80e 	bl	800c468 <rcl_publisher_is_valid>
 801444c:	b198      	cbz	r0, 8014476 <rcl_action_take_result_request+0x66>
 801444e:	b1d5      	cbz	r5, 8014486 <rcl_action_take_result_request+0x76>
 8014450:	b1ce      	cbz	r6, 8014486 <rcl_action_take_result_request+0x76>
 8014452:	6820      	ldr	r0, [r4, #0]
 8014454:	4632      	mov	r2, r6
 8014456:	4629      	mov	r1, r5
 8014458:	3008      	adds	r0, #8
 801445a:	f7fe fa7b 	bl	8012954 <rcl_take_request>
 801445e:	b148      	cbz	r0, 8014474 <rcl_action_take_result_request+0x64>
 8014460:	280a      	cmp	r0, #10
 8014462:	d007      	beq.n	8014474 <rcl_action_take_result_request+0x64>
 8014464:	f240 2259 	movw	r2, #601	@ 0x259
 8014468:	f640 0399 	movw	r3, #2201	@ 0x899
 801446c:	4290      	cmp	r0, r2
 801446e:	bf0c      	ite	eq
 8014470:	4618      	moveq	r0, r3
 8014472:	2001      	movne	r0, #1
 8014474:	bd70      	pop	{r4, r5, r6, pc}
 8014476:	f7f8 ff67 	bl	800d348 <rcutils_reset_error>
 801447a:	f640 0098 	movw	r0, #2200	@ 0x898
 801447e:	bd70      	pop	{r4, r5, r6, pc}
 8014480:	f640 0098 	movw	r0, #2200	@ 0x898
 8014484:	bd70      	pop	{r4, r5, r6, pc}
 8014486:	200b      	movs	r0, #11
 8014488:	bd70      	pop	{r4, r5, r6, pc}
 801448a:	f640 0098 	movw	r0, #2200	@ 0x898
 801448e:	4770      	bx	lr

08014490 <rcl_action_take_cancel_request>:
 8014490:	2800      	cmp	r0, #0
 8014492:	d03a      	beq.n	801450a <rcl_action_take_cancel_request+0x7a>
 8014494:	b570      	push	{r4, r5, r6, lr}
 8014496:	4604      	mov	r4, r0
 8014498:	6800      	ldr	r0, [r0, #0]
 801449a:	b388      	cbz	r0, 8014500 <rcl_action_take_cancel_request+0x70>
 801449c:	460d      	mov	r5, r1
 801449e:	4616      	mov	r6, r2
 80144a0:	f7fe fab0 	bl	8012a04 <rcl_service_is_valid>
 80144a4:	b338      	cbz	r0, 80144f6 <rcl_action_take_cancel_request+0x66>
 80144a6:	6820      	ldr	r0, [r4, #0]
 80144a8:	3004      	adds	r0, #4
 80144aa:	f7fe faab 	bl	8012a04 <rcl_service_is_valid>
 80144ae:	b310      	cbz	r0, 80144f6 <rcl_action_take_cancel_request+0x66>
 80144b0:	6820      	ldr	r0, [r4, #0]
 80144b2:	3008      	adds	r0, #8
 80144b4:	f7fe faa6 	bl	8012a04 <rcl_service_is_valid>
 80144b8:	b1e8      	cbz	r0, 80144f6 <rcl_action_take_cancel_request+0x66>
 80144ba:	6820      	ldr	r0, [r4, #0]
 80144bc:	300c      	adds	r0, #12
 80144be:	f7f7 ffd3 	bl	800c468 <rcl_publisher_is_valid>
 80144c2:	b1c0      	cbz	r0, 80144f6 <rcl_action_take_cancel_request+0x66>
 80144c4:	6820      	ldr	r0, [r4, #0]
 80144c6:	3010      	adds	r0, #16
 80144c8:	f7f7 ffce 	bl	800c468 <rcl_publisher_is_valid>
 80144cc:	b198      	cbz	r0, 80144f6 <rcl_action_take_cancel_request+0x66>
 80144ce:	b1d5      	cbz	r5, 8014506 <rcl_action_take_cancel_request+0x76>
 80144d0:	b1ce      	cbz	r6, 8014506 <rcl_action_take_cancel_request+0x76>
 80144d2:	6820      	ldr	r0, [r4, #0]
 80144d4:	4632      	mov	r2, r6
 80144d6:	4629      	mov	r1, r5
 80144d8:	3004      	adds	r0, #4
 80144da:	f7fe fa3b 	bl	8012954 <rcl_take_request>
 80144de:	b148      	cbz	r0, 80144f4 <rcl_action_take_cancel_request+0x64>
 80144e0:	280a      	cmp	r0, #10
 80144e2:	d007      	beq.n	80144f4 <rcl_action_take_cancel_request+0x64>
 80144e4:	f240 2259 	movw	r2, #601	@ 0x259
 80144e8:	f640 0399 	movw	r3, #2201	@ 0x899
 80144ec:	4290      	cmp	r0, r2
 80144ee:	bf0c      	ite	eq
 80144f0:	4618      	moveq	r0, r3
 80144f2:	2001      	movne	r0, #1
 80144f4:	bd70      	pop	{r4, r5, r6, pc}
 80144f6:	f7f8 ff27 	bl	800d348 <rcutils_reset_error>
 80144fa:	f640 0098 	movw	r0, #2200	@ 0x898
 80144fe:	bd70      	pop	{r4, r5, r6, pc}
 8014500:	f640 0098 	movw	r0, #2200	@ 0x898
 8014504:	bd70      	pop	{r4, r5, r6, pc}
 8014506:	200b      	movs	r0, #11
 8014508:	bd70      	pop	{r4, r5, r6, pc}
 801450a:	f640 0098 	movw	r0, #2200	@ 0x898
 801450e:	4770      	bx	lr

08014510 <rcl_action_send_cancel_response>:
 8014510:	b398      	cbz	r0, 801457a <rcl_action_send_cancel_response+0x6a>
 8014512:	b570      	push	{r4, r5, r6, lr}
 8014514:	4604      	mov	r4, r0
 8014516:	6800      	ldr	r0, [r0, #0]
 8014518:	b350      	cbz	r0, 8014570 <rcl_action_send_cancel_response+0x60>
 801451a:	460d      	mov	r5, r1
 801451c:	4616      	mov	r6, r2
 801451e:	f7fe fa71 	bl	8012a04 <rcl_service_is_valid>
 8014522:	b300      	cbz	r0, 8014566 <rcl_action_send_cancel_response+0x56>
 8014524:	6820      	ldr	r0, [r4, #0]
 8014526:	3004      	adds	r0, #4
 8014528:	f7fe fa6c 	bl	8012a04 <rcl_service_is_valid>
 801452c:	b1d8      	cbz	r0, 8014566 <rcl_action_send_cancel_response+0x56>
 801452e:	6820      	ldr	r0, [r4, #0]
 8014530:	3008      	adds	r0, #8
 8014532:	f7fe fa67 	bl	8012a04 <rcl_service_is_valid>
 8014536:	b1b0      	cbz	r0, 8014566 <rcl_action_send_cancel_response+0x56>
 8014538:	6820      	ldr	r0, [r4, #0]
 801453a:	300c      	adds	r0, #12
 801453c:	f7f7 ff94 	bl	800c468 <rcl_publisher_is_valid>
 8014540:	b188      	cbz	r0, 8014566 <rcl_action_send_cancel_response+0x56>
 8014542:	6820      	ldr	r0, [r4, #0]
 8014544:	3010      	adds	r0, #16
 8014546:	f7f7 ff8f 	bl	800c468 <rcl_publisher_is_valid>
 801454a:	b160      	cbz	r0, 8014566 <rcl_action_send_cancel_response+0x56>
 801454c:	b19d      	cbz	r5, 8014576 <rcl_action_send_cancel_response+0x66>
 801454e:	b196      	cbz	r6, 8014576 <rcl_action_send_cancel_response+0x66>
 8014550:	6820      	ldr	r0, [r4, #0]
 8014552:	4632      	mov	r2, r6
 8014554:	4629      	mov	r1, r5
 8014556:	3004      	adds	r0, #4
 8014558:	f7fe fa3c 	bl	80129d4 <rcl_send_response>
 801455c:	b110      	cbz	r0, 8014564 <rcl_action_send_cancel_response+0x54>
 801455e:	2802      	cmp	r0, #2
 8014560:	bf18      	it	ne
 8014562:	2001      	movne	r0, #1
 8014564:	bd70      	pop	{r4, r5, r6, pc}
 8014566:	f7f8 feef 	bl	800d348 <rcutils_reset_error>
 801456a:	f640 0098 	movw	r0, #2200	@ 0x898
 801456e:	bd70      	pop	{r4, r5, r6, pc}
 8014570:	f640 0098 	movw	r0, #2200	@ 0x898
 8014574:	bd70      	pop	{r4, r5, r6, pc}
 8014576:	200b      	movs	r0, #11
 8014578:	bd70      	pop	{r4, r5, r6, pc}
 801457a:	f640 0098 	movw	r0, #2200	@ 0x898
 801457e:	4770      	bx	lr

08014580 <rcl_action_wait_set_add_action_server>:
 8014580:	2800      	cmp	r0, #0
 8014582:	d04d      	beq.n	8014620 <rcl_action_wait_set_add_action_server+0xa0>
 8014584:	b570      	push	{r4, r5, r6, lr}
 8014586:	460c      	mov	r4, r1
 8014588:	b159      	cbz	r1, 80145a2 <rcl_action_wait_set_add_action_server+0x22>
 801458a:	4605      	mov	r5, r0
 801458c:	6808      	ldr	r0, [r1, #0]
 801458e:	b140      	cbz	r0, 80145a2 <rcl_action_wait_set_add_action_server+0x22>
 8014590:	4616      	mov	r6, r2
 8014592:	f7fe fa37 	bl	8012a04 <rcl_service_is_valid>
 8014596:	b120      	cbz	r0, 80145a2 <rcl_action_wait_set_add_action_server+0x22>
 8014598:	6820      	ldr	r0, [r4, #0]
 801459a:	3004      	adds	r0, #4
 801459c:	f7fe fa32 	bl	8012a04 <rcl_service_is_valid>
 80145a0:	b910      	cbnz	r0, 80145a8 <rcl_action_wait_set_add_action_server+0x28>
 80145a2:	f640 0098 	movw	r0, #2200	@ 0x898
 80145a6:	bd70      	pop	{r4, r5, r6, pc}
 80145a8:	6820      	ldr	r0, [r4, #0]
 80145aa:	3008      	adds	r0, #8
 80145ac:	f7fe fa2a 	bl	8012a04 <rcl_service_is_valid>
 80145b0:	2800      	cmp	r0, #0
 80145b2:	d0f6      	beq.n	80145a2 <rcl_action_wait_set_add_action_server+0x22>
 80145b4:	6820      	ldr	r0, [r4, #0]
 80145b6:	300c      	adds	r0, #12
 80145b8:	f7f7 ff6e 	bl	800c498 <rcl_publisher_is_valid_except_context>
 80145bc:	2800      	cmp	r0, #0
 80145be:	d0f0      	beq.n	80145a2 <rcl_action_wait_set_add_action_server+0x22>
 80145c0:	6820      	ldr	r0, [r4, #0]
 80145c2:	3010      	adds	r0, #16
 80145c4:	f7f7 ff68 	bl	800c498 <rcl_publisher_is_valid_except_context>
 80145c8:	2800      	cmp	r0, #0
 80145ca:	d0ea      	beq.n	80145a2 <rcl_action_wait_set_add_action_server+0x22>
 80145cc:	6821      	ldr	r1, [r4, #0]
 80145ce:	4628      	mov	r0, r5
 80145d0:	f501 72ee 	add.w	r2, r1, #476	@ 0x1dc
 80145d4:	f7ff face 	bl	8013b74 <rcl_wait_set_add_service>
 80145d8:	2800      	cmp	r0, #0
 80145da:	d1e4      	bne.n	80145a6 <rcl_action_wait_set_add_action_server+0x26>
 80145dc:	6821      	ldr	r1, [r4, #0]
 80145de:	4628      	mov	r0, r5
 80145e0:	f501 72f0 	add.w	r2, r1, #480	@ 0x1e0
 80145e4:	3104      	adds	r1, #4
 80145e6:	f7ff fac5 	bl	8013b74 <rcl_wait_set_add_service>
 80145ea:	2800      	cmp	r0, #0
 80145ec:	d1db      	bne.n	80145a6 <rcl_action_wait_set_add_action_server+0x26>
 80145ee:	6821      	ldr	r1, [r4, #0]
 80145f0:	4628      	mov	r0, r5
 80145f2:	f501 72f2 	add.w	r2, r1, #484	@ 0x1e4
 80145f6:	3108      	adds	r1, #8
 80145f8:	f7ff fabc 	bl	8013b74 <rcl_wait_set_add_service>
 80145fc:	2800      	cmp	r0, #0
 80145fe:	d1d2      	bne.n	80145a6 <rcl_action_wait_set_add_action_server+0x26>
 8014600:	6821      	ldr	r1, [r4, #0]
 8014602:	4628      	mov	r0, r5
 8014604:	f501 72f4 	add.w	r2, r1, #488	@ 0x1e8
 8014608:	3114      	adds	r1, #20
 801460a:	f7ff fa57 	bl	8013abc <rcl_wait_set_add_timer>
 801460e:	2800      	cmp	r0, #0
 8014610:	d1c9      	bne.n	80145a6 <rcl_action_wait_set_add_action_server+0x26>
 8014612:	2e00      	cmp	r6, #0
 8014614:	d0c7      	beq.n	80145a6 <rcl_action_wait_set_add_action_server+0x26>
 8014616:	6823      	ldr	r3, [r4, #0]
 8014618:	f8d3 31dc 	ldr.w	r3, [r3, #476]	@ 0x1dc
 801461c:	6033      	str	r3, [r6, #0]
 801461e:	bd70      	pop	{r4, r5, r6, pc}
 8014620:	f44f 7061 	mov.w	r0, #900	@ 0x384
 8014624:	4770      	bx	lr
 8014626:	bf00      	nop

08014628 <rcl_action_server_wait_set_get_entities_ready>:
 8014628:	2800      	cmp	r0, #0
 801462a:	d05a      	beq.n	80146e2 <rcl_action_server_wait_set_get_entities_ready+0xba>
 801462c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801462e:	460c      	mov	r4, r1
 8014630:	b161      	cbz	r1, 801464c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014632:	4605      	mov	r5, r0
 8014634:	6808      	ldr	r0, [r1, #0]
 8014636:	b148      	cbz	r0, 801464c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014638:	4616      	mov	r6, r2
 801463a:	461f      	mov	r7, r3
 801463c:	f7fe f9e2 	bl	8012a04 <rcl_service_is_valid>
 8014640:	b120      	cbz	r0, 801464c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014642:	6820      	ldr	r0, [r4, #0]
 8014644:	3004      	adds	r0, #4
 8014646:	f7fe f9dd 	bl	8012a04 <rcl_service_is_valid>
 801464a:	b910      	cbnz	r0, 8014652 <rcl_action_server_wait_set_get_entities_ready+0x2a>
 801464c:	f640 0098 	movw	r0, #2200	@ 0x898
 8014650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014652:	6820      	ldr	r0, [r4, #0]
 8014654:	3008      	adds	r0, #8
 8014656:	f7fe f9d5 	bl	8012a04 <rcl_service_is_valid>
 801465a:	2800      	cmp	r0, #0
 801465c:	d0f6      	beq.n	801464c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801465e:	6820      	ldr	r0, [r4, #0]
 8014660:	300c      	adds	r0, #12
 8014662:	f7f7 ff19 	bl	800c498 <rcl_publisher_is_valid_except_context>
 8014666:	2800      	cmp	r0, #0
 8014668:	d0f0      	beq.n	801464c <rcl_action_server_wait_set_get_entities_ready+0x24>
 801466a:	6820      	ldr	r0, [r4, #0]
 801466c:	3010      	adds	r0, #16
 801466e:	f7f7 ff13 	bl	800c498 <rcl_publisher_is_valid_except_context>
 8014672:	2800      	cmp	r0, #0
 8014674:	d0ea      	beq.n	801464c <rcl_action_server_wait_set_get_entities_ready+0x24>
 8014676:	b3be      	cbz	r6, 80146e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014678:	b3b7      	cbz	r7, 80146e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801467a:	9b06      	ldr	r3, [sp, #24]
 801467c:	b3a3      	cbz	r3, 80146e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 801467e:	9b07      	ldr	r3, [sp, #28]
 8014680:	b393      	cbz	r3, 80146e8 <rcl_action_server_wait_set_get_entities_ready+0xc0>
 8014682:	6821      	ldr	r1, [r4, #0]
 8014684:	692a      	ldr	r2, [r5, #16]
 8014686:	6a2c      	ldr	r4, [r5, #32]
 8014688:	f8d1 51e8 	ldr.w	r5, [r1, #488]	@ 0x1e8
 801468c:	f8d1 31e0 	ldr.w	r3, [r1, #480]	@ 0x1e0
 8014690:	f852 2025 	ldr.w	r2, [r2, r5, lsl #2]
 8014694:	f8d1 01e4 	ldr.w	r0, [r1, #484]	@ 0x1e4
 8014698:	f8d1 51dc 	ldr.w	r5, [r1, #476]	@ 0x1dc
 801469c:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 80146a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80146a4:	f854 4025 	ldr.w	r4, [r4, r5, lsl #2]
 80146a8:	1a64      	subs	r4, r4, r1
 80146aa:	fab4 f484 	clz	r4, r4
 80146ae:	0964      	lsrs	r4, r4, #5
 80146b0:	7034      	strb	r4, [r6, #0]
 80146b2:	1d0c      	adds	r4, r1, #4
 80146b4:	1b1b      	subs	r3, r3, r4
 80146b6:	fab3 f383 	clz	r3, r3
 80146ba:	095b      	lsrs	r3, r3, #5
 80146bc:	f101 0408 	add.w	r4, r1, #8
 80146c0:	703b      	strb	r3, [r7, #0]
 80146c2:	f101 0314 	add.w	r3, r1, #20
 80146c6:	1b01      	subs	r1, r0, r4
 80146c8:	1ad3      	subs	r3, r2, r3
 80146ca:	fab1 f181 	clz	r1, r1
 80146ce:	9a06      	ldr	r2, [sp, #24]
 80146d0:	0949      	lsrs	r1, r1, #5
 80146d2:	7011      	strb	r1, [r2, #0]
 80146d4:	fab3 f383 	clz	r3, r3
 80146d8:	9a07      	ldr	r2, [sp, #28]
 80146da:	095b      	lsrs	r3, r3, #5
 80146dc:	2000      	movs	r0, #0
 80146de:	7013      	strb	r3, [r2, #0]
 80146e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80146e2:	f44f 7061 	mov.w	r0, #900	@ 0x384
 80146e6:	4770      	bx	lr
 80146e8:	200b      	movs	r0, #11
 80146ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080146ec <_execute_event_handler>:
 80146ec:	2002      	movs	r0, #2
 80146ee:	4770      	bx	lr

080146f0 <_cancel_goal_event_handler>:
 80146f0:	2003      	movs	r0, #3
 80146f2:	4770      	bx	lr

080146f4 <_succeed_event_handler>:
 80146f4:	2004      	movs	r0, #4
 80146f6:	4770      	bx	lr

080146f8 <_abort_event_handler>:
 80146f8:	2006      	movs	r0, #6
 80146fa:	4770      	bx	lr

080146fc <_canceled_event_handler>:
 80146fc:	2005      	movs	r0, #5
 80146fe:	4770      	bx	lr

08014700 <rcl_action_transition_goal_state>:
 8014700:	b2c2      	uxtb	r2, r0
 8014702:	2a06      	cmp	r2, #6
 8014704:	d80c      	bhi.n	8014720 <rcl_action_transition_goal_state+0x20>
 8014706:	2904      	cmp	r1, #4
 8014708:	d80a      	bhi.n	8014720 <rcl_action_transition_goal_state+0x20>
 801470a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
 801470e:	b410      	push	{r4}
 8014710:	1853      	adds	r3, r2, r1
 8014712:	4c06      	ldr	r4, [pc, #24]	@ (801472c <rcl_action_transition_goal_state+0x2c>)
 8014714:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8014718:	b123      	cbz	r3, 8014724 <rcl_action_transition_goal_state+0x24>
 801471a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801471e:	4718      	bx	r3
 8014720:	2000      	movs	r0, #0
 8014722:	4770      	bx	lr
 8014724:	2000      	movs	r0, #0
 8014726:	f85d 4b04 	ldr.w	r4, [sp], #4
 801472a:	4770      	bx	lr
 801472c:	08019318 	.word	0x08019318

08014730 <rcl_action_get_zero_initialized_cancel_response>:
 8014730:	b510      	push	{r4, lr}
 8014732:	4c07      	ldr	r4, [pc, #28]	@ (8014750 <rcl_action_get_zero_initialized_cancel_response+0x20>)
 8014734:	4686      	mov	lr, r0
 8014736:	4684      	mov	ip, r0
 8014738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801473a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801473e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8014740:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014744:	6823      	ldr	r3, [r4, #0]
 8014746:	f8cc 3000 	str.w	r3, [ip]
 801474a:	4670      	mov	r0, lr
 801474c:	bd10      	pop	{r4, pc}
 801474e:	bf00      	nop
 8014750:	080193a4 	.word	0x080193a4

08014754 <rclc_action_send_result_request>:
 8014754:	b1d0      	cbz	r0, 801478c <rclc_action_send_result_request+0x38>
 8014756:	b500      	push	{lr}
 8014758:	4684      	mov	ip, r0
 801475a:	b087      	sub	sp, #28
 801475c:	f8d0 0009 	ldr.w	r0, [r0, #9]
 8014760:	f8dc 100d 	ldr.w	r1, [ip, #13]
 8014764:	f8dc 2011 	ldr.w	r2, [ip, #17]
 8014768:	f8dc 3015 	ldr.w	r3, [ip, #21]
 801476c:	f10d 0e08 	add.w	lr, sp, #8
 8014770:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8014774:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8014778:	f10c 0240 	add.w	r2, ip, #64	@ 0x40
 801477c:	a902      	add	r1, sp, #8
 801477e:	3010      	adds	r0, #16
 8014780:	f7ff fbda 	bl	8013f38 <rcl_action_send_result_request>
 8014784:	b920      	cbnz	r0, 8014790 <rclc_action_send_result_request+0x3c>
 8014786:	b007      	add	sp, #28
 8014788:	f85d fb04 	ldr.w	pc, [sp], #4
 801478c:	200b      	movs	r0, #11
 801478e:	4770      	bx	lr
 8014790:	9001      	str	r0, [sp, #4]
 8014792:	f7f8 fdd9 	bl	800d348 <rcutils_reset_error>
 8014796:	9801      	ldr	r0, [sp, #4]
 8014798:	b007      	add	sp, #28
 801479a:	f85d fb04 	ldr.w	pc, [sp], #4
 801479e:	bf00      	nop

080147a0 <rclc_action_take_goal_handle>:
 80147a0:	b160      	cbz	r0, 80147bc <rclc_action_take_goal_handle+0x1c>
 80147a2:	6883      	ldr	r3, [r0, #8]
 80147a4:	b143      	cbz	r3, 80147b8 <rclc_action_take_goal_handle+0x18>
 80147a6:	6819      	ldr	r1, [r3, #0]
 80147a8:	6081      	str	r1, [r0, #8]
 80147aa:	2200      	movs	r2, #0
 80147ac:	721a      	strb	r2, [r3, #8]
 80147ae:	68c1      	ldr	r1, [r0, #12]
 80147b0:	6019      	str	r1, [r3, #0]
 80147b2:	621a      	str	r2, [r3, #32]
 80147b4:	849a      	strh	r2, [r3, #36]	@ 0x24
 80147b6:	60c3      	str	r3, [r0, #12]
 80147b8:	4618      	mov	r0, r3
 80147ba:	4770      	bx	lr
 80147bc:	4603      	mov	r3, r0
 80147be:	e7fb      	b.n	80147b8 <rclc_action_take_goal_handle+0x18>

080147c0 <rclc_action_remove_used_goal_handle>:
 80147c0:	b180      	cbz	r0, 80147e4 <rclc_action_remove_used_goal_handle+0x24>
 80147c2:	b179      	cbz	r1, 80147e4 <rclc_action_remove_used_goal_handle+0x24>
 80147c4:	68c3      	ldr	r3, [r0, #12]
 80147c6:	4299      	cmp	r1, r3
 80147c8:	d00d      	beq.n	80147e6 <rclc_action_remove_used_goal_handle+0x26>
 80147ca:	b12b      	cbz	r3, 80147d8 <rclc_action_remove_used_goal_handle+0x18>
 80147cc:	681a      	ldr	r2, [r3, #0]
 80147ce:	4291      	cmp	r1, r2
 80147d0:	d003      	beq.n	80147da <rclc_action_remove_used_goal_handle+0x1a>
 80147d2:	4613      	mov	r3, r2
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	d1f9      	bne.n	80147cc <rclc_action_remove_used_goal_handle+0xc>
 80147d8:	4770      	bx	lr
 80147da:	680a      	ldr	r2, [r1, #0]
 80147dc:	601a      	str	r2, [r3, #0]
 80147de:	6883      	ldr	r3, [r0, #8]
 80147e0:	600b      	str	r3, [r1, #0]
 80147e2:	6081      	str	r1, [r0, #8]
 80147e4:	4770      	bx	lr
 80147e6:	680b      	ldr	r3, [r1, #0]
 80147e8:	60c3      	str	r3, [r0, #12]
 80147ea:	e7f8      	b.n	80147de <rclc_action_remove_used_goal_handle+0x1e>

080147ec <rclc_action_find_goal_handle_by_uuid>:
 80147ec:	b538      	push	{r3, r4, r5, lr}
 80147ee:	b180      	cbz	r0, 8014812 <rclc_action_find_goal_handle_by_uuid+0x26>
 80147f0:	460d      	mov	r5, r1
 80147f2:	b181      	cbz	r1, 8014816 <rclc_action_find_goal_handle_by_uuid+0x2a>
 80147f4:	68c4      	ldr	r4, [r0, #12]
 80147f6:	b914      	cbnz	r4, 80147fe <rclc_action_find_goal_handle_by_uuid+0x12>
 80147f8:	e009      	b.n	801480e <rclc_action_find_goal_handle_by_uuid+0x22>
 80147fa:	6824      	ldr	r4, [r4, #0]
 80147fc:	b13c      	cbz	r4, 801480e <rclc_action_find_goal_handle_by_uuid+0x22>
 80147fe:	f104 0009 	add.w	r0, r4, #9
 8014802:	2210      	movs	r2, #16
 8014804:	4629      	mov	r1, r5
 8014806:	f003 f98d 	bl	8017b24 <memcmp>
 801480a:	2800      	cmp	r0, #0
 801480c:	d1f5      	bne.n	80147fa <rclc_action_find_goal_handle_by_uuid+0xe>
 801480e:	4620      	mov	r0, r4
 8014810:	bd38      	pop	{r3, r4, r5, pc}
 8014812:	4604      	mov	r4, r0
 8014814:	e7fb      	b.n	801480e <rclc_action_find_goal_handle_by_uuid+0x22>
 8014816:	460c      	mov	r4, r1
 8014818:	e7f9      	b.n	801480e <rclc_action_find_goal_handle_by_uuid+0x22>
 801481a:	bf00      	nop

0801481c <rclc_action_find_first_handle_by_status>:
 801481c:	b140      	cbz	r0, 8014830 <rclc_action_find_first_handle_by_status+0x14>
 801481e:	68c0      	ldr	r0, [r0, #12]
 8014820:	b910      	cbnz	r0, 8014828 <rclc_action_find_first_handle_by_status+0xc>
 8014822:	e005      	b.n	8014830 <rclc_action_find_first_handle_by_status+0x14>
 8014824:	6800      	ldr	r0, [r0, #0]
 8014826:	b118      	cbz	r0, 8014830 <rclc_action_find_first_handle_by_status+0x14>
 8014828:	f990 3008 	ldrsb.w	r3, [r0, #8]
 801482c:	428b      	cmp	r3, r1
 801482e:	d1f9      	bne.n	8014824 <rclc_action_find_first_handle_by_status+0x8>
 8014830:	4770      	bx	lr
 8014832:	bf00      	nop

08014834 <rclc_action_find_first_terminated_handle>:
 8014834:	b140      	cbz	r0, 8014848 <rclc_action_find_first_terminated_handle+0x14>
 8014836:	68c0      	ldr	r0, [r0, #12]
 8014838:	b910      	cbnz	r0, 8014840 <rclc_action_find_first_terminated_handle+0xc>
 801483a:	e005      	b.n	8014848 <rclc_action_find_first_terminated_handle+0x14>
 801483c:	6800      	ldr	r0, [r0, #0]
 801483e:	b118      	cbz	r0, 8014848 <rclc_action_find_first_terminated_handle+0x14>
 8014840:	f990 3008 	ldrsb.w	r3, [r0, #8]
 8014844:	2b03      	cmp	r3, #3
 8014846:	ddf9      	ble.n	801483c <rclc_action_find_first_terminated_handle+0x8>
 8014848:	4770      	bx	lr
 801484a:	bf00      	nop

0801484c <rclc_action_find_handle_by_goal_request_sequence_number>:
 801484c:	b170      	cbz	r0, 801486c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 801484e:	68c0      	ldr	r0, [r0, #12]
 8014850:	b160      	cbz	r0, 801486c <rclc_action_find_handle_by_goal_request_sequence_number+0x20>
 8014852:	b410      	push	{r4}
 8014854:	e001      	b.n	801485a <rclc_action_find_handle_by_goal_request_sequence_number+0xe>
 8014856:	6800      	ldr	r0, [r0, #0]
 8014858:	b128      	cbz	r0, 8014866 <rclc_action_find_handle_by_goal_request_sequence_number+0x1a>
 801485a:	e9d0 410a 	ldrd	r4, r1, [r0, #40]	@ 0x28
 801485e:	4299      	cmp	r1, r3
 8014860:	bf08      	it	eq
 8014862:	4294      	cmpeq	r4, r2
 8014864:	d1f7      	bne.n	8014856 <rclc_action_find_handle_by_goal_request_sequence_number+0xa>
 8014866:	f85d 4b04 	ldr.w	r4, [sp], #4
 801486a:	4770      	bx	lr
 801486c:	4770      	bx	lr
 801486e:	bf00      	nop

08014870 <rclc_action_find_handle_by_result_request_sequence_number>:
 8014870:	b170      	cbz	r0, 8014890 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014872:	68c0      	ldr	r0, [r0, #12]
 8014874:	b160      	cbz	r0, 8014890 <rclc_action_find_handle_by_result_request_sequence_number+0x20>
 8014876:	b410      	push	{r4}
 8014878:	e001      	b.n	801487e <rclc_action_find_handle_by_result_request_sequence_number+0xe>
 801487a:	6800      	ldr	r0, [r0, #0]
 801487c:	b128      	cbz	r0, 801488a <rclc_action_find_handle_by_result_request_sequence_number+0x1a>
 801487e:	e9d0 4110 	ldrd	r4, r1, [r0, #64]	@ 0x40
 8014882:	4299      	cmp	r1, r3
 8014884:	bf08      	it	eq
 8014886:	4294      	cmpeq	r4, r2
 8014888:	d1f7      	bne.n	801487a <rclc_action_find_handle_by_result_request_sequence_number+0xa>
 801488a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801488e:	4770      	bx	lr
 8014890:	4770      	bx	lr
 8014892:	bf00      	nop

08014894 <rclc_action_find_handle_by_cancel_request_sequence_number>:
 8014894:	b170      	cbz	r0, 80148b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 8014896:	68c0      	ldr	r0, [r0, #12]
 8014898:	b160      	cbz	r0, 80148b4 <rclc_action_find_handle_by_cancel_request_sequence_number+0x20>
 801489a:	b410      	push	{r4}
 801489c:	e001      	b.n	80148a2 <rclc_action_find_handle_by_cancel_request_sequence_number+0xe>
 801489e:	6800      	ldr	r0, [r0, #0]
 80148a0:	b128      	cbz	r0, 80148ae <rclc_action_find_handle_by_cancel_request_sequence_number+0x1a>
 80148a2:	e9d0 4116 	ldrd	r4, r1, [r0, #88]	@ 0x58
 80148a6:	4299      	cmp	r1, r3
 80148a8:	bf08      	it	eq
 80148aa:	4294      	cmpeq	r4, r2
 80148ac:	d1f7      	bne.n	801489e <rclc_action_find_handle_by_cancel_request_sequence_number+0xa>
 80148ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80148b2:	4770      	bx	lr
 80148b4:	4770      	bx	lr
 80148b6:	bf00      	nop

080148b8 <rclc_action_find_first_handle_with_goal_response>:
 80148b8:	b140      	cbz	r0, 80148cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80148ba:	68c0      	ldr	r0, [r0, #12]
 80148bc:	b910      	cbnz	r0, 80148c4 <rclc_action_find_first_handle_with_goal_response+0xc>
 80148be:	e005      	b.n	80148cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80148c0:	6800      	ldr	r0, [r0, #0]
 80148c2:	b118      	cbz	r0, 80148cc <rclc_action_find_first_handle_with_goal_response+0x14>
 80148c4:	f890 3020 	ldrb.w	r3, [r0, #32]
 80148c8:	2b00      	cmp	r3, #0
 80148ca:	d0f9      	beq.n	80148c0 <rclc_action_find_first_handle_with_goal_response+0x8>
 80148cc:	4770      	bx	lr
 80148ce:	bf00      	nop

080148d0 <rclc_action_find_first_handle_with_result_response>:
 80148d0:	b140      	cbz	r0, 80148e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80148d2:	68c0      	ldr	r0, [r0, #12]
 80148d4:	b910      	cbnz	r0, 80148dc <rclc_action_find_first_handle_with_result_response+0xc>
 80148d6:	e005      	b.n	80148e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80148d8:	6800      	ldr	r0, [r0, #0]
 80148da:	b118      	cbz	r0, 80148e4 <rclc_action_find_first_handle_with_result_response+0x14>
 80148dc:	f890 3023 	ldrb.w	r3, [r0, #35]	@ 0x23
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d0f9      	beq.n	80148d8 <rclc_action_find_first_handle_with_result_response+0x8>
 80148e4:	4770      	bx	lr
 80148e6:	bf00      	nop

080148e8 <rclc_action_server_response_goal_request>:
 80148e8:	b198      	cbz	r0, 8014912 <rclc_action_server_response_goal_request+0x2a>
 80148ea:	b510      	push	{r4, lr}
 80148ec:	6844      	ldr	r4, [r0, #4]
 80148ee:	b086      	sub	sp, #24
 80148f0:	2200      	movs	r2, #0
 80148f2:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80148f6:	460b      	mov	r3, r1
 80148f8:	9205      	str	r2, [sp, #20]
 80148fa:	f100 0128 	add.w	r1, r0, #40	@ 0x28
 80148fe:	aa03      	add	r2, sp, #12
 8014900:	f104 0010 	add.w	r0, r4, #16
 8014904:	f88d 300c 	strb.w	r3, [sp, #12]
 8014908:	f7ff fd4a 	bl	80143a0 <rcl_action_send_goal_response>
 801490c:	b918      	cbnz	r0, 8014916 <rclc_action_server_response_goal_request+0x2e>
 801490e:	b006      	add	sp, #24
 8014910:	bd10      	pop	{r4, pc}
 8014912:	200b      	movs	r0, #11
 8014914:	4770      	bx	lr
 8014916:	9001      	str	r0, [sp, #4]
 8014918:	f7f8 fd16 	bl	800d348 <rcutils_reset_error>
 801491c:	9801      	ldr	r0, [sp, #4]
 801491e:	b006      	add	sp, #24
 8014920:	bd10      	pop	{r4, pc}
 8014922:	bf00      	nop
 8014924:	0000      	movs	r0, r0
	...

08014928 <rclc_action_server_goal_cancel_accept>:
 8014928:	b310      	cbz	r0, 8014970 <rclc_action_server_goal_cancel_accept+0x48>
 801492a:	b510      	push	{r4, lr}
 801492c:	b090      	sub	sp, #64	@ 0x40
 801492e:	4604      	mov	r4, r0
 8014930:	a806      	add	r0, sp, #24
 8014932:	f7ff fefd 	bl	8014730 <rcl_action_get_zero_initialized_cancel_response>
 8014936:	2300      	movs	r3, #0
 8014938:	f8d4 0009 	ldr.w	r0, [r4, #9]
 801493c:	f8d4 100d 	ldr.w	r1, [r4, #13]
 8014940:	f8d4 2011 	ldr.w	r2, [r4, #17]
 8014944:	f88d 3018 	strb.w	r3, [sp, #24]
 8014948:	f8d4 3015 	ldr.w	r3, [r4, #21]
 801494c:	f8cd d01c 	str.w	sp, [sp, #28]
 8014950:	46ec      	mov	ip, sp
 8014952:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014956:	ed9f 7b08 	vldr	d7, [pc, #32]	@ 8014978 <rclc_action_server_goal_cancel_accept+0x50>
 801495a:	6860      	ldr	r0, [r4, #4]
 801495c:	aa06      	add	r2, sp, #24
 801495e:	f104 0158 	add.w	r1, r4, #88	@ 0x58
 8014962:	3010      	adds	r0, #16
 8014964:	ed8d 7b08 	vstr	d7, [sp, #32]
 8014968:	f7ff fdd2 	bl	8014510 <rcl_action_send_cancel_response>
 801496c:	b010      	add	sp, #64	@ 0x40
 801496e:	bd10      	pop	{r4, pc}
 8014970:	200b      	movs	r0, #11
 8014972:	4770      	bx	lr
 8014974:	f3af 8000 	nop.w
 8014978:	00000001 	.word	0x00000001
 801497c:	00000001 	.word	0x00000001

08014980 <rclc_action_server_goal_cancel_reject>:
 8014980:	b082      	sub	sp, #8
 8014982:	b530      	push	{r4, r5, lr}
 8014984:	b08b      	sub	sp, #44	@ 0x2c
 8014986:	ac0e      	add	r4, sp, #56	@ 0x38
 8014988:	e884 000c 	stmia.w	r4, {r2, r3}
 801498c:	b188      	cbz	r0, 80149b2 <rclc_action_server_goal_cancel_reject+0x32>
 801498e:	4604      	mov	r4, r0
 8014990:	a801      	add	r0, sp, #4
 8014992:	460d      	mov	r5, r1
 8014994:	f7ff fecc 	bl	8014730 <rcl_action_get_zero_initialized_cancel_response>
 8014998:	aa01      	add	r2, sp, #4
 801499a:	a90e      	add	r1, sp, #56	@ 0x38
 801499c:	f104 0010 	add.w	r0, r4, #16
 80149a0:	f88d 5004 	strb.w	r5, [sp, #4]
 80149a4:	f7ff fdb4 	bl	8014510 <rcl_action_send_cancel_response>
 80149a8:	b00b      	add	sp, #44	@ 0x2c
 80149aa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149ae:	b002      	add	sp, #8
 80149b0:	4770      	bx	lr
 80149b2:	200b      	movs	r0, #11
 80149b4:	b00b      	add	sp, #44	@ 0x2c
 80149b6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80149ba:	b002      	add	sp, #8
 80149bc:	4770      	bx	lr
 80149be:	bf00      	nop

080149c0 <__atomic_load_8>:
 80149c0:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 80149c4:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 80149c8:	4a15      	ldr	r2, [pc, #84]	@ (8014a20 <__atomic_load_8+0x60>)
 80149ca:	4b16      	ldr	r3, [pc, #88]	@ (8014a24 <__atomic_load_8+0x64>)
 80149cc:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 80149d0:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 80149d4:	fb02 f101 	mul.w	r1, r2, r1
 80149d8:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 80149dc:	fba3 2301 	umull	r2, r3, r3, r1
 80149e0:	091b      	lsrs	r3, r3, #4
 80149e2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80149e6:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 80149ea:	b4d0      	push	{r4, r6, r7}
 80149ec:	4c0e      	ldr	r4, [pc, #56]	@ (8014a28 <__atomic_load_8+0x68>)
 80149ee:	1ac9      	subs	r1, r1, r3
 80149f0:	1862      	adds	r2, r4, r1
 80149f2:	f04f 0c01 	mov.w	ip, #1
 80149f6:	e8d2 3f4f 	ldrexb	r3, [r2]
 80149fa:	e8c2 cf46 	strexb	r6, ip, [r2]
 80149fe:	2e00      	cmp	r6, #0
 8014a00:	d1f9      	bne.n	80149f6 <__atomic_load_8+0x36>
 8014a02:	f3bf 8f5b 	dmb	ish
 8014a06:	b2db      	uxtb	r3, r3
 8014a08:	2b00      	cmp	r3, #0
 8014a0a:	d1f4      	bne.n	80149f6 <__atomic_load_8+0x36>
 8014a0c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8014a10:	f3bf 8f5b 	dmb	ish
 8014a14:	5463      	strb	r3, [r4, r1]
 8014a16:	4630      	mov	r0, r6
 8014a18:	4639      	mov	r1, r7
 8014a1a:	bcd0      	pop	{r4, r6, r7}
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	27d4eb2d 	.word	0x27d4eb2d
 8014a24:	b21642c9 	.word	0xb21642c9
 8014a28:	2000b284 	.word	0x2000b284

08014a2c <__atomic_store_8>:
 8014a2c:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 8014a30:	f081 013d 	eor.w	r1, r1, #61	@ 0x3d
 8014a34:	b570      	push	{r4, r5, r6, lr}
 8014a36:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 8014a3a:	4c14      	ldr	r4, [pc, #80]	@ (8014a8c <__atomic_store_8+0x60>)
 8014a3c:	4d14      	ldr	r5, [pc, #80]	@ (8014a90 <__atomic_store_8+0x64>)
 8014a3e:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 8014a42:	fb04 f101 	mul.w	r1, r4, r1
 8014a46:	4c13      	ldr	r4, [pc, #76]	@ (8014a94 <__atomic_store_8+0x68>)
 8014a48:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 8014a4c:	fba4 4e01 	umull	r4, lr, r4, r1
 8014a50:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8014a54:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
 8014a58:	ebce 0ec4 	rsb	lr, lr, r4, lsl #3
 8014a5c:	eba1 0e0e 	sub.w	lr, r1, lr
 8014a60:	eb05 0c0e 	add.w	ip, r5, lr
 8014a64:	f04f 0401 	mov.w	r4, #1
 8014a68:	e8dc 1f4f 	ldrexb	r1, [ip]
 8014a6c:	e8cc 4f46 	strexb	r6, r4, [ip]
 8014a70:	2e00      	cmp	r6, #0
 8014a72:	d1f9      	bne.n	8014a68 <__atomic_store_8+0x3c>
 8014a74:	f3bf 8f5b 	dmb	ish
 8014a78:	b2c9      	uxtb	r1, r1
 8014a7a:	2900      	cmp	r1, #0
 8014a7c:	d1f4      	bne.n	8014a68 <__atomic_store_8+0x3c>
 8014a7e:	e9c0 2300 	strd	r2, r3, [r0]
 8014a82:	f3bf 8f5b 	dmb	ish
 8014a86:	f805 100e 	strb.w	r1, [r5, lr]
 8014a8a:	bd70      	pop	{r4, r5, r6, pc}
 8014a8c:	27d4eb2d 	.word	0x27d4eb2d
 8014a90:	2000b284 	.word	0x2000b284
 8014a94:	b21642c9 	.word	0xb21642c9

08014a98 <__atomic_exchange_8>:
 8014a98:	ea80 4c10 	eor.w	ip, r0, r0, lsr #16
 8014a9c:	f08c 0c3d 	eor.w	ip, ip, #61	@ 0x3d
 8014aa0:	4916      	ldr	r1, [pc, #88]	@ (8014afc <__atomic_exchange_8+0x64>)
 8014aa2:	eb0c 0ccc 	add.w	ip, ip, ip, lsl #3
 8014aa6:	ea8c 1c1c 	eor.w	ip, ip, ip, lsr #4
 8014aaa:	fb01 fc0c 	mul.w	ip, r1, ip
 8014aae:	4914      	ldr	r1, [pc, #80]	@ (8014b00 <__atomic_exchange_8+0x68>)
 8014ab0:	ea8c 3cdc 	eor.w	ip, ip, ip, lsr #15
 8014ab4:	b570      	push	{r4, r5, r6, lr}
 8014ab6:	4605      	mov	r5, r0
 8014ab8:	fba1 010c 	umull	r0, r1, r1, ip
 8014abc:	0909      	lsrs	r1, r1, #4
 8014abe:	eb01 0041 	add.w	r0, r1, r1, lsl #1
 8014ac2:	ebc1 01c0 	rsb	r1, r1, r0, lsl #3
 8014ac6:	4e0f      	ldr	r6, [pc, #60]	@ (8014b04 <__atomic_exchange_8+0x6c>)
 8014ac8:	ebac 0c01 	sub.w	ip, ip, r1
 8014acc:	eb06 010c 	add.w	r1, r6, ip
 8014ad0:	f04f 0e01 	mov.w	lr, #1
 8014ad4:	e8d1 4f4f 	ldrexb	r4, [r1]
 8014ad8:	e8c1 ef40 	strexb	r0, lr, [r1]
 8014adc:	2800      	cmp	r0, #0
 8014ade:	d1f9      	bne.n	8014ad4 <__atomic_exchange_8+0x3c>
 8014ae0:	f3bf 8f5b 	dmb	ish
 8014ae4:	b2e4      	uxtb	r4, r4
 8014ae6:	2c00      	cmp	r4, #0
 8014ae8:	d1f4      	bne.n	8014ad4 <__atomic_exchange_8+0x3c>
 8014aea:	e9d5 0100 	ldrd	r0, r1, [r5]
 8014aee:	e9c5 2300 	strd	r2, r3, [r5]
 8014af2:	f3bf 8f5b 	dmb	ish
 8014af6:	f806 400c 	strb.w	r4, [r6, ip]
 8014afa:	bd70      	pop	{r4, r5, r6, pc}
 8014afc:	27d4eb2d 	.word	0x27d4eb2d
 8014b00:	b21642c9 	.word	0xb21642c9
 8014b04:	2000b284 	.word	0x2000b284

08014b08 <rcutils_get_env>:
 8014b08:	b168      	cbz	r0, 8014b26 <rcutils_get_env+0x1e>
 8014b0a:	b510      	push	{r4, lr}
 8014b0c:	460c      	mov	r4, r1
 8014b0e:	b129      	cbz	r1, 8014b1c <rcutils_get_env+0x14>
 8014b10:	f002 fc64 	bl	80173dc <getenv>
 8014b14:	b120      	cbz	r0, 8014b20 <rcutils_get_env+0x18>
 8014b16:	6020      	str	r0, [r4, #0]
 8014b18:	2000      	movs	r0, #0
 8014b1a:	bd10      	pop	{r4, pc}
 8014b1c:	4803      	ldr	r0, [pc, #12]	@ (8014b2c <rcutils_get_env+0x24>)
 8014b1e:	bd10      	pop	{r4, pc}
 8014b20:	4b03      	ldr	r3, [pc, #12]	@ (8014b30 <rcutils_get_env+0x28>)
 8014b22:	6023      	str	r3, [r4, #0]
 8014b24:	bd10      	pop	{r4, pc}
 8014b26:	4803      	ldr	r0, [pc, #12]	@ (8014b34 <rcutils_get_env+0x2c>)
 8014b28:	4770      	bx	lr
 8014b2a:	bf00      	nop
 8014b2c:	080193e4 	.word	0x080193e4
 8014b30:	08019508 	.word	0x08019508
 8014b34:	080193c8 	.word	0x080193c8

08014b38 <rcutils_is_directory>:
 8014b38:	2000      	movs	r0, #0
 8014b3a:	4770      	bx	lr

08014b3c <rcutils_join_path>:
 8014b3c:	b082      	sub	sp, #8
 8014b3e:	e88d 000c 	stmia.w	sp, {r2, r3}
 8014b42:	2000      	movs	r0, #0
 8014b44:	b002      	add	sp, #8
 8014b46:	4770      	bx	lr

08014b48 <rcutils_to_native_path>:
 8014b48:	b084      	sub	sp, #16
 8014b4a:	a801      	add	r0, sp, #4
 8014b4c:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8014b50:	b004      	add	sp, #16
 8014b52:	2000      	movs	r0, #0
 8014b54:	4770      	bx	lr
 8014b56:	bf00      	nop

08014b58 <rcutils_format_string_limit>:
 8014b58:	b40f      	push	{r0, r1, r2, r3}
 8014b5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b5c:	b083      	sub	sp, #12
 8014b5e:	ac08      	add	r4, sp, #32
 8014b60:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8014b62:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8014b66:	b34e      	cbz	r6, 8014bbc <rcutils_format_string_limit+0x64>
 8014b68:	a808      	add	r0, sp, #32
 8014b6a:	f7f8 fbc7 	bl	800d2fc <rcutils_allocator_is_valid>
 8014b6e:	b328      	cbz	r0, 8014bbc <rcutils_format_string_limit+0x64>
 8014b70:	2100      	movs	r1, #0
 8014b72:	ab0f      	add	r3, sp, #60	@ 0x3c
 8014b74:	4632      	mov	r2, r6
 8014b76:	4608      	mov	r0, r1
 8014b78:	e9cd 3300 	strd	r3, r3, [sp]
 8014b7c:	f000 f8f4 	bl	8014d68 <rcutils_vsnprintf>
 8014b80:	1c43      	adds	r3, r0, #1
 8014b82:	4605      	mov	r5, r0
 8014b84:	d01a      	beq.n	8014bbc <rcutils_format_string_limit+0x64>
 8014b86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014b88:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014b8a:	1c47      	adds	r7, r0, #1
 8014b8c:	429f      	cmp	r7, r3
 8014b8e:	bf84      	itt	hi
 8014b90:	461f      	movhi	r7, r3
 8014b92:	f103 35ff 	addhi.w	r5, r3, #4294967295	@ 0xffffffff
 8014b96:	4638      	mov	r0, r7
 8014b98:	9b08      	ldr	r3, [sp, #32]
 8014b9a:	4798      	blx	r3
 8014b9c:	4604      	mov	r4, r0
 8014b9e:	b168      	cbz	r0, 8014bbc <rcutils_format_string_limit+0x64>
 8014ba0:	9b01      	ldr	r3, [sp, #4]
 8014ba2:	4632      	mov	r2, r6
 8014ba4:	4639      	mov	r1, r7
 8014ba6:	f000 f8df 	bl	8014d68 <rcutils_vsnprintf>
 8014baa:	2800      	cmp	r0, #0
 8014bac:	db02      	blt.n	8014bb4 <rcutils_format_string_limit+0x5c>
 8014bae:	2300      	movs	r3, #0
 8014bb0:	5563      	strb	r3, [r4, r5]
 8014bb2:	e004      	b.n	8014bbe <rcutils_format_string_limit+0x66>
 8014bb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014bb6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014bb8:	4620      	mov	r0, r4
 8014bba:	4798      	blx	r3
 8014bbc:	2400      	movs	r4, #0
 8014bbe:	4620      	mov	r0, r4
 8014bc0:	b003      	add	sp, #12
 8014bc2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8014bc6:	b004      	add	sp, #16
 8014bc8:	4770      	bx	lr
 8014bca:	bf00      	nop

08014bcc <rcutils_repl_str>:
 8014bcc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014bd0:	ed2d 8b02 	vpush	{d8}
 8014bd4:	b087      	sub	sp, #28
 8014bd6:	4680      	mov	r8, r0
 8014bd8:	4608      	mov	r0, r1
 8014bda:	f8cd 8004 	str.w	r8, [sp, #4]
 8014bde:	ee08 2a10 	vmov	s16, r2
 8014be2:	468a      	mov	sl, r1
 8014be4:	4699      	mov	r9, r3
 8014be6:	f7eb fb25 	bl	8000234 <strlen>
 8014bea:	2600      	movs	r6, #0
 8014bec:	4647      	mov	r7, r8
 8014bee:	9002      	str	r0, [sp, #8]
 8014bf0:	46b3      	mov	fp, r6
 8014bf2:	2510      	movs	r5, #16
 8014bf4:	46b0      	mov	r8, r6
 8014bf6:	e01d      	b.n	8014c34 <rcutils_repl_str+0x68>
 8014bf8:	f10b 0b01 	add.w	fp, fp, #1
 8014bfc:	455e      	cmp	r6, fp
 8014bfe:	d211      	bcs.n	8014c24 <rcutils_repl_str+0x58>
 8014c00:	442e      	add	r6, r5
 8014c02:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8014c06:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8014c0a:	00b1      	lsls	r1, r6, #2
 8014c0c:	4798      	blx	r3
 8014c0e:	2800      	cmp	r0, #0
 8014c10:	f000 8088 	beq.w	8014d24 <rcutils_repl_str+0x158>
 8014c14:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8014c18:	f5b5 1f80 	cmp.w	r5, #1048576	@ 0x100000
 8014c1c:	4680      	mov	r8, r0
 8014c1e:	bf28      	it	cs
 8014c20:	f44f 1580 	movcs.w	r5, #1048576	@ 0x100000
 8014c24:	9a01      	ldr	r2, [sp, #4]
 8014c26:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 8014c2a:	1aa2      	subs	r2, r4, r2
 8014c2c:	f843 2c04 	str.w	r2, [r3, #-4]
 8014c30:	9b02      	ldr	r3, [sp, #8]
 8014c32:	18e7      	adds	r7, r4, r3
 8014c34:	4651      	mov	r1, sl
 8014c36:	4638      	mov	r0, r7
 8014c38:	f002 ffc5 	bl	8017bc6 <strstr>
 8014c3c:	4604      	mov	r4, r0
 8014c3e:	4640      	mov	r0, r8
 8014c40:	2c00      	cmp	r4, #0
 8014c42:	d1d9      	bne.n	8014bf8 <rcutils_repl_str+0x2c>
 8014c44:	46b8      	mov	r8, r7
 8014c46:	4607      	mov	r7, r0
 8014c48:	4640      	mov	r0, r8
 8014c4a:	f7eb faf3 	bl	8000234 <strlen>
 8014c4e:	9b01      	ldr	r3, [sp, #4]
 8014c50:	eba8 0303 	sub.w	r3, r8, r3
 8014c54:	181c      	adds	r4, r3, r0
 8014c56:	9404      	str	r4, [sp, #16]
 8014c58:	f1bb 0f00 	cmp.w	fp, #0
 8014c5c:	d04a      	beq.n	8014cf4 <rcutils_repl_str+0x128>
 8014c5e:	ee18 0a10 	vmov	r0, s16
 8014c62:	f7eb fae7 	bl	8000234 <strlen>
 8014c66:	9b02      	ldr	r3, [sp, #8]
 8014c68:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014c6c:	1ac3      	subs	r3, r0, r3
 8014c6e:	fb0b 4303 	mla	r3, fp, r3, r4
 8014c72:	461a      	mov	r2, r3
 8014c74:	9305      	str	r3, [sp, #20]
 8014c76:	4606      	mov	r6, r0
 8014c78:	f8d9 3000 	ldr.w	r3, [r9]
 8014c7c:	1c50      	adds	r0, r2, #1
 8014c7e:	4798      	blx	r3
 8014c80:	9003      	str	r0, [sp, #12]
 8014c82:	2800      	cmp	r0, #0
 8014c84:	d04f      	beq.n	8014d26 <rcutils_repl_str+0x15a>
 8014c86:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8014c8a:	683a      	ldr	r2, [r7, #0]
 8014c8c:	4641      	mov	r1, r8
 8014c8e:	f003 f83c 	bl	8017d0a <memcpy>
 8014c92:	683d      	ldr	r5, [r7, #0]
 8014c94:	9b03      	ldr	r3, [sp, #12]
 8014c96:	9701      	str	r7, [sp, #4]
 8014c98:	46ba      	mov	sl, r7
 8014c9a:	441d      	add	r5, r3
 8014c9c:	9f02      	ldr	r7, [sp, #8]
 8014c9e:	f8cd 9008 	str.w	r9, [sp, #8]
 8014ca2:	2401      	movs	r4, #1
 8014ca4:	46d1      	mov	r9, sl
 8014ca6:	ee18 aa10 	vmov	sl, s16
 8014caa:	e00a      	b.n	8014cc2 <rcutils_repl_str+0xf6>
 8014cac:	f8d9 5000 	ldr.w	r5, [r9]
 8014cb0:	1aaa      	subs	r2, r5, r2
 8014cb2:	1885      	adds	r5, r0, r2
 8014cb4:	f003 f829 	bl	8017d0a <memcpy>
 8014cb8:	45a3      	cmp	fp, r4
 8014cba:	f104 0201 	add.w	r2, r4, #1
 8014cbe:	d935      	bls.n	8014d2c <rcutils_repl_str+0x160>
 8014cc0:	4614      	mov	r4, r2
 8014cc2:	4632      	mov	r2, r6
 8014cc4:	4651      	mov	r1, sl
 8014cc6:	4628      	mov	r0, r5
 8014cc8:	f003 f81f 	bl	8017d0a <memcpy>
 8014ccc:	f859 2b04 	ldr.w	r2, [r9], #4
 8014cd0:	45a3      	cmp	fp, r4
 8014cd2:	443a      	add	r2, r7
 8014cd4:	eb05 0006 	add.w	r0, r5, r6
 8014cd8:	eb08 0102 	add.w	r1, r8, r2
 8014cdc:	d1e6      	bne.n	8014cac <rcutils_repl_str+0xe0>
 8014cde:	9b04      	ldr	r3, [sp, #16]
 8014ce0:	1a9a      	subs	r2, r3, r2
 8014ce2:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014ce6:	f003 f810 	bl	8017d0a <memcpy>
 8014cea:	9a03      	ldr	r2, [sp, #12]
 8014cec:	9905      	ldr	r1, [sp, #20]
 8014cee:	2300      	movs	r3, #0
 8014cf0:	5453      	strb	r3, [r2, r1]
 8014cf2:	e00b      	b.n	8014d0c <rcutils_repl_str+0x140>
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	f8d9 3000 	ldr.w	r3, [r9]
 8014cfa:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014cfe:	3001      	adds	r0, #1
 8014d00:	4798      	blx	r3
 8014d02:	9003      	str	r0, [sp, #12]
 8014d04:	b110      	cbz	r0, 8014d0c <rcutils_repl_str+0x140>
 8014d06:	9901      	ldr	r1, [sp, #4]
 8014d08:	f002 fff7 	bl	8017cfa <strcpy>
 8014d0c:	4638      	mov	r0, r7
 8014d0e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8014d12:	f8d9 1010 	ldr.w	r1, [r9, #16]
 8014d16:	4798      	blx	r3
 8014d18:	9803      	ldr	r0, [sp, #12]
 8014d1a:	b007      	add	sp, #28
 8014d1c:	ecbd 8b02 	vpop	{d8}
 8014d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d24:	4647      	mov	r7, r8
 8014d26:	2300      	movs	r3, #0
 8014d28:	9303      	str	r3, [sp, #12]
 8014d2a:	e7ef      	b.n	8014d0c <rcutils_repl_str+0x140>
 8014d2c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 8014d30:	e7db      	b.n	8014cea <rcutils_repl_str+0x11e>
 8014d32:	bf00      	nop

08014d34 <rcutils_snprintf>:
 8014d34:	b40c      	push	{r2, r3}
 8014d36:	b530      	push	{r4, r5, lr}
 8014d38:	b083      	sub	sp, #12
 8014d3a:	ab06      	add	r3, sp, #24
 8014d3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014d40:	9301      	str	r3, [sp, #4]
 8014d42:	b152      	cbz	r2, 8014d5a <rcutils_snprintf+0x26>
 8014d44:	b138      	cbz	r0, 8014d56 <rcutils_snprintf+0x22>
 8014d46:	b141      	cbz	r1, 8014d5a <rcutils_snprintf+0x26>
 8014d48:	f002 fede 	bl	8017b08 <vsniprintf>
 8014d4c:	b003      	add	sp, #12
 8014d4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014d52:	b002      	add	sp, #8
 8014d54:	4770      	bx	lr
 8014d56:	2900      	cmp	r1, #0
 8014d58:	d0f6      	beq.n	8014d48 <rcutils_snprintf+0x14>
 8014d5a:	f002 ffa1 	bl	8017ca0 <__errno>
 8014d5e:	2316      	movs	r3, #22
 8014d60:	6003      	str	r3, [r0, #0]
 8014d62:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d66:	e7f1      	b.n	8014d4c <rcutils_snprintf+0x18>

08014d68 <rcutils_vsnprintf>:
 8014d68:	b570      	push	{r4, r5, r6, lr}
 8014d6a:	b13a      	cbz	r2, 8014d7c <rcutils_vsnprintf+0x14>
 8014d6c:	b120      	cbz	r0, 8014d78 <rcutils_vsnprintf+0x10>
 8014d6e:	b129      	cbz	r1, 8014d7c <rcutils_vsnprintf+0x14>
 8014d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014d74:	f002 bec8 	b.w	8017b08 <vsniprintf>
 8014d78:	2900      	cmp	r1, #0
 8014d7a:	d0f9      	beq.n	8014d70 <rcutils_vsnprintf+0x8>
 8014d7c:	f002 ff90 	bl	8017ca0 <__errno>
 8014d80:	2316      	movs	r3, #22
 8014d82:	6003      	str	r3, [r0, #0]
 8014d84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014d88:	bd70      	pop	{r4, r5, r6, pc}
 8014d8a:	bf00      	nop

08014d8c <rcutils_strdup>:
 8014d8c:	b084      	sub	sp, #16
 8014d8e:	b570      	push	{r4, r5, r6, lr}
 8014d90:	b082      	sub	sp, #8
 8014d92:	ac07      	add	r4, sp, #28
 8014d94:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 8014d98:	4605      	mov	r5, r0
 8014d9a:	b1b0      	cbz	r0, 8014dca <rcutils_strdup+0x3e>
 8014d9c:	f7eb fa4a 	bl	8000234 <strlen>
 8014da0:	1c42      	adds	r2, r0, #1
 8014da2:	9b07      	ldr	r3, [sp, #28]
 8014da4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8014da6:	9201      	str	r2, [sp, #4]
 8014da8:	4606      	mov	r6, r0
 8014daa:	4610      	mov	r0, r2
 8014dac:	4798      	blx	r3
 8014dae:	4604      	mov	r4, r0
 8014db0:	b128      	cbz	r0, 8014dbe <rcutils_strdup+0x32>
 8014db2:	9a01      	ldr	r2, [sp, #4]
 8014db4:	4629      	mov	r1, r5
 8014db6:	f002 ffa8 	bl	8017d0a <memcpy>
 8014dba:	2300      	movs	r3, #0
 8014dbc:	55a3      	strb	r3, [r4, r6]
 8014dbe:	4620      	mov	r0, r4
 8014dc0:	b002      	add	sp, #8
 8014dc2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014dc6:	b004      	add	sp, #16
 8014dc8:	4770      	bx	lr
 8014dca:	4604      	mov	r4, r0
 8014dcc:	e7f7      	b.n	8014dbe <rcutils_strdup+0x32>
 8014dce:	bf00      	nop

08014dd0 <rcutils_strndup>:
 8014dd0:	b082      	sub	sp, #8
 8014dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014dd4:	ac06      	add	r4, sp, #24
 8014dd6:	e884 000c 	stmia.w	r4, {r2, r3}
 8014dda:	4605      	mov	r5, r0
 8014ddc:	b188      	cbz	r0, 8014e02 <rcutils_strndup+0x32>
 8014dde:	1c4f      	adds	r7, r1, #1
 8014de0:	460e      	mov	r6, r1
 8014de2:	4638      	mov	r0, r7
 8014de4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014de6:	4790      	blx	r2
 8014de8:	4604      	mov	r4, r0
 8014dea:	b128      	cbz	r0, 8014df8 <rcutils_strndup+0x28>
 8014dec:	463a      	mov	r2, r7
 8014dee:	4629      	mov	r1, r5
 8014df0:	f002 ff8b 	bl	8017d0a <memcpy>
 8014df4:	2300      	movs	r3, #0
 8014df6:	55a3      	strb	r3, [r4, r6]
 8014df8:	4620      	mov	r0, r4
 8014dfa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8014dfe:	b002      	add	sp, #8
 8014e00:	4770      	bx	lr
 8014e02:	4604      	mov	r4, r0
 8014e04:	e7f8      	b.n	8014df8 <rcutils_strndup+0x28>
 8014e06:	bf00      	nop

08014e08 <rcutils_get_zero_initialized_string_map>:
 8014e08:	4b01      	ldr	r3, [pc, #4]	@ (8014e10 <rcutils_get_zero_initialized_string_map+0x8>)
 8014e0a:	2000      	movs	r0, #0
 8014e0c:	6018      	str	r0, [r3, #0]
 8014e0e:	4770      	bx	lr
 8014e10:	2000b29c 	.word	0x2000b29c

08014e14 <rcutils_string_map_reserve>:
 8014e14:	2800      	cmp	r0, #0
 8014e16:	d05f      	beq.n	8014ed8 <rcutils_string_map_reserve+0xc4>
 8014e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e1c:	460c      	mov	r4, r1
 8014e1e:	6801      	ldr	r1, [r0, #0]
 8014e20:	b082      	sub	sp, #8
 8014e22:	4605      	mov	r5, r0
 8014e24:	b129      	cbz	r1, 8014e32 <rcutils_string_map_reserve+0x1e>
 8014e26:	68cb      	ldr	r3, [r1, #12]
 8014e28:	42a3      	cmp	r3, r4
 8014e2a:	d906      	bls.n	8014e3a <rcutils_string_map_reserve+0x26>
 8014e2c:	461c      	mov	r4, r3
 8014e2e:	2900      	cmp	r1, #0
 8014e30:	d1f9      	bne.n	8014e26 <rcutils_string_map_reserve+0x12>
 8014e32:	201f      	movs	r0, #31
 8014e34:	b002      	add	sp, #8
 8014e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014e3a:	688b      	ldr	r3, [r1, #8]
 8014e3c:	42a3      	cmp	r3, r4
 8014e3e:	d047      	beq.n	8014ed0 <rcutils_string_map_reserve+0xbc>
 8014e40:	6a0e      	ldr	r6, [r1, #32]
 8014e42:	2c00      	cmp	r4, #0
 8014e44:	d034      	beq.n	8014eb0 <rcutils_string_map_reserve+0x9c>
 8014e46:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8014e4a:	d243      	bcs.n	8014ed4 <rcutils_string_map_reserve+0xc0>
 8014e4c:	00a7      	lsls	r7, r4, #2
 8014e4e:	f8d1 8018 	ldr.w	r8, [r1, #24]
 8014e52:	6808      	ldr	r0, [r1, #0]
 8014e54:	4632      	mov	r2, r6
 8014e56:	4639      	mov	r1, r7
 8014e58:	47c0      	blx	r8
 8014e5a:	2800      	cmp	r0, #0
 8014e5c:	d03a      	beq.n	8014ed4 <rcutils_string_map_reserve+0xc0>
 8014e5e:	682b      	ldr	r3, [r5, #0]
 8014e60:	4632      	mov	r2, r6
 8014e62:	6018      	str	r0, [r3, #0]
 8014e64:	4639      	mov	r1, r7
 8014e66:	6858      	ldr	r0, [r3, #4]
 8014e68:	47c0      	blx	r8
 8014e6a:	2800      	cmp	r0, #0
 8014e6c:	d032      	beq.n	8014ed4 <rcutils_string_map_reserve+0xc0>
 8014e6e:	682d      	ldr	r5, [r5, #0]
 8014e70:	68ab      	ldr	r3, [r5, #8]
 8014e72:	6068      	str	r0, [r5, #4]
 8014e74:	42a3      	cmp	r3, r4
 8014e76:	d226      	bcs.n	8014ec6 <rcutils_string_map_reserve+0xb2>
 8014e78:	682a      	ldr	r2, [r5, #0]
 8014e7a:	eb00 0c07 	add.w	ip, r0, r7
 8014e7e:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 8014e82:	45e6      	cmp	lr, ip
 8014e84:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8014e88:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 8014e8c:	d203      	bcs.n	8014e96 <rcutils_string_map_reserve+0x82>
 8014e8e:	eb02 0c07 	add.w	ip, r2, r7
 8014e92:	4566      	cmp	r6, ip
 8014e94:	d322      	bcc.n	8014edc <rcutils_string_map_reserve+0xc8>
 8014e96:	1ae3      	subs	r3, r4, r3
 8014e98:	009a      	lsls	r2, r3, #2
 8014e9a:	4670      	mov	r0, lr
 8014e9c:	2100      	movs	r1, #0
 8014e9e:	9201      	str	r2, [sp, #4]
 8014ea0:	f002 fe6a 	bl	8017b78 <memset>
 8014ea4:	9a01      	ldr	r2, [sp, #4]
 8014ea6:	2100      	movs	r1, #0
 8014ea8:	4630      	mov	r0, r6
 8014eaa:	f002 fe65 	bl	8017b78 <memset>
 8014eae:	e00a      	b.n	8014ec6 <rcutils_string_map_reserve+0xb2>
 8014eb0:	694f      	ldr	r7, [r1, #20]
 8014eb2:	6808      	ldr	r0, [r1, #0]
 8014eb4:	4631      	mov	r1, r6
 8014eb6:	47b8      	blx	r7
 8014eb8:	682b      	ldr	r3, [r5, #0]
 8014eba:	4631      	mov	r1, r6
 8014ebc:	6858      	ldr	r0, [r3, #4]
 8014ebe:	601c      	str	r4, [r3, #0]
 8014ec0:	47b8      	blx	r7
 8014ec2:	682d      	ldr	r5, [r5, #0]
 8014ec4:	606c      	str	r4, [r5, #4]
 8014ec6:	2000      	movs	r0, #0
 8014ec8:	60ac      	str	r4, [r5, #8]
 8014eca:	b002      	add	sp, #8
 8014ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	e7af      	b.n	8014e34 <rcutils_string_map_reserve+0x20>
 8014ed4:	200a      	movs	r0, #10
 8014ed6:	e7ad      	b.n	8014e34 <rcutils_string_map_reserve+0x20>
 8014ed8:	200b      	movs	r0, #11
 8014eda:	4770      	bx	lr
 8014edc:	1f0b      	subs	r3, r1, #4
 8014ede:	4418      	add	r0, r3
 8014ee0:	4413      	add	r3, r2
 8014ee2:	3a04      	subs	r2, #4
 8014ee4:	4417      	add	r7, r2
 8014ee6:	2200      	movs	r2, #0
 8014ee8:	f843 2f04 	str.w	r2, [r3, #4]!
 8014eec:	42bb      	cmp	r3, r7
 8014eee:	f840 2f04 	str.w	r2, [r0, #4]!
 8014ef2:	d1f9      	bne.n	8014ee8 <rcutils_string_map_reserve+0xd4>
 8014ef4:	e7e7      	b.n	8014ec6 <rcutils_string_map_reserve+0xb2>
 8014ef6:	bf00      	nop

08014ef8 <rcutils_string_map_init>:
 8014ef8:	b082      	sub	sp, #8
 8014efa:	b570      	push	{r4, r5, r6, lr}
 8014efc:	ac04      	add	r4, sp, #16
 8014efe:	e884 000c 	stmia.w	r4, {r2, r3}
 8014f02:	b380      	cbz	r0, 8014f66 <rcutils_string_map_init+0x6e>
 8014f04:	6806      	ldr	r6, [r0, #0]
 8014f06:	4604      	mov	r4, r0
 8014f08:	b12e      	cbz	r6, 8014f16 <rcutils_string_map_init+0x1e>
 8014f0a:	251e      	movs	r5, #30
 8014f0c:	4628      	mov	r0, r5
 8014f0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f12:	b002      	add	sp, #8
 8014f14:	4770      	bx	lr
 8014f16:	a804      	add	r0, sp, #16
 8014f18:	460d      	mov	r5, r1
 8014f1a:	f7f8 f9ef 	bl	800d2fc <rcutils_allocator_is_valid>
 8014f1e:	b310      	cbz	r0, 8014f66 <rcutils_string_map_init+0x6e>
 8014f20:	9b04      	ldr	r3, [sp, #16]
 8014f22:	9908      	ldr	r1, [sp, #32]
 8014f24:	2024      	movs	r0, #36	@ 0x24
 8014f26:	4798      	blx	r3
 8014f28:	6020      	str	r0, [r4, #0]
 8014f2a:	b310      	cbz	r0, 8014f72 <rcutils_string_map_init+0x7a>
 8014f2c:	f10d 0e10 	add.w	lr, sp, #16
 8014f30:	e9c0 6600 	strd	r6, r6, [r0]
 8014f34:	e9c0 6602 	strd	r6, r6, [r0, #8]
 8014f38:	f100 0c10 	add.w	ip, r0, #16
 8014f3c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8014f40:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8014f44:	f8de 3000 	ldr.w	r3, [lr]
 8014f48:	f8cc 3000 	str.w	r3, [ip]
 8014f4c:	4629      	mov	r1, r5
 8014f4e:	4620      	mov	r0, r4
 8014f50:	f7ff ff60 	bl	8014e14 <rcutils_string_map_reserve>
 8014f54:	4605      	mov	r5, r0
 8014f56:	2800      	cmp	r0, #0
 8014f58:	d0d8      	beq.n	8014f0c <rcutils_string_map_init+0x14>
 8014f5a:	9b05      	ldr	r3, [sp, #20]
 8014f5c:	9908      	ldr	r1, [sp, #32]
 8014f5e:	6820      	ldr	r0, [r4, #0]
 8014f60:	4798      	blx	r3
 8014f62:	6026      	str	r6, [r4, #0]
 8014f64:	e7d2      	b.n	8014f0c <rcutils_string_map_init+0x14>
 8014f66:	250b      	movs	r5, #11
 8014f68:	4628      	mov	r0, r5
 8014f6a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014f6e:	b002      	add	sp, #8
 8014f70:	4770      	bx	lr
 8014f72:	250a      	movs	r5, #10
 8014f74:	e7ca      	b.n	8014f0c <rcutils_string_map_init+0x14>
 8014f76:	bf00      	nop

08014f78 <rcutils_string_map_fini>:
 8014f78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f7c:	b082      	sub	sp, #8
 8014f7e:	2800      	cmp	r0, #0
 8014f80:	d03a      	beq.n	8014ff8 <rcutils_string_map_fini+0x80>
 8014f82:	6804      	ldr	r4, [r0, #0]
 8014f84:	4606      	mov	r6, r0
 8014f86:	2c00      	cmp	r4, #0
 8014f88:	d032      	beq.n	8014ff0 <rcutils_string_map_fini+0x78>
 8014f8a:	68a3      	ldr	r3, [r4, #8]
 8014f8c:	b32b      	cbz	r3, 8014fda <rcutils_string_map_fini+0x62>
 8014f8e:	2500      	movs	r5, #0
 8014f90:	6822      	ldr	r2, [r4, #0]
 8014f92:	462f      	mov	r7, r5
 8014f94:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014f98:	b1e0      	cbz	r0, 8014fd4 <rcutils_string_map_fini+0x5c>
 8014f9a:	6a21      	ldr	r1, [r4, #32]
 8014f9c:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8014fa0:	9101      	str	r1, [sp, #4]
 8014fa2:	47c0      	blx	r8
 8014fa4:	e9d4 2300 	ldrd	r2, r3, [r4]
 8014fa8:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014fac:	9901      	ldr	r1, [sp, #4]
 8014fae:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014fb2:	47c0      	blx	r8
 8014fb4:	68e3      	ldr	r3, [r4, #12]
 8014fb6:	6862      	ldr	r2, [r4, #4]
 8014fb8:	3b01      	subs	r3, #1
 8014fba:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 8014fbe:	60e3      	str	r3, [r4, #12]
 8014fc0:	6834      	ldr	r4, [r6, #0]
 8014fc2:	68a3      	ldr	r3, [r4, #8]
 8014fc4:	3501      	adds	r5, #1
 8014fc6:	429d      	cmp	r5, r3
 8014fc8:	d207      	bcs.n	8014fda <rcutils_string_map_fini+0x62>
 8014fca:	6822      	ldr	r2, [r4, #0]
 8014fcc:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 8014fd0:	2800      	cmp	r0, #0
 8014fd2:	d1e2      	bne.n	8014f9a <rcutils_string_map_fini+0x22>
 8014fd4:	3501      	adds	r5, #1
 8014fd6:	429d      	cmp	r5, r3
 8014fd8:	d3dc      	bcc.n	8014f94 <rcutils_string_map_fini+0x1c>
 8014fda:	2100      	movs	r1, #0
 8014fdc:	4630      	mov	r0, r6
 8014fde:	f7ff ff19 	bl	8014e14 <rcutils_string_map_reserve>
 8014fe2:	4604      	mov	r4, r0
 8014fe4:	b920      	cbnz	r0, 8014ff0 <rcutils_string_map_fini+0x78>
 8014fe6:	6830      	ldr	r0, [r6, #0]
 8014fe8:	6943      	ldr	r3, [r0, #20]
 8014fea:	6a01      	ldr	r1, [r0, #32]
 8014fec:	4798      	blx	r3
 8014fee:	6034      	str	r4, [r6, #0]
 8014ff0:	4620      	mov	r0, r4
 8014ff2:	b002      	add	sp, #8
 8014ff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ff8:	240b      	movs	r4, #11
 8014ffa:	4620      	mov	r0, r4
 8014ffc:	b002      	add	sp, #8
 8014ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015002:	bf00      	nop

08015004 <rcutils_string_map_getn>:
 8015004:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015008:	b300      	cbz	r0, 801504c <rcutils_string_map_getn+0x48>
 801500a:	6807      	ldr	r7, [r0, #0]
 801500c:	b1ff      	cbz	r7, 801504e <rcutils_string_map_getn+0x4a>
 801500e:	4688      	mov	r8, r1
 8015010:	b1e1      	cbz	r1, 801504c <rcutils_string_map_getn+0x48>
 8015012:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8015016:	683e      	ldr	r6, [r7, #0]
 8015018:	f1ba 0f00 	cmp.w	sl, #0
 801501c:	d016      	beq.n	801504c <rcutils_string_map_getn+0x48>
 801501e:	4691      	mov	r9, r2
 8015020:	3e04      	subs	r6, #4
 8015022:	2400      	movs	r4, #0
 8015024:	f856 5f04 	ldr.w	r5, [r6, #4]!
 8015028:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801502c:	4628      	mov	r0, r5
 801502e:	3401      	adds	r4, #1
 8015030:	b155      	cbz	r5, 8015048 <rcutils_string_map_getn+0x44>
 8015032:	f7eb f8ff 	bl	8000234 <strlen>
 8015036:	4548      	cmp	r0, r9
 8015038:	4602      	mov	r2, r0
 801503a:	4629      	mov	r1, r5
 801503c:	bf38      	it	cc
 801503e:	464a      	movcc	r2, r9
 8015040:	4640      	mov	r0, r8
 8015042:	f002 fdae 	bl	8017ba2 <strncmp>
 8015046:	b128      	cbz	r0, 8015054 <rcutils_string_map_getn+0x50>
 8015048:	45a2      	cmp	sl, r4
 801504a:	d1eb      	bne.n	8015024 <rcutils_string_map_getn+0x20>
 801504c:	2700      	movs	r7, #0
 801504e:	4638      	mov	r0, r7
 8015050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	f853 700b 	ldr.w	r7, [r3, fp]
 801505a:	4638      	mov	r0, r7
 801505c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015060 <rmw_get_zero_initialized_context>:
 8015060:	b510      	push	{r4, lr}
 8015062:	4604      	mov	r4, r0
 8015064:	3010      	adds	r0, #16
 8015066:	f7f8 f9db 	bl	800d420 <rmw_get_zero_initialized_init_options>
 801506a:	2300      	movs	r3, #0
 801506c:	2000      	movs	r0, #0
 801506e:	2100      	movs	r1, #0
 8015070:	e9c4 0100 	strd	r0, r1, [r4]
 8015074:	e9c4 3312 	strd	r3, r3, [r4, #72]	@ 0x48
 8015078:	60a3      	str	r3, [r4, #8]
 801507a:	4620      	mov	r0, r4
 801507c:	bd10      	pop	{r4, pc}
 801507e:	bf00      	nop

08015080 <rmw_time_equal>:
 8015080:	b4f0      	push	{r4, r5, r6, r7}
 8015082:	b084      	sub	sp, #16
 8015084:	ac04      	add	r4, sp, #16
 8015086:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 801508a:	4603      	mov	r3, r0
 801508c:	4924      	ldr	r1, [pc, #144]	@ (8015120 <rmw_time_equal+0xa0>)
 801508e:	9e03      	ldr	r6, [sp, #12]
 8015090:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 8015094:	2202      	movs	r2, #2
 8015096:	4299      	cmp	r1, r3
 8015098:	41aa      	sbcs	r2, r5
 801509a:	d330      	bcc.n	80150fe <rmw_time_equal+0x7e>
 801509c:	4c21      	ldr	r4, [pc, #132]	@ (8015124 <rmw_time_equal+0xa4>)
 801509e:	fba3 3204 	umull	r3, r2, r3, r4
 80150a2:	fb04 2205 	mla	r2, r4, r5, r2
 80150a6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80150aa:	43dd      	mvns	r5, r3
 80150ac:	1a8c      	subs	r4, r1, r2
 80150ae:	4285      	cmp	r5, r0
 80150b0:	41b4      	sbcs	r4, r6
 80150b2:	d332      	bcc.n	801511a <rmw_time_equal+0x9a>
 80150b4:	eb10 0c03 	adds.w	ip, r0, r3
 80150b8:	eb42 0106 	adc.w	r1, r2, r6
 80150bc:	e9dd 3608 	ldrd	r3, r6, [sp, #32]
 80150c0:	4817      	ldr	r0, [pc, #92]	@ (8015120 <rmw_time_equal+0xa0>)
 80150c2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80150c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80150c6:	2202      	movs	r2, #2
 80150c8:	4298      	cmp	r0, r3
 80150ca:	41b2      	sbcs	r2, r6
 80150cc:	d31c      	bcc.n	8015108 <rmw_time_equal+0x88>
 80150ce:	4c15      	ldr	r4, [pc, #84]	@ (8015124 <rmw_time_equal+0xa4>)
 80150d0:	fba3 3204 	umull	r3, r2, r3, r4
 80150d4:	fb04 2206 	mla	r2, r4, r6, r2
 80150d8:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80150dc:	43de      	mvns	r6, r3
 80150de:	1a84      	subs	r4, r0, r2
 80150e0:	42ae      	cmp	r6, r5
 80150e2:	41bc      	sbcs	r4, r7
 80150e4:	d315      	bcc.n	8015112 <rmw_time_equal+0x92>
 80150e6:	195b      	adds	r3, r3, r5
 80150e8:	eb42 0207 	adc.w	r2, r2, r7
 80150ec:	428a      	cmp	r2, r1
 80150ee:	bf08      	it	eq
 80150f0:	4563      	cmpeq	r3, ip
 80150f2:	bf0c      	ite	eq
 80150f4:	2001      	moveq	r0, #1
 80150f6:	2000      	movne	r0, #0
 80150f8:	b004      	add	sp, #16
 80150fa:	bcf0      	pop	{r4, r5, r6, r7}
 80150fc:	4770      	bx	lr
 80150fe:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8015102:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015106:	e7d9      	b.n	80150bc <rmw_time_equal+0x3c>
 8015108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801510c:	f06f 4200 	mvn.w	r2, #2147483648	@ 0x80000000
 8015110:	e7ec      	b.n	80150ec <rmw_time_equal+0x6c>
 8015112:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8015116:	4602      	mov	r2, r0
 8015118:	e7e8      	b.n	80150ec <rmw_time_equal+0x6c>
 801511a:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 801511e:	e7cd      	b.n	80150bc <rmw_time_equal+0x3c>
 8015120:	25c17d04 	.word	0x25c17d04
 8015124:	3b9aca00 	.word	0x3b9aca00

08015128 <rmw_time_total_nsec>:
 8015128:	b470      	push	{r4, r5, r6}
 801512a:	b085      	sub	sp, #20
 801512c:	ac04      	add	r4, sp, #16
 801512e:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 8015132:	4603      	mov	r3, r0
 8015134:	4912      	ldr	r1, [pc, #72]	@ (8015180 <rmw_time_total_nsec+0x58>)
 8015136:	9e03      	ldr	r6, [sp, #12]
 8015138:	e9dd 5001 	ldrd	r5, r0, [sp, #4]
 801513c:	2202      	movs	r2, #2
 801513e:	4299      	cmp	r1, r3
 8015140:	41aa      	sbcs	r2, r5
 8015142:	d311      	bcc.n	8015168 <rmw_time_total_nsec+0x40>
 8015144:	4c0f      	ldr	r4, [pc, #60]	@ (8015184 <rmw_time_total_nsec+0x5c>)
 8015146:	fba3 3204 	umull	r3, r2, r3, r4
 801514a:	fb04 2205 	mla	r2, r4, r5, r2
 801514e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015152:	43dd      	mvns	r5, r3
 8015154:	1a8c      	subs	r4, r1, r2
 8015156:	4285      	cmp	r5, r0
 8015158:	41b4      	sbcs	r4, r6
 801515a:	d30c      	bcc.n	8015176 <rmw_time_total_nsec+0x4e>
 801515c:	1818      	adds	r0, r3, r0
 801515e:	eb42 0106 	adc.w	r1, r2, r6
 8015162:	b005      	add	sp, #20
 8015164:	bc70      	pop	{r4, r5, r6}
 8015166:	4770      	bx	lr
 8015168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801516c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8015170:	b005      	add	sp, #20
 8015172:	bc70      	pop	{r4, r5, r6}
 8015174:	4770      	bx	lr
 8015176:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801517a:	b005      	add	sp, #20
 801517c:	bc70      	pop	{r4, r5, r6}
 801517e:	4770      	bx	lr
 8015180:	25c17d04 	.word	0x25c17d04
 8015184:	3b9aca00 	.word	0x3b9aca00

08015188 <rmw_get_zero_initialized_message_info>:
 8015188:	b510      	push	{r4, lr}
 801518a:	2240      	movs	r2, #64	@ 0x40
 801518c:	4604      	mov	r4, r0
 801518e:	2100      	movs	r1, #0
 8015190:	f002 fcf2 	bl	8017b78 <memset>
 8015194:	4620      	mov	r0, r4
 8015196:	bd10      	pop	{r4, pc}

08015198 <rmw_validate_full_topic_name>:
 8015198:	2800      	cmp	r0, #0
 801519a:	d057      	beq.n	801524c <rmw_validate_full_topic_name+0xb4>
 801519c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80151a0:	460d      	mov	r5, r1
 80151a2:	2900      	cmp	r1, #0
 80151a4:	d054      	beq.n	8015250 <rmw_validate_full_topic_name+0xb8>
 80151a6:	4616      	mov	r6, r2
 80151a8:	4604      	mov	r4, r0
 80151aa:	f7eb f843 	bl	8000234 <strlen>
 80151ae:	b148      	cbz	r0, 80151c4 <rmw_validate_full_topic_name+0x2c>
 80151b0:	7823      	ldrb	r3, [r4, #0]
 80151b2:	2b2f      	cmp	r3, #47	@ 0x2f
 80151b4:	d00d      	beq.n	80151d2 <rmw_validate_full_topic_name+0x3a>
 80151b6:	2302      	movs	r3, #2
 80151b8:	602b      	str	r3, [r5, #0]
 80151ba:	b13e      	cbz	r6, 80151cc <rmw_validate_full_topic_name+0x34>
 80151bc:	2000      	movs	r0, #0
 80151be:	6030      	str	r0, [r6, #0]
 80151c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151c4:	2301      	movs	r3, #1
 80151c6:	602b      	str	r3, [r5, #0]
 80151c8:	2e00      	cmp	r6, #0
 80151ca:	d1f7      	bne.n	80151bc <rmw_validate_full_topic_name+0x24>
 80151cc:	2000      	movs	r0, #0
 80151ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80151d2:	1e43      	subs	r3, r0, #1
 80151d4:	5ce2      	ldrb	r2, [r4, r3]
 80151d6:	2a2f      	cmp	r2, #47	@ 0x2f
 80151d8:	d03c      	beq.n	8015254 <rmw_validate_full_topic_name+0xbc>
 80151da:	1e63      	subs	r3, r4, #1
 80151dc:	eb03 0800 	add.w	r8, r3, r0
 80151e0:	f1c4 0e01 	rsb	lr, r4, #1
 80151e4:	eb0e 0703 	add.w	r7, lr, r3
 80151e8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 80151ec:	f021 0220 	bic.w	r2, r1, #32
 80151f0:	3a41      	subs	r2, #65	@ 0x41
 80151f2:	2a19      	cmp	r2, #25
 80151f4:	f1a1 0c2f 	sub.w	ip, r1, #47	@ 0x2f
 80151f8:	d90b      	bls.n	8015212 <rmw_validate_full_topic_name+0x7a>
 80151fa:	295f      	cmp	r1, #95	@ 0x5f
 80151fc:	d009      	beq.n	8015212 <rmw_validate_full_topic_name+0x7a>
 80151fe:	f1bc 0f0a 	cmp.w	ip, #10
 8015202:	d906      	bls.n	8015212 <rmw_validate_full_topic_name+0x7a>
 8015204:	2304      	movs	r3, #4
 8015206:	602b      	str	r3, [r5, #0]
 8015208:	2e00      	cmp	r6, #0
 801520a:	d0df      	beq.n	80151cc <rmw_validate_full_topic_name+0x34>
 801520c:	6037      	str	r7, [r6, #0]
 801520e:	2000      	movs	r0, #0
 8015210:	e7d6      	b.n	80151c0 <rmw_validate_full_topic_name+0x28>
 8015212:	4543      	cmp	r3, r8
 8015214:	d1e6      	bne.n	80151e4 <rmw_validate_full_topic_name+0x4c>
 8015216:	4f1a      	ldr	r7, [pc, #104]	@ (8015280 <rmw_validate_full_topic_name+0xe8>)
 8015218:	2301      	movs	r3, #1
 801521a:	e004      	b.n	8015226 <rmw_validate_full_topic_name+0x8e>
 801521c:	4298      	cmp	r0, r3
 801521e:	f104 0401 	add.w	r4, r4, #1
 8015222:	d91c      	bls.n	801525e <rmw_validate_full_topic_name+0xc6>
 8015224:	4613      	mov	r3, r2
 8015226:	4298      	cmp	r0, r3
 8015228:	f103 0201 	add.w	r2, r3, #1
 801522c:	d0f6      	beq.n	801521c <rmw_validate_full_topic_name+0x84>
 801522e:	7821      	ldrb	r1, [r4, #0]
 8015230:	292f      	cmp	r1, #47	@ 0x2f
 8015232:	d1f3      	bne.n	801521c <rmw_validate_full_topic_name+0x84>
 8015234:	7861      	ldrb	r1, [r4, #1]
 8015236:	292f      	cmp	r1, #47	@ 0x2f
 8015238:	d01c      	beq.n	8015274 <rmw_validate_full_topic_name+0xdc>
 801523a:	5dc9      	ldrb	r1, [r1, r7]
 801523c:	0749      	lsls	r1, r1, #29
 801523e:	d5ed      	bpl.n	801521c <rmw_validate_full_topic_name+0x84>
 8015240:	2206      	movs	r2, #6
 8015242:	602a      	str	r2, [r5, #0]
 8015244:	2e00      	cmp	r6, #0
 8015246:	d0c1      	beq.n	80151cc <rmw_validate_full_topic_name+0x34>
 8015248:	6033      	str	r3, [r6, #0]
 801524a:	e7bf      	b.n	80151cc <rmw_validate_full_topic_name+0x34>
 801524c:	200b      	movs	r0, #11
 801524e:	4770      	bx	lr
 8015250:	200b      	movs	r0, #11
 8015252:	e7b5      	b.n	80151c0 <rmw_validate_full_topic_name+0x28>
 8015254:	2203      	movs	r2, #3
 8015256:	602a      	str	r2, [r5, #0]
 8015258:	2e00      	cmp	r6, #0
 801525a:	d1f5      	bne.n	8015248 <rmw_validate_full_topic_name+0xb0>
 801525c:	e7b6      	b.n	80151cc <rmw_validate_full_topic_name+0x34>
 801525e:	28f7      	cmp	r0, #247	@ 0xf7
 8015260:	d802      	bhi.n	8015268 <rmw_validate_full_topic_name+0xd0>
 8015262:	2000      	movs	r0, #0
 8015264:	6028      	str	r0, [r5, #0]
 8015266:	e7ab      	b.n	80151c0 <rmw_validate_full_topic_name+0x28>
 8015268:	2307      	movs	r3, #7
 801526a:	602b      	str	r3, [r5, #0]
 801526c:	2e00      	cmp	r6, #0
 801526e:	d0ad      	beq.n	80151cc <rmw_validate_full_topic_name+0x34>
 8015270:	23f6      	movs	r3, #246	@ 0xf6
 8015272:	e7e9      	b.n	8015248 <rmw_validate_full_topic_name+0xb0>
 8015274:	2205      	movs	r2, #5
 8015276:	602a      	str	r2, [r5, #0]
 8015278:	2e00      	cmp	r6, #0
 801527a:	d1e5      	bne.n	8015248 <rmw_validate_full_topic_name+0xb0>
 801527c:	e7a6      	b.n	80151cc <rmw_validate_full_topic_name+0x34>
 801527e:	bf00      	nop
 8015280:	080197e0 	.word	0x080197e0

08015284 <rmw_validate_namespace_with_size>:
 8015284:	b340      	cbz	r0, 80152d8 <rmw_validate_namespace_with_size+0x54>
 8015286:	b570      	push	{r4, r5, r6, lr}
 8015288:	4614      	mov	r4, r2
 801528a:	b0c2      	sub	sp, #264	@ 0x108
 801528c:	b332      	cbz	r2, 80152dc <rmw_validate_namespace_with_size+0x58>
 801528e:	2901      	cmp	r1, #1
 8015290:	460d      	mov	r5, r1
 8015292:	461e      	mov	r6, r3
 8015294:	d102      	bne.n	801529c <rmw_validate_namespace_with_size+0x18>
 8015296:	7803      	ldrb	r3, [r0, #0]
 8015298:	2b2f      	cmp	r3, #47	@ 0x2f
 801529a:	d012      	beq.n	80152c2 <rmw_validate_namespace_with_size+0x3e>
 801529c:	aa01      	add	r2, sp, #4
 801529e:	4669      	mov	r1, sp
 80152a0:	f7ff ff7a 	bl	8015198 <rmw_validate_full_topic_name>
 80152a4:	b978      	cbnz	r0, 80152c6 <rmw_validate_namespace_with_size+0x42>
 80152a6:	9b00      	ldr	r3, [sp, #0]
 80152a8:	b14b      	cbz	r3, 80152be <rmw_validate_namespace_with_size+0x3a>
 80152aa:	2b07      	cmp	r3, #7
 80152ac:	d007      	beq.n	80152be <rmw_validate_namespace_with_size+0x3a>
 80152ae:	1e5a      	subs	r2, r3, #1
 80152b0:	2a05      	cmp	r2, #5
 80152b2:	d82b      	bhi.n	801530c <rmw_validate_namespace_with_size+0x88>
 80152b4:	e8df f002 	tbb	[pc, r2]
 80152b8:	1e212427 	.word	0x1e212427
 80152bc:	141b      	.short	0x141b
 80152be:	2df5      	cmp	r5, #245	@ 0xf5
 80152c0:	d803      	bhi.n	80152ca <rmw_validate_namespace_with_size+0x46>
 80152c2:	2000      	movs	r0, #0
 80152c4:	6020      	str	r0, [r4, #0]
 80152c6:	b042      	add	sp, #264	@ 0x108
 80152c8:	bd70      	pop	{r4, r5, r6, pc}
 80152ca:	2307      	movs	r3, #7
 80152cc:	6023      	str	r3, [r4, #0]
 80152ce:	2e00      	cmp	r6, #0
 80152d0:	d0f9      	beq.n	80152c6 <rmw_validate_namespace_with_size+0x42>
 80152d2:	23f4      	movs	r3, #244	@ 0xf4
 80152d4:	6033      	str	r3, [r6, #0]
 80152d6:	e7f6      	b.n	80152c6 <rmw_validate_namespace_with_size+0x42>
 80152d8:	200b      	movs	r0, #11
 80152da:	4770      	bx	lr
 80152dc:	200b      	movs	r0, #11
 80152de:	e7f2      	b.n	80152c6 <rmw_validate_namespace_with_size+0x42>
 80152e0:	2306      	movs	r3, #6
 80152e2:	6023      	str	r3, [r4, #0]
 80152e4:	2e00      	cmp	r6, #0
 80152e6:	d0ee      	beq.n	80152c6 <rmw_validate_namespace_with_size+0x42>
 80152e8:	9b01      	ldr	r3, [sp, #4]
 80152ea:	6033      	str	r3, [r6, #0]
 80152ec:	e7eb      	b.n	80152c6 <rmw_validate_namespace_with_size+0x42>
 80152ee:	2305      	movs	r3, #5
 80152f0:	6023      	str	r3, [r4, #0]
 80152f2:	e7f7      	b.n	80152e4 <rmw_validate_namespace_with_size+0x60>
 80152f4:	2304      	movs	r3, #4
 80152f6:	6023      	str	r3, [r4, #0]
 80152f8:	e7f4      	b.n	80152e4 <rmw_validate_namespace_with_size+0x60>
 80152fa:	2303      	movs	r3, #3
 80152fc:	6023      	str	r3, [r4, #0]
 80152fe:	e7f1      	b.n	80152e4 <rmw_validate_namespace_with_size+0x60>
 8015300:	2302      	movs	r3, #2
 8015302:	6023      	str	r3, [r4, #0]
 8015304:	e7ee      	b.n	80152e4 <rmw_validate_namespace_with_size+0x60>
 8015306:	2301      	movs	r3, #1
 8015308:	6023      	str	r3, [r4, #0]
 801530a:	e7eb      	b.n	80152e4 <rmw_validate_namespace_with_size+0x60>
 801530c:	4a03      	ldr	r2, [pc, #12]	@ (801531c <rmw_validate_namespace_with_size+0x98>)
 801530e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8015312:	a802      	add	r0, sp, #8
 8015314:	f7ff fd0e 	bl	8014d34 <rcutils_snprintf>
 8015318:	2001      	movs	r0, #1
 801531a:	e7d4      	b.n	80152c6 <rmw_validate_namespace_with_size+0x42>
 801531c:	08019400 	.word	0x08019400

08015320 <rmw_validate_namespace>:
 8015320:	b168      	cbz	r0, 801533e <rmw_validate_namespace+0x1e>
 8015322:	b570      	push	{r4, r5, r6, lr}
 8015324:	460d      	mov	r5, r1
 8015326:	4616      	mov	r6, r2
 8015328:	4604      	mov	r4, r0
 801532a:	f7ea ff83 	bl	8000234 <strlen>
 801532e:	4633      	mov	r3, r6
 8015330:	4601      	mov	r1, r0
 8015332:	462a      	mov	r2, r5
 8015334:	4620      	mov	r0, r4
 8015336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801533a:	f7ff bfa3 	b.w	8015284 <rmw_validate_namespace_with_size>
 801533e:	200b      	movs	r0, #11
 8015340:	4770      	bx	lr
 8015342:	bf00      	nop

08015344 <rmw_namespace_validation_result_string>:
 8015344:	2807      	cmp	r0, #7
 8015346:	bf9a      	itte	ls
 8015348:	4b02      	ldrls	r3, [pc, #8]	@ (8015354 <rmw_namespace_validation_result_string+0x10>)
 801534a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801534e:	4802      	ldrhi	r0, [pc, #8]	@ (8015358 <rmw_namespace_validation_result_string+0x14>)
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop
 8015354:	080195f8 	.word	0x080195f8
 8015358:	08019450 	.word	0x08019450

0801535c <rmw_validate_node_name>:
 801535c:	2800      	cmp	r0, #0
 801535e:	d03b      	beq.n	80153d8 <rmw_validate_node_name+0x7c>
 8015360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015364:	460d      	mov	r5, r1
 8015366:	2900      	cmp	r1, #0
 8015368:	d038      	beq.n	80153dc <rmw_validate_node_name+0x80>
 801536a:	4616      	mov	r6, r2
 801536c:	4604      	mov	r4, r0
 801536e:	f7ea ff61 	bl	8000234 <strlen>
 8015372:	b1e0      	cbz	r0, 80153ae <rmw_validate_node_name+0x52>
 8015374:	1e63      	subs	r3, r4, #1
 8015376:	eb03 0800 	add.w	r8, r3, r0
 801537a:	f1c4 0101 	rsb	r1, r4, #1
 801537e:	18cf      	adds	r7, r1, r3
 8015380:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 8015384:	f1ae 0230 	sub.w	r2, lr, #48	@ 0x30
 8015388:	f02e 0c20 	bic.w	ip, lr, #32
 801538c:	2a09      	cmp	r2, #9
 801538e:	f1ac 0c41 	sub.w	ip, ip, #65	@ 0x41
 8015392:	d914      	bls.n	80153be <rmw_validate_node_name+0x62>
 8015394:	f1bc 0f19 	cmp.w	ip, #25
 8015398:	d911      	bls.n	80153be <rmw_validate_node_name+0x62>
 801539a:	f1be 0f5f 	cmp.w	lr, #95	@ 0x5f
 801539e:	d00e      	beq.n	80153be <rmw_validate_node_name+0x62>
 80153a0:	2302      	movs	r3, #2
 80153a2:	602b      	str	r3, [r5, #0]
 80153a4:	b106      	cbz	r6, 80153a8 <rmw_validate_node_name+0x4c>
 80153a6:	6037      	str	r7, [r6, #0]
 80153a8:	2000      	movs	r0, #0
 80153aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153ae:	2301      	movs	r3, #1
 80153b0:	602b      	str	r3, [r5, #0]
 80153b2:	2e00      	cmp	r6, #0
 80153b4:	d0f8      	beq.n	80153a8 <rmw_validate_node_name+0x4c>
 80153b6:	2000      	movs	r0, #0
 80153b8:	6030      	str	r0, [r6, #0]
 80153ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80153be:	4543      	cmp	r3, r8
 80153c0:	d1dd      	bne.n	801537e <rmw_validate_node_name+0x22>
 80153c2:	7822      	ldrb	r2, [r4, #0]
 80153c4:	4b0d      	ldr	r3, [pc, #52]	@ (80153fc <rmw_validate_node_name+0xa0>)
 80153c6:	5cd3      	ldrb	r3, [r2, r3]
 80153c8:	f013 0304 	ands.w	r3, r3, #4
 80153cc:	d110      	bne.n	80153f0 <rmw_validate_node_name+0x94>
 80153ce:	28ff      	cmp	r0, #255	@ 0xff
 80153d0:	d806      	bhi.n	80153e0 <rmw_validate_node_name+0x84>
 80153d2:	602b      	str	r3, [r5, #0]
 80153d4:	4618      	mov	r0, r3
 80153d6:	e7e8      	b.n	80153aa <rmw_validate_node_name+0x4e>
 80153d8:	200b      	movs	r0, #11
 80153da:	4770      	bx	lr
 80153dc:	200b      	movs	r0, #11
 80153de:	e7e4      	b.n	80153aa <rmw_validate_node_name+0x4e>
 80153e0:	2204      	movs	r2, #4
 80153e2:	602a      	str	r2, [r5, #0]
 80153e4:	2e00      	cmp	r6, #0
 80153e6:	d0df      	beq.n	80153a8 <rmw_validate_node_name+0x4c>
 80153e8:	22fe      	movs	r2, #254	@ 0xfe
 80153ea:	6032      	str	r2, [r6, #0]
 80153ec:	4618      	mov	r0, r3
 80153ee:	e7dc      	b.n	80153aa <rmw_validate_node_name+0x4e>
 80153f0:	2303      	movs	r3, #3
 80153f2:	602b      	str	r3, [r5, #0]
 80153f4:	2e00      	cmp	r6, #0
 80153f6:	d1de      	bne.n	80153b6 <rmw_validate_node_name+0x5a>
 80153f8:	e7d6      	b.n	80153a8 <rmw_validate_node_name+0x4c>
 80153fa:	bf00      	nop
 80153fc:	080197e0 	.word	0x080197e0

08015400 <rmw_node_name_validation_result_string>:
 8015400:	2804      	cmp	r0, #4
 8015402:	bf9a      	itte	ls
 8015404:	4b02      	ldrls	r3, [pc, #8]	@ (8015410 <rmw_node_name_validation_result_string+0x10>)
 8015406:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 801540a:	4802      	ldrhi	r0, [pc, #8]	@ (8015414 <rmw_node_name_validation_result_string+0x14>)
 801540c:	4770      	bx	lr
 801540e:	bf00      	nop
 8015410:	08019704 	.word	0x08019704
 8015414:	08019618 	.word	0x08019618

08015418 <on_status>:
 8015418:	b082      	sub	sp, #8
 801541a:	b002      	add	sp, #8
 801541c:	4770      	bx	lr
 801541e:	bf00      	nop

08015420 <on_topic>:
 8015420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015424:	4a22      	ldr	r2, [pc, #136]	@ (80154b0 <on_topic+0x90>)
 8015426:	b094      	sub	sp, #80	@ 0x50
 8015428:	6812      	ldr	r2, [r2, #0]
 801542a:	9d1a      	ldr	r5, [sp, #104]	@ 0x68
 801542c:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015430:	e9cd 3112 	strd	r3, r1, [sp, #72]	@ 0x48
 8015434:	b3c2      	cbz	r2, 80154a8 <on_topic+0x88>
 8015436:	f8bd 104c 	ldrh.w	r1, [sp, #76]	@ 0x4c
 801543a:	f89d 004e 	ldrb.w	r0, [sp, #78]	@ 0x4e
 801543e:	e001      	b.n	8015444 <on_topic+0x24>
 8015440:	6852      	ldr	r2, [r2, #4]
 8015442:	b38a      	cbz	r2, 80154a8 <on_topic+0x88>
 8015444:	6894      	ldr	r4, [r2, #8]
 8015446:	8aa3      	ldrh	r3, [r4, #20]
 8015448:	428b      	cmp	r3, r1
 801544a:	d1f9      	bne.n	8015440 <on_topic+0x20>
 801544c:	7da3      	ldrb	r3, [r4, #22]
 801544e:	4283      	cmp	r3, r0
 8015450:	d1f6      	bne.n	8015440 <on_topic+0x20>
 8015452:	2248      	movs	r2, #72	@ 0x48
 8015454:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 8015458:	4668      	mov	r0, sp
 801545a:	f002 fc56 	bl	8017d0a <memcpy>
 801545e:	f104 0328 	add.w	r3, r4, #40	@ 0x28
 8015462:	cb0c      	ldmia	r3, {r2, r3}
 8015464:	4620      	mov	r0, r4
 8015466:	f7f8 ffbf 	bl	800e3e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 801546a:	4607      	mov	r7, r0
 801546c:	b1e0      	cbz	r0, 80154a8 <on_topic+0x88>
 801546e:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8015472:	4632      	mov	r2, r6
 8015474:	4628      	mov	r0, r5
 8015476:	f108 0110 	add.w	r1, r8, #16
 801547a:	f000 fda7 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 801547e:	b930      	cbnz	r0, 801548e <on_topic+0x6e>
 8015480:	480c      	ldr	r0, [pc, #48]	@ (80154b4 <on_topic+0x94>)
 8015482:	4639      	mov	r1, r7
 8015484:	b014      	add	sp, #80	@ 0x50
 8015486:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801548a:	f000 b8bd 	b.w	8015608 <put_memory>
 801548e:	f8c8 4814 	str.w	r4, [r8, #2068]	@ 0x814
 8015492:	f8c8 6810 	str.w	r6, [r8, #2064]	@ 0x810
 8015496:	f000 fcc3 	bl	8015e20 <rmw_uros_epoch_nanos>
 801549a:	f508 6202 	add.w	r2, r8, #2080	@ 0x820
 801549e:	2305      	movs	r3, #5
 80154a0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80154a4:	f888 3820 	strb.w	r3, [r8, #2080]	@ 0x820
 80154a8:	b014      	add	sp, #80	@ 0x50
 80154aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80154ae:	bf00      	nop
 80154b0:	2000b24c 	.word	0x2000b24c
 80154b4:	2000b23c 	.word	0x2000b23c

080154b8 <on_request>:
 80154b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80154bc:	4823      	ldr	r0, [pc, #140]	@ (801554c <on_request+0x94>)
 80154be:	b094      	sub	sp, #80	@ 0x50
 80154c0:	6800      	ldr	r0, [r0, #0]
 80154c2:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 80154c4:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 80154c8:	9113      	str	r1, [sp, #76]	@ 0x4c
 80154ca:	2800      	cmp	r0, #0
 80154cc:	d03b      	beq.n	8015546 <on_request+0x8e>
 80154ce:	461d      	mov	r5, r3
 80154d0:	e001      	b.n	80154d6 <on_request+0x1e>
 80154d2:	6840      	ldr	r0, [r0, #4]
 80154d4:	b3b8      	cbz	r0, 8015546 <on_request+0x8e>
 80154d6:	6884      	ldr	r4, [r0, #8]
 80154d8:	8b21      	ldrh	r1, [r4, #24]
 80154da:	4291      	cmp	r1, r2
 80154dc:	d1f9      	bne.n	80154d2 <on_request+0x1a>
 80154de:	2248      	movs	r2, #72	@ 0x48
 80154e0:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 80154e4:	4668      	mov	r0, sp
 80154e6:	f002 fc10 	bl	8017d0a <memcpy>
 80154ea:	f104 0320 	add.w	r3, r4, #32
 80154ee:	cb0c      	ldmia	r3, {r2, r3}
 80154f0:	4620      	mov	r0, r4
 80154f2:	f7f8 ff79 	bl	800e3e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 80154f6:	4680      	mov	r8, r0
 80154f8:	b328      	cbz	r0, 8015546 <on_request+0x8e>
 80154fa:	4638      	mov	r0, r7
 80154fc:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8015500:	4632      	mov	r2, r6
 8015502:	f107 0110 	add.w	r1, r7, #16
 8015506:	f000 fd61 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 801550a:	b930      	cbnz	r0, 801551a <on_request+0x62>
 801550c:	4810      	ldr	r0, [pc, #64]	@ (8015550 <on_request+0x98>)
 801550e:	4641      	mov	r1, r8
 8015510:	b014      	add	sp, #80	@ 0x50
 8015512:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8015516:	f000 b877 	b.w	8015608 <put_memory>
 801551a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801551c:	f607 0c28 	addw	ip, r7, #2088	@ 0x828
 8015520:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 8015524:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 8015528:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801552c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015530:	e88c 0003 	stmia.w	ip, {r0, r1}
 8015534:	f000 fc74 	bl	8015e20 <rmw_uros_epoch_nanos>
 8015538:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 801553c:	2303      	movs	r3, #3
 801553e:	e942 0102 	strd	r0, r1, [r2, #-8]
 8015542:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 8015546:	b014      	add	sp, #80	@ 0x50
 8015548:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801554c:	2000b21c 	.word	0x2000b21c
 8015550:	2000b23c 	.word	0x2000b23c

08015554 <on_reply>:
 8015554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015558:	4821      	ldr	r0, [pc, #132]	@ (80155e0 <on_reply+0x8c>)
 801555a:	b094      	sub	sp, #80	@ 0x50
 801555c:	6800      	ldr	r0, [r0, #0]
 801555e:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8015560:	f8bd 606c 	ldrh.w	r6, [sp, #108]	@ 0x6c
 8015564:	9113      	str	r1, [sp, #76]	@ 0x4c
 8015566:	b3b8      	cbz	r0, 80155d8 <on_reply+0x84>
 8015568:	461d      	mov	r5, r3
 801556a:	e001      	b.n	8015570 <on_reply+0x1c>
 801556c:	6840      	ldr	r0, [r0, #4]
 801556e:	b398      	cbz	r0, 80155d8 <on_reply+0x84>
 8015570:	6884      	ldr	r4, [r0, #8]
 8015572:	8b21      	ldrh	r1, [r4, #24]
 8015574:	4291      	cmp	r1, r2
 8015576:	d1f9      	bne.n	801556c <on_reply+0x18>
 8015578:	2248      	movs	r2, #72	@ 0x48
 801557a:	f104 0128 	add.w	r1, r4, #40	@ 0x28
 801557e:	4668      	mov	r0, sp
 8015580:	f002 fbc3 	bl	8017d0a <memcpy>
 8015584:	f104 0320 	add.w	r3, r4, #32
 8015588:	cb0c      	ldmia	r3, {r2, r3}
 801558a:	4620      	mov	r0, r4
 801558c:	f7f8 ff2c 	bl	800e3e8 <rmw_uxrce_get_static_input_buffer_for_entity>
 8015590:	4680      	mov	r8, r0
 8015592:	b308      	cbz	r0, 80155d8 <on_reply+0x84>
 8015594:	4638      	mov	r0, r7
 8015596:	f8d8 7008 	ldr.w	r7, [r8, #8]
 801559a:	4632      	mov	r2, r6
 801559c:	f107 0110 	add.w	r1, r7, #16
 80155a0:	f000 fd14 	bl	8015fcc <ucdr_deserialize_array_uint8_t>
 80155a4:	b930      	cbnz	r0, 80155b4 <on_reply+0x60>
 80155a6:	480f      	ldr	r0, [pc, #60]	@ (80155e4 <on_reply+0x90>)
 80155a8:	4641      	mov	r1, r8
 80155aa:	b014      	add	sp, #80	@ 0x50
 80155ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80155b0:	f000 b82a 	b.w	8015608 <put_memory>
 80155b4:	2200      	movs	r2, #0
 80155b6:	f8c7 282c 	str.w	r2, [r7, #2092]	@ 0x82c
 80155ba:	f8c7 4814 	str.w	r4, [r7, #2068]	@ 0x814
 80155be:	f8c7 6810 	str.w	r6, [r7, #2064]	@ 0x810
 80155c2:	f8c7 5828 	str.w	r5, [r7, #2088]	@ 0x828
 80155c6:	f000 fc2b 	bl	8015e20 <rmw_uros_epoch_nanos>
 80155ca:	f507 6202 	add.w	r2, r7, #2080	@ 0x820
 80155ce:	2304      	movs	r3, #4
 80155d0:	e942 0102 	strd	r0, r1, [r2, #-8]
 80155d4:	f887 3820 	strb.w	r3, [r7, #2080]	@ 0x820
 80155d8:	b014      	add	sp, #80	@ 0x50
 80155da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80155de:	bf00      	nop
 80155e0:	200066d4 	.word	0x200066d4
 80155e4:	2000b23c 	.word	0x2000b23c

080155e8 <get_memory>:
 80155e8:	4603      	mov	r3, r0
 80155ea:	6840      	ldr	r0, [r0, #4]
 80155ec:	b158      	cbz	r0, 8015606 <get_memory+0x1e>
 80155ee:	6842      	ldr	r2, [r0, #4]
 80155f0:	605a      	str	r2, [r3, #4]
 80155f2:	b10a      	cbz	r2, 80155f8 <get_memory+0x10>
 80155f4:	2100      	movs	r1, #0
 80155f6:	6011      	str	r1, [r2, #0]
 80155f8:	681a      	ldr	r2, [r3, #0]
 80155fa:	6042      	str	r2, [r0, #4]
 80155fc:	b102      	cbz	r2, 8015600 <get_memory+0x18>
 80155fe:	6010      	str	r0, [r2, #0]
 8015600:	2200      	movs	r2, #0
 8015602:	6002      	str	r2, [r0, #0]
 8015604:	6018      	str	r0, [r3, #0]
 8015606:	4770      	bx	lr

08015608 <put_memory>:
 8015608:	680b      	ldr	r3, [r1, #0]
 801560a:	b10b      	cbz	r3, 8015610 <put_memory+0x8>
 801560c:	684a      	ldr	r2, [r1, #4]
 801560e:	605a      	str	r2, [r3, #4]
 8015610:	684a      	ldr	r2, [r1, #4]
 8015612:	b102      	cbz	r2, 8015616 <put_memory+0xe>
 8015614:	6013      	str	r3, [r2, #0]
 8015616:	6803      	ldr	r3, [r0, #0]
 8015618:	428b      	cmp	r3, r1
 801561a:	6843      	ldr	r3, [r0, #4]
 801561c:	bf08      	it	eq
 801561e:	6002      	streq	r2, [r0, #0]
 8015620:	604b      	str	r3, [r1, #4]
 8015622:	b103      	cbz	r3, 8015626 <put_memory+0x1e>
 8015624:	6019      	str	r1, [r3, #0]
 8015626:	2300      	movs	r3, #0
 8015628:	600b      	str	r3, [r1, #0]
 801562a:	6041      	str	r1, [r0, #4]
 801562c:	4770      	bx	lr
 801562e:	bf00      	nop

08015630 <rmw_destroy_client>:
 8015630:	b570      	push	{r4, r5, r6, lr}
 8015632:	b128      	cbz	r0, 8015640 <rmw_destroy_client+0x10>
 8015634:	4604      	mov	r4, r0
 8015636:	6800      	ldr	r0, [r0, #0]
 8015638:	460d      	mov	r5, r1
 801563a:	f7f9 f84b 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 801563e:	b910      	cbnz	r0, 8015646 <rmw_destroy_client+0x16>
 8015640:	2401      	movs	r4, #1
 8015642:	4620      	mov	r0, r4
 8015644:	bd70      	pop	{r4, r5, r6, pc}
 8015646:	6863      	ldr	r3, [r4, #4]
 8015648:	2b00      	cmp	r3, #0
 801564a:	d0f9      	beq.n	8015640 <rmw_destroy_client+0x10>
 801564c:	2d00      	cmp	r5, #0
 801564e:	d0f7      	beq.n	8015640 <rmw_destroy_client+0x10>
 8015650:	6828      	ldr	r0, [r5, #0]
 8015652:	f7f9 f83f 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 8015656:	2800      	cmp	r0, #0
 8015658:	d0f2      	beq.n	8015640 <rmw_destroy_client+0x10>
 801565a:	686e      	ldr	r6, [r5, #4]
 801565c:	2e00      	cmp	r6, #0
 801565e:	d0ef      	beq.n	8015640 <rmw_destroy_client+0x10>
 8015660:	6864      	ldr	r4, [r4, #4]
 8015662:	6932      	ldr	r2, [r6, #16]
 8015664:	6920      	ldr	r0, [r4, #16]
 8015666:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801566a:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801566e:	6819      	ldr	r1, [r3, #0]
 8015670:	f7f9 fafa 	bl	800ec68 <uxr_buffer_cancel_data>
 8015674:	4602      	mov	r2, r0
 8015676:	6920      	ldr	r0, [r4, #16]
 8015678:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801567c:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 8015680:	f7f8 ffa8 	bl	800e5d4 <run_xrce_session>
 8015684:	6920      	ldr	r0, [r4, #16]
 8015686:	6932      	ldr	r2, [r6, #16]
 8015688:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 801568c:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015690:	6819      	ldr	r1, [r3, #0]
 8015692:	f7f9 f89d 	bl	800e7d0 <uxr_buffer_delete_entity>
 8015696:	4602      	mov	r2, r0
 8015698:	6920      	ldr	r0, [r4, #16]
 801569a:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 801569e:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 80156a2:	f7f8 ff97 	bl	800e5d4 <run_xrce_session>
 80156a6:	2800      	cmp	r0, #0
 80156a8:	4628      	mov	r0, r5
 80156aa:	bf14      	ite	ne
 80156ac:	2400      	movne	r4, #0
 80156ae:	2402      	moveq	r4, #2
 80156b0:	f7f8 fe78 	bl	800e3a4 <rmw_uxrce_fini_client_memory>
 80156b4:	e7c5      	b.n	8015642 <rmw_destroy_client+0x12>
 80156b6:	bf00      	nop

080156b8 <rmw_get_implementation_identifier>:
 80156b8:	4b01      	ldr	r3, [pc, #4]	@ (80156c0 <rmw_get_implementation_identifier+0x8>)
 80156ba:	6818      	ldr	r0, [r3, #0]
 80156bc:	4770      	bx	lr
 80156be:	bf00      	nop
 80156c0:	08019730 	.word	0x08019730

080156c4 <create_topic>:
 80156c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80156c8:	4605      	mov	r5, r0
 80156ca:	b084      	sub	sp, #16
 80156cc:	4822      	ldr	r0, [pc, #136]	@ (8015758 <create_topic+0x94>)
 80156ce:	460f      	mov	r7, r1
 80156d0:	4616      	mov	r6, r2
 80156d2:	f7ff ff89 	bl	80155e8 <get_memory>
 80156d6:	4604      	mov	r4, r0
 80156d8:	2800      	cmp	r0, #0
 80156da:	d039      	beq.n	8015750 <create_topic+0x8c>
 80156dc:	692b      	ldr	r3, [r5, #16]
 80156de:	6884      	ldr	r4, [r0, #8]
 80156e0:	f8df 807c 	ldr.w	r8, [pc, #124]	@ 8015760 <create_topic+0x9c>
 80156e4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80156e8:	e9c4 6505 	strd	r6, r5, [r4, #20]
 80156ec:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	@ 0x596
 80156f0:	1c42      	adds	r2, r0, #1
 80156f2:	2102      	movs	r1, #2
 80156f4:	f8a3 2596 	strh.w	r2, [r3, #1430]	@ 0x596
 80156f8:	f7f9 fa86 	bl	800ec08 <uxr_object_id>
 80156fc:	223c      	movs	r2, #60	@ 0x3c
 80156fe:	6120      	str	r0, [r4, #16]
 8015700:	4641      	mov	r1, r8
 8015702:	4638      	mov	r0, r7
 8015704:	f7f8 ffcc 	bl	800e6a0 <generate_topic_name>
 8015708:	b1f0      	cbz	r0, 8015748 <create_topic+0x84>
 801570a:	4f14      	ldr	r7, [pc, #80]	@ (801575c <create_topic+0x98>)
 801570c:	4630      	mov	r0, r6
 801570e:	2264      	movs	r2, #100	@ 0x64
 8015710:	4639      	mov	r1, r7
 8015712:	f7f8 ff95 	bl	800e640 <generate_type_name>
 8015716:	b1b8      	cbz	r0, 8015748 <create_topic+0x84>
 8015718:	6928      	ldr	r0, [r5, #16]
 801571a:	2306      	movs	r3, #6
 801571c:	f8d0 2384 	ldr.w	r2, [r0, #900]	@ 0x384
 8015720:	f8cd 8000 	str.w	r8, [sp]
 8015724:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8015728:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801572c:	6811      	ldr	r1, [r2, #0]
 801572e:	696b      	ldr	r3, [r5, #20]
 8015730:	6922      	ldr	r2, [r4, #16]
 8015732:	f7f9 f8cb 	bl	800e8cc <uxr_buffer_create_topic_bin>
 8015736:	4602      	mov	r2, r0
 8015738:	6928      	ldr	r0, [r5, #16]
 801573a:	f8d0 338c 	ldr.w	r3, [r0, #908]	@ 0x38c
 801573e:	f8d0 1384 	ldr.w	r1, [r0, #900]	@ 0x384
 8015742:	f7f8 ff47 	bl	800e5d4 <run_xrce_session>
 8015746:	b918      	cbnz	r0, 8015750 <create_topic+0x8c>
 8015748:	4620      	mov	r0, r4
 801574a:	f7f8 fe41 	bl	800e3d0 <rmw_uxrce_fini_topic_memory>
 801574e:	2400      	movs	r4, #0
 8015750:	4620      	mov	r0, r4
 8015752:	b004      	add	sp, #16
 8015754:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015758:	2000b25c 	.word	0x2000b25c
 801575c:	2000b2dc 	.word	0x2000b2dc
 8015760:	2000b2a0 	.word	0x2000b2a0

08015764 <destroy_topic>:
 8015764:	b538      	push	{r3, r4, r5, lr}
 8015766:	6985      	ldr	r5, [r0, #24]
 8015768:	b1d5      	cbz	r5, 80157a0 <destroy_topic+0x3c>
 801576a:	4604      	mov	r4, r0
 801576c:	6928      	ldr	r0, [r5, #16]
 801576e:	6922      	ldr	r2, [r4, #16]
 8015770:	f8d0 3388 	ldr.w	r3, [r0, #904]	@ 0x388
 8015774:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015778:	6819      	ldr	r1, [r3, #0]
 801577a:	f7f9 f829 	bl	800e7d0 <uxr_buffer_delete_entity>
 801577e:	4602      	mov	r2, r0
 8015780:	6928      	ldr	r0, [r5, #16]
 8015782:	f8d0 3390 	ldr.w	r3, [r0, #912]	@ 0x390
 8015786:	f8d0 1388 	ldr.w	r1, [r0, #904]	@ 0x388
 801578a:	f7f8 ff23 	bl	800e5d4 <run_xrce_session>
 801578e:	2800      	cmp	r0, #0
 8015790:	4620      	mov	r0, r4
 8015792:	bf14      	ite	ne
 8015794:	2400      	movne	r4, #0
 8015796:	2402      	moveq	r4, #2
 8015798:	f7f8 fe1a 	bl	800e3d0 <rmw_uxrce_fini_topic_memory>
 801579c:	4620      	mov	r0, r4
 801579e:	bd38      	pop	{r3, r4, r5, pc}
 80157a0:	2401      	movs	r4, #1
 80157a2:	4620      	mov	r0, r4
 80157a4:	bd38      	pop	{r3, r4, r5, pc}
 80157a6:	bf00      	nop

080157a8 <rmw_send_request>:
 80157a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157ac:	4604      	mov	r4, r0
 80157ae:	6800      	ldr	r0, [r0, #0]
 80157b0:	b08b      	sub	sp, #44	@ 0x2c
 80157b2:	460e      	mov	r6, r1
 80157b4:	4615      	mov	r5, r2
 80157b6:	b128      	cbz	r0, 80157c4 <rmw_send_request+0x1c>
 80157b8:	4b21      	ldr	r3, [pc, #132]	@ (8015840 <rmw_send_request+0x98>)
 80157ba:	6819      	ldr	r1, [r3, #0]
 80157bc:	f7ea fd30 	bl	8000220 <strcmp>
 80157c0:	2800      	cmp	r0, #0
 80157c2:	d139      	bne.n	8015838 <rmw_send_request+0x90>
 80157c4:	6864      	ldr	r4, [r4, #4]
 80157c6:	6963      	ldr	r3, [r4, #20]
 80157c8:	f8d4 8078 	ldr.w	r8, [r4, #120]	@ 0x78
 80157cc:	689b      	ldr	r3, [r3, #8]
 80157ce:	4798      	blx	r3
 80157d0:	f8d0 9004 	ldr.w	r9, [r0, #4]
 80157d4:	4630      	mov	r0, r6
 80157d6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80157da:	4798      	blx	r3
 80157dc:	f8d8 3010 	ldr.w	r3, [r8, #16]
 80157e0:	9000      	str	r0, [sp, #0]
 80157e2:	6922      	ldr	r2, [r4, #16]
 80157e4:	6f21      	ldr	r1, [r4, #112]	@ 0x70
 80157e6:	f503 7028 	add.w	r0, r3, #672	@ 0x2a0
 80157ea:	ab02      	add	r3, sp, #8
 80157ec:	f7fb fa8e 	bl	8010d0c <uxr_prepare_output_stream>
 80157f0:	2700      	movs	r7, #0
 80157f2:	6028      	str	r0, [r5, #0]
 80157f4:	606f      	str	r7, [r5, #4]
 80157f6:	b198      	cbz	r0, 8015820 <rmw_send_request+0x78>
 80157f8:	f8d9 3008 	ldr.w	r3, [r9, #8]
 80157fc:	a902      	add	r1, sp, #8
 80157fe:	4630      	mov	r0, r6
 8015800:	4798      	blx	r3
 8015802:	f894 3072 	ldrb.w	r3, [r4, #114]	@ 0x72
 8015806:	f8d8 0010 	ldr.w	r0, [r8, #16]
 801580a:	2b01      	cmp	r3, #1
 801580c:	d00c      	beq.n	8015828 <rmw_send_request+0x80>
 801580e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
 8015810:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015814:	f7f9 fffc 	bl	800f810 <uxr_run_session_until_confirm_delivery>
 8015818:	4638      	mov	r0, r7
 801581a:	b00b      	add	sp, #44	@ 0x2c
 801581c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015820:	2001      	movs	r0, #1
 8015822:	b00b      	add	sp, #44	@ 0x2c
 8015824:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015828:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 801582c:	f7f9 fc30 	bl	800f090 <uxr_flash_output_streams>
 8015830:	4638      	mov	r0, r7
 8015832:	b00b      	add	sp, #44	@ 0x2c
 8015834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015838:	200c      	movs	r0, #12
 801583a:	b00b      	add	sp, #44	@ 0x2c
 801583c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015840:	08019730 	.word	0x08019730

08015844 <rmw_take_request>:
 8015844:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015848:	4605      	mov	r5, r0
 801584a:	6800      	ldr	r0, [r0, #0]
 801584c:	b089      	sub	sp, #36	@ 0x24
 801584e:	460c      	mov	r4, r1
 8015850:	4690      	mov	r8, r2
 8015852:	461e      	mov	r6, r3
 8015854:	b128      	cbz	r0, 8015862 <rmw_take_request+0x1e>
 8015856:	4b28      	ldr	r3, [pc, #160]	@ (80158f8 <rmw_take_request+0xb4>)
 8015858:	6819      	ldr	r1, [r3, #0]
 801585a:	f7ea fce1 	bl	8000220 <strcmp>
 801585e:	2800      	cmp	r0, #0
 8015860:	d146      	bne.n	80158f0 <rmw_take_request+0xac>
 8015862:	b10e      	cbz	r6, 8015868 <rmw_take_request+0x24>
 8015864:	2300      	movs	r3, #0
 8015866:	7033      	strb	r3, [r6, #0]
 8015868:	f8d5 9004 	ldr.w	r9, [r5, #4]
 801586c:	f7f8 fe34 	bl	800e4d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015870:	4648      	mov	r0, r9
 8015872:	f7f8 fe09 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015876:	4607      	mov	r7, r0
 8015878:	b3b0      	cbz	r0, 80158e8 <rmw_take_request+0xa4>
 801587a:	6885      	ldr	r5, [r0, #8]
 801587c:	f8d5 3838 	ldr.w	r3, [r5, #2104]	@ 0x838
 8015880:	f8d5 283c 	ldr.w	r2, [r5, #2108]	@ 0x83c
 8015884:	e9c4 2308 	strd	r2, r3, [r4, #32]
 8015888:	f895 3837 	ldrb.w	r3, [r5, #2103]	@ 0x837
 801588c:	7423      	strb	r3, [r4, #16]
 801588e:	f8b5 3834 	ldrh.w	r3, [r5, #2100]	@ 0x834
 8015892:	f895 2836 	ldrb.w	r2, [r5, #2102]	@ 0x836
 8015896:	74e2      	strb	r2, [r4, #19]
 8015898:	f8a4 3011 	strh.w	r3, [r4, #17]
 801589c:	f8d5 2828 	ldr.w	r2, [r5, #2088]	@ 0x828
 80158a0:	f8d5 382c 	ldr.w	r3, [r5, #2092]	@ 0x82c
 80158a4:	f8d5 1830 	ldr.w	r1, [r5, #2096]	@ 0x830
 80158a8:	61e1      	str	r1, [r4, #28]
 80158aa:	6162      	str	r2, [r4, #20]
 80158ac:	61a3      	str	r3, [r4, #24]
 80158ae:	f8d9 3014 	ldr.w	r3, [r9, #20]
 80158b2:	689b      	ldr	r3, [r3, #8]
 80158b4:	4798      	blx	r3
 80158b6:	6844      	ldr	r4, [r0, #4]
 80158b8:	f8d5 2810 	ldr.w	r2, [r5, #2064]	@ 0x810
 80158bc:	f105 0110 	add.w	r1, r5, #16
 80158c0:	4668      	mov	r0, sp
 80158c2:	f7f6 fb6d 	bl	800bfa0 <ucdr_init_buffer>
 80158c6:	68e3      	ldr	r3, [r4, #12]
 80158c8:	4641      	mov	r1, r8
 80158ca:	4668      	mov	r0, sp
 80158cc:	4798      	blx	r3
 80158ce:	4639      	mov	r1, r7
 80158d0:	4604      	mov	r4, r0
 80158d2:	480a      	ldr	r0, [pc, #40]	@ (80158fc <rmw_take_request+0xb8>)
 80158d4:	f7ff fe98 	bl	8015608 <put_memory>
 80158d8:	b106      	cbz	r6, 80158dc <rmw_take_request+0x98>
 80158da:	7034      	strb	r4, [r6, #0]
 80158dc:	f084 0001 	eor.w	r0, r4, #1
 80158e0:	b2c0      	uxtb	r0, r0
 80158e2:	b009      	add	sp, #36	@ 0x24
 80158e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158e8:	2001      	movs	r0, #1
 80158ea:	b009      	add	sp, #36	@ 0x24
 80158ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158f0:	200c      	movs	r0, #12
 80158f2:	b009      	add	sp, #36	@ 0x24
 80158f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80158f8:	08019730 	.word	0x08019730
 80158fc:	2000b23c 	.word	0x2000b23c

08015900 <rmw_send_response>:
 8015900:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015902:	4605      	mov	r5, r0
 8015904:	6800      	ldr	r0, [r0, #0]
 8015906:	b091      	sub	sp, #68	@ 0x44
 8015908:	460c      	mov	r4, r1
 801590a:	4616      	mov	r6, r2
 801590c:	b128      	cbz	r0, 801591a <rmw_send_response+0x1a>
 801590e:	4b29      	ldr	r3, [pc, #164]	@ (80159b4 <rmw_send_response+0xb4>)
 8015910:	6819      	ldr	r1, [r3, #0]
 8015912:	f7ea fc85 	bl	8000220 <strcmp>
 8015916:	2800      	cmp	r0, #0
 8015918:	d141      	bne.n	801599e <rmw_send_response+0x9e>
 801591a:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
 801591e:	9306      	str	r3, [sp, #24]
 8015920:	4623      	mov	r3, r4
 8015922:	9207      	str	r2, [sp, #28]
 8015924:	f813 2b01 	ldrb.w	r2, [r3], #1
 8015928:	686d      	ldr	r5, [r5, #4]
 801592a:	789b      	ldrb	r3, [r3, #2]
 801592c:	68a1      	ldr	r1, [r4, #8]
 801592e:	f88d 2017 	strb.w	r2, [sp, #23]
 8015932:	f88d 3016 	strb.w	r3, [sp, #22]
 8015936:	68e2      	ldr	r2, [r4, #12]
 8015938:	f8b4 3001 	ldrh.w	r3, [r4, #1]
 801593c:	6860      	ldr	r0, [r4, #4]
 801593e:	f8ad 3014 	strh.w	r3, [sp, #20]
 8015942:	ab02      	add	r3, sp, #8
 8015944:	c307      	stmia	r3!, {r0, r1, r2}
 8015946:	696b      	ldr	r3, [r5, #20]
 8015948:	6faf      	ldr	r7, [r5, #120]	@ 0x78
 801594a:	68db      	ldr	r3, [r3, #12]
 801594c:	4798      	blx	r3
 801594e:	6844      	ldr	r4, [r0, #4]
 8015950:	4630      	mov	r0, r6
 8015952:	6923      	ldr	r3, [r4, #16]
 8015954:	4798      	blx	r3
 8015956:	f100 0318 	add.w	r3, r0, #24
 801595a:	6938      	ldr	r0, [r7, #16]
 801595c:	9300      	str	r3, [sp, #0]
 801595e:	692a      	ldr	r2, [r5, #16]
 8015960:	6f29      	ldr	r1, [r5, #112]	@ 0x70
 8015962:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015966:	ab08      	add	r3, sp, #32
 8015968:	f7fb f9d0 	bl	8010d0c <uxr_prepare_output_stream>
 801596c:	b910      	cbnz	r0, 8015974 <rmw_send_response+0x74>
 801596e:	2001      	movs	r0, #1
 8015970:	b011      	add	sp, #68	@ 0x44
 8015972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015974:	a902      	add	r1, sp, #8
 8015976:	a808      	add	r0, sp, #32
 8015978:	f7fc fa14 	bl	8011da4 <uxr_serialize_SampleIdentity>
 801597c:	68a3      	ldr	r3, [r4, #8]
 801597e:	a908      	add	r1, sp, #32
 8015980:	4630      	mov	r0, r6
 8015982:	4798      	blx	r3
 8015984:	f895 3072 	ldrb.w	r3, [r5, #114]	@ 0x72
 8015988:	6938      	ldr	r0, [r7, #16]
 801598a:	2b01      	cmp	r3, #1
 801598c:	d00a      	beq.n	80159a4 <rmw_send_response+0xa4>
 801598e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 8015990:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015994:	f7f9 ff3c 	bl	800f810 <uxr_run_session_until_confirm_delivery>
 8015998:	2000      	movs	r0, #0
 801599a:	b011      	add	sp, #68	@ 0x44
 801599c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801599e:	200c      	movs	r0, #12
 80159a0:	b011      	add	sp, #68	@ 0x44
 80159a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159a4:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 80159a8:	f7f9 fb72 	bl	800f090 <uxr_flash_output_streams>
 80159ac:	2000      	movs	r0, #0
 80159ae:	b011      	add	sp, #68	@ 0x44
 80159b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80159b2:	bf00      	nop
 80159b4:	08019730 	.word	0x08019730

080159b8 <rmw_take_response>:
 80159b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159bc:	4604      	mov	r4, r0
 80159be:	6800      	ldr	r0, [r0, #0]
 80159c0:	b088      	sub	sp, #32
 80159c2:	4688      	mov	r8, r1
 80159c4:	4617      	mov	r7, r2
 80159c6:	461d      	mov	r5, r3
 80159c8:	b120      	cbz	r0, 80159d4 <rmw_take_response+0x1c>
 80159ca:	4b1e      	ldr	r3, [pc, #120]	@ (8015a44 <rmw_take_response+0x8c>)
 80159cc:	6819      	ldr	r1, [r3, #0]
 80159ce:	f7ea fc27 	bl	8000220 <strcmp>
 80159d2:	bb78      	cbnz	r0, 8015a34 <rmw_take_response+0x7c>
 80159d4:	b10d      	cbz	r5, 80159da <rmw_take_response+0x22>
 80159d6:	2300      	movs	r3, #0
 80159d8:	702b      	strb	r3, [r5, #0]
 80159da:	6864      	ldr	r4, [r4, #4]
 80159dc:	f7f8 fd7c 	bl	800e4d8 <rmw_uxrce_clean_expired_static_input_buffer>
 80159e0:	4620      	mov	r0, r4
 80159e2:	f7f8 fd51 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 80159e6:	4606      	mov	r6, r0
 80159e8:	b340      	cbz	r0, 8015a3c <rmw_take_response+0x84>
 80159ea:	6963      	ldr	r3, [r4, #20]
 80159ec:	6884      	ldr	r4, [r0, #8]
 80159ee:	68db      	ldr	r3, [r3, #12]
 80159f0:	f504 6203 	add.w	r2, r4, #2096	@ 0x830
 80159f4:	e952 0102 	ldrd	r0, r1, [r2, #-8]
 80159f8:	e9c8 0108 	strd	r0, r1, [r8, #32]
 80159fc:	4798      	blx	r3
 80159fe:	f8d0 8004 	ldr.w	r8, [r0, #4]
 8015a02:	f8d4 2810 	ldr.w	r2, [r4, #2064]	@ 0x810
 8015a06:	f104 0110 	add.w	r1, r4, #16
 8015a0a:	4668      	mov	r0, sp
 8015a0c:	f7f6 fac8 	bl	800bfa0 <ucdr_init_buffer>
 8015a10:	4639      	mov	r1, r7
 8015a12:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8015a16:	4668      	mov	r0, sp
 8015a18:	4798      	blx	r3
 8015a1a:	4631      	mov	r1, r6
 8015a1c:	4604      	mov	r4, r0
 8015a1e:	480a      	ldr	r0, [pc, #40]	@ (8015a48 <rmw_take_response+0x90>)
 8015a20:	f7ff fdf2 	bl	8015608 <put_memory>
 8015a24:	b105      	cbz	r5, 8015a28 <rmw_take_response+0x70>
 8015a26:	702c      	strb	r4, [r5, #0]
 8015a28:	f084 0001 	eor.w	r0, r4, #1
 8015a2c:	b2c0      	uxtb	r0, r0
 8015a2e:	b008      	add	sp, #32
 8015a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a34:	200c      	movs	r0, #12
 8015a36:	b008      	add	sp, #32
 8015a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a3c:	2001      	movs	r0, #1
 8015a3e:	b008      	add	sp, #32
 8015a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015a44:	08019730 	.word	0x08019730
 8015a48:	2000b23c 	.word	0x2000b23c

08015a4c <rmw_take_with_info>:
 8015a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a4e:	4604      	mov	r4, r0
 8015a50:	6800      	ldr	r0, [r0, #0]
 8015a52:	b089      	sub	sp, #36	@ 0x24
 8015a54:	460f      	mov	r7, r1
 8015a56:	4615      	mov	r5, r2
 8015a58:	b128      	cbz	r0, 8015a66 <rmw_take_with_info+0x1a>
 8015a5a:	4b24      	ldr	r3, [pc, #144]	@ (8015aec <rmw_take_with_info+0xa0>)
 8015a5c:	6819      	ldr	r1, [r3, #0]
 8015a5e:	f7ea fbdf 	bl	8000220 <strcmp>
 8015a62:	2800      	cmp	r0, #0
 8015a64:	d13e      	bne.n	8015ae4 <rmw_take_with_info+0x98>
 8015a66:	b305      	cbz	r5, 8015aaa <rmw_take_with_info+0x5e>
 8015a68:	6864      	ldr	r4, [r4, #4]
 8015a6a:	2300      	movs	r3, #0
 8015a6c:	702b      	strb	r3, [r5, #0]
 8015a6e:	f7f8 fd33 	bl	800e4d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015a72:	4620      	mov	r0, r4
 8015a74:	f7f8 fd08 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015a78:	4606      	mov	r6, r0
 8015a7a:	b1f0      	cbz	r0, 8015aba <rmw_take_with_info+0x6e>
 8015a7c:	6881      	ldr	r1, [r0, #8]
 8015a7e:	4668      	mov	r0, sp
 8015a80:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015a84:	3110      	adds	r1, #16
 8015a86:	f7f6 fa8b 	bl	800bfa0 <ucdr_init_buffer>
 8015a8a:	69a3      	ldr	r3, [r4, #24]
 8015a8c:	4639      	mov	r1, r7
 8015a8e:	68db      	ldr	r3, [r3, #12]
 8015a90:	4668      	mov	r0, sp
 8015a92:	4798      	blx	r3
 8015a94:	4631      	mov	r1, r6
 8015a96:	4604      	mov	r4, r0
 8015a98:	4815      	ldr	r0, [pc, #84]	@ (8015af0 <rmw_take_with_info+0xa4>)
 8015a9a:	f7ff fdb5 	bl	8015608 <put_memory>
 8015a9e:	702c      	strb	r4, [r5, #0]
 8015aa0:	f084 0001 	eor.w	r0, r4, #1
 8015aa4:	b2c0      	uxtb	r0, r0
 8015aa6:	b009      	add	sp, #36	@ 0x24
 8015aa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aaa:	6864      	ldr	r4, [r4, #4]
 8015aac:	f7f8 fd14 	bl	800e4d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015ab0:	4620      	mov	r0, r4
 8015ab2:	f7f8 fce9 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ab6:	4605      	mov	r5, r0
 8015ab8:	b910      	cbnz	r0, 8015ac0 <rmw_take_with_info+0x74>
 8015aba:	2001      	movs	r0, #1
 8015abc:	b009      	add	sp, #36	@ 0x24
 8015abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015ac0:	68a9      	ldr	r1, [r5, #8]
 8015ac2:	4668      	mov	r0, sp
 8015ac4:	f8d1 2810 	ldr.w	r2, [r1, #2064]	@ 0x810
 8015ac8:	3110      	adds	r1, #16
 8015aca:	f7f6 fa69 	bl	800bfa0 <ucdr_init_buffer>
 8015ace:	69a3      	ldr	r3, [r4, #24]
 8015ad0:	4639      	mov	r1, r7
 8015ad2:	68db      	ldr	r3, [r3, #12]
 8015ad4:	4668      	mov	r0, sp
 8015ad6:	4798      	blx	r3
 8015ad8:	4629      	mov	r1, r5
 8015ada:	4604      	mov	r4, r0
 8015adc:	4804      	ldr	r0, [pc, #16]	@ (8015af0 <rmw_take_with_info+0xa4>)
 8015ade:	f7ff fd93 	bl	8015608 <put_memory>
 8015ae2:	e7dd      	b.n	8015aa0 <rmw_take_with_info+0x54>
 8015ae4:	200c      	movs	r0, #12
 8015ae6:	b009      	add	sp, #36	@ 0x24
 8015ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015aea:	bf00      	nop
 8015aec:	08019730 	.word	0x08019730
 8015af0:	2000b23c 	.word	0x2000b23c

08015af4 <rmw_wait>:
 8015af4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8015af8:	b089      	sub	sp, #36	@ 0x24
 8015afa:	4605      	mov	r5, r0
 8015afc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8015afe:	460e      	mov	r6, r1
 8015b00:	4698      	mov	r8, r3
 8015b02:	4691      	mov	r9, r2
 8015b04:	2a00      	cmp	r2, #0
 8015b06:	f000 810a 	beq.w	8015d1e <rmw_wait+0x22a>
 8015b0a:	b16c      	cbz	r4, 8015b28 <rmw_wait+0x34>
 8015b0c:	4bae      	ldr	r3, [pc, #696]	@ (8015dc8 <rmw_wait+0x2d4>)
 8015b0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8015b10:	af04      	add	r7, sp, #16
 8015b12:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
 8015b16:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 8015b1a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015b1e:	f7ff faaf 	bl	8015080 <rmw_time_equal>
 8015b22:	2800      	cmp	r0, #0
 8015b24:	f000 8127 	beq.w	8015d76 <rmw_wait+0x282>
 8015b28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8015b2c:	f7f8 fcd4 	bl	800e4d8 <rmw_uxrce_clean_expired_static_input_buffer>
 8015b30:	4ba6      	ldr	r3, [pc, #664]	@ (8015dcc <rmw_wait+0x2d8>)
 8015b32:	681c      	ldr	r4, [r3, #0]
 8015b34:	b14c      	cbz	r4, 8015b4a <rmw_wait+0x56>
 8015b36:	4623      	mov	r3, r4
 8015b38:	2100      	movs	r1, #0
 8015b3a:	e9d3 3201 	ldrd	r3, r2, [r3, #4]
 8015b3e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b42:	f882 15a4 	strb.w	r1, [r2, #1444]	@ 0x5a4
 8015b46:	2b00      	cmp	r3, #0
 8015b48:	d1f7      	bne.n	8015b3a <rmw_wait+0x46>
 8015b4a:	f1b9 0f00 	cmp.w	r9, #0
 8015b4e:	d011      	beq.n	8015b74 <rmw_wait+0x80>
 8015b50:	f8d9 1000 	ldr.w	r1, [r9]
 8015b54:	b171      	cbz	r1, 8015b74 <rmw_wait+0x80>
 8015b56:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8015b5a:	2300      	movs	r3, #0
 8015b5c:	2001      	movs	r0, #1
 8015b5e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015b62:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015b64:	6912      	ldr	r2, [r2, #16]
 8015b66:	3301      	adds	r3, #1
 8015b68:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b6c:	4299      	cmp	r1, r3
 8015b6e:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015b72:	d1f4      	bne.n	8015b5e <rmw_wait+0x6a>
 8015b74:	f1b8 0f00 	cmp.w	r8, #0
 8015b78:	d011      	beq.n	8015b9e <rmw_wait+0xaa>
 8015b7a:	f8d8 1000 	ldr.w	r1, [r8]
 8015b7e:	b171      	cbz	r1, 8015b9e <rmw_wait+0xaa>
 8015b80:	f8d8 c004 	ldr.w	ip, [r8, #4]
 8015b84:	2300      	movs	r3, #0
 8015b86:	2001      	movs	r0, #1
 8015b88:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015b8c:	6f92      	ldr	r2, [r2, #120]	@ 0x78
 8015b8e:	6912      	ldr	r2, [r2, #16]
 8015b90:	3301      	adds	r3, #1
 8015b92:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015b96:	4299      	cmp	r1, r3
 8015b98:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015b9c:	d1f4      	bne.n	8015b88 <rmw_wait+0x94>
 8015b9e:	b185      	cbz	r5, 8015bc2 <rmw_wait+0xce>
 8015ba0:	6829      	ldr	r1, [r5, #0]
 8015ba2:	b171      	cbz	r1, 8015bc2 <rmw_wait+0xce>
 8015ba4:	f8d5 c004 	ldr.w	ip, [r5, #4]
 8015ba8:	2300      	movs	r3, #0
 8015baa:	2001      	movs	r0, #1
 8015bac:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8015bb0:	6a12      	ldr	r2, [r2, #32]
 8015bb2:	6912      	ldr	r2, [r2, #16]
 8015bb4:	3301      	adds	r3, #1
 8015bb6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8015bba:	4299      	cmp	r1, r3
 8015bbc:	f882 05a4 	strb.w	r0, [r2, #1444]	@ 0x5a4
 8015bc0:	d1f4      	bne.n	8015bac <rmw_wait+0xb8>
 8015bc2:	b34c      	cbz	r4, 8015c18 <rmw_wait+0x124>
 8015bc4:	4622      	mov	r2, r4
 8015bc6:	2300      	movs	r3, #0
 8015bc8:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 8015bcc:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
 8015bd0:	f891 15a4 	ldrb.w	r1, [r1, #1444]	@ 0x5a4
 8015bd4:	440b      	add	r3, r1
 8015bd6:	b2db      	uxtb	r3, r3
 8015bd8:	2a00      	cmp	r2, #0
 8015bda:	d1f5      	bne.n	8015bc8 <rmw_wait+0xd4>
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	f000 8084 	beq.w	8015cea <rmw_wait+0x1f6>
 8015be2:	1c7a      	adds	r2, r7, #1
 8015be4:	d00d      	beq.n	8015c02 <rmw_wait+0x10e>
 8015be6:	ee07 7a90 	vmov	s15, r7
 8015bea:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8015bee:	ee07 3a90 	vmov	s15, r3
 8015bf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8015bfa:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8015bfe:	ee17 7a90 	vmov	r7, s15
 8015c02:	68a0      	ldr	r0, [r4, #8]
 8015c04:	f500 5380 	add.w	r3, r0, #4096	@ 0x1000
 8015c08:	f893 35a4 	ldrb.w	r3, [r3, #1444]	@ 0x5a4
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	f040 8090 	bne.w	8015d32 <rmw_wait+0x23e>
 8015c12:	6864      	ldr	r4, [r4, #4]
 8015c14:	2c00      	cmp	r4, #0
 8015c16:	d1f4      	bne.n	8015c02 <rmw_wait+0x10e>
 8015c18:	f1b9 0f00 	cmp.w	r9, #0
 8015c1c:	f000 80bc 	beq.w	8015d98 <rmw_wait+0x2a4>
 8015c20:	f8d9 7000 	ldr.w	r7, [r9]
 8015c24:	2f00      	cmp	r7, #0
 8015c26:	f000 808e 	beq.w	8015d46 <rmw_wait+0x252>
 8015c2a:	2400      	movs	r4, #0
 8015c2c:	4627      	mov	r7, r4
 8015c2e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8015c32:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c36:	f7f8 fc27 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c3a:	2800      	cmp	r0, #0
 8015c3c:	d05f      	beq.n	8015cfe <rmw_wait+0x20a>
 8015c3e:	f8d9 3000 	ldr.w	r3, [r9]
 8015c42:	3401      	adds	r4, #1
 8015c44:	42a3      	cmp	r3, r4
 8015c46:	f04f 0701 	mov.w	r7, #1
 8015c4a:	d8f0      	bhi.n	8015c2e <rmw_wait+0x13a>
 8015c4c:	f1b8 0f00 	cmp.w	r8, #0
 8015c50:	d012      	beq.n	8015c78 <rmw_wait+0x184>
 8015c52:	f8d8 3000 	ldr.w	r3, [r8]
 8015c56:	b17b      	cbz	r3, 8015c78 <rmw_wait+0x184>
 8015c58:	2400      	movs	r4, #0
 8015c5a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8015c5e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c62:	f7f8 fc11 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c66:	2800      	cmp	r0, #0
 8015c68:	d051      	beq.n	8015d0e <rmw_wait+0x21a>
 8015c6a:	f8d8 3000 	ldr.w	r3, [r8]
 8015c6e:	3401      	adds	r4, #1
 8015c70:	42a3      	cmp	r3, r4
 8015c72:	f04f 0701 	mov.w	r7, #1
 8015c76:	d8f0      	bhi.n	8015c5a <rmw_wait+0x166>
 8015c78:	b1dd      	cbz	r5, 8015cb2 <rmw_wait+0x1be>
 8015c7a:	682b      	ldr	r3, [r5, #0]
 8015c7c:	b1cb      	cbz	r3, 8015cb2 <rmw_wait+0x1be>
 8015c7e:	2400      	movs	r4, #0
 8015c80:	686b      	ldr	r3, [r5, #4]
 8015c82:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c86:	f7f8 fbff 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015c8a:	b158      	cbz	r0, 8015ca4 <rmw_wait+0x1b0>
 8015c8c:	682b      	ldr	r3, [r5, #0]
 8015c8e:	3401      	adds	r4, #1
 8015c90:	42a3      	cmp	r3, r4
 8015c92:	d969      	bls.n	8015d68 <rmw_wait+0x274>
 8015c94:	686b      	ldr	r3, [r5, #4]
 8015c96:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8015c9a:	2701      	movs	r7, #1
 8015c9c:	f7f8 fbf4 	bl	800e488 <rmw_uxrce_find_static_input_buffer_by_owner>
 8015ca0:	2800      	cmp	r0, #0
 8015ca2:	d1f3      	bne.n	8015c8c <rmw_wait+0x198>
 8015ca4:	e9d5 3200 	ldrd	r3, r2, [r5]
 8015ca8:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015cac:	3401      	adds	r4, #1
 8015cae:	42a3      	cmp	r3, r4
 8015cb0:	d8e6      	bhi.n	8015c80 <rmw_wait+0x18c>
 8015cb2:	b1a6      	cbz	r6, 8015cde <rmw_wait+0x1ea>
 8015cb4:	6834      	ldr	r4, [r6, #0]
 8015cb6:	b194      	cbz	r4, 8015cde <rmw_wait+0x1ea>
 8015cb8:	2300      	movs	r3, #0
 8015cba:	461d      	mov	r5, r3
 8015cbc:	e004      	b.n	8015cc8 <rmw_wait+0x1d4>
 8015cbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
 8015cc2:	3301      	adds	r3, #1
 8015cc4:	42a3      	cmp	r3, r4
 8015cc6:	d00a      	beq.n	8015cde <rmw_wait+0x1ea>
 8015cc8:	6870      	ldr	r0, [r6, #4]
 8015cca:	f850 1023 	ldr.w	r1, [r0, r3, lsl #2]
 8015cce:	7c0a      	ldrb	r2, [r1, #16]
 8015cd0:	2a00      	cmp	r2, #0
 8015cd2:	d0f4      	beq.n	8015cbe <rmw_wait+0x1ca>
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	42a3      	cmp	r3, r4
 8015cd8:	740d      	strb	r5, [r1, #16]
 8015cda:	4617      	mov	r7, r2
 8015cdc:	d1f4      	bne.n	8015cc8 <rmw_wait+0x1d4>
 8015cde:	2f00      	cmp	r7, #0
 8015ce0:	d03e      	beq.n	8015d60 <rmw_wait+0x26c>
 8015ce2:	2000      	movs	r0, #0
 8015ce4:	b009      	add	sp, #36	@ 0x24
 8015ce6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015cea:	68a0      	ldr	r0, [r4, #8]
 8015cec:	2100      	movs	r1, #0
 8015cee:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015cf2:	f7f9 fd53 	bl	800f79c <uxr_run_session_timeout>
 8015cf6:	6864      	ldr	r4, [r4, #4]
 8015cf8:	2c00      	cmp	r4, #0
 8015cfa:	d1f6      	bne.n	8015cea <rmw_wait+0x1f6>
 8015cfc:	e78c      	b.n	8015c18 <rmw_wait+0x124>
 8015cfe:	e9d9 3200 	ldrd	r3, r2, [r9]
 8015d02:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d06:	3401      	adds	r4, #1
 8015d08:	42a3      	cmp	r3, r4
 8015d0a:	d890      	bhi.n	8015c2e <rmw_wait+0x13a>
 8015d0c:	e79e      	b.n	8015c4c <rmw_wait+0x158>
 8015d0e:	e9d8 3200 	ldrd	r3, r2, [r8]
 8015d12:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
 8015d16:	3401      	adds	r4, #1
 8015d18:	429c      	cmp	r4, r3
 8015d1a:	d39e      	bcc.n	8015c5a <rmw_wait+0x166>
 8015d1c:	e7ac      	b.n	8015c78 <rmw_wait+0x184>
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	f47f aef3 	bne.w	8015b0a <rmw_wait+0x16>
 8015d24:	2800      	cmp	r0, #0
 8015d26:	f47f aef0 	bne.w	8015b0a <rmw_wait+0x16>
 8015d2a:	2900      	cmp	r1, #0
 8015d2c:	f47f aeed 	bne.w	8015b0a <rmw_wait+0x16>
 8015d30:	e7d7      	b.n	8015ce2 <rmw_wait+0x1ee>
 8015d32:	4639      	mov	r1, r7
 8015d34:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015d38:	f7f9 fd4a 	bl	800f7d0 <uxr_run_session_until_data>
 8015d3c:	6864      	ldr	r4, [r4, #4]
 8015d3e:	2c00      	cmp	r4, #0
 8015d40:	f47f af5f 	bne.w	8015c02 <rmw_wait+0x10e>
 8015d44:	e768      	b.n	8015c18 <rmw_wait+0x124>
 8015d46:	f1b8 0f00 	cmp.w	r8, #0
 8015d4a:	d032      	beq.n	8015db2 <rmw_wait+0x2be>
 8015d4c:	f8d8 3000 	ldr.w	r3, [r8]
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d181      	bne.n	8015c58 <rmw_wait+0x164>
 8015d54:	461f      	mov	r7, r3
 8015d56:	2d00      	cmp	r5, #0
 8015d58:	d18f      	bne.n	8015c7a <rmw_wait+0x186>
 8015d5a:	462f      	mov	r7, r5
 8015d5c:	2e00      	cmp	r6, #0
 8015d5e:	d1a9      	bne.n	8015cb4 <rmw_wait+0x1c0>
 8015d60:	2002      	movs	r0, #2
 8015d62:	b009      	add	sp, #36	@ 0x24
 8015d64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015d68:	2e00      	cmp	r6, #0
 8015d6a:	d0ba      	beq.n	8015ce2 <rmw_wait+0x1ee>
 8015d6c:	6834      	ldr	r4, [r6, #0]
 8015d6e:	2701      	movs	r7, #1
 8015d70:	2c00      	cmp	r4, #0
 8015d72:	d1a1      	bne.n	8015cb8 <rmw_wait+0x1c4>
 8015d74:	e7b5      	b.n	8015ce2 <rmw_wait+0x1ee>
 8015d76:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8015d7a:	f7ff f9d5 	bl	8015128 <rmw_time_total_nsec>
 8015d7e:	2300      	movs	r3, #0
 8015d80:	4a13      	ldr	r2, [pc, #76]	@ (8015dd0 <rmw_wait+0x2dc>)
 8015d82:	f7ea fed3 	bl	8000b2c <__aeabi_uldivmod>
 8015d86:	f1b0 4f00 	cmp.w	r0, #2147483648	@ 0x80000000
 8015d8a:	f171 0300 	sbcs.w	r3, r1, #0
 8015d8e:	4607      	mov	r7, r0
 8015d90:	bfa8      	it	ge
 8015d92:	f06f 4700 	mvnge.w	r7, #2147483648	@ 0x80000000
 8015d96:	e6c9      	b.n	8015b2c <rmw_wait+0x38>
 8015d98:	f1b8 0f00 	cmp.w	r8, #0
 8015d9c:	d009      	beq.n	8015db2 <rmw_wait+0x2be>
 8015d9e:	f8d8 3000 	ldr.w	r3, [r8]
 8015da2:	464f      	mov	r7, r9
 8015da4:	2b00      	cmp	r3, #0
 8015da6:	f47f af57 	bne.w	8015c58 <rmw_wait+0x164>
 8015daa:	2d00      	cmp	r5, #0
 8015dac:	f47f af65 	bne.w	8015c7a <rmw_wait+0x186>
 8015db0:	e7d3      	b.n	8015d5a <rmw_wait+0x266>
 8015db2:	b17d      	cbz	r5, 8015dd4 <rmw_wait+0x2e0>
 8015db4:	682b      	ldr	r3, [r5, #0]
 8015db6:	4647      	mov	r7, r8
 8015db8:	2b00      	cmp	r3, #0
 8015dba:	f47f af60 	bne.w	8015c7e <rmw_wait+0x18a>
 8015dbe:	2e00      	cmp	r6, #0
 8015dc0:	f47f af78 	bne.w	8015cb4 <rmw_wait+0x1c0>
 8015dc4:	e7cc      	b.n	8015d60 <rmw_wait+0x26c>
 8015dc6:	bf00      	nop
 8015dc8:	08018c10 	.word	0x08018c10
 8015dcc:	2000b22c 	.word	0x2000b22c
 8015dd0:	000f4240 	.word	0x000f4240
 8015dd4:	2e00      	cmp	r6, #0
 8015dd6:	d0c3      	beq.n	8015d60 <rmw_wait+0x26c>
 8015dd8:	6834      	ldr	r4, [r6, #0]
 8015dda:	462f      	mov	r7, r5
 8015ddc:	2c00      	cmp	r4, #0
 8015dde:	f47f af6b 	bne.w	8015cb8 <rmw_wait+0x1c4>
 8015de2:	e7bd      	b.n	8015d60 <rmw_wait+0x26c>

08015de4 <rmw_create_wait_set>:
 8015de4:	b508      	push	{r3, lr}
 8015de6:	4803      	ldr	r0, [pc, #12]	@ (8015df4 <rmw_create_wait_set+0x10>)
 8015de8:	f7ff fbfe 	bl	80155e8 <get_memory>
 8015dec:	b108      	cbz	r0, 8015df2 <rmw_create_wait_set+0xe>
 8015dee:	6880      	ldr	r0, [r0, #8]
 8015df0:	3010      	adds	r0, #16
 8015df2:	bd08      	pop	{r3, pc}
 8015df4:	2000b26c 	.word	0x2000b26c

08015df8 <rmw_destroy_wait_set>:
 8015df8:	b508      	push	{r3, lr}
 8015dfa:	4b08      	ldr	r3, [pc, #32]	@ (8015e1c <rmw_destroy_wait_set+0x24>)
 8015dfc:	6819      	ldr	r1, [r3, #0]
 8015dfe:	b911      	cbnz	r1, 8015e06 <rmw_destroy_wait_set+0xe>
 8015e00:	e00a      	b.n	8015e18 <rmw_destroy_wait_set+0x20>
 8015e02:	6849      	ldr	r1, [r1, #4]
 8015e04:	b141      	cbz	r1, 8015e18 <rmw_destroy_wait_set+0x20>
 8015e06:	688b      	ldr	r3, [r1, #8]
 8015e08:	3310      	adds	r3, #16
 8015e0a:	4298      	cmp	r0, r3
 8015e0c:	d1f9      	bne.n	8015e02 <rmw_destroy_wait_set+0xa>
 8015e0e:	4803      	ldr	r0, [pc, #12]	@ (8015e1c <rmw_destroy_wait_set+0x24>)
 8015e10:	f7ff fbfa 	bl	8015608 <put_memory>
 8015e14:	2000      	movs	r0, #0
 8015e16:	bd08      	pop	{r3, pc}
 8015e18:	2001      	movs	r0, #1
 8015e1a:	bd08      	pop	{r3, pc}
 8015e1c:	2000b26c 	.word	0x2000b26c

08015e20 <rmw_uros_epoch_nanos>:
 8015e20:	4b05      	ldr	r3, [pc, #20]	@ (8015e38 <rmw_uros_epoch_nanos+0x18>)
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	b123      	cbz	r3, 8015e30 <rmw_uros_epoch_nanos+0x10>
 8015e26:	6898      	ldr	r0, [r3, #8]
 8015e28:	f500 7028 	add.w	r0, r0, #672	@ 0x2a0
 8015e2c:	f7f9 b926 	b.w	800f07c <uxr_epoch_nanos>
 8015e30:	2000      	movs	r0, #0
 8015e32:	2100      	movs	r1, #0
 8015e34:	4770      	bx	lr
 8015e36:	bf00      	nop
 8015e38:	2000b22c 	.word	0x2000b22c

08015e3c <ucdr_serialize_endian_array_char>:
 8015e3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e40:	4619      	mov	r1, r3
 8015e42:	461f      	mov	r7, r3
 8015e44:	4605      	mov	r5, r0
 8015e46:	4690      	mov	r8, r2
 8015e48:	f7f6 f856 	bl	800bef8 <ucdr_check_buffer_available_for>
 8015e4c:	b9e0      	cbnz	r0, 8015e88 <ucdr_serialize_endian_array_char+0x4c>
 8015e4e:	463e      	mov	r6, r7
 8015e50:	e009      	b.n	8015e66 <ucdr_serialize_endian_array_char+0x2a>
 8015e52:	68a8      	ldr	r0, [r5, #8]
 8015e54:	f001 ff59 	bl	8017d0a <memcpy>
 8015e58:	68ab      	ldr	r3, [r5, #8]
 8015e5a:	6928      	ldr	r0, [r5, #16]
 8015e5c:	4423      	add	r3, r4
 8015e5e:	4420      	add	r0, r4
 8015e60:	1b36      	subs	r6, r6, r4
 8015e62:	60ab      	str	r3, [r5, #8]
 8015e64:	6128      	str	r0, [r5, #16]
 8015e66:	4631      	mov	r1, r6
 8015e68:	2201      	movs	r2, #1
 8015e6a:	4628      	mov	r0, r5
 8015e6c:	f7f6 f8cc 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 8015e70:	1bb9      	subs	r1, r7, r6
 8015e72:	4441      	add	r1, r8
 8015e74:	4604      	mov	r4, r0
 8015e76:	4602      	mov	r2, r0
 8015e78:	2800      	cmp	r0, #0
 8015e7a:	d1ea      	bne.n	8015e52 <ucdr_serialize_endian_array_char+0x16>
 8015e7c:	2301      	movs	r3, #1
 8015e7e:	7da8      	ldrb	r0, [r5, #22]
 8015e80:	756b      	strb	r3, [r5, #21]
 8015e82:	4058      	eors	r0, r3
 8015e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015e88:	463a      	mov	r2, r7
 8015e8a:	68a8      	ldr	r0, [r5, #8]
 8015e8c:	4641      	mov	r1, r8
 8015e8e:	f001 ff3c 	bl	8017d0a <memcpy>
 8015e92:	68aa      	ldr	r2, [r5, #8]
 8015e94:	692b      	ldr	r3, [r5, #16]
 8015e96:	443a      	add	r2, r7
 8015e98:	443b      	add	r3, r7
 8015e9a:	60aa      	str	r2, [r5, #8]
 8015e9c:	612b      	str	r3, [r5, #16]
 8015e9e:	e7ed      	b.n	8015e7c <ucdr_serialize_endian_array_char+0x40>

08015ea0 <ucdr_deserialize_endian_array_char>:
 8015ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015ea4:	4619      	mov	r1, r3
 8015ea6:	461f      	mov	r7, r3
 8015ea8:	4605      	mov	r5, r0
 8015eaa:	4690      	mov	r8, r2
 8015eac:	f7f6 f824 	bl	800bef8 <ucdr_check_buffer_available_for>
 8015eb0:	b9e0      	cbnz	r0, 8015eec <ucdr_deserialize_endian_array_char+0x4c>
 8015eb2:	463e      	mov	r6, r7
 8015eb4:	e009      	b.n	8015eca <ucdr_deserialize_endian_array_char+0x2a>
 8015eb6:	68a9      	ldr	r1, [r5, #8]
 8015eb8:	f001 ff27 	bl	8017d0a <memcpy>
 8015ebc:	68ab      	ldr	r3, [r5, #8]
 8015ebe:	6928      	ldr	r0, [r5, #16]
 8015ec0:	4423      	add	r3, r4
 8015ec2:	4420      	add	r0, r4
 8015ec4:	1b36      	subs	r6, r6, r4
 8015ec6:	60ab      	str	r3, [r5, #8]
 8015ec8:	6128      	str	r0, [r5, #16]
 8015eca:	2201      	movs	r2, #1
 8015ecc:	4631      	mov	r1, r6
 8015ece:	4628      	mov	r0, r5
 8015ed0:	f7f6 f89a 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 8015ed4:	4604      	mov	r4, r0
 8015ed6:	1bb8      	subs	r0, r7, r6
 8015ed8:	4440      	add	r0, r8
 8015eda:	4622      	mov	r2, r4
 8015edc:	2c00      	cmp	r4, #0
 8015ede:	d1ea      	bne.n	8015eb6 <ucdr_deserialize_endian_array_char+0x16>
 8015ee0:	2301      	movs	r3, #1
 8015ee2:	7da8      	ldrb	r0, [r5, #22]
 8015ee4:	756b      	strb	r3, [r5, #21]
 8015ee6:	4058      	eors	r0, r3
 8015ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015eec:	463a      	mov	r2, r7
 8015eee:	68a9      	ldr	r1, [r5, #8]
 8015ef0:	4640      	mov	r0, r8
 8015ef2:	f001 ff0a 	bl	8017d0a <memcpy>
 8015ef6:	68aa      	ldr	r2, [r5, #8]
 8015ef8:	692b      	ldr	r3, [r5, #16]
 8015efa:	443a      	add	r2, r7
 8015efc:	443b      	add	r3, r7
 8015efe:	60aa      	str	r2, [r5, #8]
 8015f00:	612b      	str	r3, [r5, #16]
 8015f02:	e7ed      	b.n	8015ee0 <ucdr_deserialize_endian_array_char+0x40>

08015f04 <ucdr_serialize_array_uint8_t>:
 8015f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f08:	4688      	mov	r8, r1
 8015f0a:	4611      	mov	r1, r2
 8015f0c:	4617      	mov	r7, r2
 8015f0e:	4605      	mov	r5, r0
 8015f10:	f7f5 fff2 	bl	800bef8 <ucdr_check_buffer_available_for>
 8015f14:	b9e0      	cbnz	r0, 8015f50 <ucdr_serialize_array_uint8_t+0x4c>
 8015f16:	463e      	mov	r6, r7
 8015f18:	e009      	b.n	8015f2e <ucdr_serialize_array_uint8_t+0x2a>
 8015f1a:	68a8      	ldr	r0, [r5, #8]
 8015f1c:	f001 fef5 	bl	8017d0a <memcpy>
 8015f20:	68aa      	ldr	r2, [r5, #8]
 8015f22:	692b      	ldr	r3, [r5, #16]
 8015f24:	4422      	add	r2, r4
 8015f26:	4423      	add	r3, r4
 8015f28:	1b36      	subs	r6, r6, r4
 8015f2a:	60aa      	str	r2, [r5, #8]
 8015f2c:	612b      	str	r3, [r5, #16]
 8015f2e:	4631      	mov	r1, r6
 8015f30:	2201      	movs	r2, #1
 8015f32:	4628      	mov	r0, r5
 8015f34:	f7f6 f868 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 8015f38:	1bb9      	subs	r1, r7, r6
 8015f3a:	4441      	add	r1, r8
 8015f3c:	4604      	mov	r4, r0
 8015f3e:	4602      	mov	r2, r0
 8015f40:	2800      	cmp	r0, #0
 8015f42:	d1ea      	bne.n	8015f1a <ucdr_serialize_array_uint8_t+0x16>
 8015f44:	2301      	movs	r3, #1
 8015f46:	7da8      	ldrb	r0, [r5, #22]
 8015f48:	756b      	strb	r3, [r5, #21]
 8015f4a:	4058      	eors	r0, r3
 8015f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015f50:	463a      	mov	r2, r7
 8015f52:	68a8      	ldr	r0, [r5, #8]
 8015f54:	4641      	mov	r1, r8
 8015f56:	f001 fed8 	bl	8017d0a <memcpy>
 8015f5a:	68aa      	ldr	r2, [r5, #8]
 8015f5c:	692b      	ldr	r3, [r5, #16]
 8015f5e:	443a      	add	r2, r7
 8015f60:	443b      	add	r3, r7
 8015f62:	60aa      	str	r2, [r5, #8]
 8015f64:	612b      	str	r3, [r5, #16]
 8015f66:	e7ed      	b.n	8015f44 <ucdr_serialize_array_uint8_t+0x40>

08015f68 <ucdr_serialize_endian_array_uint8_t>:
 8015f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015f6c:	4619      	mov	r1, r3
 8015f6e:	461f      	mov	r7, r3
 8015f70:	4605      	mov	r5, r0
 8015f72:	4690      	mov	r8, r2
 8015f74:	f7f5 ffc0 	bl	800bef8 <ucdr_check_buffer_available_for>
 8015f78:	b9e0      	cbnz	r0, 8015fb4 <ucdr_serialize_endian_array_uint8_t+0x4c>
 8015f7a:	463e      	mov	r6, r7
 8015f7c:	e009      	b.n	8015f92 <ucdr_serialize_endian_array_uint8_t+0x2a>
 8015f7e:	68a8      	ldr	r0, [r5, #8]
 8015f80:	f001 fec3 	bl	8017d0a <memcpy>
 8015f84:	68ab      	ldr	r3, [r5, #8]
 8015f86:	6928      	ldr	r0, [r5, #16]
 8015f88:	4423      	add	r3, r4
 8015f8a:	4420      	add	r0, r4
 8015f8c:	1b36      	subs	r6, r6, r4
 8015f8e:	60ab      	str	r3, [r5, #8]
 8015f90:	6128      	str	r0, [r5, #16]
 8015f92:	4631      	mov	r1, r6
 8015f94:	2201      	movs	r2, #1
 8015f96:	4628      	mov	r0, r5
 8015f98:	f7f6 f836 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 8015f9c:	1bb9      	subs	r1, r7, r6
 8015f9e:	4441      	add	r1, r8
 8015fa0:	4604      	mov	r4, r0
 8015fa2:	4602      	mov	r2, r0
 8015fa4:	2800      	cmp	r0, #0
 8015fa6:	d1ea      	bne.n	8015f7e <ucdr_serialize_endian_array_uint8_t+0x16>
 8015fa8:	2301      	movs	r3, #1
 8015faa:	7da8      	ldrb	r0, [r5, #22]
 8015fac:	756b      	strb	r3, [r5, #21]
 8015fae:	4058      	eors	r0, r3
 8015fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015fb4:	463a      	mov	r2, r7
 8015fb6:	68a8      	ldr	r0, [r5, #8]
 8015fb8:	4641      	mov	r1, r8
 8015fba:	f001 fea6 	bl	8017d0a <memcpy>
 8015fbe:	68aa      	ldr	r2, [r5, #8]
 8015fc0:	692b      	ldr	r3, [r5, #16]
 8015fc2:	443a      	add	r2, r7
 8015fc4:	443b      	add	r3, r7
 8015fc6:	60aa      	str	r2, [r5, #8]
 8015fc8:	612b      	str	r3, [r5, #16]
 8015fca:	e7ed      	b.n	8015fa8 <ucdr_serialize_endian_array_uint8_t+0x40>

08015fcc <ucdr_deserialize_array_uint8_t>:
 8015fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015fd0:	4688      	mov	r8, r1
 8015fd2:	4611      	mov	r1, r2
 8015fd4:	4617      	mov	r7, r2
 8015fd6:	4605      	mov	r5, r0
 8015fd8:	f7f5 ff8e 	bl	800bef8 <ucdr_check_buffer_available_for>
 8015fdc:	b9e0      	cbnz	r0, 8016018 <ucdr_deserialize_array_uint8_t+0x4c>
 8015fde:	463e      	mov	r6, r7
 8015fe0:	e009      	b.n	8015ff6 <ucdr_deserialize_array_uint8_t+0x2a>
 8015fe2:	68a9      	ldr	r1, [r5, #8]
 8015fe4:	f001 fe91 	bl	8017d0a <memcpy>
 8015fe8:	68aa      	ldr	r2, [r5, #8]
 8015fea:	692b      	ldr	r3, [r5, #16]
 8015fec:	4422      	add	r2, r4
 8015fee:	4423      	add	r3, r4
 8015ff0:	1b36      	subs	r6, r6, r4
 8015ff2:	60aa      	str	r2, [r5, #8]
 8015ff4:	612b      	str	r3, [r5, #16]
 8015ff6:	2201      	movs	r2, #1
 8015ff8:	4631      	mov	r1, r6
 8015ffa:	4628      	mov	r0, r5
 8015ffc:	f7f6 f804 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 8016000:	4604      	mov	r4, r0
 8016002:	1bb8      	subs	r0, r7, r6
 8016004:	4440      	add	r0, r8
 8016006:	4622      	mov	r2, r4
 8016008:	2c00      	cmp	r4, #0
 801600a:	d1ea      	bne.n	8015fe2 <ucdr_deserialize_array_uint8_t+0x16>
 801600c:	2301      	movs	r3, #1
 801600e:	7da8      	ldrb	r0, [r5, #22]
 8016010:	756b      	strb	r3, [r5, #21]
 8016012:	4058      	eors	r0, r3
 8016014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016018:	463a      	mov	r2, r7
 801601a:	68a9      	ldr	r1, [r5, #8]
 801601c:	4640      	mov	r0, r8
 801601e:	f001 fe74 	bl	8017d0a <memcpy>
 8016022:	68aa      	ldr	r2, [r5, #8]
 8016024:	692b      	ldr	r3, [r5, #16]
 8016026:	443a      	add	r2, r7
 8016028:	443b      	add	r3, r7
 801602a:	60aa      	str	r2, [r5, #8]
 801602c:	612b      	str	r3, [r5, #16]
 801602e:	e7ed      	b.n	801600c <ucdr_deserialize_array_uint8_t+0x40>

08016030 <ucdr_deserialize_endian_array_uint8_t>:
 8016030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016034:	4619      	mov	r1, r3
 8016036:	461f      	mov	r7, r3
 8016038:	4605      	mov	r5, r0
 801603a:	4690      	mov	r8, r2
 801603c:	f7f5 ff5c 	bl	800bef8 <ucdr_check_buffer_available_for>
 8016040:	b9e0      	cbnz	r0, 801607c <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8016042:	463e      	mov	r6, r7
 8016044:	e009      	b.n	801605a <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8016046:	68a9      	ldr	r1, [r5, #8]
 8016048:	f001 fe5f 	bl	8017d0a <memcpy>
 801604c:	68ab      	ldr	r3, [r5, #8]
 801604e:	6928      	ldr	r0, [r5, #16]
 8016050:	4423      	add	r3, r4
 8016052:	4420      	add	r0, r4
 8016054:	1b36      	subs	r6, r6, r4
 8016056:	60ab      	str	r3, [r5, #8]
 8016058:	6128      	str	r0, [r5, #16]
 801605a:	2201      	movs	r2, #1
 801605c:	4631      	mov	r1, r6
 801605e:	4628      	mov	r0, r5
 8016060:	f7f5 ffd2 	bl	800c008 <ucdr_check_final_buffer_behavior_array>
 8016064:	4604      	mov	r4, r0
 8016066:	1bb8      	subs	r0, r7, r6
 8016068:	4440      	add	r0, r8
 801606a:	4622      	mov	r2, r4
 801606c:	2c00      	cmp	r4, #0
 801606e:	d1ea      	bne.n	8016046 <ucdr_deserialize_endian_array_uint8_t+0x16>
 8016070:	2301      	movs	r3, #1
 8016072:	7da8      	ldrb	r0, [r5, #22]
 8016074:	756b      	strb	r3, [r5, #21]
 8016076:	4058      	eors	r0, r3
 8016078:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801607c:	463a      	mov	r2, r7
 801607e:	68a9      	ldr	r1, [r5, #8]
 8016080:	4640      	mov	r0, r8
 8016082:	f001 fe42 	bl	8017d0a <memcpy>
 8016086:	68aa      	ldr	r2, [r5, #8]
 8016088:	692b      	ldr	r3, [r5, #16]
 801608a:	443a      	add	r2, r7
 801608c:	443b      	add	r3, r7
 801608e:	60aa      	str	r2, [r5, #8]
 8016090:	612b      	str	r3, [r5, #16]
 8016092:	e7ed      	b.n	8016070 <ucdr_deserialize_endian_array_uint8_t+0x40>

08016094 <ucdr_serialize_sequence_char>:
 8016094:	b570      	push	{r4, r5, r6, lr}
 8016096:	4615      	mov	r5, r2
 8016098:	460e      	mov	r6, r1
 801609a:	7d01      	ldrb	r1, [r0, #20]
 801609c:	4604      	mov	r4, r0
 801609e:	f7f5 f8eb 	bl	800b278 <ucdr_serialize_endian_uint32_t>
 80160a2:	b90d      	cbnz	r5, 80160a8 <ucdr_serialize_sequence_char+0x14>
 80160a4:	2001      	movs	r0, #1
 80160a6:	bd70      	pop	{r4, r5, r6, pc}
 80160a8:	7d21      	ldrb	r1, [r4, #20]
 80160aa:	462b      	mov	r3, r5
 80160ac:	4632      	mov	r2, r6
 80160ae:	4620      	mov	r0, r4
 80160b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80160b4:	f7ff bec2 	b.w	8015e3c <ucdr_serialize_endian_array_char>

080160b8 <ucdr_deserialize_sequence_char>:
 80160b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160bc:	461d      	mov	r5, r3
 80160be:	4616      	mov	r6, r2
 80160c0:	460f      	mov	r7, r1
 80160c2:	461a      	mov	r2, r3
 80160c4:	7d01      	ldrb	r1, [r0, #20]
 80160c6:	4604      	mov	r4, r0
 80160c8:	f7f5 f9fe 	bl	800b4c8 <ucdr_deserialize_endian_uint32_t>
 80160cc:	682b      	ldr	r3, [r5, #0]
 80160ce:	429e      	cmp	r6, r3
 80160d0:	bf3c      	itt	cc
 80160d2:	2201      	movcc	r2, #1
 80160d4:	75a2      	strbcc	r2, [r4, #22]
 80160d6:	b913      	cbnz	r3, 80160de <ucdr_deserialize_sequence_char+0x26>
 80160d8:	2001      	movs	r0, #1
 80160da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160de:	7d21      	ldrb	r1, [r4, #20]
 80160e0:	463a      	mov	r2, r7
 80160e2:	4620      	mov	r0, r4
 80160e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80160e8:	f7ff beda 	b.w	8015ea0 <ucdr_deserialize_endian_array_char>

080160ec <ucdr_serialize_sequence_uint8_t>:
 80160ec:	b570      	push	{r4, r5, r6, lr}
 80160ee:	4615      	mov	r5, r2
 80160f0:	460e      	mov	r6, r1
 80160f2:	7d01      	ldrb	r1, [r0, #20]
 80160f4:	4604      	mov	r4, r0
 80160f6:	f7f5 f8bf 	bl	800b278 <ucdr_serialize_endian_uint32_t>
 80160fa:	b90d      	cbnz	r5, 8016100 <ucdr_serialize_sequence_uint8_t+0x14>
 80160fc:	2001      	movs	r0, #1
 80160fe:	bd70      	pop	{r4, r5, r6, pc}
 8016100:	7d21      	ldrb	r1, [r4, #20]
 8016102:	462b      	mov	r3, r5
 8016104:	4632      	mov	r2, r6
 8016106:	4620      	mov	r0, r4
 8016108:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801610c:	f7ff bf2c 	b.w	8015f68 <ucdr_serialize_endian_array_uint8_t>

08016110 <ucdr_deserialize_sequence_uint8_t>:
 8016110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016114:	461d      	mov	r5, r3
 8016116:	4616      	mov	r6, r2
 8016118:	460f      	mov	r7, r1
 801611a:	461a      	mov	r2, r3
 801611c:	7d01      	ldrb	r1, [r0, #20]
 801611e:	4604      	mov	r4, r0
 8016120:	f7f5 f9d2 	bl	800b4c8 <ucdr_deserialize_endian_uint32_t>
 8016124:	682b      	ldr	r3, [r5, #0]
 8016126:	429e      	cmp	r6, r3
 8016128:	bf3c      	itt	cc
 801612a:	2201      	movcc	r2, #1
 801612c:	75a2      	strbcc	r2, [r4, #22]
 801612e:	b913      	cbnz	r3, 8016136 <ucdr_deserialize_sequence_uint8_t+0x26>
 8016130:	2001      	movs	r0, #1
 8016132:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016136:	7d21      	ldrb	r1, [r4, #20]
 8016138:	463a      	mov	r2, r7
 801613a:	4620      	mov	r0, r4
 801613c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016140:	f7ff bf76 	b.w	8016030 <ucdr_deserialize_endian_array_uint8_t>

08016144 <ucdr_serialize_string>:
 8016144:	b510      	push	{r4, lr}
 8016146:	b082      	sub	sp, #8
 8016148:	4604      	mov	r4, r0
 801614a:	4608      	mov	r0, r1
 801614c:	9101      	str	r1, [sp, #4]
 801614e:	f7ea f871 	bl	8000234 <strlen>
 8016152:	9901      	ldr	r1, [sp, #4]
 8016154:	1c42      	adds	r2, r0, #1
 8016156:	4620      	mov	r0, r4
 8016158:	b002      	add	sp, #8
 801615a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801615e:	f7ff bf99 	b.w	8016094 <ucdr_serialize_sequence_char>
 8016162:	bf00      	nop

08016164 <ucdr_deserialize_string>:
 8016164:	b500      	push	{lr}
 8016166:	b083      	sub	sp, #12
 8016168:	ab01      	add	r3, sp, #4
 801616a:	f7ff ffa5 	bl	80160b8 <ucdr_deserialize_sequence_char>
 801616e:	b003      	add	sp, #12
 8016170:	f85d fb04 	ldr.w	pc, [sp], #4

08016174 <uxr_init_input_best_effort_stream>:
 8016174:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016178:	8003      	strh	r3, [r0, #0]
 801617a:	4770      	bx	lr

0801617c <uxr_reset_input_best_effort_stream>:
 801617c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016180:	8003      	strh	r3, [r0, #0]
 8016182:	4770      	bx	lr

08016184 <uxr_receive_best_effort_message>:
 8016184:	b538      	push	{r3, r4, r5, lr}
 8016186:	4604      	mov	r4, r0
 8016188:	8800      	ldrh	r0, [r0, #0]
 801618a:	460d      	mov	r5, r1
 801618c:	f000 fd42 	bl	8016c14 <uxr_seq_num_cmp>
 8016190:	4603      	mov	r3, r0
 8016192:	2b00      	cmp	r3, #0
 8016194:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8016198:	bfb8      	it	lt
 801619a:	8025      	strhlt	r5, [r4, #0]
 801619c:	bd38      	pop	{r3, r4, r5, pc}
 801619e:	bf00      	nop

080161a0 <on_full_input_buffer>:
 80161a0:	b570      	push	{r4, r5, r6, lr}
 80161a2:	4605      	mov	r5, r0
 80161a4:	460c      	mov	r4, r1
 80161a6:	682b      	ldr	r3, [r5, #0]
 80161a8:	6809      	ldr	r1, [r1, #0]
 80161aa:	8920      	ldrh	r0, [r4, #8]
 80161ac:	6862      	ldr	r2, [r4, #4]
 80161ae:	fbb2 f2f0 	udiv	r2, r2, r0
 80161b2:	eba3 0c01 	sub.w	ip, r3, r1
 80161b6:	fbbc fcf2 	udiv	ip, ip, r2
 80161ba:	f10c 0c01 	add.w	ip, ip, #1
 80161be:	fa1f f38c 	uxth.w	r3, ip
 80161c2:	fbb3 f6f0 	udiv	r6, r3, r0
 80161c6:	fb00 3316 	mls	r3, r0, r6, r3
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	fb02 f303 	mul.w	r3, r2, r3
 80161d0:	1d18      	adds	r0, r3, #4
 80161d2:	4408      	add	r0, r1
 80161d4:	7d26      	ldrb	r6, [r4, #20]
 80161d6:	f850 2c04 	ldr.w	r2, [r0, #-4]
 80161da:	b116      	cbz	r6, 80161e2 <on_full_input_buffer+0x42>
 80161dc:	2600      	movs	r6, #0
 80161de:	f840 6c04 	str.w	r6, [r0, #-4]
 80161e2:	2a03      	cmp	r2, #3
 80161e4:	d801      	bhi.n	80161ea <on_full_input_buffer+0x4a>
 80161e6:	2001      	movs	r0, #1
 80161e8:	bd70      	pop	{r4, r5, r6, pc}
 80161ea:	3308      	adds	r3, #8
 80161ec:	4419      	add	r1, r3
 80161ee:	4628      	mov	r0, r5
 80161f0:	692b      	ldr	r3, [r5, #16]
 80161f2:	3a04      	subs	r2, #4
 80161f4:	f7f5 fecc 	bl	800bf90 <ucdr_init_buffer_origin>
 80161f8:	4628      	mov	r0, r5
 80161fa:	4903      	ldr	r1, [pc, #12]	@ (8016208 <on_full_input_buffer+0x68>)
 80161fc:	4622      	mov	r2, r4
 80161fe:	f7f5 fea3 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8016202:	2000      	movs	r0, #0
 8016204:	bd70      	pop	{r4, r5, r6, pc}
 8016206:	bf00      	nop
 8016208:	080161a1 	.word	0x080161a1

0801620c <uxr_init_input_reliable_stream>:
 801620c:	b500      	push	{lr}
 801620e:	e9c0 1200 	strd	r1, r2, [r0]
 8016212:	f04f 0e00 	mov.w	lr, #0
 8016216:	9a01      	ldr	r2, [sp, #4]
 8016218:	8103      	strh	r3, [r0, #8]
 801621a:	6102      	str	r2, [r0, #16]
 801621c:	f880 e014 	strb.w	lr, [r0, #20]
 8016220:	b1d3      	cbz	r3, 8016258 <uxr_init_input_reliable_stream+0x4c>
 8016222:	f8c1 e000 	str.w	lr, [r1]
 8016226:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801622a:	f1bc 0f01 	cmp.w	ip, #1
 801622e:	d913      	bls.n	8016258 <uxr_init_input_reliable_stream+0x4c>
 8016230:	2301      	movs	r3, #1
 8016232:	fbb3 f1fc 	udiv	r1, r3, ip
 8016236:	fb0c 3111 	mls	r1, ip, r1, r3
 801623a:	b289      	uxth	r1, r1
 801623c:	6842      	ldr	r2, [r0, #4]
 801623e:	fbb2 f2fc 	udiv	r2, r2, ip
 8016242:	fb01 f202 	mul.w	r2, r1, r2
 8016246:	6801      	ldr	r1, [r0, #0]
 8016248:	f841 e002 	str.w	lr, [r1, r2]
 801624c:	3301      	adds	r3, #1
 801624e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8016252:	b29b      	uxth	r3, r3
 8016254:	459c      	cmp	ip, r3
 8016256:	d8ec      	bhi.n	8016232 <uxr_init_input_reliable_stream+0x26>
 8016258:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801625c:	60c3      	str	r3, [r0, #12]
 801625e:	f85d fb04 	ldr.w	pc, [sp], #4
 8016262:	bf00      	nop

08016264 <uxr_reset_input_reliable_stream>:
 8016264:	8901      	ldrh	r1, [r0, #8]
 8016266:	b1e9      	cbz	r1, 80162a4 <uxr_reset_input_reliable_stream+0x40>
 8016268:	f04f 0c00 	mov.w	ip, #0
 801626c:	b500      	push	{lr}
 801626e:	4663      	mov	r3, ip
 8016270:	46e6      	mov	lr, ip
 8016272:	fbb3 f2f1 	udiv	r2, r3, r1
 8016276:	fb01 3312 	mls	r3, r1, r2, r3
 801627a:	b29b      	uxth	r3, r3
 801627c:	6842      	ldr	r2, [r0, #4]
 801627e:	fbb2 f2f1 	udiv	r2, r2, r1
 8016282:	fb02 f303 	mul.w	r3, r2, r3
 8016286:	6802      	ldr	r2, [r0, #0]
 8016288:	f842 e003 	str.w	lr, [r2, r3]
 801628c:	f10c 0c01 	add.w	ip, ip, #1
 8016290:	8901      	ldrh	r1, [r0, #8]
 8016292:	fa1f f38c 	uxth.w	r3, ip
 8016296:	4299      	cmp	r1, r3
 8016298:	d8eb      	bhi.n	8016272 <uxr_reset_input_reliable_stream+0xe>
 801629a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801629e:	60c3      	str	r3, [r0, #12]
 80162a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80162a4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80162a8:	60c3      	str	r3, [r0, #12]
 80162aa:	4770      	bx	lr

080162ac <uxr_receive_reliable_message>:
 80162ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80162b0:	4604      	mov	r4, r0
 80162b2:	460d      	mov	r5, r1
 80162b4:	8901      	ldrh	r1, [r0, #8]
 80162b6:	8980      	ldrh	r0, [r0, #12]
 80162b8:	4690      	mov	r8, r2
 80162ba:	461f      	mov	r7, r3
 80162bc:	f000 fca2 	bl	8016c04 <uxr_seq_num_add>
 80162c0:	4629      	mov	r1, r5
 80162c2:	4606      	mov	r6, r0
 80162c4:	89a0      	ldrh	r0, [r4, #12]
 80162c6:	f000 fca5 	bl	8016c14 <uxr_seq_num_cmp>
 80162ca:	2800      	cmp	r0, #0
 80162cc:	db0a      	blt.n	80162e4 <uxr_receive_reliable_message+0x38>
 80162ce:	2600      	movs	r6, #0
 80162d0:	89e0      	ldrh	r0, [r4, #14]
 80162d2:	4629      	mov	r1, r5
 80162d4:	f000 fc9e 	bl	8016c14 <uxr_seq_num_cmp>
 80162d8:	2800      	cmp	r0, #0
 80162da:	da00      	bge.n	80162de <uxr_receive_reliable_message+0x32>
 80162dc:	81e5      	strh	r5, [r4, #14]
 80162de:	4630      	mov	r0, r6
 80162e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80162e4:	4630      	mov	r0, r6
 80162e6:	4629      	mov	r1, r5
 80162e8:	f000 fc94 	bl	8016c14 <uxr_seq_num_cmp>
 80162ec:	2800      	cmp	r0, #0
 80162ee:	dbee      	blt.n	80162ce <uxr_receive_reliable_message+0x22>
 80162f0:	6923      	ldr	r3, [r4, #16]
 80162f2:	4640      	mov	r0, r8
 80162f4:	4798      	blx	r3
 80162f6:	2101      	movs	r1, #1
 80162f8:	4681      	mov	r9, r0
 80162fa:	89a0      	ldrh	r0, [r4, #12]
 80162fc:	f000 fc82 	bl	8016c04 <uxr_seq_num_add>
 8016300:	f1b9 0f00 	cmp.w	r9, #0
 8016304:	d101      	bne.n	801630a <uxr_receive_reliable_message+0x5e>
 8016306:	4285      	cmp	r5, r0
 8016308:	d047      	beq.n	801639a <uxr_receive_reliable_message+0xee>
 801630a:	8922      	ldrh	r2, [r4, #8]
 801630c:	fbb5 f0f2 	udiv	r0, r5, r2
 8016310:	fb02 5010 	mls	r0, r2, r0, r5
 8016314:	b280      	uxth	r0, r0
 8016316:	6863      	ldr	r3, [r4, #4]
 8016318:	fbb3 f3f2 	udiv	r3, r3, r2
 801631c:	fb00 f303 	mul.w	r3, r0, r3
 8016320:	6820      	ldr	r0, [r4, #0]
 8016322:	3304      	adds	r3, #4
 8016324:	4418      	add	r0, r3
 8016326:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801632a:	2b00      	cmp	r3, #0
 801632c:	d1cf      	bne.n	80162ce <uxr_receive_reliable_message+0x22>
 801632e:	4641      	mov	r1, r8
 8016330:	463a      	mov	r2, r7
 8016332:	f001 fcea 	bl	8017d0a <memcpy>
 8016336:	8921      	ldrh	r1, [r4, #8]
 8016338:	fbb5 f2f1 	udiv	r2, r5, r1
 801633c:	fb01 5212 	mls	r2, r1, r2, r5
 8016340:	b292      	uxth	r2, r2
 8016342:	6863      	ldr	r3, [r4, #4]
 8016344:	fbb3 f3f1 	udiv	r3, r3, r1
 8016348:	fb02 f303 	mul.w	r3, r2, r3
 801634c:	6822      	ldr	r2, [r4, #0]
 801634e:	50d7      	str	r7, [r2, r3]
 8016350:	9a08      	ldr	r2, [sp, #32]
 8016352:	2301      	movs	r3, #1
 8016354:	7013      	strb	r3, [r2, #0]
 8016356:	f1b9 0f00 	cmp.w	r9, #0
 801635a:	d0b8      	beq.n	80162ce <uxr_receive_reliable_message+0x22>
 801635c:	89a6      	ldrh	r6, [r4, #12]
 801635e:	4630      	mov	r0, r6
 8016360:	2101      	movs	r1, #1
 8016362:	f000 fc4f 	bl	8016c04 <uxr_seq_num_add>
 8016366:	8922      	ldrh	r2, [r4, #8]
 8016368:	6863      	ldr	r3, [r4, #4]
 801636a:	fbb3 f3f2 	udiv	r3, r3, r2
 801636e:	4606      	mov	r6, r0
 8016370:	fbb0 f0f2 	udiv	r0, r0, r2
 8016374:	fb02 6010 	mls	r0, r2, r0, r6
 8016378:	b280      	uxth	r0, r0
 801637a:	fb00 f303 	mul.w	r3, r0, r3
 801637e:	6820      	ldr	r0, [r4, #0]
 8016380:	3304      	adds	r3, #4
 8016382:	4418      	add	r0, r3
 8016384:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d0a0      	beq.n	80162ce <uxr_receive_reliable_message+0x22>
 801638c:	6923      	ldr	r3, [r4, #16]
 801638e:	4798      	blx	r3
 8016390:	2802      	cmp	r0, #2
 8016392:	d008      	beq.n	80163a6 <uxr_receive_reliable_message+0xfa>
 8016394:	2801      	cmp	r0, #1
 8016396:	d0e2      	beq.n	801635e <uxr_receive_reliable_message+0xb2>
 8016398:	e799      	b.n	80162ce <uxr_receive_reliable_message+0x22>
 801639a:	9b08      	ldr	r3, [sp, #32]
 801639c:	81a5      	strh	r5, [r4, #12]
 801639e:	2601      	movs	r6, #1
 80163a0:	f883 9000 	strb.w	r9, [r3]
 80163a4:	e794      	b.n	80162d0 <uxr_receive_reliable_message+0x24>
 80163a6:	2601      	movs	r6, #1
 80163a8:	e792      	b.n	80162d0 <uxr_receive_reliable_message+0x24>
 80163aa:	bf00      	nop

080163ac <uxr_next_input_reliable_buffer_available>:
 80163ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80163b0:	4604      	mov	r4, r0
 80163b2:	460f      	mov	r7, r1
 80163b4:	8980      	ldrh	r0, [r0, #12]
 80163b6:	2101      	movs	r1, #1
 80163b8:	4690      	mov	r8, r2
 80163ba:	f000 fc23 	bl	8016c04 <uxr_seq_num_add>
 80163be:	8922      	ldrh	r2, [r4, #8]
 80163c0:	fbb0 f6f2 	udiv	r6, r0, r2
 80163c4:	fb02 0616 	mls	r6, r2, r6, r0
 80163c8:	b2b6      	uxth	r6, r6
 80163ca:	6863      	ldr	r3, [r4, #4]
 80163cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80163d0:	fb06 f303 	mul.w	r3, r6, r3
 80163d4:	6826      	ldr	r6, [r4, #0]
 80163d6:	3304      	adds	r3, #4
 80163d8:	441e      	add	r6, r3
 80163da:	f856 9c04 	ldr.w	r9, [r6, #-4]
 80163de:	f1b9 0f00 	cmp.w	r9, #0
 80163e2:	d023      	beq.n	801642c <uxr_next_input_reliable_buffer_available+0x80>
 80163e4:	6923      	ldr	r3, [r4, #16]
 80163e6:	4605      	mov	r5, r0
 80163e8:	4630      	mov	r0, r6
 80163ea:	4798      	blx	r3
 80163ec:	4682      	mov	sl, r0
 80163ee:	b300      	cbz	r0, 8016432 <uxr_next_input_reliable_buffer_available+0x86>
 80163f0:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 80163f4:	2101      	movs	r1, #1
 80163f6:	4650      	mov	r0, sl
 80163f8:	f000 fc04 	bl	8016c04 <uxr_seq_num_add>
 80163fc:	8921      	ldrh	r1, [r4, #8]
 80163fe:	fbb0 f2f1 	udiv	r2, r0, r1
 8016402:	4682      	mov	sl, r0
 8016404:	fb01 0212 	mls	r2, r1, r2, r0
 8016408:	e9d4 0300 	ldrd	r0, r3, [r4]
 801640c:	b292      	uxth	r2, r2
 801640e:	fbb3 f3f1 	udiv	r3, r3, r1
 8016412:	fb02 f303 	mul.w	r3, r2, r3
 8016416:	3304      	adds	r3, #4
 8016418:	4418      	add	r0, r3
 801641a:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801641e:	b12b      	cbz	r3, 801642c <uxr_next_input_reliable_buffer_available+0x80>
 8016420:	6923      	ldr	r3, [r4, #16]
 8016422:	4798      	blx	r3
 8016424:	2802      	cmp	r0, #2
 8016426:	d01b      	beq.n	8016460 <uxr_next_input_reliable_buffer_available+0xb4>
 8016428:	2801      	cmp	r0, #1
 801642a:	d0e3      	beq.n	80163f4 <uxr_next_input_reliable_buffer_available+0x48>
 801642c:	2000      	movs	r0, #0
 801642e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016432:	464a      	mov	r2, r9
 8016434:	4631      	mov	r1, r6
 8016436:	4638      	mov	r0, r7
 8016438:	f7f5 fdb2 	bl	800bfa0 <ucdr_init_buffer>
 801643c:	8921      	ldrh	r1, [r4, #8]
 801643e:	fbb5 f2f1 	udiv	r2, r5, r1
 8016442:	fb01 5212 	mls	r2, r1, r2, r5
 8016446:	b292      	uxth	r2, r2
 8016448:	6863      	ldr	r3, [r4, #4]
 801644a:	fbb3 f3f1 	udiv	r3, r3, r1
 801644e:	fb02 f303 	mul.w	r3, r2, r3
 8016452:	6822      	ldr	r2, [r4, #0]
 8016454:	f842 a003 	str.w	sl, [r2, r3]
 8016458:	2001      	movs	r0, #1
 801645a:	81a5      	strh	r5, [r4, #12]
 801645c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016460:	8920      	ldrh	r0, [r4, #8]
 8016462:	fbb5 f3f0 	udiv	r3, r5, r0
 8016466:	fb00 5513 	mls	r5, r0, r3, r5
 801646a:	b2ad      	uxth	r5, r5
 801646c:	6863      	ldr	r3, [r4, #4]
 801646e:	fbb3 f3f0 	udiv	r3, r3, r0
 8016472:	fb03 f505 	mul.w	r5, r3, r5
 8016476:	6823      	ldr	r3, [r4, #0]
 8016478:	2000      	movs	r0, #0
 801647a:	5158      	str	r0, [r3, r5]
 801647c:	eb06 0108 	add.w	r1, r6, r8
 8016480:	eba9 0208 	sub.w	r2, r9, r8
 8016484:	4638      	mov	r0, r7
 8016486:	f7f5 fd8b 	bl	800bfa0 <ucdr_init_buffer>
 801648a:	4638      	mov	r0, r7
 801648c:	4903      	ldr	r1, [pc, #12]	@ (801649c <uxr_next_input_reliable_buffer_available+0xf0>)
 801648e:	4622      	mov	r2, r4
 8016490:	f7f5 fd5a 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8016494:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8016498:	2001      	movs	r0, #1
 801649a:	e7c8      	b.n	801642e <uxr_next_input_reliable_buffer_available+0x82>
 801649c:	080161a1 	.word	0x080161a1

080164a0 <uxr_process_heartbeat>:
 80164a0:	b538      	push	{r3, r4, r5, lr}
 80164a2:	4611      	mov	r1, r2
 80164a4:	4604      	mov	r4, r0
 80164a6:	89c0      	ldrh	r0, [r0, #14]
 80164a8:	4615      	mov	r5, r2
 80164aa:	f000 fbb3 	bl	8016c14 <uxr_seq_num_cmp>
 80164ae:	2800      	cmp	r0, #0
 80164b0:	bfb8      	it	lt
 80164b2:	81e5      	strhlt	r5, [r4, #14]
 80164b4:	bd38      	pop	{r3, r4, r5, pc}
 80164b6:	bf00      	nop

080164b8 <uxr_compute_acknack>:
 80164b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80164bc:	8903      	ldrh	r3, [r0, #8]
 80164be:	8985      	ldrh	r5, [r0, #12]
 80164c0:	4604      	mov	r4, r0
 80164c2:	460e      	mov	r6, r1
 80164c4:	b1d3      	cbz	r3, 80164fc <uxr_compute_acknack+0x44>
 80164c6:	4628      	mov	r0, r5
 80164c8:	2701      	movs	r7, #1
 80164ca:	e003      	b.n	80164d4 <uxr_compute_acknack+0x1c>
 80164cc:	4567      	cmp	r7, ip
 80164ce:	d215      	bcs.n	80164fc <uxr_compute_acknack+0x44>
 80164d0:	89a0      	ldrh	r0, [r4, #12]
 80164d2:	3701      	adds	r7, #1
 80164d4:	b2b9      	uxth	r1, r7
 80164d6:	f000 fb95 	bl	8016c04 <uxr_seq_num_add>
 80164da:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80164de:	fbb0 f3fc 	udiv	r3, r0, ip
 80164e2:	fb0c 0313 	mls	r3, ip, r3, r0
 80164e6:	b29a      	uxth	r2, r3
 80164e8:	e9d4 1300 	ldrd	r1, r3, [r4]
 80164ec:	fbb3 f3fc 	udiv	r3, r3, ip
 80164f0:	fb02 f303 	mul.w	r3, r2, r3
 80164f4:	58cb      	ldr	r3, [r1, r3]
 80164f6:	2b00      	cmp	r3, #0
 80164f8:	d1e8      	bne.n	80164cc <uxr_compute_acknack+0x14>
 80164fa:	4605      	mov	r5, r0
 80164fc:	8035      	strh	r5, [r6, #0]
 80164fe:	2101      	movs	r1, #1
 8016500:	4628      	mov	r0, r5
 8016502:	89e7      	ldrh	r7, [r4, #14]
 8016504:	f000 fb82 	bl	8016c0c <uxr_seq_num_sub>
 8016508:	4601      	mov	r1, r0
 801650a:	4638      	mov	r0, r7
 801650c:	f000 fb7e 	bl	8016c0c <uxr_seq_num_sub>
 8016510:	4605      	mov	r5, r0
 8016512:	b318      	cbz	r0, 801655c <uxr_compute_acknack+0xa4>
 8016514:	f04f 0900 	mov.w	r9, #0
 8016518:	464f      	mov	r7, r9
 801651a:	f04f 0801 	mov.w	r8, #1
 801651e:	fa1f f189 	uxth.w	r1, r9
 8016522:	8830      	ldrh	r0, [r6, #0]
 8016524:	f000 fb6e 	bl	8016c04 <uxr_seq_num_add>
 8016528:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801652c:	fbb0 f3fc 	udiv	r3, r0, ip
 8016530:	e9d4 1200 	ldrd	r1, r2, [r4]
 8016534:	fb03 001c 	mls	r0, r3, ip, r0
 8016538:	b283      	uxth	r3, r0
 801653a:	fbb2 f2fc 	udiv	r2, r2, ip
 801653e:	fb02 f303 	mul.w	r3, r2, r3
 8016542:	fa08 f209 	lsl.w	r2, r8, r9
 8016546:	58cb      	ldr	r3, [r1, r3]
 8016548:	f109 0901 	add.w	r9, r9, #1
 801654c:	b90b      	cbnz	r3, 8016552 <uxr_compute_acknack+0x9a>
 801654e:	4317      	orrs	r7, r2
 8016550:	b2bf      	uxth	r7, r7
 8016552:	454d      	cmp	r5, r9
 8016554:	d1e3      	bne.n	801651e <uxr_compute_acknack+0x66>
 8016556:	4638      	mov	r0, r7
 8016558:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801655c:	4607      	mov	r7, r0
 801655e:	4638      	mov	r0, r7
 8016560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08016564 <uxr_init_output_best_effort_stream>:
 8016564:	f64f 7cff 	movw	ip, #65535	@ 0xffff
 8016568:	e9c0 3201 	strd	r3, r2, [r0, #4]
 801656c:	6001      	str	r1, [r0, #0]
 801656e:	7303      	strb	r3, [r0, #12]
 8016570:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8016574:	4770      	bx	lr
 8016576:	bf00      	nop

08016578 <uxr_reset_output_best_effort_stream>:
 8016578:	7b02      	ldrb	r2, [r0, #12]
 801657a:	6042      	str	r2, [r0, #4]
 801657c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016580:	81c3      	strh	r3, [r0, #14]
 8016582:	4770      	bx	lr

08016584 <uxr_prepare_best_effort_buffer_to_write>:
 8016584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016586:	4604      	mov	r4, r0
 8016588:	b083      	sub	sp, #12
 801658a:	6840      	ldr	r0, [r0, #4]
 801658c:	460d      	mov	r5, r1
 801658e:	4616      	mov	r6, r2
 8016590:	f7fa fafc 	bl	8010b8c <uxr_submessage_padding>
 8016594:	6863      	ldr	r3, [r4, #4]
 8016596:	4418      	add	r0, r3
 8016598:	68a3      	ldr	r3, [r4, #8]
 801659a:	1942      	adds	r2, r0, r5
 801659c:	4293      	cmp	r3, r2
 801659e:	bf2c      	ite	cs
 80165a0:	2701      	movcs	r7, #1
 80165a2:	2700      	movcc	r7, #0
 80165a4:	d202      	bcs.n	80165ac <uxr_prepare_best_effort_buffer_to_write+0x28>
 80165a6:	4638      	mov	r0, r7
 80165a8:	b003      	add	sp, #12
 80165aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80165ac:	9000      	str	r0, [sp, #0]
 80165ae:	6821      	ldr	r1, [r4, #0]
 80165b0:	4630      	mov	r0, r6
 80165b2:	2300      	movs	r3, #0
 80165b4:	f7f5 fce2 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 80165b8:	6861      	ldr	r1, [r4, #4]
 80165ba:	4638      	mov	r0, r7
 80165bc:	4429      	add	r1, r5
 80165be:	6061      	str	r1, [r4, #4]
 80165c0:	b003      	add	sp, #12
 80165c2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080165c4 <uxr_prepare_best_effort_buffer_to_send>:
 80165c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80165c8:	4604      	mov	r4, r0
 80165ca:	461d      	mov	r5, r3
 80165cc:	6840      	ldr	r0, [r0, #4]
 80165ce:	7b23      	ldrb	r3, [r4, #12]
 80165d0:	4298      	cmp	r0, r3
 80165d2:	bf8c      	ite	hi
 80165d4:	2601      	movhi	r6, #1
 80165d6:	2600      	movls	r6, #0
 80165d8:	d802      	bhi.n	80165e0 <uxr_prepare_best_effort_buffer_to_send+0x1c>
 80165da:	4630      	mov	r0, r6
 80165dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80165e0:	4688      	mov	r8, r1
 80165e2:	89e0      	ldrh	r0, [r4, #14]
 80165e4:	2101      	movs	r1, #1
 80165e6:	4617      	mov	r7, r2
 80165e8:	f000 fb0c 	bl	8016c04 <uxr_seq_num_add>
 80165ec:	6823      	ldr	r3, [r4, #0]
 80165ee:	81e0      	strh	r0, [r4, #14]
 80165f0:	8028      	strh	r0, [r5, #0]
 80165f2:	f8c8 3000 	str.w	r3, [r8]
 80165f6:	6863      	ldr	r3, [r4, #4]
 80165f8:	603b      	str	r3, [r7, #0]
 80165fa:	7b23      	ldrb	r3, [r4, #12]
 80165fc:	6063      	str	r3, [r4, #4]
 80165fe:	4630      	mov	r0, r6
 8016600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016604 <on_full_output_buffer>:
 8016604:	b538      	push	{r3, r4, r5, lr}
 8016606:	6802      	ldr	r2, [r0, #0]
 8016608:	460c      	mov	r4, r1
 801660a:	6809      	ldr	r1, [r1, #0]
 801660c:	8923      	ldrh	r3, [r4, #8]
 801660e:	eba2 0c01 	sub.w	ip, r2, r1
 8016612:	6862      	ldr	r2, [r4, #4]
 8016614:	fbb2 f2f3 	udiv	r2, r2, r3
 8016618:	fbbc fcf2 	udiv	ip, ip, r2
 801661c:	f10c 0c01 	add.w	ip, ip, #1
 8016620:	fa1f fc8c 	uxth.w	ip, ip
 8016624:	fbbc fef3 	udiv	lr, ip, r3
 8016628:	fb03 c31e 	mls	r3, r3, lr, ip
 801662c:	b29b      	uxth	r3, r3
 801662e:	fb02 f303 	mul.w	r3, r2, r3
 8016632:	f894 c00c 	ldrb.w	ip, [r4, #12]
 8016636:	58ca      	ldr	r2, [r1, r3]
 8016638:	4463      	add	r3, ip
 801663a:	eba2 020c 	sub.w	r2, r2, ip
 801663e:	3308      	adds	r3, #8
 8016640:	4605      	mov	r5, r0
 8016642:	4419      	add	r1, r3
 8016644:	3a04      	subs	r2, #4
 8016646:	6903      	ldr	r3, [r0, #16]
 8016648:	f7f5 fca2 	bl	800bf90 <ucdr_init_buffer_origin>
 801664c:	4628      	mov	r0, r5
 801664e:	4903      	ldr	r1, [pc, #12]	@ (801665c <on_full_output_buffer+0x58>)
 8016650:	4622      	mov	r2, r4
 8016652:	f7f5 fc79 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8016656:	2000      	movs	r0, #0
 8016658:	bd38      	pop	{r3, r4, r5, pc}
 801665a:	bf00      	nop
 801665c:	08016605 	.word	0x08016605

08016660 <uxr_init_output_reliable_stream>:
 8016660:	b410      	push	{r4}
 8016662:	f89d c004 	ldrb.w	ip, [sp, #4]
 8016666:	8103      	strh	r3, [r0, #8]
 8016668:	e9c0 1200 	strd	r1, r2, [r0]
 801666c:	f880 c00c 	strb.w	ip, [r0, #12]
 8016670:	b1d3      	cbz	r3, 80166a8 <uxr_init_output_reliable_stream+0x48>
 8016672:	f8c1 c000 	str.w	ip, [r1]
 8016676:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801667a:	f1bc 0f01 	cmp.w	ip, #1
 801667e:	d913      	bls.n	80166a8 <uxr_init_output_reliable_stream+0x48>
 8016680:	2301      	movs	r3, #1
 8016682:	fbb3 f1fc 	udiv	r1, r3, ip
 8016686:	fb0c 3111 	mls	r1, ip, r1, r3
 801668a:	b289      	uxth	r1, r1
 801668c:	6842      	ldr	r2, [r0, #4]
 801668e:	6804      	ldr	r4, [r0, #0]
 8016690:	fbb2 f2fc 	udiv	r2, r2, ip
 8016694:	fb01 f202 	mul.w	r2, r1, r2
 8016698:	7b01      	ldrb	r1, [r0, #12]
 801669a:	50a1      	str	r1, [r4, r2]
 801669c:	3301      	adds	r3, #1
 801669e:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 80166a2:	b29b      	uxth	r3, r3
 80166a4:	459c      	cmp	ip, r3
 80166a6:	d8ec      	bhi.n	8016682 <uxr_init_output_reliable_stream+0x22>
 80166a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80166ac:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80166b0:	e9c0 2306 	strd	r2, r3, [r0, #24]
 80166b4:	4905      	ldr	r1, [pc, #20]	@ (80166cc <uxr_init_output_reliable_stream+0x6c>)
 80166b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80166ba:	f8c0 100e 	str.w	r1, [r0, #14]
 80166be:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80166c2:	2300      	movs	r3, #0
 80166c4:	8242      	strh	r2, [r0, #18]
 80166c6:	8403      	strh	r3, [r0, #32]
 80166c8:	4770      	bx	lr
 80166ca:	bf00      	nop
 80166cc:	ffff0000 	.word	0xffff0000

080166d0 <uxr_reset_output_reliable_stream>:
 80166d0:	8901      	ldrh	r1, [r0, #8]
 80166d2:	b1b1      	cbz	r1, 8016702 <uxr_reset_output_reliable_stream+0x32>
 80166d4:	f04f 0c00 	mov.w	ip, #0
 80166d8:	4663      	mov	r3, ip
 80166da:	fbb3 f2f1 	udiv	r2, r3, r1
 80166de:	fb01 3312 	mls	r3, r1, r2, r3
 80166e2:	b29b      	uxth	r3, r3
 80166e4:	6842      	ldr	r2, [r0, #4]
 80166e6:	fbb2 f2f1 	udiv	r2, r2, r1
 80166ea:	6801      	ldr	r1, [r0, #0]
 80166ec:	fb02 f303 	mul.w	r3, r2, r3
 80166f0:	7b02      	ldrb	r2, [r0, #12]
 80166f2:	50ca      	str	r2, [r1, r3]
 80166f4:	f10c 0c01 	add.w	ip, ip, #1
 80166f8:	8901      	ldrh	r1, [r0, #8]
 80166fa:	fa1f f38c 	uxth.w	r3, ip
 80166fe:	4299      	cmp	r1, r3
 8016700:	d8eb      	bhi.n	80166da <uxr_reset_output_reliable_stream+0xa>
 8016702:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016706:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 801670a:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801670e:	4904      	ldr	r1, [pc, #16]	@ (8016720 <uxr_reset_output_reliable_stream+0x50>)
 8016710:	f8c0 100e 	str.w	r1, [r0, #14]
 8016714:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016718:	2300      	movs	r3, #0
 801671a:	8242      	strh	r2, [r0, #18]
 801671c:	8403      	strh	r3, [r0, #32]
 801671e:	4770      	bx	lr
 8016720:	ffff0000 	.word	0xffff0000

08016724 <uxr_prepare_reliable_buffer_to_write>:
 8016724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016728:	4604      	mov	r4, r0
 801672a:	b091      	sub	sp, #68	@ 0x44
 801672c:	8900      	ldrh	r0, [r0, #8]
 801672e:	89e6      	ldrh	r6, [r4, #14]
 8016730:	6823      	ldr	r3, [r4, #0]
 8016732:	9204      	str	r2, [sp, #16]
 8016734:	fbb6 f2f0 	udiv	r2, r6, r0
 8016738:	fb00 6212 	mls	r2, r0, r2, r6
 801673c:	b292      	uxth	r2, r2
 801673e:	6865      	ldr	r5, [r4, #4]
 8016740:	fbb5 f5f0 	udiv	r5, r5, r0
 8016744:	fb05 3202 	mla	r2, r5, r2, r3
 8016748:	3204      	adds	r2, #4
 801674a:	f852 8c04 	ldr.w	r8, [r2, #-4]
 801674e:	f894 900c 	ldrb.w	r9, [r4, #12]
 8016752:	9203      	str	r2, [sp, #12]
 8016754:	468b      	mov	fp, r1
 8016756:	1f2f      	subs	r7, r5, #4
 8016758:	2800      	cmp	r0, #0
 801675a:	f000 814c 	beq.w	80169f6 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 801675e:	f04f 0c00 	mov.w	ip, #0
 8016762:	46e2      	mov	sl, ip
 8016764:	4661      	mov	r1, ip
 8016766:	fbb1 f2f0 	udiv	r2, r1, r0
 801676a:	fb00 1212 	mls	r2, r0, r2, r1
 801676e:	b292      	uxth	r2, r2
 8016770:	fb05 f202 	mul.w	r2, r5, r2
 8016774:	f10c 0c01 	add.w	ip, ip, #1
 8016778:	589a      	ldr	r2, [r3, r2]
 801677a:	454a      	cmp	r2, r9
 801677c:	bf08      	it	eq
 801677e:	f10a 0a01 	addeq.w	sl, sl, #1
 8016782:	fa1f f18c 	uxth.w	r1, ip
 8016786:	bf08      	it	eq
 8016788:	fa1f fa8a 	uxtheq.w	sl, sl
 801678c:	4281      	cmp	r1, r0
 801678e:	d3ea      	bcc.n	8016766 <uxr_prepare_reliable_buffer_to_write+0x42>
 8016790:	4640      	mov	r0, r8
 8016792:	2104      	movs	r1, #4
 8016794:	f8cd a014 	str.w	sl, [sp, #20]
 8016798:	f7f5 fc06 	bl	800bfa8 <ucdr_alignment>
 801679c:	4480      	add	r8, r0
 801679e:	eb08 020b 	add.w	r2, r8, fp
 80167a2:	42ba      	cmp	r2, r7
 80167a4:	f240 80cd 	bls.w	8016942 <uxr_prepare_reliable_buffer_to_write+0x21e>
 80167a8:	7b22      	ldrb	r2, [r4, #12]
 80167aa:	445a      	add	r2, fp
 80167ac:	42ba      	cmp	r2, r7
 80167ae:	f240 80b5 	bls.w	801691c <uxr_prepare_reliable_buffer_to_write+0x1f8>
 80167b2:	f5c9 437f 	rsb	r3, r9, #65280	@ 0xff00
 80167b6:	33fc      	adds	r3, #252	@ 0xfc
 80167b8:	b2ba      	uxth	r2, r7
 80167ba:	4413      	add	r3, r2
 80167bc:	b29b      	uxth	r3, r3
 80167be:	fb0a f903 	mul.w	r9, sl, r3
 80167c2:	45d9      	cmp	r9, fp
 80167c4:	9305      	str	r3, [sp, #20]
 80167c6:	9306      	str	r3, [sp, #24]
 80167c8:	f0c0 80b7 	bcc.w	801693a <uxr_prepare_reliable_buffer_to_write+0x216>
 80167cc:	f108 0304 	add.w	r3, r8, #4
 80167d0:	42bb      	cmp	r3, r7
 80167d2:	f080 80db 	bcs.w	801698c <uxr_prepare_reliable_buffer_to_write+0x268>
 80167d6:	f1a2 0904 	sub.w	r9, r2, #4
 80167da:	eba9 0908 	sub.w	r9, r9, r8
 80167de:	9b05      	ldr	r3, [sp, #20]
 80167e0:	fa1f f989 	uxth.w	r9, r9
 80167e4:	ebab 0b09 	sub.w	fp, fp, r9
 80167e8:	fbbb f2f3 	udiv	r2, fp, r3
 80167ec:	fb03 b312 	mls	r3, r3, r2, fp
 80167f0:	2b00      	cmp	r3, #0
 80167f2:	f000 80c8 	beq.w	8016986 <uxr_prepare_reliable_buffer_to_write+0x262>
 80167f6:	3201      	adds	r2, #1
 80167f8:	b292      	uxth	r2, r2
 80167fa:	9306      	str	r3, [sp, #24]
 80167fc:	4552      	cmp	r2, sl
 80167fe:	f200 809c 	bhi.w	801693a <uxr_prepare_reliable_buffer_to_write+0x216>
 8016802:	f10d 0b20 	add.w	fp, sp, #32
 8016806:	2a00      	cmp	r2, #0
 8016808:	d042      	beq.n	8016890 <uxr_prepare_reliable_buffer_to_write+0x16c>
 801680a:	f8cd 801c 	str.w	r8, [sp, #28]
 801680e:	f04f 0a00 	mov.w	sl, #0
 8016812:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8016816:	9505      	str	r5, [sp, #20]
 8016818:	f10d 0b20 	add.w	fp, sp, #32
 801681c:	4615      	mov	r5, r2
 801681e:	e000      	b.n	8016822 <uxr_prepare_reliable_buffer_to_write+0xfe>
 8016820:	46c1      	mov	r9, r8
 8016822:	8920      	ldrh	r0, [r4, #8]
 8016824:	fbb6 f2f0 	udiv	r2, r6, r0
 8016828:	fb00 6112 	mls	r1, r0, r2, r6
 801682c:	b28a      	uxth	r2, r1
 801682e:	6863      	ldr	r3, [r4, #4]
 8016830:	fbb3 f1f0 	udiv	r1, r3, r0
 8016834:	6823      	ldr	r3, [r4, #0]
 8016836:	fb02 f101 	mul.w	r1, r2, r1
 801683a:	3104      	adds	r1, #4
 801683c:	4419      	add	r1, r3
 801683e:	4658      	mov	r0, fp
 8016840:	f851 2c04 	ldr.w	r2, [r1, #-4]
 8016844:	9200      	str	r2, [sp, #0]
 8016846:	2300      	movs	r3, #0
 8016848:	463a      	mov	r2, r7
 801684a:	f7f5 fb97 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 801684e:	464a      	mov	r2, r9
 8016850:	2300      	movs	r3, #0
 8016852:	210d      	movs	r1, #13
 8016854:	4658      	mov	r0, fp
 8016856:	f7fa f959 	bl	8010b0c <uxr_buffer_submessage_header>
 801685a:	8921      	ldrh	r1, [r4, #8]
 801685c:	fbb6 f2f1 	udiv	r2, r6, r1
 8016860:	fb01 6212 	mls	r2, r1, r2, r6
 8016864:	b292      	uxth	r2, r2
 8016866:	6863      	ldr	r3, [r4, #4]
 8016868:	fbb3 f3f1 	udiv	r3, r3, r1
 801686c:	fb02 f303 	mul.w	r3, r2, r3
 8016870:	6822      	ldr	r2, [r4, #0]
 8016872:	4630      	mov	r0, r6
 8016874:	50d7      	str	r7, [r2, r3]
 8016876:	2101      	movs	r1, #1
 8016878:	f000 f9c4 	bl	8016c04 <uxr_seq_num_add>
 801687c:	f10a 0a01 	add.w	sl, sl, #1
 8016880:	fa1f f38a 	uxth.w	r3, sl
 8016884:	429d      	cmp	r5, r3
 8016886:	4606      	mov	r6, r0
 8016888:	d8ca      	bhi.n	8016820 <uxr_prepare_reliable_buffer_to_write+0xfc>
 801688a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801688e:	9d05      	ldr	r5, [sp, #20]
 8016890:	8920      	ldrh	r0, [r4, #8]
 8016892:	fbb6 f3f0 	udiv	r3, r6, r0
 8016896:	fb00 6313 	mls	r3, r0, r3, r6
 801689a:	b299      	uxth	r1, r3
 801689c:	6863      	ldr	r3, [r4, #4]
 801689e:	fbb3 f3f0 	udiv	r3, r3, r0
 80168a2:	fb01 f303 	mul.w	r3, r1, r3
 80168a6:	6821      	ldr	r1, [r4, #0]
 80168a8:	3304      	adds	r3, #4
 80168aa:	4419      	add	r1, r3
 80168ac:	463a      	mov	r2, r7
 80168ae:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80168b2:	9000      	str	r0, [sp, #0]
 80168b4:	2300      	movs	r3, #0
 80168b6:	4658      	mov	r0, fp
 80168b8:	f7f5 fb60 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 80168bc:	f8dd 9018 	ldr.w	r9, [sp, #24]
 80168c0:	4658      	mov	r0, fp
 80168c2:	fa1f f289 	uxth.w	r2, r9
 80168c6:	2302      	movs	r3, #2
 80168c8:	210d      	movs	r1, #13
 80168ca:	f7fa f91f 	bl	8010b0c <uxr_buffer_submessage_header>
 80168ce:	9b03      	ldr	r3, [sp, #12]
 80168d0:	8927      	ldrh	r7, [r4, #8]
 80168d2:	7b20      	ldrb	r0, [r4, #12]
 80168d4:	f108 0104 	add.w	r1, r8, #4
 80168d8:	440b      	add	r3, r1
 80168da:	4619      	mov	r1, r3
 80168dc:	fbb6 f3f7 	udiv	r3, r6, r7
 80168e0:	fb07 6313 	mls	r3, r7, r3, r6
 80168e4:	f1a5 0208 	sub.w	r2, r5, #8
 80168e8:	b29d      	uxth	r5, r3
 80168ea:	3004      	adds	r0, #4
 80168ec:	6863      	ldr	r3, [r4, #4]
 80168ee:	fbb3 f3f7 	udiv	r3, r3, r7
 80168f2:	fb05 f303 	mul.w	r3, r5, r3
 80168f6:	6825      	ldr	r5, [r4, #0]
 80168f8:	4448      	add	r0, r9
 80168fa:	50e8      	str	r0, [r5, r3]
 80168fc:	9d04      	ldr	r5, [sp, #16]
 80168fe:	eba2 0208 	sub.w	r2, r2, r8
 8016902:	4628      	mov	r0, r5
 8016904:	f7f5 fb4c 	bl	800bfa0 <ucdr_init_buffer>
 8016908:	4628      	mov	r0, r5
 801690a:	493c      	ldr	r1, [pc, #240]	@ (80169fc <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 801690c:	4622      	mov	r2, r4
 801690e:	f7f5 fb1b 	bl	800bf48 <ucdr_set_on_full_buffer_callback>
 8016912:	2001      	movs	r0, #1
 8016914:	81e6      	strh	r6, [r4, #14]
 8016916:	b011      	add	sp, #68	@ 0x44
 8016918:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801691c:	2101      	movs	r1, #1
 801691e:	89e0      	ldrh	r0, [r4, #14]
 8016920:	f000 f970 	bl	8016c04 <uxr_seq_num_add>
 8016924:	8921      	ldrh	r1, [r4, #8]
 8016926:	4605      	mov	r5, r0
 8016928:	8a60      	ldrh	r0, [r4, #18]
 801692a:	f000 f96b 	bl	8016c04 <uxr_seq_num_add>
 801692e:	4601      	mov	r1, r0
 8016930:	4628      	mov	r0, r5
 8016932:	f000 f96f 	bl	8016c14 <uxr_seq_num_cmp>
 8016936:	2800      	cmp	r0, #0
 8016938:	dd42      	ble.n	80169c0 <uxr_prepare_reliable_buffer_to_write+0x29c>
 801693a:	2000      	movs	r0, #0
 801693c:	b011      	add	sp, #68	@ 0x44
 801693e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016942:	8921      	ldrh	r1, [r4, #8]
 8016944:	8a60      	ldrh	r0, [r4, #18]
 8016946:	9205      	str	r2, [sp, #20]
 8016948:	f000 f95c 	bl	8016c04 <uxr_seq_num_add>
 801694c:	4601      	mov	r1, r0
 801694e:	4630      	mov	r0, r6
 8016950:	f000 f960 	bl	8016c14 <uxr_seq_num_cmp>
 8016954:	2800      	cmp	r0, #0
 8016956:	9a05      	ldr	r2, [sp, #20]
 8016958:	dcef      	bgt.n	801693a <uxr_prepare_reliable_buffer_to_write+0x216>
 801695a:	8927      	ldrh	r7, [r4, #8]
 801695c:	fbb6 f3f7 	udiv	r3, r6, r7
 8016960:	fb07 6313 	mls	r3, r7, r3, r6
 8016964:	b29d      	uxth	r5, r3
 8016966:	6863      	ldr	r3, [r4, #4]
 8016968:	6824      	ldr	r4, [r4, #0]
 801696a:	fbb3 f3f7 	udiv	r3, r3, r7
 801696e:	fb05 f303 	mul.w	r3, r5, r3
 8016972:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8016976:	50e2      	str	r2, [r4, r3]
 8016978:	2300      	movs	r3, #0
 801697a:	f8cd 8000 	str.w	r8, [sp]
 801697e:	f7f5 fafd 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 8016982:	2001      	movs	r0, #1
 8016984:	e7da      	b.n	801693c <uxr_prepare_reliable_buffer_to_write+0x218>
 8016986:	b293      	uxth	r3, r2
 8016988:	461a      	mov	r2, r3
 801698a:	e737      	b.n	80167fc <uxr_prepare_reliable_buffer_to_write+0xd8>
 801698c:	4630      	mov	r0, r6
 801698e:	2101      	movs	r1, #1
 8016990:	9207      	str	r2, [sp, #28]
 8016992:	f000 f937 	bl	8016c04 <uxr_seq_num_add>
 8016996:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801699a:	fbb0 f1fc 	udiv	r1, r0, ip
 801699e:	fb0c 0111 	mls	r1, ip, r1, r0
 80169a2:	4606      	mov	r6, r0
 80169a4:	b288      	uxth	r0, r1
 80169a6:	6863      	ldr	r3, [r4, #4]
 80169a8:	fbb3 f1fc 	udiv	r1, r3, ip
 80169ac:	6823      	ldr	r3, [r4, #0]
 80169ae:	9a07      	ldr	r2, [sp, #28]
 80169b0:	fb00 f101 	mul.w	r1, r0, r1
 80169b4:	3104      	adds	r1, #4
 80169b6:	440b      	add	r3, r1
 80169b8:	9303      	str	r3, [sp, #12]
 80169ba:	f853 8c04 	ldr.w	r8, [r3, #-4]
 80169be:	e70a      	b.n	80167d6 <uxr_prepare_reliable_buffer_to_write+0xb2>
 80169c0:	8921      	ldrh	r1, [r4, #8]
 80169c2:	fbb5 f3f1 	udiv	r3, r5, r1
 80169c6:	fb01 5313 	mls	r3, r1, r3, r5
 80169ca:	b29a      	uxth	r2, r3
 80169cc:	6863      	ldr	r3, [r4, #4]
 80169ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80169d2:	6821      	ldr	r1, [r4, #0]
 80169d4:	9804      	ldr	r0, [sp, #16]
 80169d6:	fb02 f303 	mul.w	r3, r2, r3
 80169da:	3304      	adds	r3, #4
 80169dc:	7b22      	ldrb	r2, [r4, #12]
 80169de:	4419      	add	r1, r3
 80169e0:	445a      	add	r2, fp
 80169e2:	f841 2c04 	str.w	r2, [r1, #-4]
 80169e6:	7b23      	ldrb	r3, [r4, #12]
 80169e8:	9300      	str	r3, [sp, #0]
 80169ea:	2300      	movs	r3, #0
 80169ec:	f7f5 fac6 	bl	800bf7c <ucdr_init_buffer_origin_offset>
 80169f0:	81e5      	strh	r5, [r4, #14]
 80169f2:	2001      	movs	r0, #1
 80169f4:	e7a2      	b.n	801693c <uxr_prepare_reliable_buffer_to_write+0x218>
 80169f6:	4682      	mov	sl, r0
 80169f8:	e6ca      	b.n	8016790 <uxr_prepare_reliable_buffer_to_write+0x6c>
 80169fa:	bf00      	nop
 80169fc:	08016605 	.word	0x08016605

08016a00 <uxr_prepare_next_reliable_buffer_to_send>:
 8016a00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016a02:	4604      	mov	r4, r0
 8016a04:	460f      	mov	r7, r1
 8016a06:	8a00      	ldrh	r0, [r0, #16]
 8016a08:	2101      	movs	r1, #1
 8016a0a:	4616      	mov	r6, r2
 8016a0c:	461d      	mov	r5, r3
 8016a0e:	f000 f8f9 	bl	8016c04 <uxr_seq_num_add>
 8016a12:	8028      	strh	r0, [r5, #0]
 8016a14:	8922      	ldrh	r2, [r4, #8]
 8016a16:	fbb0 f3f2 	udiv	r3, r0, r2
 8016a1a:	fb02 0c13 	mls	ip, r2, r3, r0
 8016a1e:	fa1f fc8c 	uxth.w	ip, ip
 8016a22:	6863      	ldr	r3, [r4, #4]
 8016a24:	fbb3 f3f2 	udiv	r3, r3, r2
 8016a28:	fb0c fc03 	mul.w	ip, ip, r3
 8016a2c:	6823      	ldr	r3, [r4, #0]
 8016a2e:	89e1      	ldrh	r1, [r4, #14]
 8016a30:	f10c 0c04 	add.w	ip, ip, #4
 8016a34:	4463      	add	r3, ip
 8016a36:	603b      	str	r3, [r7, #0]
 8016a38:	6823      	ldr	r3, [r4, #0]
 8016a3a:	449c      	add	ip, r3
 8016a3c:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 8016a40:	6033      	str	r3, [r6, #0]
 8016a42:	f000 f8e7 	bl	8016c14 <uxr_seq_num_cmp>
 8016a46:	2800      	cmp	r0, #0
 8016a48:	dd01      	ble.n	8016a4e <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 8016a4a:	2000      	movs	r0, #0
 8016a4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a4e:	7b23      	ldrb	r3, [r4, #12]
 8016a50:	6832      	ldr	r2, [r6, #0]
 8016a52:	429a      	cmp	r2, r3
 8016a54:	d9f9      	bls.n	8016a4a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016a56:	8a61      	ldrh	r1, [r4, #18]
 8016a58:	8a20      	ldrh	r0, [r4, #16]
 8016a5a:	f000 f8d7 	bl	8016c0c <uxr_seq_num_sub>
 8016a5e:	8923      	ldrh	r3, [r4, #8]
 8016a60:	4283      	cmp	r3, r0
 8016a62:	d0f2      	beq.n	8016a4a <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 8016a64:	8828      	ldrh	r0, [r5, #0]
 8016a66:	89e3      	ldrh	r3, [r4, #14]
 8016a68:	8220      	strh	r0, [r4, #16]
 8016a6a:	4298      	cmp	r0, r3
 8016a6c:	d001      	beq.n	8016a72 <uxr_prepare_next_reliable_buffer_to_send+0x72>
 8016a6e:	2001      	movs	r0, #1
 8016a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a72:	2101      	movs	r1, #1
 8016a74:	f000 f8c6 	bl	8016c04 <uxr_seq_num_add>
 8016a78:	81e0      	strh	r0, [r4, #14]
 8016a7a:	2001      	movs	r0, #1
 8016a7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016a7e:	bf00      	nop

08016a80 <uxr_update_output_stream_heartbeat_timestamp>:
 8016a80:	b570      	push	{r4, r5, r6, lr}
 8016a82:	8a01      	ldrh	r1, [r0, #16]
 8016a84:	4604      	mov	r4, r0
 8016a86:	8a40      	ldrh	r0, [r0, #18]
 8016a88:	4615      	mov	r5, r2
 8016a8a:	461e      	mov	r6, r3
 8016a8c:	f000 f8c2 	bl	8016c14 <uxr_seq_num_cmp>
 8016a90:	2800      	cmp	r0, #0
 8016a92:	db07      	blt.n	8016aa4 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8016a94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8016a98:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8016a9c:	e9c4 2306 	strd	r2, r3, [r4, #24]
 8016aa0:	2000      	movs	r0, #0
 8016aa2:	bd70      	pop	{r4, r5, r6, pc}
 8016aa4:	f894 0020 	ldrb.w	r0, [r4, #32]
 8016aa8:	b940      	cbnz	r0, 8016abc <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8016aaa:	2301      	movs	r3, #1
 8016aac:	f884 3020 	strb.w	r3, [r4, #32]
 8016ab0:	3564      	adds	r5, #100	@ 0x64
 8016ab2:	f146 0600 	adc.w	r6, r6, #0
 8016ab6:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8016aba:	bd70      	pop	{r4, r5, r6, pc}
 8016abc:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 8016ac0:	4295      	cmp	r5, r2
 8016ac2:	eb76 0303 	sbcs.w	r3, r6, r3
 8016ac6:	bfa5      	ittet	ge
 8016ac8:	3001      	addge	r0, #1
 8016aca:	f884 0020 	strbge.w	r0, [r4, #32]
 8016ace:	2000      	movlt	r0, #0
 8016ad0:	2001      	movge	r0, #1
 8016ad2:	e7ed      	b.n	8016ab0 <uxr_update_output_stream_heartbeat_timestamp+0x30>

08016ad4 <uxr_begin_output_nack_buffer_it>:
 8016ad4:	8a40      	ldrh	r0, [r0, #18]
 8016ad6:	4770      	bx	lr

08016ad8 <uxr_next_reliable_nack_buffer_to_send>:
 8016ad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016adc:	f890 8021 	ldrb.w	r8, [r0, #33]	@ 0x21
 8016ae0:	b082      	sub	sp, #8
 8016ae2:	f1b8 0f00 	cmp.w	r8, #0
 8016ae6:	d011      	beq.n	8016b0c <uxr_next_reliable_nack_buffer_to_send+0x34>
 8016ae8:	4604      	mov	r4, r0
 8016aea:	8818      	ldrh	r0, [r3, #0]
 8016aec:	460e      	mov	r6, r1
 8016aee:	4617      	mov	r7, r2
 8016af0:	461d      	mov	r5, r3
 8016af2:	2101      	movs	r1, #1
 8016af4:	f000 f886 	bl	8016c04 <uxr_seq_num_add>
 8016af8:	8028      	strh	r0, [r5, #0]
 8016afa:	8a21      	ldrh	r1, [r4, #16]
 8016afc:	f000 f88a 	bl	8016c14 <uxr_seq_num_cmp>
 8016b00:	2800      	cmp	r0, #0
 8016b02:	dd07      	ble.n	8016b14 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8016b04:	f04f 0800 	mov.w	r8, #0
 8016b08:	f884 8021 	strb.w	r8, [r4, #33]	@ 0x21
 8016b0c:	4640      	mov	r0, r8
 8016b0e:	b002      	add	sp, #8
 8016b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016b14:	8921      	ldrh	r1, [r4, #8]
 8016b16:	8828      	ldrh	r0, [r5, #0]
 8016b18:	6823      	ldr	r3, [r4, #0]
 8016b1a:	fbb0 f2f1 	udiv	r2, r0, r1
 8016b1e:	fb01 0c12 	mls	ip, r1, r2, r0
 8016b22:	fa1f f28c 	uxth.w	r2, ip
 8016b26:	9301      	str	r3, [sp, #4]
 8016b28:	6863      	ldr	r3, [r4, #4]
 8016b2a:	fbb3 fcf1 	udiv	ip, r3, r1
 8016b2e:	9b01      	ldr	r3, [sp, #4]
 8016b30:	fb02 fc0c 	mul.w	ip, r2, ip
 8016b34:	f10c 0c04 	add.w	ip, ip, #4
 8016b38:	4463      	add	r3, ip
 8016b3a:	6033      	str	r3, [r6, #0]
 8016b3c:	6823      	ldr	r3, [r4, #0]
 8016b3e:	4463      	add	r3, ip
 8016b40:	f853 3c04 	ldr.w	r3, [r3, #-4]
 8016b44:	603b      	str	r3, [r7, #0]
 8016b46:	7b22      	ldrb	r2, [r4, #12]
 8016b48:	429a      	cmp	r2, r3
 8016b4a:	d0d2      	beq.n	8016af2 <uxr_next_reliable_nack_buffer_to_send+0x1a>
 8016b4c:	4640      	mov	r0, r8
 8016b4e:	b002      	add	sp, #8
 8016b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08016b54 <uxr_process_acknack>:
 8016b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b56:	4604      	mov	r4, r0
 8016b58:	460e      	mov	r6, r1
 8016b5a:	4610      	mov	r0, r2
 8016b5c:	2101      	movs	r1, #1
 8016b5e:	f000 f855 	bl	8016c0c <uxr_seq_num_sub>
 8016b62:	8a61      	ldrh	r1, [r4, #18]
 8016b64:	f000 f852 	bl	8016c0c <uxr_seq_num_sub>
 8016b68:	b1c0      	cbz	r0, 8016b9c <uxr_process_acknack+0x48>
 8016b6a:	4605      	mov	r5, r0
 8016b6c:	2700      	movs	r7, #0
 8016b6e:	2101      	movs	r1, #1
 8016b70:	8a60      	ldrh	r0, [r4, #18]
 8016b72:	f000 f847 	bl	8016c04 <uxr_seq_num_add>
 8016b76:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8016b7a:	fbb0 f1fc 	udiv	r1, r0, ip
 8016b7e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8016b82:	fb0c 0111 	mls	r1, ip, r1, r0
 8016b86:	b289      	uxth	r1, r1
 8016b88:	3701      	adds	r7, #1
 8016b8a:	fbb3 f3fc 	udiv	r3, r3, ip
 8016b8e:	fb01 f303 	mul.w	r3, r1, r3
 8016b92:	42bd      	cmp	r5, r7
 8016b94:	7b21      	ldrb	r1, [r4, #12]
 8016b96:	8260      	strh	r0, [r4, #18]
 8016b98:	50d1      	str	r1, [r2, r3]
 8016b9a:	d1e8      	bne.n	8016b6e <uxr_process_acknack+0x1a>
 8016b9c:	3e00      	subs	r6, #0
 8016b9e:	f04f 0300 	mov.w	r3, #0
 8016ba2:	bf18      	it	ne
 8016ba4:	2601      	movne	r6, #1
 8016ba6:	f884 3020 	strb.w	r3, [r4, #32]
 8016baa:	f884 6021 	strb.w	r6, [r4, #33]	@ 0x21
 8016bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016bb0 <uxr_is_output_up_to_date>:
 8016bb0:	8a01      	ldrh	r1, [r0, #16]
 8016bb2:	8a40      	ldrh	r0, [r0, #18]
 8016bb4:	b508      	push	{r3, lr}
 8016bb6:	f000 f82d 	bl	8016c14 <uxr_seq_num_cmp>
 8016bba:	fab0 f080 	clz	r0, r0
 8016bbe:	0940      	lsrs	r0, r0, #5
 8016bc0:	bd08      	pop	{r3, pc}
 8016bc2:	bf00      	nop

08016bc4 <get_available_free_slots>:
 8016bc4:	8902      	ldrh	r2, [r0, #8]
 8016bc6:	b1da      	cbz	r2, 8016c00 <get_available_free_slots+0x3c>
 8016bc8:	b530      	push	{r4, r5, lr}
 8016bca:	2100      	movs	r1, #0
 8016bcc:	6843      	ldr	r3, [r0, #4]
 8016bce:	6805      	ldr	r5, [r0, #0]
 8016bd0:	7b04      	ldrb	r4, [r0, #12]
 8016bd2:	fbb3 fef2 	udiv	lr, r3, r2
 8016bd6:	4608      	mov	r0, r1
 8016bd8:	460b      	mov	r3, r1
 8016bda:	fbb3 fcf2 	udiv	ip, r3, r2
 8016bde:	fb02 331c 	mls	r3, r2, ip, r3
 8016be2:	b29b      	uxth	r3, r3
 8016be4:	fb0e f303 	mul.w	r3, lr, r3
 8016be8:	3101      	adds	r1, #1
 8016bea:	f855 c003 	ldr.w	ip, [r5, r3]
 8016bee:	4564      	cmp	r4, ip
 8016bf0:	bf08      	it	eq
 8016bf2:	3001      	addeq	r0, #1
 8016bf4:	b28b      	uxth	r3, r1
 8016bf6:	bf08      	it	eq
 8016bf8:	b280      	uxtheq	r0, r0
 8016bfa:	4293      	cmp	r3, r2
 8016bfc:	d3ed      	bcc.n	8016bda <get_available_free_slots+0x16>
 8016bfe:	bd30      	pop	{r4, r5, pc}
 8016c00:	4610      	mov	r0, r2
 8016c02:	4770      	bx	lr

08016c04 <uxr_seq_num_add>:
 8016c04:	4408      	add	r0, r1
 8016c06:	b280      	uxth	r0, r0
 8016c08:	4770      	bx	lr
 8016c0a:	bf00      	nop

08016c0c <uxr_seq_num_sub>:
 8016c0c:	1a40      	subs	r0, r0, r1
 8016c0e:	b280      	uxth	r0, r0
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop

08016c14 <uxr_seq_num_cmp>:
 8016c14:	4288      	cmp	r0, r1
 8016c16:	d011      	beq.n	8016c3c <uxr_seq_num_cmp+0x28>
 8016c18:	d309      	bcc.n	8016c2e <uxr_seq_num_cmp+0x1a>
 8016c1a:	4288      	cmp	r0, r1
 8016c1c:	d910      	bls.n	8016c40 <uxr_seq_num_cmp+0x2c>
 8016c1e:	1a40      	subs	r0, r0, r1
 8016c20:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8016c24:	bfd4      	ite	le
 8016c26:	2001      	movle	r0, #1
 8016c28:	f04f 30ff 	movgt.w	r0, #4294967295	@ 0xffffffff
 8016c2c:	4770      	bx	lr
 8016c2e:	1a0b      	subs	r3, r1, r0
 8016c30:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016c34:	daf1      	bge.n	8016c1a <uxr_seq_num_cmp+0x6>
 8016c36:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8016c3a:	4770      	bx	lr
 8016c3c:	2000      	movs	r0, #0
 8016c3e:	4770      	bx	lr
 8016c40:	2001      	movs	r0, #1
 8016c42:	4770      	bx	lr

08016c44 <rcl_get_default_domain_id>:
 8016c44:	b530      	push	{r4, r5, lr}
 8016c46:	b083      	sub	sp, #12
 8016c48:	2300      	movs	r3, #0
 8016c4a:	9300      	str	r3, [sp, #0]
 8016c4c:	b1d0      	cbz	r0, 8016c84 <rcl_get_default_domain_id+0x40>
 8016c4e:	4604      	mov	r4, r0
 8016c50:	4669      	mov	r1, sp
 8016c52:	4815      	ldr	r0, [pc, #84]	@ (8016ca8 <rcl_get_default_domain_id+0x64>)
 8016c54:	f7fd ff58 	bl	8014b08 <rcutils_get_env>
 8016c58:	4602      	mov	r2, r0
 8016c5a:	b110      	cbz	r0, 8016c62 <rcl_get_default_domain_id+0x1e>
 8016c5c:	2001      	movs	r0, #1
 8016c5e:	b003      	add	sp, #12
 8016c60:	bd30      	pop	{r4, r5, pc}
 8016c62:	9b00      	ldr	r3, [sp, #0]
 8016c64:	b18b      	cbz	r3, 8016c8a <rcl_get_default_domain_id+0x46>
 8016c66:	7818      	ldrb	r0, [r3, #0]
 8016c68:	2800      	cmp	r0, #0
 8016c6a:	d0f8      	beq.n	8016c5e <rcl_get_default_domain_id+0x1a>
 8016c6c:	a901      	add	r1, sp, #4
 8016c6e:	4618      	mov	r0, r3
 8016c70:	9201      	str	r2, [sp, #4]
 8016c72:	f000 fdc9 	bl	8017808 <strtoul>
 8016c76:	4605      	mov	r5, r0
 8016c78:	b150      	cbz	r0, 8016c90 <rcl_get_default_domain_id+0x4c>
 8016c7a:	1c43      	adds	r3, r0, #1
 8016c7c:	d00d      	beq.n	8016c9a <rcl_get_default_domain_id+0x56>
 8016c7e:	6025      	str	r5, [r4, #0]
 8016c80:	2000      	movs	r0, #0
 8016c82:	e7ec      	b.n	8016c5e <rcl_get_default_domain_id+0x1a>
 8016c84:	200b      	movs	r0, #11
 8016c86:	b003      	add	sp, #12
 8016c88:	bd30      	pop	{r4, r5, pc}
 8016c8a:	4618      	mov	r0, r3
 8016c8c:	b003      	add	sp, #12
 8016c8e:	bd30      	pop	{r4, r5, pc}
 8016c90:	9b01      	ldr	r3, [sp, #4]
 8016c92:	781b      	ldrb	r3, [r3, #0]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d0f2      	beq.n	8016c7e <rcl_get_default_domain_id+0x3a>
 8016c98:	e7e0      	b.n	8016c5c <rcl_get_default_domain_id+0x18>
 8016c9a:	f001 f801 	bl	8017ca0 <__errno>
 8016c9e:	6803      	ldr	r3, [r0, #0]
 8016ca0:	2b22      	cmp	r3, #34	@ 0x22
 8016ca2:	d1ec      	bne.n	8016c7e <rcl_get_default_domain_id+0x3a>
 8016ca4:	e7da      	b.n	8016c5c <rcl_get_default_domain_id+0x18>
 8016ca6:	bf00      	nop
 8016ca8:	08019734 	.word	0x08019734

08016cac <rcl_expand_topic_name>:
 8016cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016cb0:	b08b      	sub	sp, #44	@ 0x2c
 8016cb2:	9306      	str	r3, [sp, #24]
 8016cb4:	2800      	cmp	r0, #0
 8016cb6:	f000 80ad 	beq.w	8016e14 <rcl_expand_topic_name+0x168>
 8016cba:	460e      	mov	r6, r1
 8016cbc:	2900      	cmp	r1, #0
 8016cbe:	f000 80a9 	beq.w	8016e14 <rcl_expand_topic_name+0x168>
 8016cc2:	4617      	mov	r7, r2
 8016cc4:	2a00      	cmp	r2, #0
 8016cc6:	f000 80a5 	beq.w	8016e14 <rcl_expand_topic_name+0x168>
 8016cca:	2b00      	cmp	r3, #0
 8016ccc:	f000 80a2 	beq.w	8016e14 <rcl_expand_topic_name+0x168>
 8016cd0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	f000 809e 	beq.w	8016e14 <rcl_expand_topic_name+0x168>
 8016cd8:	2200      	movs	r2, #0
 8016cda:	a909      	add	r1, sp, #36	@ 0x24
 8016cdc:	4680      	mov	r8, r0
 8016cde:	f000 fa57 	bl	8017190 <rcl_validate_topic_name>
 8016ce2:	4604      	mov	r4, r0
 8016ce4:	2800      	cmp	r0, #0
 8016ce6:	f040 8096 	bne.w	8016e16 <rcl_expand_topic_name+0x16a>
 8016cea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	f040 809a 	bne.w	8016e26 <rcl_expand_topic_name+0x17a>
 8016cf2:	4602      	mov	r2, r0
 8016cf4:	a909      	add	r1, sp, #36	@ 0x24
 8016cf6:	4630      	mov	r0, r6
 8016cf8:	f7fe fb30 	bl	801535c <rmw_validate_node_name>
 8016cfc:	2800      	cmp	r0, #0
 8016cfe:	f040 808e 	bne.w	8016e1e <rcl_expand_topic_name+0x172>
 8016d02:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016d04:	2a00      	cmp	r2, #0
 8016d06:	f040 8093 	bne.w	8016e30 <rcl_expand_topic_name+0x184>
 8016d0a:	a909      	add	r1, sp, #36	@ 0x24
 8016d0c:	4638      	mov	r0, r7
 8016d0e:	f7fe fb07 	bl	8015320 <rmw_validate_namespace>
 8016d12:	2800      	cmp	r0, #0
 8016d14:	f040 8083 	bne.w	8016e1e <rcl_expand_topic_name+0x172>
 8016d18:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8016d1a:	2c00      	cmp	r4, #0
 8016d1c:	f040 80ed 	bne.w	8016efa <rcl_expand_topic_name+0x24e>
 8016d20:	217b      	movs	r1, #123	@ 0x7b
 8016d22:	4640      	mov	r0, r8
 8016d24:	f000 ff30 	bl	8017b88 <strchr>
 8016d28:	f898 3000 	ldrb.w	r3, [r8]
 8016d2c:	2b2f      	cmp	r3, #47	@ 0x2f
 8016d2e:	4605      	mov	r5, r0
 8016d30:	f000 809e 	beq.w	8016e70 <rcl_expand_topic_name+0x1c4>
 8016d34:	2b7e      	cmp	r3, #126	@ 0x7e
 8016d36:	f040 80a2 	bne.w	8016e7e <rcl_expand_topic_name+0x1d2>
 8016d3a:	4638      	mov	r0, r7
 8016d3c:	f7e9 fa7a 	bl	8000234 <strlen>
 8016d40:	4a82      	ldr	r2, [pc, #520]	@ (8016f4c <rcl_expand_topic_name+0x2a0>)
 8016d42:	4b83      	ldr	r3, [pc, #524]	@ (8016f50 <rcl_expand_topic_name+0x2a4>)
 8016d44:	2801      	cmp	r0, #1
 8016d46:	bf18      	it	ne
 8016d48:	4613      	movne	r3, r2
 8016d4a:	9302      	str	r3, [sp, #8]
 8016d4c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016d4e:	9300      	str	r3, [sp, #0]
 8016d50:	e9cd 7603 	strd	r7, r6, [sp, #12]
 8016d54:	f108 0301 	add.w	r3, r8, #1
 8016d58:	9305      	str	r3, [sp, #20]
 8016d5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8016d5e:	9301      	str	r3, [sp, #4]
 8016d60:	ab14      	add	r3, sp, #80	@ 0x50
 8016d62:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016d64:	f7fd fef8 	bl	8014b58 <rcutils_format_string_limit>
 8016d68:	4682      	mov	sl, r0
 8016d6a:	2800      	cmp	r0, #0
 8016d6c:	f000 80c7 	beq.w	8016efe <rcl_expand_topic_name+0x252>
 8016d70:	2d00      	cmp	r5, #0
 8016d72:	f000 80a2 	beq.w	8016eba <rcl_expand_topic_name+0x20e>
 8016d76:	217b      	movs	r1, #123	@ 0x7b
 8016d78:	f000 ff06 	bl	8017b88 <strchr>
 8016d7c:	46d1      	mov	r9, sl
 8016d7e:	4605      	mov	r5, r0
 8016d80:	9407      	str	r4, [sp, #28]
 8016d82:	46d3      	mov	fp, sl
 8016d84:	464c      	mov	r4, r9
 8016d86:	2d00      	cmp	r5, #0
 8016d88:	f000 80be 	beq.w	8016f08 <rcl_expand_topic_name+0x25c>
 8016d8c:	217d      	movs	r1, #125	@ 0x7d
 8016d8e:	4620      	mov	r0, r4
 8016d90:	f000 fefa 	bl	8017b88 <strchr>
 8016d94:	eba0 0905 	sub.w	r9, r0, r5
 8016d98:	f109 0a01 	add.w	sl, r9, #1
 8016d9c:	486d      	ldr	r0, [pc, #436]	@ (8016f54 <rcl_expand_topic_name+0x2a8>)
 8016d9e:	4652      	mov	r2, sl
 8016da0:	4629      	mov	r1, r5
 8016da2:	f000 fefe 	bl	8017ba2 <strncmp>
 8016da6:	2800      	cmp	r0, #0
 8016da8:	d067      	beq.n	8016e7a <rcl_expand_topic_name+0x1ce>
 8016daa:	486b      	ldr	r0, [pc, #428]	@ (8016f58 <rcl_expand_topic_name+0x2ac>)
 8016dac:	4652      	mov	r2, sl
 8016dae:	4629      	mov	r1, r5
 8016db0:	f000 fef7 	bl	8017ba2 <strncmp>
 8016db4:	b130      	cbz	r0, 8016dc4 <rcl_expand_topic_name+0x118>
 8016db6:	4869      	ldr	r0, [pc, #420]	@ (8016f5c <rcl_expand_topic_name+0x2b0>)
 8016db8:	4652      	mov	r2, sl
 8016dba:	4629      	mov	r1, r5
 8016dbc:	f000 fef1 	bl	8017ba2 <strncmp>
 8016dc0:	2800      	cmp	r0, #0
 8016dc2:	d137      	bne.n	8016e34 <rcl_expand_topic_name+0x188>
 8016dc4:	46b9      	mov	r9, r7
 8016dc6:	ab16      	add	r3, sp, #88	@ 0x58
 8016dc8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8016dcc:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016dd0:	ab14      	add	r3, sp, #80	@ 0x50
 8016dd2:	4628      	mov	r0, r5
 8016dd4:	cb0c      	ldmia	r3, {r2, r3}
 8016dd6:	4651      	mov	r1, sl
 8016dd8:	f7fd fffa 	bl	8014dd0 <rcutils_strndup>
 8016ddc:	4605      	mov	r5, r0
 8016dde:	2800      	cmp	r0, #0
 8016de0:	f000 809c 	beq.w	8016f1c <rcl_expand_topic_name+0x270>
 8016de4:	464a      	mov	r2, r9
 8016de6:	4620      	mov	r0, r4
 8016de8:	ab14      	add	r3, sp, #80	@ 0x50
 8016dea:	4629      	mov	r1, r5
 8016dec:	f7fd feee 	bl	8014bcc <rcutils_repl_str>
 8016df0:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016df2:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016df4:	4604      	mov	r4, r0
 8016df6:	4628      	mov	r0, r5
 8016df8:	4798      	blx	r3
 8016dfa:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016dfc:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016dfe:	4658      	mov	r0, fp
 8016e00:	4798      	blx	r3
 8016e02:	2c00      	cmp	r4, #0
 8016e04:	d07b      	beq.n	8016efe <rcl_expand_topic_name+0x252>
 8016e06:	217b      	movs	r1, #123	@ 0x7b
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f000 febd 	bl	8017b88 <strchr>
 8016e0e:	46a3      	mov	fp, r4
 8016e10:	4605      	mov	r5, r0
 8016e12:	e7b8      	b.n	8016d86 <rcl_expand_topic_name+0xda>
 8016e14:	240b      	movs	r4, #11
 8016e16:	4620      	mov	r0, r4
 8016e18:	b00b      	add	sp, #44	@ 0x2c
 8016e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e1e:	f7fb f8a1 	bl	8011f64 <rcl_convert_rmw_ret_to_rcl_ret>
 8016e22:	4604      	mov	r4, r0
 8016e24:	e7f7      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016e26:	2467      	movs	r4, #103	@ 0x67
 8016e28:	4620      	mov	r0, r4
 8016e2a:	b00b      	add	sp, #44	@ 0x2c
 8016e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e30:	24c9      	movs	r4, #201	@ 0xc9
 8016e32:	e7f0      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016e34:	f109 32ff 	add.w	r2, r9, #4294967295	@ 0xffffffff
 8016e38:	9806      	ldr	r0, [sp, #24]
 8016e3a:	1c69      	adds	r1, r5, #1
 8016e3c:	f7fe f8e2 	bl	8015004 <rcutils_string_map_getn>
 8016e40:	4681      	mov	r9, r0
 8016e42:	2800      	cmp	r0, #0
 8016e44:	d1bf      	bne.n	8016dc6 <rcl_expand_topic_name+0x11a>
 8016e46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016e48:	aa16      	add	r2, sp, #88	@ 0x58
 8016e4a:	6018      	str	r0, [r3, #0]
 8016e4c:	ca07      	ldmia	r2, {r0, r1, r2}
 8016e4e:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 8016e52:	ab14      	add	r3, sp, #80	@ 0x50
 8016e54:	cb0c      	ldmia	r3, {r2, r3}
 8016e56:	4651      	mov	r1, sl
 8016e58:	4628      	mov	r0, r5
 8016e5a:	f7fd ffb9 	bl	8014dd0 <rcutils_strndup>
 8016e5e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e60:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e62:	4798      	blx	r3
 8016e64:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016e66:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016e68:	4658      	mov	r0, fp
 8016e6a:	2469      	movs	r4, #105	@ 0x69
 8016e6c:	4798      	blx	r3
 8016e6e:	e7d2      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016e70:	2800      	cmp	r0, #0
 8016e72:	d05b      	beq.n	8016f2c <rcl_expand_topic_name+0x280>
 8016e74:	46c1      	mov	r9, r8
 8016e76:	46a2      	mov	sl, r4
 8016e78:	e782      	b.n	8016d80 <rcl_expand_topic_name+0xd4>
 8016e7a:	46b1      	mov	r9, r6
 8016e7c:	e7a3      	b.n	8016dc6 <rcl_expand_topic_name+0x11a>
 8016e7e:	2800      	cmp	r0, #0
 8016e80:	d1f8      	bne.n	8016e74 <rcl_expand_topic_name+0x1c8>
 8016e82:	4638      	mov	r0, r7
 8016e84:	f7e9 f9d6 	bl	8000234 <strlen>
 8016e88:	4a35      	ldr	r2, [pc, #212]	@ (8016f60 <rcl_expand_topic_name+0x2b4>)
 8016e8a:	4b36      	ldr	r3, [pc, #216]	@ (8016f64 <rcl_expand_topic_name+0x2b8>)
 8016e8c:	f8cd 8010 	str.w	r8, [sp, #16]
 8016e90:	2801      	cmp	r0, #1
 8016e92:	bf18      	it	ne
 8016e94:	4613      	movne	r3, r2
 8016e96:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016e9a:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016e9e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016ea0:	9703      	str	r7, [sp, #12]
 8016ea2:	9200      	str	r2, [sp, #0]
 8016ea4:	ab14      	add	r3, sp, #80	@ 0x50
 8016ea6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ea8:	f7fd fe56 	bl	8014b58 <rcutils_format_string_limit>
 8016eac:	4682      	mov	sl, r0
 8016eae:	4653      	mov	r3, sl
 8016eb0:	b32b      	cbz	r3, 8016efe <rcl_expand_topic_name+0x252>
 8016eb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016eb4:	f8c3 a000 	str.w	sl, [r3]
 8016eb8:	e7ad      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016eba:	f89a 3000 	ldrb.w	r3, [sl]
 8016ebe:	2b2f      	cmp	r3, #47	@ 0x2f
 8016ec0:	d0f7      	beq.n	8016eb2 <rcl_expand_topic_name+0x206>
 8016ec2:	4638      	mov	r0, r7
 8016ec4:	f7e9 f9b6 	bl	8000234 <strlen>
 8016ec8:	4a25      	ldr	r2, [pc, #148]	@ (8016f60 <rcl_expand_topic_name+0x2b4>)
 8016eca:	4b26      	ldr	r3, [pc, #152]	@ (8016f64 <rcl_expand_topic_name+0x2b8>)
 8016ecc:	f8cd a010 	str.w	sl, [sp, #16]
 8016ed0:	2801      	cmp	r0, #1
 8016ed2:	bf18      	it	ne
 8016ed4:	4613      	movne	r3, r2
 8016ed6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8016eda:	e9cd 1301 	strd	r1, r3, [sp, #4]
 8016ede:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016ee0:	9703      	str	r7, [sp, #12]
 8016ee2:	9200      	str	r2, [sp, #0]
 8016ee4:	ab14      	add	r3, sp, #80	@ 0x50
 8016ee6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8016ee8:	f7fd fe36 	bl	8014b58 <rcutils_format_string_limit>
 8016eec:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016eee:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016ef0:	4605      	mov	r5, r0
 8016ef2:	4650      	mov	r0, sl
 8016ef4:	4798      	blx	r3
 8016ef6:	46aa      	mov	sl, r5
 8016ef8:	e7d9      	b.n	8016eae <rcl_expand_topic_name+0x202>
 8016efa:	24ca      	movs	r4, #202	@ 0xca
 8016efc:	e78b      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016efe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f00:	2300      	movs	r3, #0
 8016f02:	6013      	str	r3, [r2, #0]
 8016f04:	240a      	movs	r4, #10
 8016f06:	e786      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016f08:	465b      	mov	r3, fp
 8016f0a:	9c07      	ldr	r4, [sp, #28]
 8016f0c:	46da      	mov	sl, fp
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d1d3      	bne.n	8016eba <rcl_expand_topic_name+0x20e>
 8016f12:	f898 3000 	ldrb.w	r3, [r8]
 8016f16:	2b2f      	cmp	r3, #47	@ 0x2f
 8016f18:	d0cb      	beq.n	8016eb2 <rcl_expand_topic_name+0x206>
 8016f1a:	e7b2      	b.n	8016e82 <rcl_expand_topic_name+0x1d6>
 8016f1c:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	@ 0x60
 8016f20:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016f22:	6015      	str	r5, [r2, #0]
 8016f24:	4658      	mov	r0, fp
 8016f26:	4798      	blx	r3
 8016f28:	240a      	movs	r4, #10
 8016f2a:	e774      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016f2c:	ab17      	add	r3, sp, #92	@ 0x5c
 8016f2e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8016f32:	e88d 0003 	stmia.w	sp, {r0, r1}
 8016f36:	ab14      	add	r3, sp, #80	@ 0x50
 8016f38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8016f3a:	4640      	mov	r0, r8
 8016f3c:	f7fd ff26 	bl	8014d8c <rcutils_strdup>
 8016f40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016f42:	2800      	cmp	r0, #0
 8016f44:	6018      	str	r0, [r3, #0]
 8016f46:	bf08      	it	eq
 8016f48:	240a      	moveq	r4, #10
 8016f4a:	e764      	b.n	8016e16 <rcl_expand_topic_name+0x16a>
 8016f4c:	08019744 	.word	0x08019744
 8016f50:	08018fa0 	.word	0x08018fa0
 8016f54:	0801974c 	.word	0x0801974c
 8016f58:	08019754 	.word	0x08019754
 8016f5c:	0801975c 	.word	0x0801975c
 8016f60:	08018f8c 	.word	0x08018f8c
 8016f64:	08018fb0 	.word	0x08018fb0

08016f68 <rcl_get_default_topic_name_substitutions>:
 8016f68:	2800      	cmp	r0, #0
 8016f6a:	bf0c      	ite	eq
 8016f6c:	200b      	moveq	r0, #11
 8016f6e:	2000      	movne	r0, #0
 8016f70:	4770      	bx	lr
 8016f72:	bf00      	nop

08016f74 <rcl_get_zero_initialized_guard_condition>:
 8016f74:	4a03      	ldr	r2, [pc, #12]	@ (8016f84 <rcl_get_zero_initialized_guard_condition+0x10>)
 8016f76:	4603      	mov	r3, r0
 8016f78:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016f7c:	e883 0003 	stmia.w	r3, {r0, r1}
 8016f80:	4618      	mov	r0, r3
 8016f82:	4770      	bx	lr
 8016f84:	08019768 	.word	0x08019768

08016f88 <rcl_guard_condition_init>:
 8016f88:	b082      	sub	sp, #8
 8016f8a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016f8c:	b087      	sub	sp, #28
 8016f8e:	ac0c      	add	r4, sp, #48	@ 0x30
 8016f90:	e884 000c 	stmia.w	r4, {r2, r3}
 8016f94:	46a6      	mov	lr, r4
 8016f96:	460d      	mov	r5, r1
 8016f98:	4604      	mov	r4, r0
 8016f9a:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8016f9e:	f10d 0c04 	add.w	ip, sp, #4
 8016fa2:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8016fa6:	f8de 3000 	ldr.w	r3, [lr]
 8016faa:	f8cc 3000 	str.w	r3, [ip]
 8016fae:	a801      	add	r0, sp, #4
 8016fb0:	f7f6 f9a4 	bl	800d2fc <rcutils_allocator_is_valid>
 8016fb4:	b338      	cbz	r0, 8017006 <rcl_guard_condition_init+0x7e>
 8016fb6:	b334      	cbz	r4, 8017006 <rcl_guard_condition_init+0x7e>
 8016fb8:	6866      	ldr	r6, [r4, #4]
 8016fba:	b9ee      	cbnz	r6, 8016ff8 <rcl_guard_condition_init+0x70>
 8016fbc:	b31d      	cbz	r5, 8017006 <rcl_guard_condition_init+0x7e>
 8016fbe:	4628      	mov	r0, r5
 8016fc0:	f7fa ffee 	bl	8011fa0 <rcl_context_is_valid>
 8016fc4:	b308      	cbz	r0, 801700a <rcl_guard_condition_init+0x82>
 8016fc6:	9b01      	ldr	r3, [sp, #4]
 8016fc8:	9905      	ldr	r1, [sp, #20]
 8016fca:	201c      	movs	r0, #28
 8016fcc:	4798      	blx	r3
 8016fce:	4607      	mov	r7, r0
 8016fd0:	6060      	str	r0, [r4, #4]
 8016fd2:	b310      	cbz	r0, 801701a <rcl_guard_condition_init+0x92>
 8016fd4:	6828      	ldr	r0, [r5, #0]
 8016fd6:	3028      	adds	r0, #40	@ 0x28
 8016fd8:	f000 f9ac 	bl	8017334 <rmw_create_guard_condition>
 8016fdc:	6038      	str	r0, [r7, #0]
 8016fde:	6860      	ldr	r0, [r4, #4]
 8016fe0:	6805      	ldr	r5, [r0, #0]
 8016fe2:	b1a5      	cbz	r5, 801700e <rcl_guard_condition_init+0x86>
 8016fe4:	2301      	movs	r3, #1
 8016fe6:	ac01      	add	r4, sp, #4
 8016fe8:	7103      	strb	r3, [r0, #4]
 8016fea:	f100 0708 	add.w	r7, r0, #8
 8016fee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8016ff0:	c70f      	stmia	r7!, {r0, r1, r2, r3}
 8016ff2:	6823      	ldr	r3, [r4, #0]
 8016ff4:	603b      	str	r3, [r7, #0]
 8016ff6:	e000      	b.n	8016ffa <rcl_guard_condition_init+0x72>
 8016ff8:	2664      	movs	r6, #100	@ 0x64
 8016ffa:	4630      	mov	r0, r6
 8016ffc:	b007      	add	sp, #28
 8016ffe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017002:	b002      	add	sp, #8
 8017004:	4770      	bx	lr
 8017006:	260b      	movs	r6, #11
 8017008:	e7f7      	b.n	8016ffa <rcl_guard_condition_init+0x72>
 801700a:	2665      	movs	r6, #101	@ 0x65
 801700c:	e7f5      	b.n	8016ffa <rcl_guard_condition_init+0x72>
 801700e:	9b02      	ldr	r3, [sp, #8]
 8017010:	9905      	ldr	r1, [sp, #20]
 8017012:	4798      	blx	r3
 8017014:	2601      	movs	r6, #1
 8017016:	6065      	str	r5, [r4, #4]
 8017018:	e7ef      	b.n	8016ffa <rcl_guard_condition_init+0x72>
 801701a:	260a      	movs	r6, #10
 801701c:	e7ed      	b.n	8016ffa <rcl_guard_condition_init+0x72>
 801701e:	bf00      	nop

08017020 <rcl_guard_condition_init_from_rmw>:
 8017020:	b082      	sub	sp, #8
 8017022:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017026:	b086      	sub	sp, #24
 8017028:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 801702c:	4604      	mov	r4, r0
 801702e:	f84c 3f04 	str.w	r3, [ip, #4]!
 8017032:	460e      	mov	r6, r1
 8017034:	4617      	mov	r7, r2
 8017036:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801703a:	f10d 0e04 	add.w	lr, sp, #4
 801703e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8017042:	f8dc 3000 	ldr.w	r3, [ip]
 8017046:	f8ce 3000 	str.w	r3, [lr]
 801704a:	a801      	add	r0, sp, #4
 801704c:	f7f6 f956 	bl	800d2fc <rcutils_allocator_is_valid>
 8017050:	b350      	cbz	r0, 80170a8 <rcl_guard_condition_init_from_rmw+0x88>
 8017052:	b34c      	cbz	r4, 80170a8 <rcl_guard_condition_init_from_rmw+0x88>
 8017054:	f8d4 8004 	ldr.w	r8, [r4, #4]
 8017058:	f1b8 0f00 	cmp.w	r8, #0
 801705c:	d11e      	bne.n	801709c <rcl_guard_condition_init_from_rmw+0x7c>
 801705e:	b31f      	cbz	r7, 80170a8 <rcl_guard_condition_init_from_rmw+0x88>
 8017060:	4638      	mov	r0, r7
 8017062:	f7fa ff9d 	bl	8011fa0 <rcl_context_is_valid>
 8017066:	b328      	cbz	r0, 80170b4 <rcl_guard_condition_init_from_rmw+0x94>
 8017068:	9b01      	ldr	r3, [sp, #4]
 801706a:	9905      	ldr	r1, [sp, #20]
 801706c:	201c      	movs	r0, #28
 801706e:	4798      	blx	r3
 8017070:	4605      	mov	r5, r0
 8017072:	6060      	str	r0, [r4, #4]
 8017074:	b358      	cbz	r0, 80170ce <rcl_guard_condition_init_from_rmw+0xae>
 8017076:	b1fe      	cbz	r6, 80170b8 <rcl_guard_condition_init_from_rmw+0x98>
 8017078:	6006      	str	r6, [r0, #0]
 801707a:	f880 8004 	strb.w	r8, [r0, #4]
 801707e:	ac01      	add	r4, sp, #4
 8017080:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8017082:	f105 0c08 	add.w	ip, r5, #8
 8017086:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801708a:	6823      	ldr	r3, [r4, #0]
 801708c:	f8cc 3000 	str.w	r3, [ip]
 8017090:	2000      	movs	r0, #0
 8017092:	b006      	add	sp, #24
 8017094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017098:	b002      	add	sp, #8
 801709a:	4770      	bx	lr
 801709c:	2064      	movs	r0, #100	@ 0x64
 801709e:	b006      	add	sp, #24
 80170a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170a4:	b002      	add	sp, #8
 80170a6:	4770      	bx	lr
 80170a8:	200b      	movs	r0, #11
 80170aa:	b006      	add	sp, #24
 80170ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80170b0:	b002      	add	sp, #8
 80170b2:	4770      	bx	lr
 80170b4:	2065      	movs	r0, #101	@ 0x65
 80170b6:	e7f2      	b.n	801709e <rcl_guard_condition_init_from_rmw+0x7e>
 80170b8:	6838      	ldr	r0, [r7, #0]
 80170ba:	3028      	adds	r0, #40	@ 0x28
 80170bc:	f000 f93a 	bl	8017334 <rmw_create_guard_condition>
 80170c0:	6028      	str	r0, [r5, #0]
 80170c2:	6865      	ldr	r5, [r4, #4]
 80170c4:	682e      	ldr	r6, [r5, #0]
 80170c6:	b126      	cbz	r6, 80170d2 <rcl_guard_condition_init_from_rmw+0xb2>
 80170c8:	2301      	movs	r3, #1
 80170ca:	712b      	strb	r3, [r5, #4]
 80170cc:	e7d7      	b.n	801707e <rcl_guard_condition_init_from_rmw+0x5e>
 80170ce:	200a      	movs	r0, #10
 80170d0:	e7e5      	b.n	801709e <rcl_guard_condition_init_from_rmw+0x7e>
 80170d2:	4628      	mov	r0, r5
 80170d4:	9b02      	ldr	r3, [sp, #8]
 80170d6:	9905      	ldr	r1, [sp, #20]
 80170d8:	4798      	blx	r3
 80170da:	6066      	str	r6, [r4, #4]
 80170dc:	2001      	movs	r0, #1
 80170de:	e7de      	b.n	801709e <rcl_guard_condition_init_from_rmw+0x7e>

080170e0 <rcl_guard_condition_fini>:
 80170e0:	b570      	push	{r4, r5, r6, lr}
 80170e2:	b082      	sub	sp, #8
 80170e4:	b1f0      	cbz	r0, 8017124 <rcl_guard_condition_fini+0x44>
 80170e6:	6843      	ldr	r3, [r0, #4]
 80170e8:	4604      	mov	r4, r0
 80170ea:	b163      	cbz	r3, 8017106 <rcl_guard_condition_fini+0x26>
 80170ec:	6818      	ldr	r0, [r3, #0]
 80170ee:	68de      	ldr	r6, [r3, #12]
 80170f0:	6999      	ldr	r1, [r3, #24]
 80170f2:	b160      	cbz	r0, 801710e <rcl_guard_condition_fini+0x2e>
 80170f4:	791d      	ldrb	r5, [r3, #4]
 80170f6:	b965      	cbnz	r5, 8017112 <rcl_guard_condition_fini+0x32>
 80170f8:	4618      	mov	r0, r3
 80170fa:	47b0      	blx	r6
 80170fc:	2300      	movs	r3, #0
 80170fe:	4628      	mov	r0, r5
 8017100:	6063      	str	r3, [r4, #4]
 8017102:	b002      	add	sp, #8
 8017104:	bd70      	pop	{r4, r5, r6, pc}
 8017106:	461d      	mov	r5, r3
 8017108:	4628      	mov	r0, r5
 801710a:	b002      	add	sp, #8
 801710c:	bd70      	pop	{r4, r5, r6, pc}
 801710e:	4605      	mov	r5, r0
 8017110:	e7f2      	b.n	80170f8 <rcl_guard_condition_fini+0x18>
 8017112:	9101      	str	r1, [sp, #4]
 8017114:	f000 f922 	bl	801735c <rmw_destroy_guard_condition>
 8017118:	1e05      	subs	r5, r0, #0
 801711a:	6863      	ldr	r3, [r4, #4]
 801711c:	9901      	ldr	r1, [sp, #4]
 801711e:	bf18      	it	ne
 8017120:	2501      	movne	r5, #1
 8017122:	e7e9      	b.n	80170f8 <rcl_guard_condition_fini+0x18>
 8017124:	250b      	movs	r5, #11
 8017126:	4628      	mov	r0, r5
 8017128:	b002      	add	sp, #8
 801712a:	bd70      	pop	{r4, r5, r6, pc}

0801712c <rcl_guard_condition_get_default_options>:
 801712c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801712e:	b087      	sub	sp, #28
 8017130:	4606      	mov	r6, r0
 8017132:	4668      	mov	r0, sp
 8017134:	f7f6 f8d4 	bl	800d2e0 <rcutils_get_default_allocator>
 8017138:	4b09      	ldr	r3, [pc, #36]	@ (8017160 <rcl_guard_condition_get_default_options+0x34>)
 801713a:	46ee      	mov	lr, sp
 801713c:	469c      	mov	ip, r3
 801713e:	461d      	mov	r5, r3
 8017140:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8017144:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8017148:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801714a:	4634      	mov	r4, r6
 801714c:	f8de 7000 	ldr.w	r7, [lr]
 8017150:	f8cc 7000 	str.w	r7, [ip]
 8017154:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8017156:	4630      	mov	r0, r6
 8017158:	6027      	str	r7, [r4, #0]
 801715a:	b007      	add	sp, #28
 801715c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801715e:	bf00      	nop
 8017160:	2000b340 	.word	0x2000b340

08017164 <rcl_trigger_guard_condition>:
 8017164:	b148      	cbz	r0, 801717a <rcl_trigger_guard_condition+0x16>
 8017166:	b508      	push	{r3, lr}
 8017168:	6843      	ldr	r3, [r0, #4]
 801716a:	b143      	cbz	r3, 801717e <rcl_trigger_guard_condition+0x1a>
 801716c:	6818      	ldr	r0, [r3, #0]
 801716e:	f000 f909 	bl	8017384 <rmw_trigger_guard_condition>
 8017172:	3800      	subs	r0, #0
 8017174:	bf18      	it	ne
 8017176:	2001      	movne	r0, #1
 8017178:	bd08      	pop	{r3, pc}
 801717a:	200b      	movs	r0, #11
 801717c:	4770      	bx	lr
 801717e:	200b      	movs	r0, #11
 8017180:	bd08      	pop	{r3, pc}
 8017182:	bf00      	nop

08017184 <rcl_guard_condition_get_rmw_handle>:
 8017184:	b110      	cbz	r0, 801718c <rcl_guard_condition_get_rmw_handle+0x8>
 8017186:	6840      	ldr	r0, [r0, #4]
 8017188:	b100      	cbz	r0, 801718c <rcl_guard_condition_get_rmw_handle+0x8>
 801718a:	6800      	ldr	r0, [r0, #0]
 801718c:	4770      	bx	lr
 801718e:	bf00      	nop

08017190 <rcl_validate_topic_name>:
 8017190:	2800      	cmp	r0, #0
 8017192:	d07a      	beq.n	801728a <rcl_validate_topic_name+0xfa>
 8017194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017198:	460e      	mov	r6, r1
 801719a:	2900      	cmp	r1, #0
 801719c:	d07c      	beq.n	8017298 <rcl_validate_topic_name+0x108>
 801719e:	4617      	mov	r7, r2
 80171a0:	4605      	mov	r5, r0
 80171a2:	f7e9 f847 	bl	8000234 <strlen>
 80171a6:	b1b0      	cbz	r0, 80171d6 <rcl_validate_topic_name+0x46>
 80171a8:	f895 9000 	ldrb.w	r9, [r5]
 80171ac:	f8df c180 	ldr.w	ip, [pc, #384]	@ 8017330 <rcl_validate_topic_name+0x1a0>
 80171b0:	f81c 3009 	ldrb.w	r3, [ip, r9]
 80171b4:	f013 0304 	ands.w	r3, r3, #4
 80171b8:	d169      	bne.n	801728e <rcl_validate_topic_name+0xfe>
 80171ba:	f100 38ff 	add.w	r8, r0, #4294967295	@ 0xffffffff
 80171be:	f815 2008 	ldrb.w	r2, [r5, r8]
 80171c2:	2a2f      	cmp	r2, #47	@ 0x2f
 80171c4:	d10e      	bne.n	80171e4 <rcl_validate_topic_name+0x54>
 80171c6:	2202      	movs	r2, #2
 80171c8:	6032      	str	r2, [r6, #0]
 80171ca:	b36f      	cbz	r7, 8017228 <rcl_validate_topic_name+0x98>
 80171cc:	f8c7 8000 	str.w	r8, [r7]
 80171d0:	4618      	mov	r0, r3
 80171d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171d6:	2301      	movs	r3, #1
 80171d8:	6033      	str	r3, [r6, #0]
 80171da:	b32f      	cbz	r7, 8017228 <rcl_validate_topic_name+0x98>
 80171dc:	2000      	movs	r0, #0
 80171de:	6038      	str	r0, [r7, #0]
 80171e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80171e4:	f105 3aff 	add.w	sl, r5, #4294967295	@ 0xffffffff
 80171e8:	461c      	mov	r4, r3
 80171ea:	4619      	mov	r1, r3
 80171ec:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80171f0:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80171f4:	f1be 0f09 	cmp.w	lr, #9
 80171f8:	d919      	bls.n	801722e <rcl_validate_topic_name+0x9e>
 80171fa:	f022 0e20 	bic.w	lr, r2, #32
 80171fe:	f1ae 0e41 	sub.w	lr, lr, #65	@ 0x41
 8017202:	f1be 0f19 	cmp.w	lr, #25
 8017206:	d912      	bls.n	801722e <rcl_validate_topic_name+0x9e>
 8017208:	2a5f      	cmp	r2, #95	@ 0x5f
 801720a:	d019      	beq.n	8017240 <rcl_validate_topic_name+0xb0>
 801720c:	2a2f      	cmp	r2, #47	@ 0x2f
 801720e:	d051      	beq.n	80172b4 <rcl_validate_topic_name+0x124>
 8017210:	2a7e      	cmp	r2, #126	@ 0x7e
 8017212:	d048      	beq.n	80172a6 <rcl_validate_topic_name+0x116>
 8017214:	2a7b      	cmp	r2, #123	@ 0x7b
 8017216:	d054      	beq.n	80172c2 <rcl_validate_topic_name+0x132>
 8017218:	2a7d      	cmp	r2, #125	@ 0x7d
 801721a:	d161      	bne.n	80172e0 <rcl_validate_topic_name+0x150>
 801721c:	2c00      	cmp	r4, #0
 801721e:	d155      	bne.n	80172cc <rcl_validate_topic_name+0x13c>
 8017220:	2305      	movs	r3, #5
 8017222:	6033      	str	r3, [r6, #0]
 8017224:	b107      	cbz	r7, 8017228 <rcl_validate_topic_name+0x98>
 8017226:	6039      	str	r1, [r7, #0]
 8017228:	2000      	movs	r0, #0
 801722a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801722e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017232:	0752      	lsls	r2, r2, #29
 8017234:	d504      	bpl.n	8017240 <rcl_validate_topic_name+0xb0>
 8017236:	b11c      	cbz	r4, 8017240 <rcl_validate_topic_name+0xb0>
 8017238:	b111      	cbz	r1, 8017240 <rcl_validate_topic_name+0xb0>
 801723a:	1e4a      	subs	r2, r1, #1
 801723c:	429a      	cmp	r2, r3
 801723e:	d02d      	beq.n	801729c <rcl_validate_topic_name+0x10c>
 8017240:	3101      	adds	r1, #1
 8017242:	4288      	cmp	r0, r1
 8017244:	d1d2      	bne.n	80171ec <rcl_validate_topic_name+0x5c>
 8017246:	2c00      	cmp	r4, #0
 8017248:	d145      	bne.n	80172d6 <rcl_validate_topic_name+0x146>
 801724a:	f1b9 0f7e 	cmp.w	r9, #126	@ 0x7e
 801724e:	d04f      	beq.n	80172f0 <rcl_validate_topic_name+0x160>
 8017250:	4620      	mov	r0, r4
 8017252:	2301      	movs	r3, #1
 8017254:	e006      	b.n	8017264 <rcl_validate_topic_name+0xd4>
 8017256:	428b      	cmp	r3, r1
 8017258:	f105 0501 	add.w	r5, r5, #1
 801725c:	f103 0201 	add.w	r2, r3, #1
 8017260:	d236      	bcs.n	80172d0 <rcl_validate_topic_name+0x140>
 8017262:	4613      	mov	r3, r2
 8017264:	4580      	cmp	r8, r0
 8017266:	f100 0001 	add.w	r0, r0, #1
 801726a:	d0f4      	beq.n	8017256 <rcl_validate_topic_name+0xc6>
 801726c:	782a      	ldrb	r2, [r5, #0]
 801726e:	2a2f      	cmp	r2, #47	@ 0x2f
 8017270:	d1f1      	bne.n	8017256 <rcl_validate_topic_name+0xc6>
 8017272:	786a      	ldrb	r2, [r5, #1]
 8017274:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8017278:	0754      	lsls	r4, r2, #29
 801727a:	d5ec      	bpl.n	8017256 <rcl_validate_topic_name+0xc6>
 801727c:	2204      	movs	r2, #4
 801727e:	6032      	str	r2, [r6, #0]
 8017280:	2f00      	cmp	r7, #0
 8017282:	d0d1      	beq.n	8017228 <rcl_validate_topic_name+0x98>
 8017284:	603b      	str	r3, [r7, #0]
 8017286:	2000      	movs	r0, #0
 8017288:	e7aa      	b.n	80171e0 <rcl_validate_topic_name+0x50>
 801728a:	200b      	movs	r0, #11
 801728c:	4770      	bx	lr
 801728e:	2304      	movs	r3, #4
 8017290:	6033      	str	r3, [r6, #0]
 8017292:	2f00      	cmp	r7, #0
 8017294:	d1a2      	bne.n	80171dc <rcl_validate_topic_name+0x4c>
 8017296:	e7c7      	b.n	8017228 <rcl_validate_topic_name+0x98>
 8017298:	200b      	movs	r0, #11
 801729a:	e7a1      	b.n	80171e0 <rcl_validate_topic_name+0x50>
 801729c:	2309      	movs	r3, #9
 801729e:	6033      	str	r3, [r6, #0]
 80172a0:	2f00      	cmp	r7, #0
 80172a2:	d1c0      	bne.n	8017226 <rcl_validate_topic_name+0x96>
 80172a4:	e7c0      	b.n	8017228 <rcl_validate_topic_name+0x98>
 80172a6:	2900      	cmp	r1, #0
 80172a8:	d0ca      	beq.n	8017240 <rcl_validate_topic_name+0xb0>
 80172aa:	2306      	movs	r3, #6
 80172ac:	6033      	str	r3, [r6, #0]
 80172ae:	2f00      	cmp	r7, #0
 80172b0:	d1b9      	bne.n	8017226 <rcl_validate_topic_name+0x96>
 80172b2:	e7b9      	b.n	8017228 <rcl_validate_topic_name+0x98>
 80172b4:	2c00      	cmp	r4, #0
 80172b6:	d0c3      	beq.n	8017240 <rcl_validate_topic_name+0xb0>
 80172b8:	2308      	movs	r3, #8
 80172ba:	6033      	str	r3, [r6, #0]
 80172bc:	2f00      	cmp	r7, #0
 80172be:	d1b2      	bne.n	8017226 <rcl_validate_topic_name+0x96>
 80172c0:	e7b2      	b.n	8017228 <rcl_validate_topic_name+0x98>
 80172c2:	2c00      	cmp	r4, #0
 80172c4:	d1f8      	bne.n	80172b8 <rcl_validate_topic_name+0x128>
 80172c6:	460b      	mov	r3, r1
 80172c8:	2401      	movs	r4, #1
 80172ca:	e7b9      	b.n	8017240 <rcl_validate_topic_name+0xb0>
 80172cc:	2400      	movs	r4, #0
 80172ce:	e7b7      	b.n	8017240 <rcl_validate_topic_name+0xb0>
 80172d0:	2000      	movs	r0, #0
 80172d2:	6030      	str	r0, [r6, #0]
 80172d4:	e784      	b.n	80171e0 <rcl_validate_topic_name+0x50>
 80172d6:	2205      	movs	r2, #5
 80172d8:	6032      	str	r2, [r6, #0]
 80172da:	2f00      	cmp	r7, #0
 80172dc:	d1d2      	bne.n	8017284 <rcl_validate_topic_name+0xf4>
 80172de:	e7a3      	b.n	8017228 <rcl_validate_topic_name+0x98>
 80172e0:	2c00      	cmp	r4, #0
 80172e2:	bf14      	ite	ne
 80172e4:	2308      	movne	r3, #8
 80172e6:	2303      	moveq	r3, #3
 80172e8:	6033      	str	r3, [r6, #0]
 80172ea:	2f00      	cmp	r7, #0
 80172ec:	d19b      	bne.n	8017226 <rcl_validate_topic_name+0x96>
 80172ee:	e79b      	b.n	8017228 <rcl_validate_topic_name+0x98>
 80172f0:	2301      	movs	r3, #1
 80172f2:	e00a      	b.n	801730a <rcl_validate_topic_name+0x17a>
 80172f4:	2c01      	cmp	r4, #1
 80172f6:	d013      	beq.n	8017320 <rcl_validate_topic_name+0x190>
 80172f8:	4299      	cmp	r1, r3
 80172fa:	f104 0401 	add.w	r4, r4, #1
 80172fe:	f105 0501 	add.w	r5, r5, #1
 8017302:	f103 0201 	add.w	r2, r3, #1
 8017306:	d9e3      	bls.n	80172d0 <rcl_validate_topic_name+0x140>
 8017308:	4613      	mov	r3, r2
 801730a:	45a0      	cmp	r8, r4
 801730c:	d0f4      	beq.n	80172f8 <rcl_validate_topic_name+0x168>
 801730e:	782a      	ldrb	r2, [r5, #0]
 8017310:	2a2f      	cmp	r2, #47	@ 0x2f
 8017312:	d1ef      	bne.n	80172f4 <rcl_validate_topic_name+0x164>
 8017314:	786a      	ldrb	r2, [r5, #1]
 8017316:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801731a:	0752      	lsls	r2, r2, #29
 801731c:	d5ec      	bpl.n	80172f8 <rcl_validate_topic_name+0x168>
 801731e:	e7ad      	b.n	801727c <rcl_validate_topic_name+0xec>
 8017320:	2307      	movs	r3, #7
 8017322:	6033      	str	r3, [r6, #0]
 8017324:	2f00      	cmp	r7, #0
 8017326:	f43f af7f 	beq.w	8017228 <rcl_validate_topic_name+0x98>
 801732a:	603c      	str	r4, [r7, #0]
 801732c:	2000      	movs	r0, #0
 801732e:	e757      	b.n	80171e0 <rcl_validate_topic_name+0x50>
 8017330:	080197e0 	.word	0x080197e0

08017334 <rmw_create_guard_condition>:
 8017334:	b538      	push	{r3, r4, r5, lr}
 8017336:	4605      	mov	r5, r0
 8017338:	4807      	ldr	r0, [pc, #28]	@ (8017358 <rmw_create_guard_condition+0x24>)
 801733a:	f7fe f955 	bl	80155e8 <get_memory>
 801733e:	b148      	cbz	r0, 8017354 <rmw_create_guard_condition+0x20>
 8017340:	6884      	ldr	r4, [r0, #8]
 8017342:	2300      	movs	r3, #0
 8017344:	7423      	strb	r3, [r4, #16]
 8017346:	61e5      	str	r5, [r4, #28]
 8017348:	f7fe f9b6 	bl	80156b8 <rmw_get_implementation_identifier>
 801734c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8017350:	f104 0014 	add.w	r0, r4, #20
 8017354:	bd38      	pop	{r3, r4, r5, pc}
 8017356:	bf00      	nop
 8017358:	2000b1dc 	.word	0x2000b1dc

0801735c <rmw_destroy_guard_condition>:
 801735c:	b508      	push	{r3, lr}
 801735e:	4b08      	ldr	r3, [pc, #32]	@ (8017380 <rmw_destroy_guard_condition+0x24>)
 8017360:	6819      	ldr	r1, [r3, #0]
 8017362:	b911      	cbnz	r1, 801736a <rmw_destroy_guard_condition+0xe>
 8017364:	e00a      	b.n	801737c <rmw_destroy_guard_condition+0x20>
 8017366:	6849      	ldr	r1, [r1, #4]
 8017368:	b141      	cbz	r1, 801737c <rmw_destroy_guard_condition+0x20>
 801736a:	688b      	ldr	r3, [r1, #8]
 801736c:	3314      	adds	r3, #20
 801736e:	4298      	cmp	r0, r3
 8017370:	d1f9      	bne.n	8017366 <rmw_destroy_guard_condition+0xa>
 8017372:	4803      	ldr	r0, [pc, #12]	@ (8017380 <rmw_destroy_guard_condition+0x24>)
 8017374:	f7fe f948 	bl	8015608 <put_memory>
 8017378:	2000      	movs	r0, #0
 801737a:	bd08      	pop	{r3, pc}
 801737c:	2001      	movs	r0, #1
 801737e:	bd08      	pop	{r3, pc}
 8017380:	2000b1dc 	.word	0x2000b1dc

08017384 <rmw_trigger_guard_condition>:
 8017384:	b160      	cbz	r0, 80173a0 <rmw_trigger_guard_condition+0x1c>
 8017386:	b510      	push	{r4, lr}
 8017388:	4604      	mov	r4, r0
 801738a:	6800      	ldr	r0, [r0, #0]
 801738c:	f7f7 f9a2 	bl	800e6d4 <is_uxrce_rmw_identifier_valid>
 8017390:	b908      	cbnz	r0, 8017396 <rmw_trigger_guard_condition+0x12>
 8017392:	2001      	movs	r0, #1
 8017394:	bd10      	pop	{r4, pc}
 8017396:	6863      	ldr	r3, [r4, #4]
 8017398:	2201      	movs	r2, #1
 801739a:	741a      	strb	r2, [r3, #16]
 801739c:	2000      	movs	r0, #0
 801739e:	bd10      	pop	{r4, pc}
 80173a0:	2001      	movs	r0, #1
 80173a2:	4770      	bx	lr

080173a4 <calloc>:
 80173a4:	4b02      	ldr	r3, [pc, #8]	@ (80173b0 <calloc+0xc>)
 80173a6:	460a      	mov	r2, r1
 80173a8:	4601      	mov	r1, r0
 80173aa:	6818      	ldr	r0, [r3, #0]
 80173ac:	f000 b802 	b.w	80173b4 <_calloc_r>
 80173b0:	200001e4 	.word	0x200001e4

080173b4 <_calloc_r>:
 80173b4:	b570      	push	{r4, r5, r6, lr}
 80173b6:	fba1 5402 	umull	r5, r4, r1, r2
 80173ba:	b93c      	cbnz	r4, 80173cc <_calloc_r+0x18>
 80173bc:	4629      	mov	r1, r5
 80173be:	f000 f887 	bl	80174d0 <_malloc_r>
 80173c2:	4606      	mov	r6, r0
 80173c4:	b928      	cbnz	r0, 80173d2 <_calloc_r+0x1e>
 80173c6:	2600      	movs	r6, #0
 80173c8:	4630      	mov	r0, r6
 80173ca:	bd70      	pop	{r4, r5, r6, pc}
 80173cc:	220c      	movs	r2, #12
 80173ce:	6002      	str	r2, [r0, #0]
 80173d0:	e7f9      	b.n	80173c6 <_calloc_r+0x12>
 80173d2:	462a      	mov	r2, r5
 80173d4:	4621      	mov	r1, r4
 80173d6:	f000 fbcf 	bl	8017b78 <memset>
 80173da:	e7f5      	b.n	80173c8 <_calloc_r+0x14>

080173dc <getenv>:
 80173dc:	b507      	push	{r0, r1, r2, lr}
 80173de:	4b04      	ldr	r3, [pc, #16]	@ (80173f0 <getenv+0x14>)
 80173e0:	4601      	mov	r1, r0
 80173e2:	aa01      	add	r2, sp, #4
 80173e4:	6818      	ldr	r0, [r3, #0]
 80173e6:	f000 f805 	bl	80173f4 <_findenv_r>
 80173ea:	b003      	add	sp, #12
 80173ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80173f0:	200001e4 	.word	0x200001e4

080173f4 <_findenv_r>:
 80173f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f8:	f8df a06c 	ldr.w	sl, [pc, #108]	@ 8017468 <_findenv_r+0x74>
 80173fc:	4606      	mov	r6, r0
 80173fe:	4689      	mov	r9, r1
 8017400:	4617      	mov	r7, r2
 8017402:	f000 fcaf 	bl	8017d64 <__env_lock>
 8017406:	f8da 4000 	ldr.w	r4, [sl]
 801740a:	b134      	cbz	r4, 801741a <_findenv_r+0x26>
 801740c:	464b      	mov	r3, r9
 801740e:	4698      	mov	r8, r3
 8017410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017414:	b13a      	cbz	r2, 8017426 <_findenv_r+0x32>
 8017416:	2a3d      	cmp	r2, #61	@ 0x3d
 8017418:	d1f9      	bne.n	801740e <_findenv_r+0x1a>
 801741a:	4630      	mov	r0, r6
 801741c:	f000 fca8 	bl	8017d70 <__env_unlock>
 8017420:	2000      	movs	r0, #0
 8017422:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017426:	eba8 0809 	sub.w	r8, r8, r9
 801742a:	46a3      	mov	fp, r4
 801742c:	f854 0b04 	ldr.w	r0, [r4], #4
 8017430:	2800      	cmp	r0, #0
 8017432:	d0f2      	beq.n	801741a <_findenv_r+0x26>
 8017434:	4642      	mov	r2, r8
 8017436:	4649      	mov	r1, r9
 8017438:	f000 fbb3 	bl	8017ba2 <strncmp>
 801743c:	2800      	cmp	r0, #0
 801743e:	d1f4      	bne.n	801742a <_findenv_r+0x36>
 8017440:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8017444:	eb03 0508 	add.w	r5, r3, r8
 8017448:	f813 3008 	ldrb.w	r3, [r3, r8]
 801744c:	2b3d      	cmp	r3, #61	@ 0x3d
 801744e:	d1ec      	bne.n	801742a <_findenv_r+0x36>
 8017450:	f8da 3000 	ldr.w	r3, [sl]
 8017454:	ebab 0303 	sub.w	r3, fp, r3
 8017458:	109b      	asrs	r3, r3, #2
 801745a:	4630      	mov	r0, r6
 801745c:	603b      	str	r3, [r7, #0]
 801745e:	f000 fc87 	bl	8017d70 <__env_unlock>
 8017462:	1c68      	adds	r0, r5, #1
 8017464:	e7dd      	b.n	8017422 <_findenv_r+0x2e>
 8017466:	bf00      	nop
 8017468:	20000000 	.word	0x20000000

0801746c <malloc>:
 801746c:	4b02      	ldr	r3, [pc, #8]	@ (8017478 <malloc+0xc>)
 801746e:	4601      	mov	r1, r0
 8017470:	6818      	ldr	r0, [r3, #0]
 8017472:	f000 b82d 	b.w	80174d0 <_malloc_r>
 8017476:	bf00      	nop
 8017478:	200001e4 	.word	0x200001e4

0801747c <free>:
 801747c:	4b02      	ldr	r3, [pc, #8]	@ (8017488 <free+0xc>)
 801747e:	4601      	mov	r1, r0
 8017480:	6818      	ldr	r0, [r3, #0]
 8017482:	f000 bc7b 	b.w	8017d7c <_free_r>
 8017486:	bf00      	nop
 8017488:	200001e4 	.word	0x200001e4

0801748c <sbrk_aligned>:
 801748c:	b570      	push	{r4, r5, r6, lr}
 801748e:	4e0f      	ldr	r6, [pc, #60]	@ (80174cc <sbrk_aligned+0x40>)
 8017490:	460c      	mov	r4, r1
 8017492:	6831      	ldr	r1, [r6, #0]
 8017494:	4605      	mov	r5, r0
 8017496:	b911      	cbnz	r1, 801749e <sbrk_aligned+0x12>
 8017498:	f000 fbe0 	bl	8017c5c <_sbrk_r>
 801749c:	6030      	str	r0, [r6, #0]
 801749e:	4621      	mov	r1, r4
 80174a0:	4628      	mov	r0, r5
 80174a2:	f000 fbdb 	bl	8017c5c <_sbrk_r>
 80174a6:	1c43      	adds	r3, r0, #1
 80174a8:	d103      	bne.n	80174b2 <sbrk_aligned+0x26>
 80174aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80174ae:	4620      	mov	r0, r4
 80174b0:	bd70      	pop	{r4, r5, r6, pc}
 80174b2:	1cc4      	adds	r4, r0, #3
 80174b4:	f024 0403 	bic.w	r4, r4, #3
 80174b8:	42a0      	cmp	r0, r4
 80174ba:	d0f8      	beq.n	80174ae <sbrk_aligned+0x22>
 80174bc:	1a21      	subs	r1, r4, r0
 80174be:	4628      	mov	r0, r5
 80174c0:	f000 fbcc 	bl	8017c5c <_sbrk_r>
 80174c4:	3001      	adds	r0, #1
 80174c6:	d1f2      	bne.n	80174ae <sbrk_aligned+0x22>
 80174c8:	e7ef      	b.n	80174aa <sbrk_aligned+0x1e>
 80174ca:	bf00      	nop
 80174cc:	2000b354 	.word	0x2000b354

080174d0 <_malloc_r>:
 80174d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80174d4:	1ccd      	adds	r5, r1, #3
 80174d6:	f025 0503 	bic.w	r5, r5, #3
 80174da:	3508      	adds	r5, #8
 80174dc:	2d0c      	cmp	r5, #12
 80174de:	bf38      	it	cc
 80174e0:	250c      	movcc	r5, #12
 80174e2:	2d00      	cmp	r5, #0
 80174e4:	4606      	mov	r6, r0
 80174e6:	db01      	blt.n	80174ec <_malloc_r+0x1c>
 80174e8:	42a9      	cmp	r1, r5
 80174ea:	d904      	bls.n	80174f6 <_malloc_r+0x26>
 80174ec:	230c      	movs	r3, #12
 80174ee:	6033      	str	r3, [r6, #0]
 80174f0:	2000      	movs	r0, #0
 80174f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80174f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80175cc <_malloc_r+0xfc>
 80174fa:	f000 f869 	bl	80175d0 <__malloc_lock>
 80174fe:	f8d8 3000 	ldr.w	r3, [r8]
 8017502:	461c      	mov	r4, r3
 8017504:	bb44      	cbnz	r4, 8017558 <_malloc_r+0x88>
 8017506:	4629      	mov	r1, r5
 8017508:	4630      	mov	r0, r6
 801750a:	f7ff ffbf 	bl	801748c <sbrk_aligned>
 801750e:	1c43      	adds	r3, r0, #1
 8017510:	4604      	mov	r4, r0
 8017512:	d158      	bne.n	80175c6 <_malloc_r+0xf6>
 8017514:	f8d8 4000 	ldr.w	r4, [r8]
 8017518:	4627      	mov	r7, r4
 801751a:	2f00      	cmp	r7, #0
 801751c:	d143      	bne.n	80175a6 <_malloc_r+0xd6>
 801751e:	2c00      	cmp	r4, #0
 8017520:	d04b      	beq.n	80175ba <_malloc_r+0xea>
 8017522:	6823      	ldr	r3, [r4, #0]
 8017524:	4639      	mov	r1, r7
 8017526:	4630      	mov	r0, r6
 8017528:	eb04 0903 	add.w	r9, r4, r3
 801752c:	f000 fb96 	bl	8017c5c <_sbrk_r>
 8017530:	4581      	cmp	r9, r0
 8017532:	d142      	bne.n	80175ba <_malloc_r+0xea>
 8017534:	6821      	ldr	r1, [r4, #0]
 8017536:	1a6d      	subs	r5, r5, r1
 8017538:	4629      	mov	r1, r5
 801753a:	4630      	mov	r0, r6
 801753c:	f7ff ffa6 	bl	801748c <sbrk_aligned>
 8017540:	3001      	adds	r0, #1
 8017542:	d03a      	beq.n	80175ba <_malloc_r+0xea>
 8017544:	6823      	ldr	r3, [r4, #0]
 8017546:	442b      	add	r3, r5
 8017548:	6023      	str	r3, [r4, #0]
 801754a:	f8d8 3000 	ldr.w	r3, [r8]
 801754e:	685a      	ldr	r2, [r3, #4]
 8017550:	bb62      	cbnz	r2, 80175ac <_malloc_r+0xdc>
 8017552:	f8c8 7000 	str.w	r7, [r8]
 8017556:	e00f      	b.n	8017578 <_malloc_r+0xa8>
 8017558:	6822      	ldr	r2, [r4, #0]
 801755a:	1b52      	subs	r2, r2, r5
 801755c:	d420      	bmi.n	80175a0 <_malloc_r+0xd0>
 801755e:	2a0b      	cmp	r2, #11
 8017560:	d917      	bls.n	8017592 <_malloc_r+0xc2>
 8017562:	1961      	adds	r1, r4, r5
 8017564:	42a3      	cmp	r3, r4
 8017566:	6025      	str	r5, [r4, #0]
 8017568:	bf18      	it	ne
 801756a:	6059      	strne	r1, [r3, #4]
 801756c:	6863      	ldr	r3, [r4, #4]
 801756e:	bf08      	it	eq
 8017570:	f8c8 1000 	streq.w	r1, [r8]
 8017574:	5162      	str	r2, [r4, r5]
 8017576:	604b      	str	r3, [r1, #4]
 8017578:	4630      	mov	r0, r6
 801757a:	f000 f82f 	bl	80175dc <__malloc_unlock>
 801757e:	f104 000b 	add.w	r0, r4, #11
 8017582:	1d23      	adds	r3, r4, #4
 8017584:	f020 0007 	bic.w	r0, r0, #7
 8017588:	1ac2      	subs	r2, r0, r3
 801758a:	bf1c      	itt	ne
 801758c:	1a1b      	subne	r3, r3, r0
 801758e:	50a3      	strne	r3, [r4, r2]
 8017590:	e7af      	b.n	80174f2 <_malloc_r+0x22>
 8017592:	6862      	ldr	r2, [r4, #4]
 8017594:	42a3      	cmp	r3, r4
 8017596:	bf0c      	ite	eq
 8017598:	f8c8 2000 	streq.w	r2, [r8]
 801759c:	605a      	strne	r2, [r3, #4]
 801759e:	e7eb      	b.n	8017578 <_malloc_r+0xa8>
 80175a0:	4623      	mov	r3, r4
 80175a2:	6864      	ldr	r4, [r4, #4]
 80175a4:	e7ae      	b.n	8017504 <_malloc_r+0x34>
 80175a6:	463c      	mov	r4, r7
 80175a8:	687f      	ldr	r7, [r7, #4]
 80175aa:	e7b6      	b.n	801751a <_malloc_r+0x4a>
 80175ac:	461a      	mov	r2, r3
 80175ae:	685b      	ldr	r3, [r3, #4]
 80175b0:	42a3      	cmp	r3, r4
 80175b2:	d1fb      	bne.n	80175ac <_malloc_r+0xdc>
 80175b4:	2300      	movs	r3, #0
 80175b6:	6053      	str	r3, [r2, #4]
 80175b8:	e7de      	b.n	8017578 <_malloc_r+0xa8>
 80175ba:	230c      	movs	r3, #12
 80175bc:	6033      	str	r3, [r6, #0]
 80175be:	4630      	mov	r0, r6
 80175c0:	f000 f80c 	bl	80175dc <__malloc_unlock>
 80175c4:	e794      	b.n	80174f0 <_malloc_r+0x20>
 80175c6:	6005      	str	r5, [r0, #0]
 80175c8:	e7d6      	b.n	8017578 <_malloc_r+0xa8>
 80175ca:	bf00      	nop
 80175cc:	2000b358 	.word	0x2000b358

080175d0 <__malloc_lock>:
 80175d0:	4801      	ldr	r0, [pc, #4]	@ (80175d8 <__malloc_lock+0x8>)
 80175d2:	f000 bb90 	b.w	8017cf6 <__retarget_lock_acquire_recursive>
 80175d6:	bf00      	nop
 80175d8:	2000b49d 	.word	0x2000b49d

080175dc <__malloc_unlock>:
 80175dc:	4801      	ldr	r0, [pc, #4]	@ (80175e4 <__malloc_unlock+0x8>)
 80175de:	f000 bb8b 	b.w	8017cf8 <__retarget_lock_release_recursive>
 80175e2:	bf00      	nop
 80175e4:	2000b49d 	.word	0x2000b49d

080175e8 <srand>:
 80175e8:	b538      	push	{r3, r4, r5, lr}
 80175ea:	4b10      	ldr	r3, [pc, #64]	@ (801762c <srand+0x44>)
 80175ec:	681d      	ldr	r5, [r3, #0]
 80175ee:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 80175f0:	4604      	mov	r4, r0
 80175f2:	b9b3      	cbnz	r3, 8017622 <srand+0x3a>
 80175f4:	2018      	movs	r0, #24
 80175f6:	f7ff ff39 	bl	801746c <malloc>
 80175fa:	4602      	mov	r2, r0
 80175fc:	6328      	str	r0, [r5, #48]	@ 0x30
 80175fe:	b920      	cbnz	r0, 801760a <srand+0x22>
 8017600:	4b0b      	ldr	r3, [pc, #44]	@ (8017630 <srand+0x48>)
 8017602:	480c      	ldr	r0, [pc, #48]	@ (8017634 <srand+0x4c>)
 8017604:	2146      	movs	r1, #70	@ 0x46
 8017606:	f000 fb8f 	bl	8017d28 <__assert_func>
 801760a:	490b      	ldr	r1, [pc, #44]	@ (8017638 <srand+0x50>)
 801760c:	4b0b      	ldr	r3, [pc, #44]	@ (801763c <srand+0x54>)
 801760e:	e9c0 1300 	strd	r1, r3, [r0]
 8017612:	4b0b      	ldr	r3, [pc, #44]	@ (8017640 <srand+0x58>)
 8017614:	6083      	str	r3, [r0, #8]
 8017616:	230b      	movs	r3, #11
 8017618:	8183      	strh	r3, [r0, #12]
 801761a:	2100      	movs	r1, #0
 801761c:	2001      	movs	r0, #1
 801761e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8017622:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
 8017624:	2200      	movs	r2, #0
 8017626:	611c      	str	r4, [r3, #16]
 8017628:	615a      	str	r2, [r3, #20]
 801762a:	bd38      	pop	{r3, r4, r5, pc}
 801762c:	200001e4 	.word	0x200001e4
 8017630:	08019770 	.word	0x08019770
 8017634:	08019787 	.word	0x08019787
 8017638:	abcd330e 	.word	0xabcd330e
 801763c:	e66d1234 	.word	0xe66d1234
 8017640:	0005deec 	.word	0x0005deec

08017644 <rand>:
 8017644:	4b16      	ldr	r3, [pc, #88]	@ (80176a0 <rand+0x5c>)
 8017646:	b510      	push	{r4, lr}
 8017648:	681c      	ldr	r4, [r3, #0]
 801764a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 801764c:	b9b3      	cbnz	r3, 801767c <rand+0x38>
 801764e:	2018      	movs	r0, #24
 8017650:	f7ff ff0c 	bl	801746c <malloc>
 8017654:	4602      	mov	r2, r0
 8017656:	6320      	str	r0, [r4, #48]	@ 0x30
 8017658:	b920      	cbnz	r0, 8017664 <rand+0x20>
 801765a:	4b12      	ldr	r3, [pc, #72]	@ (80176a4 <rand+0x60>)
 801765c:	4812      	ldr	r0, [pc, #72]	@ (80176a8 <rand+0x64>)
 801765e:	2152      	movs	r1, #82	@ 0x52
 8017660:	f000 fb62 	bl	8017d28 <__assert_func>
 8017664:	4911      	ldr	r1, [pc, #68]	@ (80176ac <rand+0x68>)
 8017666:	4b12      	ldr	r3, [pc, #72]	@ (80176b0 <rand+0x6c>)
 8017668:	e9c0 1300 	strd	r1, r3, [r0]
 801766c:	4b11      	ldr	r3, [pc, #68]	@ (80176b4 <rand+0x70>)
 801766e:	6083      	str	r3, [r0, #8]
 8017670:	230b      	movs	r3, #11
 8017672:	8183      	strh	r3, [r0, #12]
 8017674:	2100      	movs	r1, #0
 8017676:	2001      	movs	r0, #1
 8017678:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801767c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 801767e:	480e      	ldr	r0, [pc, #56]	@ (80176b8 <rand+0x74>)
 8017680:	690b      	ldr	r3, [r1, #16]
 8017682:	694c      	ldr	r4, [r1, #20]
 8017684:	4a0d      	ldr	r2, [pc, #52]	@ (80176bc <rand+0x78>)
 8017686:	4358      	muls	r0, r3
 8017688:	fb02 0004 	mla	r0, r2, r4, r0
 801768c:	fba3 3202 	umull	r3, r2, r3, r2
 8017690:	3301      	adds	r3, #1
 8017692:	eb40 0002 	adc.w	r0, r0, r2
 8017696:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801769a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 801769e:	bd10      	pop	{r4, pc}
 80176a0:	200001e4 	.word	0x200001e4
 80176a4:	08019770 	.word	0x08019770
 80176a8:	08019787 	.word	0x08019787
 80176ac:	abcd330e 	.word	0xabcd330e
 80176b0:	e66d1234 	.word	0xe66d1234
 80176b4:	0005deec 	.word	0x0005deec
 80176b8:	5851f42d 	.word	0x5851f42d
 80176bc:	4c957f2d 	.word	0x4c957f2d

080176c0 <realloc>:
 80176c0:	4b02      	ldr	r3, [pc, #8]	@ (80176cc <realloc+0xc>)
 80176c2:	460a      	mov	r2, r1
 80176c4:	4601      	mov	r1, r0
 80176c6:	6818      	ldr	r0, [r3, #0]
 80176c8:	f000 b802 	b.w	80176d0 <_realloc_r>
 80176cc:	200001e4 	.word	0x200001e4

080176d0 <_realloc_r>:
 80176d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80176d4:	4680      	mov	r8, r0
 80176d6:	4615      	mov	r5, r2
 80176d8:	460c      	mov	r4, r1
 80176da:	b921      	cbnz	r1, 80176e6 <_realloc_r+0x16>
 80176dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80176e0:	4611      	mov	r1, r2
 80176e2:	f7ff bef5 	b.w	80174d0 <_malloc_r>
 80176e6:	b92a      	cbnz	r2, 80176f4 <_realloc_r+0x24>
 80176e8:	f000 fb48 	bl	8017d7c <_free_r>
 80176ec:	2400      	movs	r4, #0
 80176ee:	4620      	mov	r0, r4
 80176f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80176f4:	f000 fb8c 	bl	8017e10 <_malloc_usable_size_r>
 80176f8:	4285      	cmp	r5, r0
 80176fa:	4606      	mov	r6, r0
 80176fc:	d802      	bhi.n	8017704 <_realloc_r+0x34>
 80176fe:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8017702:	d8f4      	bhi.n	80176ee <_realloc_r+0x1e>
 8017704:	4629      	mov	r1, r5
 8017706:	4640      	mov	r0, r8
 8017708:	f7ff fee2 	bl	80174d0 <_malloc_r>
 801770c:	4607      	mov	r7, r0
 801770e:	2800      	cmp	r0, #0
 8017710:	d0ec      	beq.n	80176ec <_realloc_r+0x1c>
 8017712:	42b5      	cmp	r5, r6
 8017714:	462a      	mov	r2, r5
 8017716:	4621      	mov	r1, r4
 8017718:	bf28      	it	cs
 801771a:	4632      	movcs	r2, r6
 801771c:	f000 faf5 	bl	8017d0a <memcpy>
 8017720:	4621      	mov	r1, r4
 8017722:	4640      	mov	r0, r8
 8017724:	f000 fb2a 	bl	8017d7c <_free_r>
 8017728:	463c      	mov	r4, r7
 801772a:	e7e0      	b.n	80176ee <_realloc_r+0x1e>

0801772c <_strtoul_l.constprop.0>:
 801772c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8017730:	4e34      	ldr	r6, [pc, #208]	@ (8017804 <_strtoul_l.constprop.0+0xd8>)
 8017732:	4686      	mov	lr, r0
 8017734:	460d      	mov	r5, r1
 8017736:	4628      	mov	r0, r5
 8017738:	f815 4b01 	ldrb.w	r4, [r5], #1
 801773c:	5d37      	ldrb	r7, [r6, r4]
 801773e:	f017 0708 	ands.w	r7, r7, #8
 8017742:	d1f8      	bne.n	8017736 <_strtoul_l.constprop.0+0xa>
 8017744:	2c2d      	cmp	r4, #45	@ 0x2d
 8017746:	d12f      	bne.n	80177a8 <_strtoul_l.constprop.0+0x7c>
 8017748:	782c      	ldrb	r4, [r5, #0]
 801774a:	2701      	movs	r7, #1
 801774c:	1c85      	adds	r5, r0, #2
 801774e:	f033 0010 	bics.w	r0, r3, #16
 8017752:	d109      	bne.n	8017768 <_strtoul_l.constprop.0+0x3c>
 8017754:	2c30      	cmp	r4, #48	@ 0x30
 8017756:	d12c      	bne.n	80177b2 <_strtoul_l.constprop.0+0x86>
 8017758:	7828      	ldrb	r0, [r5, #0]
 801775a:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 801775e:	2858      	cmp	r0, #88	@ 0x58
 8017760:	d127      	bne.n	80177b2 <_strtoul_l.constprop.0+0x86>
 8017762:	786c      	ldrb	r4, [r5, #1]
 8017764:	2310      	movs	r3, #16
 8017766:	3502      	adds	r5, #2
 8017768:	f04f 38ff 	mov.w	r8, #4294967295	@ 0xffffffff
 801776c:	2600      	movs	r6, #0
 801776e:	fbb8 f8f3 	udiv	r8, r8, r3
 8017772:	fb03 f908 	mul.w	r9, r3, r8
 8017776:	ea6f 0909 	mvn.w	r9, r9
 801777a:	4630      	mov	r0, r6
 801777c:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8017780:	f1bc 0f09 	cmp.w	ip, #9
 8017784:	d81c      	bhi.n	80177c0 <_strtoul_l.constprop.0+0x94>
 8017786:	4664      	mov	r4, ip
 8017788:	42a3      	cmp	r3, r4
 801778a:	dd2a      	ble.n	80177e2 <_strtoul_l.constprop.0+0xb6>
 801778c:	f1b6 3fff 	cmp.w	r6, #4294967295	@ 0xffffffff
 8017790:	d007      	beq.n	80177a2 <_strtoul_l.constprop.0+0x76>
 8017792:	4580      	cmp	r8, r0
 8017794:	d322      	bcc.n	80177dc <_strtoul_l.constprop.0+0xb0>
 8017796:	d101      	bne.n	801779c <_strtoul_l.constprop.0+0x70>
 8017798:	45a1      	cmp	r9, r4
 801779a:	db1f      	blt.n	80177dc <_strtoul_l.constprop.0+0xb0>
 801779c:	fb00 4003 	mla	r0, r0, r3, r4
 80177a0:	2601      	movs	r6, #1
 80177a2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80177a6:	e7e9      	b.n	801777c <_strtoul_l.constprop.0+0x50>
 80177a8:	2c2b      	cmp	r4, #43	@ 0x2b
 80177aa:	bf04      	itt	eq
 80177ac:	782c      	ldrbeq	r4, [r5, #0]
 80177ae:	1c85      	addeq	r5, r0, #2
 80177b0:	e7cd      	b.n	801774e <_strtoul_l.constprop.0+0x22>
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d1d8      	bne.n	8017768 <_strtoul_l.constprop.0+0x3c>
 80177b6:	2c30      	cmp	r4, #48	@ 0x30
 80177b8:	bf0c      	ite	eq
 80177ba:	2308      	moveq	r3, #8
 80177bc:	230a      	movne	r3, #10
 80177be:	e7d3      	b.n	8017768 <_strtoul_l.constprop.0+0x3c>
 80177c0:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80177c4:	f1bc 0f19 	cmp.w	ip, #25
 80177c8:	d801      	bhi.n	80177ce <_strtoul_l.constprop.0+0xa2>
 80177ca:	3c37      	subs	r4, #55	@ 0x37
 80177cc:	e7dc      	b.n	8017788 <_strtoul_l.constprop.0+0x5c>
 80177ce:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 80177d2:	f1bc 0f19 	cmp.w	ip, #25
 80177d6:	d804      	bhi.n	80177e2 <_strtoul_l.constprop.0+0xb6>
 80177d8:	3c57      	subs	r4, #87	@ 0x57
 80177da:	e7d5      	b.n	8017788 <_strtoul_l.constprop.0+0x5c>
 80177dc:	f04f 36ff 	mov.w	r6, #4294967295	@ 0xffffffff
 80177e0:	e7df      	b.n	80177a2 <_strtoul_l.constprop.0+0x76>
 80177e2:	1c73      	adds	r3, r6, #1
 80177e4:	d106      	bne.n	80177f4 <_strtoul_l.constprop.0+0xc8>
 80177e6:	2322      	movs	r3, #34	@ 0x22
 80177e8:	f8ce 3000 	str.w	r3, [lr]
 80177ec:	4630      	mov	r0, r6
 80177ee:	b932      	cbnz	r2, 80177fe <_strtoul_l.constprop.0+0xd2>
 80177f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80177f4:	b107      	cbz	r7, 80177f8 <_strtoul_l.constprop.0+0xcc>
 80177f6:	4240      	negs	r0, r0
 80177f8:	2a00      	cmp	r2, #0
 80177fa:	d0f9      	beq.n	80177f0 <_strtoul_l.constprop.0+0xc4>
 80177fc:	b106      	cbz	r6, 8017800 <_strtoul_l.constprop.0+0xd4>
 80177fe:	1e69      	subs	r1, r5, #1
 8017800:	6011      	str	r1, [r2, #0]
 8017802:	e7f5      	b.n	80177f0 <_strtoul_l.constprop.0+0xc4>
 8017804:	080197e0 	.word	0x080197e0

08017808 <strtoul>:
 8017808:	4613      	mov	r3, r2
 801780a:	460a      	mov	r2, r1
 801780c:	4601      	mov	r1, r0
 801780e:	4802      	ldr	r0, [pc, #8]	@ (8017818 <strtoul+0x10>)
 8017810:	6800      	ldr	r0, [r0, #0]
 8017812:	f7ff bf8b 	b.w	801772c <_strtoul_l.constprop.0>
 8017816:	bf00      	nop
 8017818:	200001e4 	.word	0x200001e4

0801781c <std>:
 801781c:	2300      	movs	r3, #0
 801781e:	b510      	push	{r4, lr}
 8017820:	4604      	mov	r4, r0
 8017822:	e9c0 3300 	strd	r3, r3, [r0]
 8017826:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801782a:	6083      	str	r3, [r0, #8]
 801782c:	8181      	strh	r1, [r0, #12]
 801782e:	6643      	str	r3, [r0, #100]	@ 0x64
 8017830:	81c2      	strh	r2, [r0, #14]
 8017832:	6183      	str	r3, [r0, #24]
 8017834:	4619      	mov	r1, r3
 8017836:	2208      	movs	r2, #8
 8017838:	305c      	adds	r0, #92	@ 0x5c
 801783a:	f000 f99d 	bl	8017b78 <memset>
 801783e:	4b0d      	ldr	r3, [pc, #52]	@ (8017874 <std+0x58>)
 8017840:	6263      	str	r3, [r4, #36]	@ 0x24
 8017842:	4b0d      	ldr	r3, [pc, #52]	@ (8017878 <std+0x5c>)
 8017844:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017846:	4b0d      	ldr	r3, [pc, #52]	@ (801787c <std+0x60>)
 8017848:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801784a:	4b0d      	ldr	r3, [pc, #52]	@ (8017880 <std+0x64>)
 801784c:	6323      	str	r3, [r4, #48]	@ 0x30
 801784e:	4b0d      	ldr	r3, [pc, #52]	@ (8017884 <std+0x68>)
 8017850:	6224      	str	r4, [r4, #32]
 8017852:	429c      	cmp	r4, r3
 8017854:	d006      	beq.n	8017864 <std+0x48>
 8017856:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801785a:	4294      	cmp	r4, r2
 801785c:	d002      	beq.n	8017864 <std+0x48>
 801785e:	33d0      	adds	r3, #208	@ 0xd0
 8017860:	429c      	cmp	r4, r3
 8017862:	d105      	bne.n	8017870 <std+0x54>
 8017864:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8017868:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801786c:	f000 ba42 	b.w	8017cf4 <__retarget_lock_init_recursive>
 8017870:	bd10      	pop	{r4, pc}
 8017872:	bf00      	nop
 8017874:	08017a2d 	.word	0x08017a2d
 8017878:	08017a4f 	.word	0x08017a4f
 801787c:	08017a87 	.word	0x08017a87
 8017880:	08017aab 	.word	0x08017aab
 8017884:	2000b35c 	.word	0x2000b35c

08017888 <stdio_exit_handler>:
 8017888:	4a02      	ldr	r2, [pc, #8]	@ (8017894 <stdio_exit_handler+0xc>)
 801788a:	4903      	ldr	r1, [pc, #12]	@ (8017898 <stdio_exit_handler+0x10>)
 801788c:	4803      	ldr	r0, [pc, #12]	@ (801789c <stdio_exit_handler+0x14>)
 801788e:	f000 b869 	b.w	8017964 <_fwalk_sglue>
 8017892:	bf00      	nop
 8017894:	200001d8 	.word	0x200001d8
 8017898:	08018779 	.word	0x08018779
 801789c:	200001e8 	.word	0x200001e8

080178a0 <cleanup_stdio>:
 80178a0:	6841      	ldr	r1, [r0, #4]
 80178a2:	4b0c      	ldr	r3, [pc, #48]	@ (80178d4 <cleanup_stdio+0x34>)
 80178a4:	4299      	cmp	r1, r3
 80178a6:	b510      	push	{r4, lr}
 80178a8:	4604      	mov	r4, r0
 80178aa:	d001      	beq.n	80178b0 <cleanup_stdio+0x10>
 80178ac:	f000 ff64 	bl	8018778 <_fflush_r>
 80178b0:	68a1      	ldr	r1, [r4, #8]
 80178b2:	4b09      	ldr	r3, [pc, #36]	@ (80178d8 <cleanup_stdio+0x38>)
 80178b4:	4299      	cmp	r1, r3
 80178b6:	d002      	beq.n	80178be <cleanup_stdio+0x1e>
 80178b8:	4620      	mov	r0, r4
 80178ba:	f000 ff5d 	bl	8018778 <_fflush_r>
 80178be:	68e1      	ldr	r1, [r4, #12]
 80178c0:	4b06      	ldr	r3, [pc, #24]	@ (80178dc <cleanup_stdio+0x3c>)
 80178c2:	4299      	cmp	r1, r3
 80178c4:	d004      	beq.n	80178d0 <cleanup_stdio+0x30>
 80178c6:	4620      	mov	r0, r4
 80178c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178cc:	f000 bf54 	b.w	8018778 <_fflush_r>
 80178d0:	bd10      	pop	{r4, pc}
 80178d2:	bf00      	nop
 80178d4:	2000b35c 	.word	0x2000b35c
 80178d8:	2000b3c4 	.word	0x2000b3c4
 80178dc:	2000b42c 	.word	0x2000b42c

080178e0 <global_stdio_init.part.0>:
 80178e0:	b510      	push	{r4, lr}
 80178e2:	4b0b      	ldr	r3, [pc, #44]	@ (8017910 <global_stdio_init.part.0+0x30>)
 80178e4:	4c0b      	ldr	r4, [pc, #44]	@ (8017914 <global_stdio_init.part.0+0x34>)
 80178e6:	4a0c      	ldr	r2, [pc, #48]	@ (8017918 <global_stdio_init.part.0+0x38>)
 80178e8:	601a      	str	r2, [r3, #0]
 80178ea:	4620      	mov	r0, r4
 80178ec:	2200      	movs	r2, #0
 80178ee:	2104      	movs	r1, #4
 80178f0:	f7ff ff94 	bl	801781c <std>
 80178f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80178f8:	2201      	movs	r2, #1
 80178fa:	2109      	movs	r1, #9
 80178fc:	f7ff ff8e 	bl	801781c <std>
 8017900:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8017904:	2202      	movs	r2, #2
 8017906:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801790a:	2112      	movs	r1, #18
 801790c:	f7ff bf86 	b.w	801781c <std>
 8017910:	2000b494 	.word	0x2000b494
 8017914:	2000b35c 	.word	0x2000b35c
 8017918:	08017889 	.word	0x08017889

0801791c <__sfp_lock_acquire>:
 801791c:	4801      	ldr	r0, [pc, #4]	@ (8017924 <__sfp_lock_acquire+0x8>)
 801791e:	f000 b9ea 	b.w	8017cf6 <__retarget_lock_acquire_recursive>
 8017922:	bf00      	nop
 8017924:	2000b49e 	.word	0x2000b49e

08017928 <__sfp_lock_release>:
 8017928:	4801      	ldr	r0, [pc, #4]	@ (8017930 <__sfp_lock_release+0x8>)
 801792a:	f000 b9e5 	b.w	8017cf8 <__retarget_lock_release_recursive>
 801792e:	bf00      	nop
 8017930:	2000b49e 	.word	0x2000b49e

08017934 <__sinit>:
 8017934:	b510      	push	{r4, lr}
 8017936:	4604      	mov	r4, r0
 8017938:	f7ff fff0 	bl	801791c <__sfp_lock_acquire>
 801793c:	6a23      	ldr	r3, [r4, #32]
 801793e:	b11b      	cbz	r3, 8017948 <__sinit+0x14>
 8017940:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017944:	f7ff bff0 	b.w	8017928 <__sfp_lock_release>
 8017948:	4b04      	ldr	r3, [pc, #16]	@ (801795c <__sinit+0x28>)
 801794a:	6223      	str	r3, [r4, #32]
 801794c:	4b04      	ldr	r3, [pc, #16]	@ (8017960 <__sinit+0x2c>)
 801794e:	681b      	ldr	r3, [r3, #0]
 8017950:	2b00      	cmp	r3, #0
 8017952:	d1f5      	bne.n	8017940 <__sinit+0xc>
 8017954:	f7ff ffc4 	bl	80178e0 <global_stdio_init.part.0>
 8017958:	e7f2      	b.n	8017940 <__sinit+0xc>
 801795a:	bf00      	nop
 801795c:	080178a1 	.word	0x080178a1
 8017960:	2000b494 	.word	0x2000b494

08017964 <_fwalk_sglue>:
 8017964:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017968:	4607      	mov	r7, r0
 801796a:	4688      	mov	r8, r1
 801796c:	4614      	mov	r4, r2
 801796e:	2600      	movs	r6, #0
 8017970:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017974:	f1b9 0901 	subs.w	r9, r9, #1
 8017978:	d505      	bpl.n	8017986 <_fwalk_sglue+0x22>
 801797a:	6824      	ldr	r4, [r4, #0]
 801797c:	2c00      	cmp	r4, #0
 801797e:	d1f7      	bne.n	8017970 <_fwalk_sglue+0xc>
 8017980:	4630      	mov	r0, r6
 8017982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017986:	89ab      	ldrh	r3, [r5, #12]
 8017988:	2b01      	cmp	r3, #1
 801798a:	d907      	bls.n	801799c <_fwalk_sglue+0x38>
 801798c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017990:	3301      	adds	r3, #1
 8017992:	d003      	beq.n	801799c <_fwalk_sglue+0x38>
 8017994:	4629      	mov	r1, r5
 8017996:	4638      	mov	r0, r7
 8017998:	47c0      	blx	r8
 801799a:	4306      	orrs	r6, r0
 801799c:	3568      	adds	r5, #104	@ 0x68
 801799e:	e7e9      	b.n	8017974 <_fwalk_sglue+0x10>

080179a0 <iprintf>:
 80179a0:	b40f      	push	{r0, r1, r2, r3}
 80179a2:	b507      	push	{r0, r1, r2, lr}
 80179a4:	4906      	ldr	r1, [pc, #24]	@ (80179c0 <iprintf+0x20>)
 80179a6:	ab04      	add	r3, sp, #16
 80179a8:	6808      	ldr	r0, [r1, #0]
 80179aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80179ae:	6881      	ldr	r1, [r0, #8]
 80179b0:	9301      	str	r3, [sp, #4]
 80179b2:	f000 fbb7 	bl	8018124 <_vfiprintf_r>
 80179b6:	b003      	add	sp, #12
 80179b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80179bc:	b004      	add	sp, #16
 80179be:	4770      	bx	lr
 80179c0:	200001e4 	.word	0x200001e4

080179c4 <sniprintf>:
 80179c4:	b40c      	push	{r2, r3}
 80179c6:	b530      	push	{r4, r5, lr}
 80179c8:	4b17      	ldr	r3, [pc, #92]	@ (8017a28 <sniprintf+0x64>)
 80179ca:	1e0c      	subs	r4, r1, #0
 80179cc:	681d      	ldr	r5, [r3, #0]
 80179ce:	b09d      	sub	sp, #116	@ 0x74
 80179d0:	da08      	bge.n	80179e4 <sniprintf+0x20>
 80179d2:	238b      	movs	r3, #139	@ 0x8b
 80179d4:	602b      	str	r3, [r5, #0]
 80179d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80179da:	b01d      	add	sp, #116	@ 0x74
 80179dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80179e0:	b002      	add	sp, #8
 80179e2:	4770      	bx	lr
 80179e4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80179e8:	f8ad 3014 	strh.w	r3, [sp, #20]
 80179ec:	bf14      	ite	ne
 80179ee:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 80179f2:	4623      	moveq	r3, r4
 80179f4:	9304      	str	r3, [sp, #16]
 80179f6:	9307      	str	r3, [sp, #28]
 80179f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80179fc:	9002      	str	r0, [sp, #8]
 80179fe:	9006      	str	r0, [sp, #24]
 8017a00:	f8ad 3016 	strh.w	r3, [sp, #22]
 8017a04:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8017a06:	ab21      	add	r3, sp, #132	@ 0x84
 8017a08:	a902      	add	r1, sp, #8
 8017a0a:	4628      	mov	r0, r5
 8017a0c:	9301      	str	r3, [sp, #4]
 8017a0e:	f000 fa63 	bl	8017ed8 <_svfiprintf_r>
 8017a12:	1c43      	adds	r3, r0, #1
 8017a14:	bfbc      	itt	lt
 8017a16:	238b      	movlt	r3, #139	@ 0x8b
 8017a18:	602b      	strlt	r3, [r5, #0]
 8017a1a:	2c00      	cmp	r4, #0
 8017a1c:	d0dd      	beq.n	80179da <sniprintf+0x16>
 8017a1e:	9b02      	ldr	r3, [sp, #8]
 8017a20:	2200      	movs	r2, #0
 8017a22:	701a      	strb	r2, [r3, #0]
 8017a24:	e7d9      	b.n	80179da <sniprintf+0x16>
 8017a26:	bf00      	nop
 8017a28:	200001e4 	.word	0x200001e4

08017a2c <__sread>:
 8017a2c:	b510      	push	{r4, lr}
 8017a2e:	460c      	mov	r4, r1
 8017a30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a34:	f000 f900 	bl	8017c38 <_read_r>
 8017a38:	2800      	cmp	r0, #0
 8017a3a:	bfab      	itete	ge
 8017a3c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8017a3e:	89a3      	ldrhlt	r3, [r4, #12]
 8017a40:	181b      	addge	r3, r3, r0
 8017a42:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8017a46:	bfac      	ite	ge
 8017a48:	6563      	strge	r3, [r4, #84]	@ 0x54
 8017a4a:	81a3      	strhlt	r3, [r4, #12]
 8017a4c:	bd10      	pop	{r4, pc}

08017a4e <__swrite>:
 8017a4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017a52:	461f      	mov	r7, r3
 8017a54:	898b      	ldrh	r3, [r1, #12]
 8017a56:	05db      	lsls	r3, r3, #23
 8017a58:	4605      	mov	r5, r0
 8017a5a:	460c      	mov	r4, r1
 8017a5c:	4616      	mov	r6, r2
 8017a5e:	d505      	bpl.n	8017a6c <__swrite+0x1e>
 8017a60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a64:	2302      	movs	r3, #2
 8017a66:	2200      	movs	r2, #0
 8017a68:	f000 f8d4 	bl	8017c14 <_lseek_r>
 8017a6c:	89a3      	ldrh	r3, [r4, #12]
 8017a6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017a72:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8017a76:	81a3      	strh	r3, [r4, #12]
 8017a78:	4632      	mov	r2, r6
 8017a7a:	463b      	mov	r3, r7
 8017a7c:	4628      	mov	r0, r5
 8017a7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017a82:	f000 b8fb 	b.w	8017c7c <_write_r>

08017a86 <__sseek>:
 8017a86:	b510      	push	{r4, lr}
 8017a88:	460c      	mov	r4, r1
 8017a8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017a8e:	f000 f8c1 	bl	8017c14 <_lseek_r>
 8017a92:	1c43      	adds	r3, r0, #1
 8017a94:	89a3      	ldrh	r3, [r4, #12]
 8017a96:	bf15      	itete	ne
 8017a98:	6560      	strne	r0, [r4, #84]	@ 0x54
 8017a9a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8017a9e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8017aa2:	81a3      	strheq	r3, [r4, #12]
 8017aa4:	bf18      	it	ne
 8017aa6:	81a3      	strhne	r3, [r4, #12]
 8017aa8:	bd10      	pop	{r4, pc}

08017aaa <__sclose>:
 8017aaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017aae:	f000 b8a1 	b.w	8017bf4 <_close_r>

08017ab2 <_vsniprintf_r>:
 8017ab2:	b530      	push	{r4, r5, lr}
 8017ab4:	4614      	mov	r4, r2
 8017ab6:	2c00      	cmp	r4, #0
 8017ab8:	b09b      	sub	sp, #108	@ 0x6c
 8017aba:	4605      	mov	r5, r0
 8017abc:	461a      	mov	r2, r3
 8017abe:	da05      	bge.n	8017acc <_vsniprintf_r+0x1a>
 8017ac0:	238b      	movs	r3, #139	@ 0x8b
 8017ac2:	6003      	str	r3, [r0, #0]
 8017ac4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ac8:	b01b      	add	sp, #108	@ 0x6c
 8017aca:	bd30      	pop	{r4, r5, pc}
 8017acc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8017ad0:	f8ad 300c 	strh.w	r3, [sp, #12]
 8017ad4:	bf14      	ite	ne
 8017ad6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8017ada:	4623      	moveq	r3, r4
 8017adc:	9302      	str	r3, [sp, #8]
 8017ade:	9305      	str	r3, [sp, #20]
 8017ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8017ae4:	9100      	str	r1, [sp, #0]
 8017ae6:	9104      	str	r1, [sp, #16]
 8017ae8:	f8ad 300e 	strh.w	r3, [sp, #14]
 8017aec:	4669      	mov	r1, sp
 8017aee:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017af0:	f000 f9f2 	bl	8017ed8 <_svfiprintf_r>
 8017af4:	1c43      	adds	r3, r0, #1
 8017af6:	bfbc      	itt	lt
 8017af8:	238b      	movlt	r3, #139	@ 0x8b
 8017afa:	602b      	strlt	r3, [r5, #0]
 8017afc:	2c00      	cmp	r4, #0
 8017afe:	d0e3      	beq.n	8017ac8 <_vsniprintf_r+0x16>
 8017b00:	9b00      	ldr	r3, [sp, #0]
 8017b02:	2200      	movs	r2, #0
 8017b04:	701a      	strb	r2, [r3, #0]
 8017b06:	e7df      	b.n	8017ac8 <_vsniprintf_r+0x16>

08017b08 <vsniprintf>:
 8017b08:	b507      	push	{r0, r1, r2, lr}
 8017b0a:	9300      	str	r3, [sp, #0]
 8017b0c:	4613      	mov	r3, r2
 8017b0e:	460a      	mov	r2, r1
 8017b10:	4601      	mov	r1, r0
 8017b12:	4803      	ldr	r0, [pc, #12]	@ (8017b20 <vsniprintf+0x18>)
 8017b14:	6800      	ldr	r0, [r0, #0]
 8017b16:	f7ff ffcc 	bl	8017ab2 <_vsniprintf_r>
 8017b1a:	b003      	add	sp, #12
 8017b1c:	f85d fb04 	ldr.w	pc, [sp], #4
 8017b20:	200001e4 	.word	0x200001e4

08017b24 <memcmp>:
 8017b24:	b510      	push	{r4, lr}
 8017b26:	3901      	subs	r1, #1
 8017b28:	4402      	add	r2, r0
 8017b2a:	4290      	cmp	r0, r2
 8017b2c:	d101      	bne.n	8017b32 <memcmp+0xe>
 8017b2e:	2000      	movs	r0, #0
 8017b30:	e005      	b.n	8017b3e <memcmp+0x1a>
 8017b32:	7803      	ldrb	r3, [r0, #0]
 8017b34:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8017b38:	42a3      	cmp	r3, r4
 8017b3a:	d001      	beq.n	8017b40 <memcmp+0x1c>
 8017b3c:	1b18      	subs	r0, r3, r4
 8017b3e:	bd10      	pop	{r4, pc}
 8017b40:	3001      	adds	r0, #1
 8017b42:	e7f2      	b.n	8017b2a <memcmp+0x6>

08017b44 <memmove>:
 8017b44:	4288      	cmp	r0, r1
 8017b46:	b510      	push	{r4, lr}
 8017b48:	eb01 0402 	add.w	r4, r1, r2
 8017b4c:	d902      	bls.n	8017b54 <memmove+0x10>
 8017b4e:	4284      	cmp	r4, r0
 8017b50:	4623      	mov	r3, r4
 8017b52:	d807      	bhi.n	8017b64 <memmove+0x20>
 8017b54:	1e43      	subs	r3, r0, #1
 8017b56:	42a1      	cmp	r1, r4
 8017b58:	d008      	beq.n	8017b6c <memmove+0x28>
 8017b5a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017b5e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017b62:	e7f8      	b.n	8017b56 <memmove+0x12>
 8017b64:	4402      	add	r2, r0
 8017b66:	4601      	mov	r1, r0
 8017b68:	428a      	cmp	r2, r1
 8017b6a:	d100      	bne.n	8017b6e <memmove+0x2a>
 8017b6c:	bd10      	pop	{r4, pc}
 8017b6e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8017b72:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8017b76:	e7f7      	b.n	8017b68 <memmove+0x24>

08017b78 <memset>:
 8017b78:	4402      	add	r2, r0
 8017b7a:	4603      	mov	r3, r0
 8017b7c:	4293      	cmp	r3, r2
 8017b7e:	d100      	bne.n	8017b82 <memset+0xa>
 8017b80:	4770      	bx	lr
 8017b82:	f803 1b01 	strb.w	r1, [r3], #1
 8017b86:	e7f9      	b.n	8017b7c <memset+0x4>

08017b88 <strchr>:
 8017b88:	b2c9      	uxtb	r1, r1
 8017b8a:	4603      	mov	r3, r0
 8017b8c:	4618      	mov	r0, r3
 8017b8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017b92:	b112      	cbz	r2, 8017b9a <strchr+0x12>
 8017b94:	428a      	cmp	r2, r1
 8017b96:	d1f9      	bne.n	8017b8c <strchr+0x4>
 8017b98:	4770      	bx	lr
 8017b9a:	2900      	cmp	r1, #0
 8017b9c:	bf18      	it	ne
 8017b9e:	2000      	movne	r0, #0
 8017ba0:	4770      	bx	lr

08017ba2 <strncmp>:
 8017ba2:	b510      	push	{r4, lr}
 8017ba4:	b16a      	cbz	r2, 8017bc2 <strncmp+0x20>
 8017ba6:	3901      	subs	r1, #1
 8017ba8:	1884      	adds	r4, r0, r2
 8017baa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017bae:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8017bb2:	429a      	cmp	r2, r3
 8017bb4:	d103      	bne.n	8017bbe <strncmp+0x1c>
 8017bb6:	42a0      	cmp	r0, r4
 8017bb8:	d001      	beq.n	8017bbe <strncmp+0x1c>
 8017bba:	2a00      	cmp	r2, #0
 8017bbc:	d1f5      	bne.n	8017baa <strncmp+0x8>
 8017bbe:	1ad0      	subs	r0, r2, r3
 8017bc0:	bd10      	pop	{r4, pc}
 8017bc2:	4610      	mov	r0, r2
 8017bc4:	e7fc      	b.n	8017bc0 <strncmp+0x1e>

08017bc6 <strstr>:
 8017bc6:	780a      	ldrb	r2, [r1, #0]
 8017bc8:	b570      	push	{r4, r5, r6, lr}
 8017bca:	b96a      	cbnz	r2, 8017be8 <strstr+0x22>
 8017bcc:	bd70      	pop	{r4, r5, r6, pc}
 8017bce:	429a      	cmp	r2, r3
 8017bd0:	d109      	bne.n	8017be6 <strstr+0x20>
 8017bd2:	460c      	mov	r4, r1
 8017bd4:	4605      	mov	r5, r0
 8017bd6:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d0f6      	beq.n	8017bcc <strstr+0x6>
 8017bde:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8017be2:	429e      	cmp	r6, r3
 8017be4:	d0f7      	beq.n	8017bd6 <strstr+0x10>
 8017be6:	3001      	adds	r0, #1
 8017be8:	7803      	ldrb	r3, [r0, #0]
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d1ef      	bne.n	8017bce <strstr+0x8>
 8017bee:	4618      	mov	r0, r3
 8017bf0:	e7ec      	b.n	8017bcc <strstr+0x6>
	...

08017bf4 <_close_r>:
 8017bf4:	b538      	push	{r3, r4, r5, lr}
 8017bf6:	4d06      	ldr	r5, [pc, #24]	@ (8017c10 <_close_r+0x1c>)
 8017bf8:	2300      	movs	r3, #0
 8017bfa:	4604      	mov	r4, r0
 8017bfc:	4608      	mov	r0, r1
 8017bfe:	602b      	str	r3, [r5, #0]
 8017c00:	f7ea fc08 	bl	8002414 <_close>
 8017c04:	1c43      	adds	r3, r0, #1
 8017c06:	d102      	bne.n	8017c0e <_close_r+0x1a>
 8017c08:	682b      	ldr	r3, [r5, #0]
 8017c0a:	b103      	cbz	r3, 8017c0e <_close_r+0x1a>
 8017c0c:	6023      	str	r3, [r4, #0]
 8017c0e:	bd38      	pop	{r3, r4, r5, pc}
 8017c10:	2000b498 	.word	0x2000b498

08017c14 <_lseek_r>:
 8017c14:	b538      	push	{r3, r4, r5, lr}
 8017c16:	4d07      	ldr	r5, [pc, #28]	@ (8017c34 <_lseek_r+0x20>)
 8017c18:	4604      	mov	r4, r0
 8017c1a:	4608      	mov	r0, r1
 8017c1c:	4611      	mov	r1, r2
 8017c1e:	2200      	movs	r2, #0
 8017c20:	602a      	str	r2, [r5, #0]
 8017c22:	461a      	mov	r2, r3
 8017c24:	f7ea fc1d 	bl	8002462 <_lseek>
 8017c28:	1c43      	adds	r3, r0, #1
 8017c2a:	d102      	bne.n	8017c32 <_lseek_r+0x1e>
 8017c2c:	682b      	ldr	r3, [r5, #0]
 8017c2e:	b103      	cbz	r3, 8017c32 <_lseek_r+0x1e>
 8017c30:	6023      	str	r3, [r4, #0]
 8017c32:	bd38      	pop	{r3, r4, r5, pc}
 8017c34:	2000b498 	.word	0x2000b498

08017c38 <_read_r>:
 8017c38:	b538      	push	{r3, r4, r5, lr}
 8017c3a:	4d07      	ldr	r5, [pc, #28]	@ (8017c58 <_read_r+0x20>)
 8017c3c:	4604      	mov	r4, r0
 8017c3e:	4608      	mov	r0, r1
 8017c40:	4611      	mov	r1, r2
 8017c42:	2200      	movs	r2, #0
 8017c44:	602a      	str	r2, [r5, #0]
 8017c46:	461a      	mov	r2, r3
 8017c48:	f7ea fbab 	bl	80023a2 <_read>
 8017c4c:	1c43      	adds	r3, r0, #1
 8017c4e:	d102      	bne.n	8017c56 <_read_r+0x1e>
 8017c50:	682b      	ldr	r3, [r5, #0]
 8017c52:	b103      	cbz	r3, 8017c56 <_read_r+0x1e>
 8017c54:	6023      	str	r3, [r4, #0]
 8017c56:	bd38      	pop	{r3, r4, r5, pc}
 8017c58:	2000b498 	.word	0x2000b498

08017c5c <_sbrk_r>:
 8017c5c:	b538      	push	{r3, r4, r5, lr}
 8017c5e:	4d06      	ldr	r5, [pc, #24]	@ (8017c78 <_sbrk_r+0x1c>)
 8017c60:	2300      	movs	r3, #0
 8017c62:	4604      	mov	r4, r0
 8017c64:	4608      	mov	r0, r1
 8017c66:	602b      	str	r3, [r5, #0]
 8017c68:	f7ea fc08 	bl	800247c <_sbrk>
 8017c6c:	1c43      	adds	r3, r0, #1
 8017c6e:	d102      	bne.n	8017c76 <_sbrk_r+0x1a>
 8017c70:	682b      	ldr	r3, [r5, #0]
 8017c72:	b103      	cbz	r3, 8017c76 <_sbrk_r+0x1a>
 8017c74:	6023      	str	r3, [r4, #0]
 8017c76:	bd38      	pop	{r3, r4, r5, pc}
 8017c78:	2000b498 	.word	0x2000b498

08017c7c <_write_r>:
 8017c7c:	b538      	push	{r3, r4, r5, lr}
 8017c7e:	4d07      	ldr	r5, [pc, #28]	@ (8017c9c <_write_r+0x20>)
 8017c80:	4604      	mov	r4, r0
 8017c82:	4608      	mov	r0, r1
 8017c84:	4611      	mov	r1, r2
 8017c86:	2200      	movs	r2, #0
 8017c88:	602a      	str	r2, [r5, #0]
 8017c8a:	461a      	mov	r2, r3
 8017c8c:	f7ea fba6 	bl	80023dc <_write>
 8017c90:	1c43      	adds	r3, r0, #1
 8017c92:	d102      	bne.n	8017c9a <_write_r+0x1e>
 8017c94:	682b      	ldr	r3, [r5, #0]
 8017c96:	b103      	cbz	r3, 8017c9a <_write_r+0x1e>
 8017c98:	6023      	str	r3, [r4, #0]
 8017c9a:	bd38      	pop	{r3, r4, r5, pc}
 8017c9c:	2000b498 	.word	0x2000b498

08017ca0 <__errno>:
 8017ca0:	4b01      	ldr	r3, [pc, #4]	@ (8017ca8 <__errno+0x8>)
 8017ca2:	6818      	ldr	r0, [r3, #0]
 8017ca4:	4770      	bx	lr
 8017ca6:	bf00      	nop
 8017ca8:	200001e4 	.word	0x200001e4

08017cac <__libc_init_array>:
 8017cac:	b570      	push	{r4, r5, r6, lr}
 8017cae:	4d0d      	ldr	r5, [pc, #52]	@ (8017ce4 <__libc_init_array+0x38>)
 8017cb0:	4c0d      	ldr	r4, [pc, #52]	@ (8017ce8 <__libc_init_array+0x3c>)
 8017cb2:	1b64      	subs	r4, r4, r5
 8017cb4:	10a4      	asrs	r4, r4, #2
 8017cb6:	2600      	movs	r6, #0
 8017cb8:	42a6      	cmp	r6, r4
 8017cba:	d109      	bne.n	8017cd0 <__libc_init_array+0x24>
 8017cbc:	4d0b      	ldr	r5, [pc, #44]	@ (8017cec <__libc_init_array+0x40>)
 8017cbe:	4c0c      	ldr	r4, [pc, #48]	@ (8017cf0 <__libc_init_array+0x44>)
 8017cc0:	f000 fef8 	bl	8018ab4 <_init>
 8017cc4:	1b64      	subs	r4, r4, r5
 8017cc6:	10a4      	asrs	r4, r4, #2
 8017cc8:	2600      	movs	r6, #0
 8017cca:	42a6      	cmp	r6, r4
 8017ccc:	d105      	bne.n	8017cda <__libc_init_array+0x2e>
 8017cce:	bd70      	pop	{r4, r5, r6, pc}
 8017cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cd4:	4798      	blx	r3
 8017cd6:	3601      	adds	r6, #1
 8017cd8:	e7ee      	b.n	8017cb8 <__libc_init_array+0xc>
 8017cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8017cde:	4798      	blx	r3
 8017ce0:	3601      	adds	r6, #1
 8017ce2:	e7f2      	b.n	8017cca <__libc_init_array+0x1e>
 8017ce4:	08019958 	.word	0x08019958
 8017ce8:	08019958 	.word	0x08019958
 8017cec:	08019958 	.word	0x08019958
 8017cf0:	08019960 	.word	0x08019960

08017cf4 <__retarget_lock_init_recursive>:
 8017cf4:	4770      	bx	lr

08017cf6 <__retarget_lock_acquire_recursive>:
 8017cf6:	4770      	bx	lr

08017cf8 <__retarget_lock_release_recursive>:
 8017cf8:	4770      	bx	lr

08017cfa <strcpy>:
 8017cfa:	4603      	mov	r3, r0
 8017cfc:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017d00:	f803 2b01 	strb.w	r2, [r3], #1
 8017d04:	2a00      	cmp	r2, #0
 8017d06:	d1f9      	bne.n	8017cfc <strcpy+0x2>
 8017d08:	4770      	bx	lr

08017d0a <memcpy>:
 8017d0a:	440a      	add	r2, r1
 8017d0c:	4291      	cmp	r1, r2
 8017d0e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8017d12:	d100      	bne.n	8017d16 <memcpy+0xc>
 8017d14:	4770      	bx	lr
 8017d16:	b510      	push	{r4, lr}
 8017d18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8017d1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8017d20:	4291      	cmp	r1, r2
 8017d22:	d1f9      	bne.n	8017d18 <memcpy+0xe>
 8017d24:	bd10      	pop	{r4, pc}
	...

08017d28 <__assert_func>:
 8017d28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017d2a:	4614      	mov	r4, r2
 8017d2c:	461a      	mov	r2, r3
 8017d2e:	4b09      	ldr	r3, [pc, #36]	@ (8017d54 <__assert_func+0x2c>)
 8017d30:	681b      	ldr	r3, [r3, #0]
 8017d32:	4605      	mov	r5, r0
 8017d34:	68d8      	ldr	r0, [r3, #12]
 8017d36:	b954      	cbnz	r4, 8017d4e <__assert_func+0x26>
 8017d38:	4b07      	ldr	r3, [pc, #28]	@ (8017d58 <__assert_func+0x30>)
 8017d3a:	461c      	mov	r4, r3
 8017d3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8017d40:	9100      	str	r1, [sp, #0]
 8017d42:	462b      	mov	r3, r5
 8017d44:	4905      	ldr	r1, [pc, #20]	@ (8017d5c <__assert_func+0x34>)
 8017d46:	f000 fd3f 	bl	80187c8 <fiprintf>
 8017d4a:	f000 fde3 	bl	8018914 <abort>
 8017d4e:	4b04      	ldr	r3, [pc, #16]	@ (8017d60 <__assert_func+0x38>)
 8017d50:	e7f4      	b.n	8017d3c <__assert_func+0x14>
 8017d52:	bf00      	nop
 8017d54:	200001e4 	.word	0x200001e4
 8017d58:	0801991b 	.word	0x0801991b
 8017d5c:	080198ed 	.word	0x080198ed
 8017d60:	080198e0 	.word	0x080198e0

08017d64 <__env_lock>:
 8017d64:	4801      	ldr	r0, [pc, #4]	@ (8017d6c <__env_lock+0x8>)
 8017d66:	f7ff bfc6 	b.w	8017cf6 <__retarget_lock_acquire_recursive>
 8017d6a:	bf00      	nop
 8017d6c:	2000b49c 	.word	0x2000b49c

08017d70 <__env_unlock>:
 8017d70:	4801      	ldr	r0, [pc, #4]	@ (8017d78 <__env_unlock+0x8>)
 8017d72:	f7ff bfc1 	b.w	8017cf8 <__retarget_lock_release_recursive>
 8017d76:	bf00      	nop
 8017d78:	2000b49c 	.word	0x2000b49c

08017d7c <_free_r>:
 8017d7c:	b538      	push	{r3, r4, r5, lr}
 8017d7e:	4605      	mov	r5, r0
 8017d80:	2900      	cmp	r1, #0
 8017d82:	d041      	beq.n	8017e08 <_free_r+0x8c>
 8017d84:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017d88:	1f0c      	subs	r4, r1, #4
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	bfb8      	it	lt
 8017d8e:	18e4      	addlt	r4, r4, r3
 8017d90:	f7ff fc1e 	bl	80175d0 <__malloc_lock>
 8017d94:	4a1d      	ldr	r2, [pc, #116]	@ (8017e0c <_free_r+0x90>)
 8017d96:	6813      	ldr	r3, [r2, #0]
 8017d98:	b933      	cbnz	r3, 8017da8 <_free_r+0x2c>
 8017d9a:	6063      	str	r3, [r4, #4]
 8017d9c:	6014      	str	r4, [r2, #0]
 8017d9e:	4628      	mov	r0, r5
 8017da0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017da4:	f7ff bc1a 	b.w	80175dc <__malloc_unlock>
 8017da8:	42a3      	cmp	r3, r4
 8017daa:	d908      	bls.n	8017dbe <_free_r+0x42>
 8017dac:	6820      	ldr	r0, [r4, #0]
 8017dae:	1821      	adds	r1, r4, r0
 8017db0:	428b      	cmp	r3, r1
 8017db2:	bf01      	itttt	eq
 8017db4:	6819      	ldreq	r1, [r3, #0]
 8017db6:	685b      	ldreq	r3, [r3, #4]
 8017db8:	1809      	addeq	r1, r1, r0
 8017dba:	6021      	streq	r1, [r4, #0]
 8017dbc:	e7ed      	b.n	8017d9a <_free_r+0x1e>
 8017dbe:	461a      	mov	r2, r3
 8017dc0:	685b      	ldr	r3, [r3, #4]
 8017dc2:	b10b      	cbz	r3, 8017dc8 <_free_r+0x4c>
 8017dc4:	42a3      	cmp	r3, r4
 8017dc6:	d9fa      	bls.n	8017dbe <_free_r+0x42>
 8017dc8:	6811      	ldr	r1, [r2, #0]
 8017dca:	1850      	adds	r0, r2, r1
 8017dcc:	42a0      	cmp	r0, r4
 8017dce:	d10b      	bne.n	8017de8 <_free_r+0x6c>
 8017dd0:	6820      	ldr	r0, [r4, #0]
 8017dd2:	4401      	add	r1, r0
 8017dd4:	1850      	adds	r0, r2, r1
 8017dd6:	4283      	cmp	r3, r0
 8017dd8:	6011      	str	r1, [r2, #0]
 8017dda:	d1e0      	bne.n	8017d9e <_free_r+0x22>
 8017ddc:	6818      	ldr	r0, [r3, #0]
 8017dde:	685b      	ldr	r3, [r3, #4]
 8017de0:	6053      	str	r3, [r2, #4]
 8017de2:	4408      	add	r0, r1
 8017de4:	6010      	str	r0, [r2, #0]
 8017de6:	e7da      	b.n	8017d9e <_free_r+0x22>
 8017de8:	d902      	bls.n	8017df0 <_free_r+0x74>
 8017dea:	230c      	movs	r3, #12
 8017dec:	602b      	str	r3, [r5, #0]
 8017dee:	e7d6      	b.n	8017d9e <_free_r+0x22>
 8017df0:	6820      	ldr	r0, [r4, #0]
 8017df2:	1821      	adds	r1, r4, r0
 8017df4:	428b      	cmp	r3, r1
 8017df6:	bf04      	itt	eq
 8017df8:	6819      	ldreq	r1, [r3, #0]
 8017dfa:	685b      	ldreq	r3, [r3, #4]
 8017dfc:	6063      	str	r3, [r4, #4]
 8017dfe:	bf04      	itt	eq
 8017e00:	1809      	addeq	r1, r1, r0
 8017e02:	6021      	streq	r1, [r4, #0]
 8017e04:	6054      	str	r4, [r2, #4]
 8017e06:	e7ca      	b.n	8017d9e <_free_r+0x22>
 8017e08:	bd38      	pop	{r3, r4, r5, pc}
 8017e0a:	bf00      	nop
 8017e0c:	2000b358 	.word	0x2000b358

08017e10 <_malloc_usable_size_r>:
 8017e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8017e14:	1f18      	subs	r0, r3, #4
 8017e16:	2b00      	cmp	r3, #0
 8017e18:	bfbc      	itt	lt
 8017e1a:	580b      	ldrlt	r3, [r1, r0]
 8017e1c:	18c0      	addlt	r0, r0, r3
 8017e1e:	4770      	bx	lr

08017e20 <__ssputs_r>:
 8017e20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017e24:	688e      	ldr	r6, [r1, #8]
 8017e26:	461f      	mov	r7, r3
 8017e28:	42be      	cmp	r6, r7
 8017e2a:	680b      	ldr	r3, [r1, #0]
 8017e2c:	4682      	mov	sl, r0
 8017e2e:	460c      	mov	r4, r1
 8017e30:	4690      	mov	r8, r2
 8017e32:	d82d      	bhi.n	8017e90 <__ssputs_r+0x70>
 8017e34:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8017e38:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8017e3c:	d026      	beq.n	8017e8c <__ssputs_r+0x6c>
 8017e3e:	6965      	ldr	r5, [r4, #20]
 8017e40:	6909      	ldr	r1, [r1, #16]
 8017e42:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017e46:	eba3 0901 	sub.w	r9, r3, r1
 8017e4a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8017e4e:	1c7b      	adds	r3, r7, #1
 8017e50:	444b      	add	r3, r9
 8017e52:	106d      	asrs	r5, r5, #1
 8017e54:	429d      	cmp	r5, r3
 8017e56:	bf38      	it	cc
 8017e58:	461d      	movcc	r5, r3
 8017e5a:	0553      	lsls	r3, r2, #21
 8017e5c:	d527      	bpl.n	8017eae <__ssputs_r+0x8e>
 8017e5e:	4629      	mov	r1, r5
 8017e60:	f7ff fb36 	bl	80174d0 <_malloc_r>
 8017e64:	4606      	mov	r6, r0
 8017e66:	b360      	cbz	r0, 8017ec2 <__ssputs_r+0xa2>
 8017e68:	6921      	ldr	r1, [r4, #16]
 8017e6a:	464a      	mov	r2, r9
 8017e6c:	f7ff ff4d 	bl	8017d0a <memcpy>
 8017e70:	89a3      	ldrh	r3, [r4, #12]
 8017e72:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8017e76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8017e7a:	81a3      	strh	r3, [r4, #12]
 8017e7c:	6126      	str	r6, [r4, #16]
 8017e7e:	6165      	str	r5, [r4, #20]
 8017e80:	444e      	add	r6, r9
 8017e82:	eba5 0509 	sub.w	r5, r5, r9
 8017e86:	6026      	str	r6, [r4, #0]
 8017e88:	60a5      	str	r5, [r4, #8]
 8017e8a:	463e      	mov	r6, r7
 8017e8c:	42be      	cmp	r6, r7
 8017e8e:	d900      	bls.n	8017e92 <__ssputs_r+0x72>
 8017e90:	463e      	mov	r6, r7
 8017e92:	6820      	ldr	r0, [r4, #0]
 8017e94:	4632      	mov	r2, r6
 8017e96:	4641      	mov	r1, r8
 8017e98:	f7ff fe54 	bl	8017b44 <memmove>
 8017e9c:	68a3      	ldr	r3, [r4, #8]
 8017e9e:	1b9b      	subs	r3, r3, r6
 8017ea0:	60a3      	str	r3, [r4, #8]
 8017ea2:	6823      	ldr	r3, [r4, #0]
 8017ea4:	4433      	add	r3, r6
 8017ea6:	6023      	str	r3, [r4, #0]
 8017ea8:	2000      	movs	r0, #0
 8017eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017eae:	462a      	mov	r2, r5
 8017eb0:	f7ff fc0e 	bl	80176d0 <_realloc_r>
 8017eb4:	4606      	mov	r6, r0
 8017eb6:	2800      	cmp	r0, #0
 8017eb8:	d1e0      	bne.n	8017e7c <__ssputs_r+0x5c>
 8017eba:	6921      	ldr	r1, [r4, #16]
 8017ebc:	4650      	mov	r0, sl
 8017ebe:	f7ff ff5d 	bl	8017d7c <_free_r>
 8017ec2:	230c      	movs	r3, #12
 8017ec4:	f8ca 3000 	str.w	r3, [sl]
 8017ec8:	89a3      	ldrh	r3, [r4, #12]
 8017eca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8017ece:	81a3      	strh	r3, [r4, #12]
 8017ed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017ed4:	e7e9      	b.n	8017eaa <__ssputs_r+0x8a>
	...

08017ed8 <_svfiprintf_r>:
 8017ed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017edc:	4698      	mov	r8, r3
 8017ede:	898b      	ldrh	r3, [r1, #12]
 8017ee0:	061b      	lsls	r3, r3, #24
 8017ee2:	b09d      	sub	sp, #116	@ 0x74
 8017ee4:	4607      	mov	r7, r0
 8017ee6:	460d      	mov	r5, r1
 8017ee8:	4614      	mov	r4, r2
 8017eea:	d510      	bpl.n	8017f0e <_svfiprintf_r+0x36>
 8017eec:	690b      	ldr	r3, [r1, #16]
 8017eee:	b973      	cbnz	r3, 8017f0e <_svfiprintf_r+0x36>
 8017ef0:	2140      	movs	r1, #64	@ 0x40
 8017ef2:	f7ff faed 	bl	80174d0 <_malloc_r>
 8017ef6:	6028      	str	r0, [r5, #0]
 8017ef8:	6128      	str	r0, [r5, #16]
 8017efa:	b930      	cbnz	r0, 8017f0a <_svfiprintf_r+0x32>
 8017efc:	230c      	movs	r3, #12
 8017efe:	603b      	str	r3, [r7, #0]
 8017f00:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8017f04:	b01d      	add	sp, #116	@ 0x74
 8017f06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017f0a:	2340      	movs	r3, #64	@ 0x40
 8017f0c:	616b      	str	r3, [r5, #20]
 8017f0e:	2300      	movs	r3, #0
 8017f10:	9309      	str	r3, [sp, #36]	@ 0x24
 8017f12:	2320      	movs	r3, #32
 8017f14:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8017f18:	f8cd 800c 	str.w	r8, [sp, #12]
 8017f1c:	2330      	movs	r3, #48	@ 0x30
 8017f1e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80180bc <_svfiprintf_r+0x1e4>
 8017f22:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8017f26:	f04f 0901 	mov.w	r9, #1
 8017f2a:	4623      	mov	r3, r4
 8017f2c:	469a      	mov	sl, r3
 8017f2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8017f32:	b10a      	cbz	r2, 8017f38 <_svfiprintf_r+0x60>
 8017f34:	2a25      	cmp	r2, #37	@ 0x25
 8017f36:	d1f9      	bne.n	8017f2c <_svfiprintf_r+0x54>
 8017f38:	ebba 0b04 	subs.w	fp, sl, r4
 8017f3c:	d00b      	beq.n	8017f56 <_svfiprintf_r+0x7e>
 8017f3e:	465b      	mov	r3, fp
 8017f40:	4622      	mov	r2, r4
 8017f42:	4629      	mov	r1, r5
 8017f44:	4638      	mov	r0, r7
 8017f46:	f7ff ff6b 	bl	8017e20 <__ssputs_r>
 8017f4a:	3001      	adds	r0, #1
 8017f4c:	f000 80a7 	beq.w	801809e <_svfiprintf_r+0x1c6>
 8017f50:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017f52:	445a      	add	r2, fp
 8017f54:	9209      	str	r2, [sp, #36]	@ 0x24
 8017f56:	f89a 3000 	ldrb.w	r3, [sl]
 8017f5a:	2b00      	cmp	r3, #0
 8017f5c:	f000 809f 	beq.w	801809e <_svfiprintf_r+0x1c6>
 8017f60:	2300      	movs	r3, #0
 8017f62:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8017f66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017f6a:	f10a 0a01 	add.w	sl, sl, #1
 8017f6e:	9304      	str	r3, [sp, #16]
 8017f70:	9307      	str	r3, [sp, #28]
 8017f72:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8017f76:	931a      	str	r3, [sp, #104]	@ 0x68
 8017f78:	4654      	mov	r4, sl
 8017f7a:	2205      	movs	r2, #5
 8017f7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017f80:	484e      	ldr	r0, [pc, #312]	@ (80180bc <_svfiprintf_r+0x1e4>)
 8017f82:	f7e8 f965 	bl	8000250 <memchr>
 8017f86:	9a04      	ldr	r2, [sp, #16]
 8017f88:	b9d8      	cbnz	r0, 8017fc2 <_svfiprintf_r+0xea>
 8017f8a:	06d0      	lsls	r0, r2, #27
 8017f8c:	bf44      	itt	mi
 8017f8e:	2320      	movmi	r3, #32
 8017f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f94:	0711      	lsls	r1, r2, #28
 8017f96:	bf44      	itt	mi
 8017f98:	232b      	movmi	r3, #43	@ 0x2b
 8017f9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8017f9e:	f89a 3000 	ldrb.w	r3, [sl]
 8017fa2:	2b2a      	cmp	r3, #42	@ 0x2a
 8017fa4:	d015      	beq.n	8017fd2 <_svfiprintf_r+0xfa>
 8017fa6:	9a07      	ldr	r2, [sp, #28]
 8017fa8:	4654      	mov	r4, sl
 8017faa:	2000      	movs	r0, #0
 8017fac:	f04f 0c0a 	mov.w	ip, #10
 8017fb0:	4621      	mov	r1, r4
 8017fb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017fb6:	3b30      	subs	r3, #48	@ 0x30
 8017fb8:	2b09      	cmp	r3, #9
 8017fba:	d94b      	bls.n	8018054 <_svfiprintf_r+0x17c>
 8017fbc:	b1b0      	cbz	r0, 8017fec <_svfiprintf_r+0x114>
 8017fbe:	9207      	str	r2, [sp, #28]
 8017fc0:	e014      	b.n	8017fec <_svfiprintf_r+0x114>
 8017fc2:	eba0 0308 	sub.w	r3, r0, r8
 8017fc6:	fa09 f303 	lsl.w	r3, r9, r3
 8017fca:	4313      	orrs	r3, r2
 8017fcc:	9304      	str	r3, [sp, #16]
 8017fce:	46a2      	mov	sl, r4
 8017fd0:	e7d2      	b.n	8017f78 <_svfiprintf_r+0xa0>
 8017fd2:	9b03      	ldr	r3, [sp, #12]
 8017fd4:	1d19      	adds	r1, r3, #4
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	9103      	str	r1, [sp, #12]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	bfbb      	ittet	lt
 8017fde:	425b      	neglt	r3, r3
 8017fe0:	f042 0202 	orrlt.w	r2, r2, #2
 8017fe4:	9307      	strge	r3, [sp, #28]
 8017fe6:	9307      	strlt	r3, [sp, #28]
 8017fe8:	bfb8      	it	lt
 8017fea:	9204      	strlt	r2, [sp, #16]
 8017fec:	7823      	ldrb	r3, [r4, #0]
 8017fee:	2b2e      	cmp	r3, #46	@ 0x2e
 8017ff0:	d10a      	bne.n	8018008 <_svfiprintf_r+0x130>
 8017ff2:	7863      	ldrb	r3, [r4, #1]
 8017ff4:	2b2a      	cmp	r3, #42	@ 0x2a
 8017ff6:	d132      	bne.n	801805e <_svfiprintf_r+0x186>
 8017ff8:	9b03      	ldr	r3, [sp, #12]
 8017ffa:	1d1a      	adds	r2, r3, #4
 8017ffc:	681b      	ldr	r3, [r3, #0]
 8017ffe:	9203      	str	r2, [sp, #12]
 8018000:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018004:	3402      	adds	r4, #2
 8018006:	9305      	str	r3, [sp, #20]
 8018008:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80180cc <_svfiprintf_r+0x1f4>
 801800c:	7821      	ldrb	r1, [r4, #0]
 801800e:	2203      	movs	r2, #3
 8018010:	4650      	mov	r0, sl
 8018012:	f7e8 f91d 	bl	8000250 <memchr>
 8018016:	b138      	cbz	r0, 8018028 <_svfiprintf_r+0x150>
 8018018:	9b04      	ldr	r3, [sp, #16]
 801801a:	eba0 000a 	sub.w	r0, r0, sl
 801801e:	2240      	movs	r2, #64	@ 0x40
 8018020:	4082      	lsls	r2, r0
 8018022:	4313      	orrs	r3, r2
 8018024:	3401      	adds	r4, #1
 8018026:	9304      	str	r3, [sp, #16]
 8018028:	f814 1b01 	ldrb.w	r1, [r4], #1
 801802c:	4824      	ldr	r0, [pc, #144]	@ (80180c0 <_svfiprintf_r+0x1e8>)
 801802e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8018032:	2206      	movs	r2, #6
 8018034:	f7e8 f90c 	bl	8000250 <memchr>
 8018038:	2800      	cmp	r0, #0
 801803a:	d036      	beq.n	80180aa <_svfiprintf_r+0x1d2>
 801803c:	4b21      	ldr	r3, [pc, #132]	@ (80180c4 <_svfiprintf_r+0x1ec>)
 801803e:	bb1b      	cbnz	r3, 8018088 <_svfiprintf_r+0x1b0>
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	3307      	adds	r3, #7
 8018044:	f023 0307 	bic.w	r3, r3, #7
 8018048:	3308      	adds	r3, #8
 801804a:	9303      	str	r3, [sp, #12]
 801804c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801804e:	4433      	add	r3, r6
 8018050:	9309      	str	r3, [sp, #36]	@ 0x24
 8018052:	e76a      	b.n	8017f2a <_svfiprintf_r+0x52>
 8018054:	fb0c 3202 	mla	r2, ip, r2, r3
 8018058:	460c      	mov	r4, r1
 801805a:	2001      	movs	r0, #1
 801805c:	e7a8      	b.n	8017fb0 <_svfiprintf_r+0xd8>
 801805e:	2300      	movs	r3, #0
 8018060:	3401      	adds	r4, #1
 8018062:	9305      	str	r3, [sp, #20]
 8018064:	4619      	mov	r1, r3
 8018066:	f04f 0c0a 	mov.w	ip, #10
 801806a:	4620      	mov	r0, r4
 801806c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018070:	3a30      	subs	r2, #48	@ 0x30
 8018072:	2a09      	cmp	r2, #9
 8018074:	d903      	bls.n	801807e <_svfiprintf_r+0x1a6>
 8018076:	2b00      	cmp	r3, #0
 8018078:	d0c6      	beq.n	8018008 <_svfiprintf_r+0x130>
 801807a:	9105      	str	r1, [sp, #20]
 801807c:	e7c4      	b.n	8018008 <_svfiprintf_r+0x130>
 801807e:	fb0c 2101 	mla	r1, ip, r1, r2
 8018082:	4604      	mov	r4, r0
 8018084:	2301      	movs	r3, #1
 8018086:	e7f0      	b.n	801806a <_svfiprintf_r+0x192>
 8018088:	ab03      	add	r3, sp, #12
 801808a:	9300      	str	r3, [sp, #0]
 801808c:	462a      	mov	r2, r5
 801808e:	4b0e      	ldr	r3, [pc, #56]	@ (80180c8 <_svfiprintf_r+0x1f0>)
 8018090:	a904      	add	r1, sp, #16
 8018092:	4638      	mov	r0, r7
 8018094:	f3af 8000 	nop.w
 8018098:	1c42      	adds	r2, r0, #1
 801809a:	4606      	mov	r6, r0
 801809c:	d1d6      	bne.n	801804c <_svfiprintf_r+0x174>
 801809e:	89ab      	ldrh	r3, [r5, #12]
 80180a0:	065b      	lsls	r3, r3, #25
 80180a2:	f53f af2d 	bmi.w	8017f00 <_svfiprintf_r+0x28>
 80180a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80180a8:	e72c      	b.n	8017f04 <_svfiprintf_r+0x2c>
 80180aa:	ab03      	add	r3, sp, #12
 80180ac:	9300      	str	r3, [sp, #0]
 80180ae:	462a      	mov	r2, r5
 80180b0:	4b05      	ldr	r3, [pc, #20]	@ (80180c8 <_svfiprintf_r+0x1f0>)
 80180b2:	a904      	add	r1, sp, #16
 80180b4:	4638      	mov	r0, r7
 80180b6:	f000 f9bb 	bl	8018430 <_printf_i>
 80180ba:	e7ed      	b.n	8018098 <_svfiprintf_r+0x1c0>
 80180bc:	0801991c 	.word	0x0801991c
 80180c0:	08019926 	.word	0x08019926
 80180c4:	00000000 	.word	0x00000000
 80180c8:	08017e21 	.word	0x08017e21
 80180cc:	08019922 	.word	0x08019922

080180d0 <__sfputc_r>:
 80180d0:	6893      	ldr	r3, [r2, #8]
 80180d2:	3b01      	subs	r3, #1
 80180d4:	2b00      	cmp	r3, #0
 80180d6:	b410      	push	{r4}
 80180d8:	6093      	str	r3, [r2, #8]
 80180da:	da08      	bge.n	80180ee <__sfputc_r+0x1e>
 80180dc:	6994      	ldr	r4, [r2, #24]
 80180de:	42a3      	cmp	r3, r4
 80180e0:	db01      	blt.n	80180e6 <__sfputc_r+0x16>
 80180e2:	290a      	cmp	r1, #10
 80180e4:	d103      	bne.n	80180ee <__sfputc_r+0x1e>
 80180e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180ea:	f000 bb7f 	b.w	80187ec <__swbuf_r>
 80180ee:	6813      	ldr	r3, [r2, #0]
 80180f0:	1c58      	adds	r0, r3, #1
 80180f2:	6010      	str	r0, [r2, #0]
 80180f4:	7019      	strb	r1, [r3, #0]
 80180f6:	4608      	mov	r0, r1
 80180f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80180fc:	4770      	bx	lr

080180fe <__sfputs_r>:
 80180fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018100:	4606      	mov	r6, r0
 8018102:	460f      	mov	r7, r1
 8018104:	4614      	mov	r4, r2
 8018106:	18d5      	adds	r5, r2, r3
 8018108:	42ac      	cmp	r4, r5
 801810a:	d101      	bne.n	8018110 <__sfputs_r+0x12>
 801810c:	2000      	movs	r0, #0
 801810e:	e007      	b.n	8018120 <__sfputs_r+0x22>
 8018110:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018114:	463a      	mov	r2, r7
 8018116:	4630      	mov	r0, r6
 8018118:	f7ff ffda 	bl	80180d0 <__sfputc_r>
 801811c:	1c43      	adds	r3, r0, #1
 801811e:	d1f3      	bne.n	8018108 <__sfputs_r+0xa>
 8018120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018124 <_vfiprintf_r>:
 8018124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018128:	460d      	mov	r5, r1
 801812a:	b09d      	sub	sp, #116	@ 0x74
 801812c:	4614      	mov	r4, r2
 801812e:	4698      	mov	r8, r3
 8018130:	4606      	mov	r6, r0
 8018132:	b118      	cbz	r0, 801813c <_vfiprintf_r+0x18>
 8018134:	6a03      	ldr	r3, [r0, #32]
 8018136:	b90b      	cbnz	r3, 801813c <_vfiprintf_r+0x18>
 8018138:	f7ff fbfc 	bl	8017934 <__sinit>
 801813c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801813e:	07d9      	lsls	r1, r3, #31
 8018140:	d405      	bmi.n	801814e <_vfiprintf_r+0x2a>
 8018142:	89ab      	ldrh	r3, [r5, #12]
 8018144:	059a      	lsls	r2, r3, #22
 8018146:	d402      	bmi.n	801814e <_vfiprintf_r+0x2a>
 8018148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801814a:	f7ff fdd4 	bl	8017cf6 <__retarget_lock_acquire_recursive>
 801814e:	89ab      	ldrh	r3, [r5, #12]
 8018150:	071b      	lsls	r3, r3, #28
 8018152:	d501      	bpl.n	8018158 <_vfiprintf_r+0x34>
 8018154:	692b      	ldr	r3, [r5, #16]
 8018156:	b99b      	cbnz	r3, 8018180 <_vfiprintf_r+0x5c>
 8018158:	4629      	mov	r1, r5
 801815a:	4630      	mov	r0, r6
 801815c:	f000 fb84 	bl	8018868 <__swsetup_r>
 8018160:	b170      	cbz	r0, 8018180 <_vfiprintf_r+0x5c>
 8018162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018164:	07dc      	lsls	r4, r3, #31
 8018166:	d504      	bpl.n	8018172 <_vfiprintf_r+0x4e>
 8018168:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801816c:	b01d      	add	sp, #116	@ 0x74
 801816e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018172:	89ab      	ldrh	r3, [r5, #12]
 8018174:	0598      	lsls	r0, r3, #22
 8018176:	d4f7      	bmi.n	8018168 <_vfiprintf_r+0x44>
 8018178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801817a:	f7ff fdbd 	bl	8017cf8 <__retarget_lock_release_recursive>
 801817e:	e7f3      	b.n	8018168 <_vfiprintf_r+0x44>
 8018180:	2300      	movs	r3, #0
 8018182:	9309      	str	r3, [sp, #36]	@ 0x24
 8018184:	2320      	movs	r3, #32
 8018186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801818a:	f8cd 800c 	str.w	r8, [sp, #12]
 801818e:	2330      	movs	r3, #48	@ 0x30
 8018190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8018340 <_vfiprintf_r+0x21c>
 8018194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8018198:	f04f 0901 	mov.w	r9, #1
 801819c:	4623      	mov	r3, r4
 801819e:	469a      	mov	sl, r3
 80181a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80181a4:	b10a      	cbz	r2, 80181aa <_vfiprintf_r+0x86>
 80181a6:	2a25      	cmp	r2, #37	@ 0x25
 80181a8:	d1f9      	bne.n	801819e <_vfiprintf_r+0x7a>
 80181aa:	ebba 0b04 	subs.w	fp, sl, r4
 80181ae:	d00b      	beq.n	80181c8 <_vfiprintf_r+0xa4>
 80181b0:	465b      	mov	r3, fp
 80181b2:	4622      	mov	r2, r4
 80181b4:	4629      	mov	r1, r5
 80181b6:	4630      	mov	r0, r6
 80181b8:	f7ff ffa1 	bl	80180fe <__sfputs_r>
 80181bc:	3001      	adds	r0, #1
 80181be:	f000 80a7 	beq.w	8018310 <_vfiprintf_r+0x1ec>
 80181c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80181c4:	445a      	add	r2, fp
 80181c6:	9209      	str	r2, [sp, #36]	@ 0x24
 80181c8:	f89a 3000 	ldrb.w	r3, [sl]
 80181cc:	2b00      	cmp	r3, #0
 80181ce:	f000 809f 	beq.w	8018310 <_vfiprintf_r+0x1ec>
 80181d2:	2300      	movs	r3, #0
 80181d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80181d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80181dc:	f10a 0a01 	add.w	sl, sl, #1
 80181e0:	9304      	str	r3, [sp, #16]
 80181e2:	9307      	str	r3, [sp, #28]
 80181e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80181e8:	931a      	str	r3, [sp, #104]	@ 0x68
 80181ea:	4654      	mov	r4, sl
 80181ec:	2205      	movs	r2, #5
 80181ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181f2:	4853      	ldr	r0, [pc, #332]	@ (8018340 <_vfiprintf_r+0x21c>)
 80181f4:	f7e8 f82c 	bl	8000250 <memchr>
 80181f8:	9a04      	ldr	r2, [sp, #16]
 80181fa:	b9d8      	cbnz	r0, 8018234 <_vfiprintf_r+0x110>
 80181fc:	06d1      	lsls	r1, r2, #27
 80181fe:	bf44      	itt	mi
 8018200:	2320      	movmi	r3, #32
 8018202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018206:	0713      	lsls	r3, r2, #28
 8018208:	bf44      	itt	mi
 801820a:	232b      	movmi	r3, #43	@ 0x2b
 801820c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8018210:	f89a 3000 	ldrb.w	r3, [sl]
 8018214:	2b2a      	cmp	r3, #42	@ 0x2a
 8018216:	d015      	beq.n	8018244 <_vfiprintf_r+0x120>
 8018218:	9a07      	ldr	r2, [sp, #28]
 801821a:	4654      	mov	r4, sl
 801821c:	2000      	movs	r0, #0
 801821e:	f04f 0c0a 	mov.w	ip, #10
 8018222:	4621      	mov	r1, r4
 8018224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018228:	3b30      	subs	r3, #48	@ 0x30
 801822a:	2b09      	cmp	r3, #9
 801822c:	d94b      	bls.n	80182c6 <_vfiprintf_r+0x1a2>
 801822e:	b1b0      	cbz	r0, 801825e <_vfiprintf_r+0x13a>
 8018230:	9207      	str	r2, [sp, #28]
 8018232:	e014      	b.n	801825e <_vfiprintf_r+0x13a>
 8018234:	eba0 0308 	sub.w	r3, r0, r8
 8018238:	fa09 f303 	lsl.w	r3, r9, r3
 801823c:	4313      	orrs	r3, r2
 801823e:	9304      	str	r3, [sp, #16]
 8018240:	46a2      	mov	sl, r4
 8018242:	e7d2      	b.n	80181ea <_vfiprintf_r+0xc6>
 8018244:	9b03      	ldr	r3, [sp, #12]
 8018246:	1d19      	adds	r1, r3, #4
 8018248:	681b      	ldr	r3, [r3, #0]
 801824a:	9103      	str	r1, [sp, #12]
 801824c:	2b00      	cmp	r3, #0
 801824e:	bfbb      	ittet	lt
 8018250:	425b      	neglt	r3, r3
 8018252:	f042 0202 	orrlt.w	r2, r2, #2
 8018256:	9307      	strge	r3, [sp, #28]
 8018258:	9307      	strlt	r3, [sp, #28]
 801825a:	bfb8      	it	lt
 801825c:	9204      	strlt	r2, [sp, #16]
 801825e:	7823      	ldrb	r3, [r4, #0]
 8018260:	2b2e      	cmp	r3, #46	@ 0x2e
 8018262:	d10a      	bne.n	801827a <_vfiprintf_r+0x156>
 8018264:	7863      	ldrb	r3, [r4, #1]
 8018266:	2b2a      	cmp	r3, #42	@ 0x2a
 8018268:	d132      	bne.n	80182d0 <_vfiprintf_r+0x1ac>
 801826a:	9b03      	ldr	r3, [sp, #12]
 801826c:	1d1a      	adds	r2, r3, #4
 801826e:	681b      	ldr	r3, [r3, #0]
 8018270:	9203      	str	r2, [sp, #12]
 8018272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8018276:	3402      	adds	r4, #2
 8018278:	9305      	str	r3, [sp, #20]
 801827a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8018350 <_vfiprintf_r+0x22c>
 801827e:	7821      	ldrb	r1, [r4, #0]
 8018280:	2203      	movs	r2, #3
 8018282:	4650      	mov	r0, sl
 8018284:	f7e7 ffe4 	bl	8000250 <memchr>
 8018288:	b138      	cbz	r0, 801829a <_vfiprintf_r+0x176>
 801828a:	9b04      	ldr	r3, [sp, #16]
 801828c:	eba0 000a 	sub.w	r0, r0, sl
 8018290:	2240      	movs	r2, #64	@ 0x40
 8018292:	4082      	lsls	r2, r0
 8018294:	4313      	orrs	r3, r2
 8018296:	3401      	adds	r4, #1
 8018298:	9304      	str	r3, [sp, #16]
 801829a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801829e:	4829      	ldr	r0, [pc, #164]	@ (8018344 <_vfiprintf_r+0x220>)
 80182a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80182a4:	2206      	movs	r2, #6
 80182a6:	f7e7 ffd3 	bl	8000250 <memchr>
 80182aa:	2800      	cmp	r0, #0
 80182ac:	d03f      	beq.n	801832e <_vfiprintf_r+0x20a>
 80182ae:	4b26      	ldr	r3, [pc, #152]	@ (8018348 <_vfiprintf_r+0x224>)
 80182b0:	bb1b      	cbnz	r3, 80182fa <_vfiprintf_r+0x1d6>
 80182b2:	9b03      	ldr	r3, [sp, #12]
 80182b4:	3307      	adds	r3, #7
 80182b6:	f023 0307 	bic.w	r3, r3, #7
 80182ba:	3308      	adds	r3, #8
 80182bc:	9303      	str	r3, [sp, #12]
 80182be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182c0:	443b      	add	r3, r7
 80182c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80182c4:	e76a      	b.n	801819c <_vfiprintf_r+0x78>
 80182c6:	fb0c 3202 	mla	r2, ip, r2, r3
 80182ca:	460c      	mov	r4, r1
 80182cc:	2001      	movs	r0, #1
 80182ce:	e7a8      	b.n	8018222 <_vfiprintf_r+0xfe>
 80182d0:	2300      	movs	r3, #0
 80182d2:	3401      	adds	r4, #1
 80182d4:	9305      	str	r3, [sp, #20]
 80182d6:	4619      	mov	r1, r3
 80182d8:	f04f 0c0a 	mov.w	ip, #10
 80182dc:	4620      	mov	r0, r4
 80182de:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182e2:	3a30      	subs	r2, #48	@ 0x30
 80182e4:	2a09      	cmp	r2, #9
 80182e6:	d903      	bls.n	80182f0 <_vfiprintf_r+0x1cc>
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d0c6      	beq.n	801827a <_vfiprintf_r+0x156>
 80182ec:	9105      	str	r1, [sp, #20]
 80182ee:	e7c4      	b.n	801827a <_vfiprintf_r+0x156>
 80182f0:	fb0c 2101 	mla	r1, ip, r1, r2
 80182f4:	4604      	mov	r4, r0
 80182f6:	2301      	movs	r3, #1
 80182f8:	e7f0      	b.n	80182dc <_vfiprintf_r+0x1b8>
 80182fa:	ab03      	add	r3, sp, #12
 80182fc:	9300      	str	r3, [sp, #0]
 80182fe:	462a      	mov	r2, r5
 8018300:	4b12      	ldr	r3, [pc, #72]	@ (801834c <_vfiprintf_r+0x228>)
 8018302:	a904      	add	r1, sp, #16
 8018304:	4630      	mov	r0, r6
 8018306:	f3af 8000 	nop.w
 801830a:	4607      	mov	r7, r0
 801830c:	1c78      	adds	r0, r7, #1
 801830e:	d1d6      	bne.n	80182be <_vfiprintf_r+0x19a>
 8018310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8018312:	07d9      	lsls	r1, r3, #31
 8018314:	d405      	bmi.n	8018322 <_vfiprintf_r+0x1fe>
 8018316:	89ab      	ldrh	r3, [r5, #12]
 8018318:	059a      	lsls	r2, r3, #22
 801831a:	d402      	bmi.n	8018322 <_vfiprintf_r+0x1fe>
 801831c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801831e:	f7ff fceb 	bl	8017cf8 <__retarget_lock_release_recursive>
 8018322:	89ab      	ldrh	r3, [r5, #12]
 8018324:	065b      	lsls	r3, r3, #25
 8018326:	f53f af1f 	bmi.w	8018168 <_vfiprintf_r+0x44>
 801832a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801832c:	e71e      	b.n	801816c <_vfiprintf_r+0x48>
 801832e:	ab03      	add	r3, sp, #12
 8018330:	9300      	str	r3, [sp, #0]
 8018332:	462a      	mov	r2, r5
 8018334:	4b05      	ldr	r3, [pc, #20]	@ (801834c <_vfiprintf_r+0x228>)
 8018336:	a904      	add	r1, sp, #16
 8018338:	4630      	mov	r0, r6
 801833a:	f000 f879 	bl	8018430 <_printf_i>
 801833e:	e7e4      	b.n	801830a <_vfiprintf_r+0x1e6>
 8018340:	0801991c 	.word	0x0801991c
 8018344:	08019926 	.word	0x08019926
 8018348:	00000000 	.word	0x00000000
 801834c:	080180ff 	.word	0x080180ff
 8018350:	08019922 	.word	0x08019922

08018354 <_printf_common>:
 8018354:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018358:	4616      	mov	r6, r2
 801835a:	4698      	mov	r8, r3
 801835c:	688a      	ldr	r2, [r1, #8]
 801835e:	690b      	ldr	r3, [r1, #16]
 8018360:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8018364:	4293      	cmp	r3, r2
 8018366:	bfb8      	it	lt
 8018368:	4613      	movlt	r3, r2
 801836a:	6033      	str	r3, [r6, #0]
 801836c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8018370:	4607      	mov	r7, r0
 8018372:	460c      	mov	r4, r1
 8018374:	b10a      	cbz	r2, 801837a <_printf_common+0x26>
 8018376:	3301      	adds	r3, #1
 8018378:	6033      	str	r3, [r6, #0]
 801837a:	6823      	ldr	r3, [r4, #0]
 801837c:	0699      	lsls	r1, r3, #26
 801837e:	bf42      	ittt	mi
 8018380:	6833      	ldrmi	r3, [r6, #0]
 8018382:	3302      	addmi	r3, #2
 8018384:	6033      	strmi	r3, [r6, #0]
 8018386:	6825      	ldr	r5, [r4, #0]
 8018388:	f015 0506 	ands.w	r5, r5, #6
 801838c:	d106      	bne.n	801839c <_printf_common+0x48>
 801838e:	f104 0a19 	add.w	sl, r4, #25
 8018392:	68e3      	ldr	r3, [r4, #12]
 8018394:	6832      	ldr	r2, [r6, #0]
 8018396:	1a9b      	subs	r3, r3, r2
 8018398:	42ab      	cmp	r3, r5
 801839a:	dc26      	bgt.n	80183ea <_printf_common+0x96>
 801839c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80183a0:	6822      	ldr	r2, [r4, #0]
 80183a2:	3b00      	subs	r3, #0
 80183a4:	bf18      	it	ne
 80183a6:	2301      	movne	r3, #1
 80183a8:	0692      	lsls	r2, r2, #26
 80183aa:	d42b      	bmi.n	8018404 <_printf_common+0xb0>
 80183ac:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80183b0:	4641      	mov	r1, r8
 80183b2:	4638      	mov	r0, r7
 80183b4:	47c8      	blx	r9
 80183b6:	3001      	adds	r0, #1
 80183b8:	d01e      	beq.n	80183f8 <_printf_common+0xa4>
 80183ba:	6823      	ldr	r3, [r4, #0]
 80183bc:	6922      	ldr	r2, [r4, #16]
 80183be:	f003 0306 	and.w	r3, r3, #6
 80183c2:	2b04      	cmp	r3, #4
 80183c4:	bf02      	ittt	eq
 80183c6:	68e5      	ldreq	r5, [r4, #12]
 80183c8:	6833      	ldreq	r3, [r6, #0]
 80183ca:	1aed      	subeq	r5, r5, r3
 80183cc:	68a3      	ldr	r3, [r4, #8]
 80183ce:	bf0c      	ite	eq
 80183d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80183d4:	2500      	movne	r5, #0
 80183d6:	4293      	cmp	r3, r2
 80183d8:	bfc4      	itt	gt
 80183da:	1a9b      	subgt	r3, r3, r2
 80183dc:	18ed      	addgt	r5, r5, r3
 80183de:	2600      	movs	r6, #0
 80183e0:	341a      	adds	r4, #26
 80183e2:	42b5      	cmp	r5, r6
 80183e4:	d11a      	bne.n	801841c <_printf_common+0xc8>
 80183e6:	2000      	movs	r0, #0
 80183e8:	e008      	b.n	80183fc <_printf_common+0xa8>
 80183ea:	2301      	movs	r3, #1
 80183ec:	4652      	mov	r2, sl
 80183ee:	4641      	mov	r1, r8
 80183f0:	4638      	mov	r0, r7
 80183f2:	47c8      	blx	r9
 80183f4:	3001      	adds	r0, #1
 80183f6:	d103      	bne.n	8018400 <_printf_common+0xac>
 80183f8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80183fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018400:	3501      	adds	r5, #1
 8018402:	e7c6      	b.n	8018392 <_printf_common+0x3e>
 8018404:	18e1      	adds	r1, r4, r3
 8018406:	1c5a      	adds	r2, r3, #1
 8018408:	2030      	movs	r0, #48	@ 0x30
 801840a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801840e:	4422      	add	r2, r4
 8018410:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8018414:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8018418:	3302      	adds	r3, #2
 801841a:	e7c7      	b.n	80183ac <_printf_common+0x58>
 801841c:	2301      	movs	r3, #1
 801841e:	4622      	mov	r2, r4
 8018420:	4641      	mov	r1, r8
 8018422:	4638      	mov	r0, r7
 8018424:	47c8      	blx	r9
 8018426:	3001      	adds	r0, #1
 8018428:	d0e6      	beq.n	80183f8 <_printf_common+0xa4>
 801842a:	3601      	adds	r6, #1
 801842c:	e7d9      	b.n	80183e2 <_printf_common+0x8e>
	...

08018430 <_printf_i>:
 8018430:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018434:	7e0f      	ldrb	r7, [r1, #24]
 8018436:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8018438:	2f78      	cmp	r7, #120	@ 0x78
 801843a:	4691      	mov	r9, r2
 801843c:	4680      	mov	r8, r0
 801843e:	460c      	mov	r4, r1
 8018440:	469a      	mov	sl, r3
 8018442:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8018446:	d807      	bhi.n	8018458 <_printf_i+0x28>
 8018448:	2f62      	cmp	r7, #98	@ 0x62
 801844a:	d80a      	bhi.n	8018462 <_printf_i+0x32>
 801844c:	2f00      	cmp	r7, #0
 801844e:	f000 80d2 	beq.w	80185f6 <_printf_i+0x1c6>
 8018452:	2f58      	cmp	r7, #88	@ 0x58
 8018454:	f000 80b9 	beq.w	80185ca <_printf_i+0x19a>
 8018458:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801845c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8018460:	e03a      	b.n	80184d8 <_printf_i+0xa8>
 8018462:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8018466:	2b15      	cmp	r3, #21
 8018468:	d8f6      	bhi.n	8018458 <_printf_i+0x28>
 801846a:	a101      	add	r1, pc, #4	@ (adr r1, 8018470 <_printf_i+0x40>)
 801846c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8018470:	080184c9 	.word	0x080184c9
 8018474:	080184dd 	.word	0x080184dd
 8018478:	08018459 	.word	0x08018459
 801847c:	08018459 	.word	0x08018459
 8018480:	08018459 	.word	0x08018459
 8018484:	08018459 	.word	0x08018459
 8018488:	080184dd 	.word	0x080184dd
 801848c:	08018459 	.word	0x08018459
 8018490:	08018459 	.word	0x08018459
 8018494:	08018459 	.word	0x08018459
 8018498:	08018459 	.word	0x08018459
 801849c:	080185dd 	.word	0x080185dd
 80184a0:	08018507 	.word	0x08018507
 80184a4:	08018597 	.word	0x08018597
 80184a8:	08018459 	.word	0x08018459
 80184ac:	08018459 	.word	0x08018459
 80184b0:	080185ff 	.word	0x080185ff
 80184b4:	08018459 	.word	0x08018459
 80184b8:	08018507 	.word	0x08018507
 80184bc:	08018459 	.word	0x08018459
 80184c0:	08018459 	.word	0x08018459
 80184c4:	0801859f 	.word	0x0801859f
 80184c8:	6833      	ldr	r3, [r6, #0]
 80184ca:	1d1a      	adds	r2, r3, #4
 80184cc:	681b      	ldr	r3, [r3, #0]
 80184ce:	6032      	str	r2, [r6, #0]
 80184d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80184d4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80184d8:	2301      	movs	r3, #1
 80184da:	e09d      	b.n	8018618 <_printf_i+0x1e8>
 80184dc:	6833      	ldr	r3, [r6, #0]
 80184de:	6820      	ldr	r0, [r4, #0]
 80184e0:	1d19      	adds	r1, r3, #4
 80184e2:	6031      	str	r1, [r6, #0]
 80184e4:	0606      	lsls	r6, r0, #24
 80184e6:	d501      	bpl.n	80184ec <_printf_i+0xbc>
 80184e8:	681d      	ldr	r5, [r3, #0]
 80184ea:	e003      	b.n	80184f4 <_printf_i+0xc4>
 80184ec:	0645      	lsls	r5, r0, #25
 80184ee:	d5fb      	bpl.n	80184e8 <_printf_i+0xb8>
 80184f0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80184f4:	2d00      	cmp	r5, #0
 80184f6:	da03      	bge.n	8018500 <_printf_i+0xd0>
 80184f8:	232d      	movs	r3, #45	@ 0x2d
 80184fa:	426d      	negs	r5, r5
 80184fc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018500:	4859      	ldr	r0, [pc, #356]	@ (8018668 <_printf_i+0x238>)
 8018502:	230a      	movs	r3, #10
 8018504:	e011      	b.n	801852a <_printf_i+0xfa>
 8018506:	6821      	ldr	r1, [r4, #0]
 8018508:	6833      	ldr	r3, [r6, #0]
 801850a:	0608      	lsls	r0, r1, #24
 801850c:	f853 5b04 	ldr.w	r5, [r3], #4
 8018510:	d402      	bmi.n	8018518 <_printf_i+0xe8>
 8018512:	0649      	lsls	r1, r1, #25
 8018514:	bf48      	it	mi
 8018516:	b2ad      	uxthmi	r5, r5
 8018518:	2f6f      	cmp	r7, #111	@ 0x6f
 801851a:	4853      	ldr	r0, [pc, #332]	@ (8018668 <_printf_i+0x238>)
 801851c:	6033      	str	r3, [r6, #0]
 801851e:	bf14      	ite	ne
 8018520:	230a      	movne	r3, #10
 8018522:	2308      	moveq	r3, #8
 8018524:	2100      	movs	r1, #0
 8018526:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801852a:	6866      	ldr	r6, [r4, #4]
 801852c:	60a6      	str	r6, [r4, #8]
 801852e:	2e00      	cmp	r6, #0
 8018530:	bfa2      	ittt	ge
 8018532:	6821      	ldrge	r1, [r4, #0]
 8018534:	f021 0104 	bicge.w	r1, r1, #4
 8018538:	6021      	strge	r1, [r4, #0]
 801853a:	b90d      	cbnz	r5, 8018540 <_printf_i+0x110>
 801853c:	2e00      	cmp	r6, #0
 801853e:	d04b      	beq.n	80185d8 <_printf_i+0x1a8>
 8018540:	4616      	mov	r6, r2
 8018542:	fbb5 f1f3 	udiv	r1, r5, r3
 8018546:	fb03 5711 	mls	r7, r3, r1, r5
 801854a:	5dc7      	ldrb	r7, [r0, r7]
 801854c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018550:	462f      	mov	r7, r5
 8018552:	42bb      	cmp	r3, r7
 8018554:	460d      	mov	r5, r1
 8018556:	d9f4      	bls.n	8018542 <_printf_i+0x112>
 8018558:	2b08      	cmp	r3, #8
 801855a:	d10b      	bne.n	8018574 <_printf_i+0x144>
 801855c:	6823      	ldr	r3, [r4, #0]
 801855e:	07df      	lsls	r7, r3, #31
 8018560:	d508      	bpl.n	8018574 <_printf_i+0x144>
 8018562:	6923      	ldr	r3, [r4, #16]
 8018564:	6861      	ldr	r1, [r4, #4]
 8018566:	4299      	cmp	r1, r3
 8018568:	bfde      	ittt	le
 801856a:	2330      	movle	r3, #48	@ 0x30
 801856c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8018570:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8018574:	1b92      	subs	r2, r2, r6
 8018576:	6122      	str	r2, [r4, #16]
 8018578:	f8cd a000 	str.w	sl, [sp]
 801857c:	464b      	mov	r3, r9
 801857e:	aa03      	add	r2, sp, #12
 8018580:	4621      	mov	r1, r4
 8018582:	4640      	mov	r0, r8
 8018584:	f7ff fee6 	bl	8018354 <_printf_common>
 8018588:	3001      	adds	r0, #1
 801858a:	d14a      	bne.n	8018622 <_printf_i+0x1f2>
 801858c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018590:	b004      	add	sp, #16
 8018592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018596:	6823      	ldr	r3, [r4, #0]
 8018598:	f043 0320 	orr.w	r3, r3, #32
 801859c:	6023      	str	r3, [r4, #0]
 801859e:	4833      	ldr	r0, [pc, #204]	@ (801866c <_printf_i+0x23c>)
 80185a0:	2778      	movs	r7, #120	@ 0x78
 80185a2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80185a6:	6823      	ldr	r3, [r4, #0]
 80185a8:	6831      	ldr	r1, [r6, #0]
 80185aa:	061f      	lsls	r7, r3, #24
 80185ac:	f851 5b04 	ldr.w	r5, [r1], #4
 80185b0:	d402      	bmi.n	80185b8 <_printf_i+0x188>
 80185b2:	065f      	lsls	r7, r3, #25
 80185b4:	bf48      	it	mi
 80185b6:	b2ad      	uxthmi	r5, r5
 80185b8:	6031      	str	r1, [r6, #0]
 80185ba:	07d9      	lsls	r1, r3, #31
 80185bc:	bf44      	itt	mi
 80185be:	f043 0320 	orrmi.w	r3, r3, #32
 80185c2:	6023      	strmi	r3, [r4, #0]
 80185c4:	b11d      	cbz	r5, 80185ce <_printf_i+0x19e>
 80185c6:	2310      	movs	r3, #16
 80185c8:	e7ac      	b.n	8018524 <_printf_i+0xf4>
 80185ca:	4827      	ldr	r0, [pc, #156]	@ (8018668 <_printf_i+0x238>)
 80185cc:	e7e9      	b.n	80185a2 <_printf_i+0x172>
 80185ce:	6823      	ldr	r3, [r4, #0]
 80185d0:	f023 0320 	bic.w	r3, r3, #32
 80185d4:	6023      	str	r3, [r4, #0]
 80185d6:	e7f6      	b.n	80185c6 <_printf_i+0x196>
 80185d8:	4616      	mov	r6, r2
 80185da:	e7bd      	b.n	8018558 <_printf_i+0x128>
 80185dc:	6833      	ldr	r3, [r6, #0]
 80185de:	6825      	ldr	r5, [r4, #0]
 80185e0:	6961      	ldr	r1, [r4, #20]
 80185e2:	1d18      	adds	r0, r3, #4
 80185e4:	6030      	str	r0, [r6, #0]
 80185e6:	062e      	lsls	r6, r5, #24
 80185e8:	681b      	ldr	r3, [r3, #0]
 80185ea:	d501      	bpl.n	80185f0 <_printf_i+0x1c0>
 80185ec:	6019      	str	r1, [r3, #0]
 80185ee:	e002      	b.n	80185f6 <_printf_i+0x1c6>
 80185f0:	0668      	lsls	r0, r5, #25
 80185f2:	d5fb      	bpl.n	80185ec <_printf_i+0x1bc>
 80185f4:	8019      	strh	r1, [r3, #0]
 80185f6:	2300      	movs	r3, #0
 80185f8:	6123      	str	r3, [r4, #16]
 80185fa:	4616      	mov	r6, r2
 80185fc:	e7bc      	b.n	8018578 <_printf_i+0x148>
 80185fe:	6833      	ldr	r3, [r6, #0]
 8018600:	1d1a      	adds	r2, r3, #4
 8018602:	6032      	str	r2, [r6, #0]
 8018604:	681e      	ldr	r6, [r3, #0]
 8018606:	6862      	ldr	r2, [r4, #4]
 8018608:	2100      	movs	r1, #0
 801860a:	4630      	mov	r0, r6
 801860c:	f7e7 fe20 	bl	8000250 <memchr>
 8018610:	b108      	cbz	r0, 8018616 <_printf_i+0x1e6>
 8018612:	1b80      	subs	r0, r0, r6
 8018614:	6060      	str	r0, [r4, #4]
 8018616:	6863      	ldr	r3, [r4, #4]
 8018618:	6123      	str	r3, [r4, #16]
 801861a:	2300      	movs	r3, #0
 801861c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8018620:	e7aa      	b.n	8018578 <_printf_i+0x148>
 8018622:	6923      	ldr	r3, [r4, #16]
 8018624:	4632      	mov	r2, r6
 8018626:	4649      	mov	r1, r9
 8018628:	4640      	mov	r0, r8
 801862a:	47d0      	blx	sl
 801862c:	3001      	adds	r0, #1
 801862e:	d0ad      	beq.n	801858c <_printf_i+0x15c>
 8018630:	6823      	ldr	r3, [r4, #0]
 8018632:	079b      	lsls	r3, r3, #30
 8018634:	d413      	bmi.n	801865e <_printf_i+0x22e>
 8018636:	68e0      	ldr	r0, [r4, #12]
 8018638:	9b03      	ldr	r3, [sp, #12]
 801863a:	4298      	cmp	r0, r3
 801863c:	bfb8      	it	lt
 801863e:	4618      	movlt	r0, r3
 8018640:	e7a6      	b.n	8018590 <_printf_i+0x160>
 8018642:	2301      	movs	r3, #1
 8018644:	4632      	mov	r2, r6
 8018646:	4649      	mov	r1, r9
 8018648:	4640      	mov	r0, r8
 801864a:	47d0      	blx	sl
 801864c:	3001      	adds	r0, #1
 801864e:	d09d      	beq.n	801858c <_printf_i+0x15c>
 8018650:	3501      	adds	r5, #1
 8018652:	68e3      	ldr	r3, [r4, #12]
 8018654:	9903      	ldr	r1, [sp, #12]
 8018656:	1a5b      	subs	r3, r3, r1
 8018658:	42ab      	cmp	r3, r5
 801865a:	dcf2      	bgt.n	8018642 <_printf_i+0x212>
 801865c:	e7eb      	b.n	8018636 <_printf_i+0x206>
 801865e:	2500      	movs	r5, #0
 8018660:	f104 0619 	add.w	r6, r4, #25
 8018664:	e7f5      	b.n	8018652 <_printf_i+0x222>
 8018666:	bf00      	nop
 8018668:	0801992d 	.word	0x0801992d
 801866c:	0801993e 	.word	0x0801993e

08018670 <__sflush_r>:
 8018670:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8018674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018678:	0716      	lsls	r6, r2, #28
 801867a:	4605      	mov	r5, r0
 801867c:	460c      	mov	r4, r1
 801867e:	d454      	bmi.n	801872a <__sflush_r+0xba>
 8018680:	684b      	ldr	r3, [r1, #4]
 8018682:	2b00      	cmp	r3, #0
 8018684:	dc02      	bgt.n	801868c <__sflush_r+0x1c>
 8018686:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8018688:	2b00      	cmp	r3, #0
 801868a:	dd48      	ble.n	801871e <__sflush_r+0xae>
 801868c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801868e:	2e00      	cmp	r6, #0
 8018690:	d045      	beq.n	801871e <__sflush_r+0xae>
 8018692:	2300      	movs	r3, #0
 8018694:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8018698:	682f      	ldr	r7, [r5, #0]
 801869a:	6a21      	ldr	r1, [r4, #32]
 801869c:	602b      	str	r3, [r5, #0]
 801869e:	d030      	beq.n	8018702 <__sflush_r+0x92>
 80186a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80186a2:	89a3      	ldrh	r3, [r4, #12]
 80186a4:	0759      	lsls	r1, r3, #29
 80186a6:	d505      	bpl.n	80186b4 <__sflush_r+0x44>
 80186a8:	6863      	ldr	r3, [r4, #4]
 80186aa:	1ad2      	subs	r2, r2, r3
 80186ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80186ae:	b10b      	cbz	r3, 80186b4 <__sflush_r+0x44>
 80186b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80186b2:	1ad2      	subs	r2, r2, r3
 80186b4:	2300      	movs	r3, #0
 80186b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80186b8:	6a21      	ldr	r1, [r4, #32]
 80186ba:	4628      	mov	r0, r5
 80186bc:	47b0      	blx	r6
 80186be:	1c43      	adds	r3, r0, #1
 80186c0:	89a3      	ldrh	r3, [r4, #12]
 80186c2:	d106      	bne.n	80186d2 <__sflush_r+0x62>
 80186c4:	6829      	ldr	r1, [r5, #0]
 80186c6:	291d      	cmp	r1, #29
 80186c8:	d82b      	bhi.n	8018722 <__sflush_r+0xb2>
 80186ca:	4a2a      	ldr	r2, [pc, #168]	@ (8018774 <__sflush_r+0x104>)
 80186cc:	410a      	asrs	r2, r1
 80186ce:	07d6      	lsls	r6, r2, #31
 80186d0:	d427      	bmi.n	8018722 <__sflush_r+0xb2>
 80186d2:	2200      	movs	r2, #0
 80186d4:	6062      	str	r2, [r4, #4]
 80186d6:	04d9      	lsls	r1, r3, #19
 80186d8:	6922      	ldr	r2, [r4, #16]
 80186da:	6022      	str	r2, [r4, #0]
 80186dc:	d504      	bpl.n	80186e8 <__sflush_r+0x78>
 80186de:	1c42      	adds	r2, r0, #1
 80186e0:	d101      	bne.n	80186e6 <__sflush_r+0x76>
 80186e2:	682b      	ldr	r3, [r5, #0]
 80186e4:	b903      	cbnz	r3, 80186e8 <__sflush_r+0x78>
 80186e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80186e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80186ea:	602f      	str	r7, [r5, #0]
 80186ec:	b1b9      	cbz	r1, 801871e <__sflush_r+0xae>
 80186ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80186f2:	4299      	cmp	r1, r3
 80186f4:	d002      	beq.n	80186fc <__sflush_r+0x8c>
 80186f6:	4628      	mov	r0, r5
 80186f8:	f7ff fb40 	bl	8017d7c <_free_r>
 80186fc:	2300      	movs	r3, #0
 80186fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8018700:	e00d      	b.n	801871e <__sflush_r+0xae>
 8018702:	2301      	movs	r3, #1
 8018704:	4628      	mov	r0, r5
 8018706:	47b0      	blx	r6
 8018708:	4602      	mov	r2, r0
 801870a:	1c50      	adds	r0, r2, #1
 801870c:	d1c9      	bne.n	80186a2 <__sflush_r+0x32>
 801870e:	682b      	ldr	r3, [r5, #0]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d0c6      	beq.n	80186a2 <__sflush_r+0x32>
 8018714:	2b1d      	cmp	r3, #29
 8018716:	d001      	beq.n	801871c <__sflush_r+0xac>
 8018718:	2b16      	cmp	r3, #22
 801871a:	d11e      	bne.n	801875a <__sflush_r+0xea>
 801871c:	602f      	str	r7, [r5, #0]
 801871e:	2000      	movs	r0, #0
 8018720:	e022      	b.n	8018768 <__sflush_r+0xf8>
 8018722:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018726:	b21b      	sxth	r3, r3
 8018728:	e01b      	b.n	8018762 <__sflush_r+0xf2>
 801872a:	690f      	ldr	r7, [r1, #16]
 801872c:	2f00      	cmp	r7, #0
 801872e:	d0f6      	beq.n	801871e <__sflush_r+0xae>
 8018730:	0793      	lsls	r3, r2, #30
 8018732:	680e      	ldr	r6, [r1, #0]
 8018734:	bf08      	it	eq
 8018736:	694b      	ldreq	r3, [r1, #20]
 8018738:	600f      	str	r7, [r1, #0]
 801873a:	bf18      	it	ne
 801873c:	2300      	movne	r3, #0
 801873e:	eba6 0807 	sub.w	r8, r6, r7
 8018742:	608b      	str	r3, [r1, #8]
 8018744:	f1b8 0f00 	cmp.w	r8, #0
 8018748:	dde9      	ble.n	801871e <__sflush_r+0xae>
 801874a:	6a21      	ldr	r1, [r4, #32]
 801874c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801874e:	4643      	mov	r3, r8
 8018750:	463a      	mov	r2, r7
 8018752:	4628      	mov	r0, r5
 8018754:	47b0      	blx	r6
 8018756:	2800      	cmp	r0, #0
 8018758:	dc08      	bgt.n	801876c <__sflush_r+0xfc>
 801875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801875e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018762:	81a3      	strh	r3, [r4, #12]
 8018764:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801876c:	4407      	add	r7, r0
 801876e:	eba8 0800 	sub.w	r8, r8, r0
 8018772:	e7e7      	b.n	8018744 <__sflush_r+0xd4>
 8018774:	dfbffffe 	.word	0xdfbffffe

08018778 <_fflush_r>:
 8018778:	b538      	push	{r3, r4, r5, lr}
 801877a:	690b      	ldr	r3, [r1, #16]
 801877c:	4605      	mov	r5, r0
 801877e:	460c      	mov	r4, r1
 8018780:	b913      	cbnz	r3, 8018788 <_fflush_r+0x10>
 8018782:	2500      	movs	r5, #0
 8018784:	4628      	mov	r0, r5
 8018786:	bd38      	pop	{r3, r4, r5, pc}
 8018788:	b118      	cbz	r0, 8018792 <_fflush_r+0x1a>
 801878a:	6a03      	ldr	r3, [r0, #32]
 801878c:	b90b      	cbnz	r3, 8018792 <_fflush_r+0x1a>
 801878e:	f7ff f8d1 	bl	8017934 <__sinit>
 8018792:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018796:	2b00      	cmp	r3, #0
 8018798:	d0f3      	beq.n	8018782 <_fflush_r+0xa>
 801879a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801879c:	07d0      	lsls	r0, r2, #31
 801879e:	d404      	bmi.n	80187aa <_fflush_r+0x32>
 80187a0:	0599      	lsls	r1, r3, #22
 80187a2:	d402      	bmi.n	80187aa <_fflush_r+0x32>
 80187a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187a6:	f7ff faa6 	bl	8017cf6 <__retarget_lock_acquire_recursive>
 80187aa:	4628      	mov	r0, r5
 80187ac:	4621      	mov	r1, r4
 80187ae:	f7ff ff5f 	bl	8018670 <__sflush_r>
 80187b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80187b4:	07da      	lsls	r2, r3, #31
 80187b6:	4605      	mov	r5, r0
 80187b8:	d4e4      	bmi.n	8018784 <_fflush_r+0xc>
 80187ba:	89a3      	ldrh	r3, [r4, #12]
 80187bc:	059b      	lsls	r3, r3, #22
 80187be:	d4e1      	bmi.n	8018784 <_fflush_r+0xc>
 80187c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80187c2:	f7ff fa99 	bl	8017cf8 <__retarget_lock_release_recursive>
 80187c6:	e7dd      	b.n	8018784 <_fflush_r+0xc>

080187c8 <fiprintf>:
 80187c8:	b40e      	push	{r1, r2, r3}
 80187ca:	b503      	push	{r0, r1, lr}
 80187cc:	4601      	mov	r1, r0
 80187ce:	ab03      	add	r3, sp, #12
 80187d0:	4805      	ldr	r0, [pc, #20]	@ (80187e8 <fiprintf+0x20>)
 80187d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80187d6:	6800      	ldr	r0, [r0, #0]
 80187d8:	9301      	str	r3, [sp, #4]
 80187da:	f7ff fca3 	bl	8018124 <_vfiprintf_r>
 80187de:	b002      	add	sp, #8
 80187e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80187e4:	b003      	add	sp, #12
 80187e6:	4770      	bx	lr
 80187e8:	200001e4 	.word	0x200001e4

080187ec <__swbuf_r>:
 80187ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80187ee:	460e      	mov	r6, r1
 80187f0:	4614      	mov	r4, r2
 80187f2:	4605      	mov	r5, r0
 80187f4:	b118      	cbz	r0, 80187fe <__swbuf_r+0x12>
 80187f6:	6a03      	ldr	r3, [r0, #32]
 80187f8:	b90b      	cbnz	r3, 80187fe <__swbuf_r+0x12>
 80187fa:	f7ff f89b 	bl	8017934 <__sinit>
 80187fe:	69a3      	ldr	r3, [r4, #24]
 8018800:	60a3      	str	r3, [r4, #8]
 8018802:	89a3      	ldrh	r3, [r4, #12]
 8018804:	071a      	lsls	r2, r3, #28
 8018806:	d501      	bpl.n	801880c <__swbuf_r+0x20>
 8018808:	6923      	ldr	r3, [r4, #16]
 801880a:	b943      	cbnz	r3, 801881e <__swbuf_r+0x32>
 801880c:	4621      	mov	r1, r4
 801880e:	4628      	mov	r0, r5
 8018810:	f000 f82a 	bl	8018868 <__swsetup_r>
 8018814:	b118      	cbz	r0, 801881e <__swbuf_r+0x32>
 8018816:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801881a:	4638      	mov	r0, r7
 801881c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801881e:	6823      	ldr	r3, [r4, #0]
 8018820:	6922      	ldr	r2, [r4, #16]
 8018822:	1a98      	subs	r0, r3, r2
 8018824:	6963      	ldr	r3, [r4, #20]
 8018826:	b2f6      	uxtb	r6, r6
 8018828:	4283      	cmp	r3, r0
 801882a:	4637      	mov	r7, r6
 801882c:	dc05      	bgt.n	801883a <__swbuf_r+0x4e>
 801882e:	4621      	mov	r1, r4
 8018830:	4628      	mov	r0, r5
 8018832:	f7ff ffa1 	bl	8018778 <_fflush_r>
 8018836:	2800      	cmp	r0, #0
 8018838:	d1ed      	bne.n	8018816 <__swbuf_r+0x2a>
 801883a:	68a3      	ldr	r3, [r4, #8]
 801883c:	3b01      	subs	r3, #1
 801883e:	60a3      	str	r3, [r4, #8]
 8018840:	6823      	ldr	r3, [r4, #0]
 8018842:	1c5a      	adds	r2, r3, #1
 8018844:	6022      	str	r2, [r4, #0]
 8018846:	701e      	strb	r6, [r3, #0]
 8018848:	6962      	ldr	r2, [r4, #20]
 801884a:	1c43      	adds	r3, r0, #1
 801884c:	429a      	cmp	r2, r3
 801884e:	d004      	beq.n	801885a <__swbuf_r+0x6e>
 8018850:	89a3      	ldrh	r3, [r4, #12]
 8018852:	07db      	lsls	r3, r3, #31
 8018854:	d5e1      	bpl.n	801881a <__swbuf_r+0x2e>
 8018856:	2e0a      	cmp	r6, #10
 8018858:	d1df      	bne.n	801881a <__swbuf_r+0x2e>
 801885a:	4621      	mov	r1, r4
 801885c:	4628      	mov	r0, r5
 801885e:	f7ff ff8b 	bl	8018778 <_fflush_r>
 8018862:	2800      	cmp	r0, #0
 8018864:	d0d9      	beq.n	801881a <__swbuf_r+0x2e>
 8018866:	e7d6      	b.n	8018816 <__swbuf_r+0x2a>

08018868 <__swsetup_r>:
 8018868:	b538      	push	{r3, r4, r5, lr}
 801886a:	4b29      	ldr	r3, [pc, #164]	@ (8018910 <__swsetup_r+0xa8>)
 801886c:	4605      	mov	r5, r0
 801886e:	6818      	ldr	r0, [r3, #0]
 8018870:	460c      	mov	r4, r1
 8018872:	b118      	cbz	r0, 801887c <__swsetup_r+0x14>
 8018874:	6a03      	ldr	r3, [r0, #32]
 8018876:	b90b      	cbnz	r3, 801887c <__swsetup_r+0x14>
 8018878:	f7ff f85c 	bl	8017934 <__sinit>
 801887c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018880:	0719      	lsls	r1, r3, #28
 8018882:	d422      	bmi.n	80188ca <__swsetup_r+0x62>
 8018884:	06da      	lsls	r2, r3, #27
 8018886:	d407      	bmi.n	8018898 <__swsetup_r+0x30>
 8018888:	2209      	movs	r2, #9
 801888a:	602a      	str	r2, [r5, #0]
 801888c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8018890:	81a3      	strh	r3, [r4, #12]
 8018892:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8018896:	e033      	b.n	8018900 <__swsetup_r+0x98>
 8018898:	0758      	lsls	r0, r3, #29
 801889a:	d512      	bpl.n	80188c2 <__swsetup_r+0x5a>
 801889c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801889e:	b141      	cbz	r1, 80188b2 <__swsetup_r+0x4a>
 80188a0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80188a4:	4299      	cmp	r1, r3
 80188a6:	d002      	beq.n	80188ae <__swsetup_r+0x46>
 80188a8:	4628      	mov	r0, r5
 80188aa:	f7ff fa67 	bl	8017d7c <_free_r>
 80188ae:	2300      	movs	r3, #0
 80188b0:	6363      	str	r3, [r4, #52]	@ 0x34
 80188b2:	89a3      	ldrh	r3, [r4, #12]
 80188b4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80188b8:	81a3      	strh	r3, [r4, #12]
 80188ba:	2300      	movs	r3, #0
 80188bc:	6063      	str	r3, [r4, #4]
 80188be:	6923      	ldr	r3, [r4, #16]
 80188c0:	6023      	str	r3, [r4, #0]
 80188c2:	89a3      	ldrh	r3, [r4, #12]
 80188c4:	f043 0308 	orr.w	r3, r3, #8
 80188c8:	81a3      	strh	r3, [r4, #12]
 80188ca:	6923      	ldr	r3, [r4, #16]
 80188cc:	b94b      	cbnz	r3, 80188e2 <__swsetup_r+0x7a>
 80188ce:	89a3      	ldrh	r3, [r4, #12]
 80188d0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80188d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80188d8:	d003      	beq.n	80188e2 <__swsetup_r+0x7a>
 80188da:	4621      	mov	r1, r4
 80188dc:	4628      	mov	r0, r5
 80188de:	f000 f846 	bl	801896e <__smakebuf_r>
 80188e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80188e6:	f013 0201 	ands.w	r2, r3, #1
 80188ea:	d00a      	beq.n	8018902 <__swsetup_r+0x9a>
 80188ec:	2200      	movs	r2, #0
 80188ee:	60a2      	str	r2, [r4, #8]
 80188f0:	6962      	ldr	r2, [r4, #20]
 80188f2:	4252      	negs	r2, r2
 80188f4:	61a2      	str	r2, [r4, #24]
 80188f6:	6922      	ldr	r2, [r4, #16]
 80188f8:	b942      	cbnz	r2, 801890c <__swsetup_r+0xa4>
 80188fa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80188fe:	d1c5      	bne.n	801888c <__swsetup_r+0x24>
 8018900:	bd38      	pop	{r3, r4, r5, pc}
 8018902:	0799      	lsls	r1, r3, #30
 8018904:	bf58      	it	pl
 8018906:	6962      	ldrpl	r2, [r4, #20]
 8018908:	60a2      	str	r2, [r4, #8]
 801890a:	e7f4      	b.n	80188f6 <__swsetup_r+0x8e>
 801890c:	2000      	movs	r0, #0
 801890e:	e7f7      	b.n	8018900 <__swsetup_r+0x98>
 8018910:	200001e4 	.word	0x200001e4

08018914 <abort>:
 8018914:	b508      	push	{r3, lr}
 8018916:	2006      	movs	r0, #6
 8018918:	f000 f88e 	bl	8018a38 <raise>
 801891c:	2001      	movs	r0, #1
 801891e:	f7e9 fd35 	bl	800238c <_exit>

08018922 <__swhatbuf_r>:
 8018922:	b570      	push	{r4, r5, r6, lr}
 8018924:	460c      	mov	r4, r1
 8018926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801892a:	2900      	cmp	r1, #0
 801892c:	b096      	sub	sp, #88	@ 0x58
 801892e:	4615      	mov	r5, r2
 8018930:	461e      	mov	r6, r3
 8018932:	da0d      	bge.n	8018950 <__swhatbuf_r+0x2e>
 8018934:	89a3      	ldrh	r3, [r4, #12]
 8018936:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801893a:	f04f 0100 	mov.w	r1, #0
 801893e:	bf14      	ite	ne
 8018940:	2340      	movne	r3, #64	@ 0x40
 8018942:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8018946:	2000      	movs	r0, #0
 8018948:	6031      	str	r1, [r6, #0]
 801894a:	602b      	str	r3, [r5, #0]
 801894c:	b016      	add	sp, #88	@ 0x58
 801894e:	bd70      	pop	{r4, r5, r6, pc}
 8018950:	466a      	mov	r2, sp
 8018952:	f000 f879 	bl	8018a48 <_fstat_r>
 8018956:	2800      	cmp	r0, #0
 8018958:	dbec      	blt.n	8018934 <__swhatbuf_r+0x12>
 801895a:	9901      	ldr	r1, [sp, #4]
 801895c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8018960:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8018964:	4259      	negs	r1, r3
 8018966:	4159      	adcs	r1, r3
 8018968:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801896c:	e7eb      	b.n	8018946 <__swhatbuf_r+0x24>

0801896e <__smakebuf_r>:
 801896e:	898b      	ldrh	r3, [r1, #12]
 8018970:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018972:	079d      	lsls	r5, r3, #30
 8018974:	4606      	mov	r6, r0
 8018976:	460c      	mov	r4, r1
 8018978:	d507      	bpl.n	801898a <__smakebuf_r+0x1c>
 801897a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801897e:	6023      	str	r3, [r4, #0]
 8018980:	6123      	str	r3, [r4, #16]
 8018982:	2301      	movs	r3, #1
 8018984:	6163      	str	r3, [r4, #20]
 8018986:	b003      	add	sp, #12
 8018988:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801898a:	ab01      	add	r3, sp, #4
 801898c:	466a      	mov	r2, sp
 801898e:	f7ff ffc8 	bl	8018922 <__swhatbuf_r>
 8018992:	9f00      	ldr	r7, [sp, #0]
 8018994:	4605      	mov	r5, r0
 8018996:	4639      	mov	r1, r7
 8018998:	4630      	mov	r0, r6
 801899a:	f7fe fd99 	bl	80174d0 <_malloc_r>
 801899e:	b948      	cbnz	r0, 80189b4 <__smakebuf_r+0x46>
 80189a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189a4:	059a      	lsls	r2, r3, #22
 80189a6:	d4ee      	bmi.n	8018986 <__smakebuf_r+0x18>
 80189a8:	f023 0303 	bic.w	r3, r3, #3
 80189ac:	f043 0302 	orr.w	r3, r3, #2
 80189b0:	81a3      	strh	r3, [r4, #12]
 80189b2:	e7e2      	b.n	801897a <__smakebuf_r+0xc>
 80189b4:	89a3      	ldrh	r3, [r4, #12]
 80189b6:	6020      	str	r0, [r4, #0]
 80189b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80189bc:	81a3      	strh	r3, [r4, #12]
 80189be:	9b01      	ldr	r3, [sp, #4]
 80189c0:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80189c4:	b15b      	cbz	r3, 80189de <__smakebuf_r+0x70>
 80189c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80189ca:	4630      	mov	r0, r6
 80189cc:	f000 f84e 	bl	8018a6c <_isatty_r>
 80189d0:	b128      	cbz	r0, 80189de <__smakebuf_r+0x70>
 80189d2:	89a3      	ldrh	r3, [r4, #12]
 80189d4:	f023 0303 	bic.w	r3, r3, #3
 80189d8:	f043 0301 	orr.w	r3, r3, #1
 80189dc:	81a3      	strh	r3, [r4, #12]
 80189de:	89a3      	ldrh	r3, [r4, #12]
 80189e0:	431d      	orrs	r5, r3
 80189e2:	81a5      	strh	r5, [r4, #12]
 80189e4:	e7cf      	b.n	8018986 <__smakebuf_r+0x18>

080189e6 <_raise_r>:
 80189e6:	291f      	cmp	r1, #31
 80189e8:	b538      	push	{r3, r4, r5, lr}
 80189ea:	4605      	mov	r5, r0
 80189ec:	460c      	mov	r4, r1
 80189ee:	d904      	bls.n	80189fa <_raise_r+0x14>
 80189f0:	2316      	movs	r3, #22
 80189f2:	6003      	str	r3, [r0, #0]
 80189f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80189f8:	bd38      	pop	{r3, r4, r5, pc}
 80189fa:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80189fc:	b112      	cbz	r2, 8018a04 <_raise_r+0x1e>
 80189fe:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018a02:	b94b      	cbnz	r3, 8018a18 <_raise_r+0x32>
 8018a04:	4628      	mov	r0, r5
 8018a06:	f000 f853 	bl	8018ab0 <_getpid_r>
 8018a0a:	4622      	mov	r2, r4
 8018a0c:	4601      	mov	r1, r0
 8018a0e:	4628      	mov	r0, r5
 8018a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018a14:	f000 b83a 	b.w	8018a8c <_kill_r>
 8018a18:	2b01      	cmp	r3, #1
 8018a1a:	d00a      	beq.n	8018a32 <_raise_r+0x4c>
 8018a1c:	1c59      	adds	r1, r3, #1
 8018a1e:	d103      	bne.n	8018a28 <_raise_r+0x42>
 8018a20:	2316      	movs	r3, #22
 8018a22:	6003      	str	r3, [r0, #0]
 8018a24:	2001      	movs	r0, #1
 8018a26:	e7e7      	b.n	80189f8 <_raise_r+0x12>
 8018a28:	2100      	movs	r1, #0
 8018a2a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8018a2e:	4620      	mov	r0, r4
 8018a30:	4798      	blx	r3
 8018a32:	2000      	movs	r0, #0
 8018a34:	e7e0      	b.n	80189f8 <_raise_r+0x12>
	...

08018a38 <raise>:
 8018a38:	4b02      	ldr	r3, [pc, #8]	@ (8018a44 <raise+0xc>)
 8018a3a:	4601      	mov	r1, r0
 8018a3c:	6818      	ldr	r0, [r3, #0]
 8018a3e:	f7ff bfd2 	b.w	80189e6 <_raise_r>
 8018a42:	bf00      	nop
 8018a44:	200001e4 	.word	0x200001e4

08018a48 <_fstat_r>:
 8018a48:	b538      	push	{r3, r4, r5, lr}
 8018a4a:	4d07      	ldr	r5, [pc, #28]	@ (8018a68 <_fstat_r+0x20>)
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	4604      	mov	r4, r0
 8018a50:	4608      	mov	r0, r1
 8018a52:	4611      	mov	r1, r2
 8018a54:	602b      	str	r3, [r5, #0]
 8018a56:	f7e9 fce9 	bl	800242c <_fstat>
 8018a5a:	1c43      	adds	r3, r0, #1
 8018a5c:	d102      	bne.n	8018a64 <_fstat_r+0x1c>
 8018a5e:	682b      	ldr	r3, [r5, #0]
 8018a60:	b103      	cbz	r3, 8018a64 <_fstat_r+0x1c>
 8018a62:	6023      	str	r3, [r4, #0]
 8018a64:	bd38      	pop	{r3, r4, r5, pc}
 8018a66:	bf00      	nop
 8018a68:	2000b498 	.word	0x2000b498

08018a6c <_isatty_r>:
 8018a6c:	b538      	push	{r3, r4, r5, lr}
 8018a6e:	4d06      	ldr	r5, [pc, #24]	@ (8018a88 <_isatty_r+0x1c>)
 8018a70:	2300      	movs	r3, #0
 8018a72:	4604      	mov	r4, r0
 8018a74:	4608      	mov	r0, r1
 8018a76:	602b      	str	r3, [r5, #0]
 8018a78:	f7e9 fce8 	bl	800244c <_isatty>
 8018a7c:	1c43      	adds	r3, r0, #1
 8018a7e:	d102      	bne.n	8018a86 <_isatty_r+0x1a>
 8018a80:	682b      	ldr	r3, [r5, #0]
 8018a82:	b103      	cbz	r3, 8018a86 <_isatty_r+0x1a>
 8018a84:	6023      	str	r3, [r4, #0]
 8018a86:	bd38      	pop	{r3, r4, r5, pc}
 8018a88:	2000b498 	.word	0x2000b498

08018a8c <_kill_r>:
 8018a8c:	b538      	push	{r3, r4, r5, lr}
 8018a8e:	4d07      	ldr	r5, [pc, #28]	@ (8018aac <_kill_r+0x20>)
 8018a90:	2300      	movs	r3, #0
 8018a92:	4604      	mov	r4, r0
 8018a94:	4608      	mov	r0, r1
 8018a96:	4611      	mov	r1, r2
 8018a98:	602b      	str	r3, [r5, #0]
 8018a9a:	f7e9 fc67 	bl	800236c <_kill>
 8018a9e:	1c43      	adds	r3, r0, #1
 8018aa0:	d102      	bne.n	8018aa8 <_kill_r+0x1c>
 8018aa2:	682b      	ldr	r3, [r5, #0]
 8018aa4:	b103      	cbz	r3, 8018aa8 <_kill_r+0x1c>
 8018aa6:	6023      	str	r3, [r4, #0]
 8018aa8:	bd38      	pop	{r3, r4, r5, pc}
 8018aaa:	bf00      	nop
 8018aac:	2000b498 	.word	0x2000b498

08018ab0 <_getpid_r>:
 8018ab0:	f7e9 bc54 	b.w	800235c <_getpid>

08018ab4 <_init>:
 8018ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ab6:	bf00      	nop
 8018ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018aba:	bc08      	pop	{r3}
 8018abc:	469e      	mov	lr, r3
 8018abe:	4770      	bx	lr

08018ac0 <_fini>:
 8018ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018ac2:	bf00      	nop
 8018ac4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ac6:	bc08      	pop	{r3}
 8018ac8:	469e      	mov	lr, r3
 8018aca:	4770      	bx	lr
